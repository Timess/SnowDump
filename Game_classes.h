// Class /Script/Game.AbilityAttributeAgent
// Size: 0x0 (Inherited: 0x0)
struct UAbilityAttributeAgent : UActorComponent {
	struct TArray<struct FPostProcessRule> PostProcessRules; // 0x0(0x0)
	char pad_C0[0x40]; // 0x0(0x0)

	void SetActorVectorParameterValueOnMaterials(struct AActor* Actor, struct FName ParameterName, struct FVector ParameterValue); // Function /Script/Game.AbilityAttributeAgent.SetActorVectorParameterValueOnMaterials // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetActorScalarParameterValueOnMaterials(struct AActor* Actor, struct FName ParameterName, float ParameterValue); // Function /Script/Game.AbilityAttributeAgent.SetActorScalarParameterValueOnMaterials // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool K2_CheckPostProcess(struct FPostProcessRule& PostProcessRule); // Function /Script/Game.AbilityAttributeAgent.K2_CheckPostProcess // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	bool CheckPostProcessFlag(enum class EPostProcessType PostProcessType); // Function /Script/Game.AbilityAttributeAgent.CheckPostProcessFlag // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void AttributeTick(enum class EAttributeAgentType Type, float DeltaTime, struct UAbilityComponentBase* Ability, float CurrentEnergy, float MaxEnergy, __int32 Index); // Function /Script/Game.AbilityAttributeAgent.AttributeTick // (Event|Public|BlueprintEvent) // @ game+0
	void AttributeLeaveFull(enum class EAttributeAgentType Type, struct UAbilityComponentBase* Ability, float CurrentEnergy, float MaxEnergy, __int32 Index); // Function /Script/Game.AbilityAttributeAgent.AttributeLeaveFull // (Event|Public|BlueprintEvent) // @ game+0
	__int32 AttributeLeaveEmpty(enum class EAttributeAgentType Type, struct UAbilityComponentBase* Ability, float CurrentEnergy, float MaxEnergy); // Function /Script/Game.AbilityAttributeAgent.AttributeLeaveEmpty // (Event|Public|BlueprintEvent) // @ game+0
	__int32 AttributeInit(enum class EAttributeAgentType Type, struct UAbilityComponentBase* Ability, float CurrentEnergy, float MaxEnergy); // Function /Script/Game.AbilityAttributeAgent.AttributeInit // (Event|Public|BlueprintEvent) // @ game+0
	void AttributeFull(enum class EAttributeAgentType Type, struct UAbilityComponentBase* Ability, float CurrentEnergy, float MaxEnergy, __int32 Index); // Function /Script/Game.AbilityAttributeAgent.AttributeFull // (Event|Public|BlueprintEvent) // @ game+0
	void AttributeEmpty(enum class EAttributeAgentType Type, struct UAbilityComponentBase* Ability, __int32 Index); // Function /Script/Game.AbilityAttributeAgent.AttributeEmpty // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.GameAbilityBuffer
// Size: 0x0 (Inherited: 0x0)
struct UGameAbilityBuffer : UObject {
	char pad_28[0x10]; // 0x0(0x0)
	__int32 BufferId; // 0x0(0x0)
	__int32 Priority; // 0x0(0x0)
	float AliveTime; // 0x0(0x0)
	__int32 MaxStacks; // 0x0(0x0)
	char bAllowMultistack : 1; // 0x0(0x0)
	char pad_48_1 : 7; // 0x0(0x0)
	char pad_49[0x7]; // 0x0(0x0)
	__int64 ActiveAbilityState; // 0x0(0x0)
	__int64 DisableAbilityState; // 0x0(0x0)
	char bAllowAutoRemoved : 1; // 0x0(0x0)
	char pad_60_1 : 7; // 0x0(0x0)
	char pad_61[0x7]; // 0x0(0x0)
	struct UAbilityComponentBase* AbilityCauser; // 0x0(0x0)
	struct UAbilityComponentBase* AbilityOwner; // 0x0(0x0)
	char bIsAllowTick : 1; // 0x0(0x0)
	char pad_78_1 : 7; // 0x0(0x0)
	char pad_79[0x3]; // 0x0(0x0)
	__int32 nLevel; // 0x0(0x0)
	__int32 SkillOwnerID; // 0x0(0x0)
	__int32 SkillRunTimeID; // 0x0(0x0)
	struct FBoneResult PartResult; // 0x0(0x0)
	struct FBoneResult PartitionResult; // 0x0(0x0)
	struct TWeakObjectPtr<struct UModifier> ModifierOwner; // 0x0(0x0)

	void SetSkillRunTimeID(__int32 InRunTimeID); // Function /Script/Game.GameAbilityBuffer.SetSkillRunTimeID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSkillOwnerID(__int32 InOwnerID); // Function /Script/Game.GameAbilityBuffer.SetSkillOwnerID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetLevel(__int32 InLevel); // Function /Script/Game.GameAbilityBuffer.SetLevel // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveModifierOwner(); // Function /Script/Game.GameAbilityBuffer.RemoveModifierOwner // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnInstigatorDestroyed(); // Function /Script/Game.GameAbilityBuffer.OnInstigatorDestroyed // (Final|Native|Private) // @ game+0
	void K2_ReceiveTick(float DeltaSeconds, struct UGameAbilityComponent* Pawn); // Function /Script/Game.GameAbilityBuffer.K2_ReceiveTick // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ReceiveInitialize(struct TArray<struct FParamInfo>& Info, struct UGameAbilityComponent* lpInstigator); // Function /Script/Game.GameAbilityBuffer.K2_ReceiveInitialize // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ReceiveDeActive(struct UGameAbilityComponent* Pawn); // Function /Script/Game.GameAbilityBuffer.K2_ReceiveDeActive // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ReceiveActive(struct UObject* Instigator); // Function /Script/Game.GameAbilityBuffer.K2_ReceiveActive // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	__int32 K2_GetPriority(); // Function /Script/Game.GameAbilityBuffer.K2_GetPriority // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	__int32 K2_GetMaxStacks(); // Function /Script/Game.GameAbilityBuffer.K2_GetMaxStacks // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	float K2_GetAliveTime(); // Function /Script/Game.GameAbilityBuffer.K2_GetAliveTime // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	bool IsControlByModifier(); // Function /Script/Game.GameAbilityBuffer.IsControlByModifier // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void GetUsedModifierID(struct TArray<__int32>& OutModifierID); // Function /Script/Game.GameAbilityBuffer.GetUsedModifierID // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	__int32 GetSkillRunTimeID(); // Function /Script/Game.GameAbilityBuffer.GetSkillRunTimeID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetSkillOwnerID(); // Function /Script/Game.GameAbilityBuffer.GetSkillOwnerID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector GetOwnerModifierApplyLoc(); // Function /Script/Game.GameAbilityBuffer.GetOwnerModifierApplyLoc // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UModifier* GetModifierOwner(); // Function /Script/Game.GameAbilityBuffer.GetModifierOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetModifierID(); // Function /Script/Game.GameAbilityBuffer.GetModifierID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetLevel(); // Function /Script/Game.GameAbilityBuffer.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct USkillEmitter* GetEmitterOwner(); // Function /Script/Game.GameAbilityBuffer.GetEmitterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetCurrentStack(); // Function /Script/Game.GameAbilityBuffer.GetCurrentStack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetBufferUsedModifierID(struct FString InPath, struct TArray<__int32>& OutModifierID); // Function /Script/Game.GameAbilityBuffer.GetBufferUsedModifierID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	float GetAttributeValue(struct UAbilityAttribute* AbilityAttribute); // Function /Script/Game.GameAbilityBuffer.GetAttributeValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetAttributeMaxValue(struct UAbilityAttribute* AbilityAttribute); // Function /Script/Game.GameAbilityBuffer.GetAttributeMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetAbilityOwnerActor(); // Function /Script/Game.GameAbilityBuffer.GetAbilityOwnerActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.AbilityBufferAttribute
// Size: 0x0 (Inherited: 0x0)
struct UAbilityBufferAttribute : UGameAbilityBuffer {
	struct TArray<struct FAbilityBufferAttributeRuleLoop> AbilityBufferAttributeSet; // 0x0(0x0)
};

 // Class /Script/Game.ApplyAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct UApplyAbilityAttribute : UGameAbilityBuffer {
	struct TArray<struct FAbilityBufferAttributeRule> AbilityBufferAttributeSet; // 0x0(0x0)
};

 // Class /Script/Game.TemporaryAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct UTemporaryAbilityAttribute : UApplyAbilityAttribute {
};

 // Class /Script/Game.CustomAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct UCustomAbilityAttribute : UGameAbilityBuffer {

	void SetValueToAttribute(struct UAbilityAttribute* AbilityAttribute, float Value); // Function /Script/Game.CustomAbilityAttribute.SetValueToAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AActor* GetLauncherActor(); // Function /Script/Game.CustomAbilityAttribute.GetLauncherActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float AddValueToAttribute(struct UAbilityAttribute* AbilityAttribute, float Value); // Function /Script/Game.CustomAbilityAttribute.AddValueToAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddBufferAliveTime(float Value); // Function /Script/Game.CustomAbilityAttribute.AddBufferAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.NoModifyAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct UNoModifyAbilityAttribute : UGameAbilityBuffer {
	enum class EAttributeType AttributeType; // 0x0(0x0)
	bool NoAdd; // 0x0(0x0)
	bool NoReduce; // 0x0(0x0)
	char pad_D3[0x5]; // 0x0(0x0)
};

 // Class /Script/Game.CustomGameAbilityBuffer
// Size: 0x0 (Inherited: 0x0)
struct UCustomGameAbilityBuffer : UGameAbilityBuffer {
	bool bCustomPaused; // 0x0(0x0)
	char pad_D1[0x7]; // 0x0(0x0)

	float SetValueToTargetAttribute(struct UGameAbilityComponent* GameAbility, struct UAbilityAttribute* AbilityAttribute, float Value); // Function /Script/Game.CustomGameAbilityBuffer.SetValueToTargetAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AActor* GetLauncherActor(); // Function /Script/Game.CustomGameAbilityBuffer.GetLauncherActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void DeActiveSelf(); // Function /Script/Game.CustomGameAbilityBuffer.DeActiveSelf // (Final|Native|Public|BlueprintCallable) // @ game+0
	float AddValueToTargetAttribute(struct UGameAbilityComponent* GameAbility, struct UAbilityAttribute* AbilityAttribute, float Value); // Function /Script/Game.CustomGameAbilityBuffer.AddValueToTargetAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UGameAbilityBuffer* ActiveBufferToTarget(struct UGameAbilityBuffer*& nGameAbilityBufferClass, struct UGameAbilityComponent* TargetAbility, struct TArray<struct FParamInfo>& Info, struct UObject* Outer); // Function /Script/Game.CustomGameAbilityBuffer.ActiveBufferToTarget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ClampAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct UClampAbilityAttribute : UCustomGameAbilityBuffer {
	enum class EAttributeType AttributeType; // 0x0(0x0)
	char pad_D9[0x7]; // 0x0(0x0)
	struct UAbilityAttribute* AttributeAsset; // 0x0(0x0)
	struct FVector2D AttributeClamp; // 0x0(0x0)

	bool InitAbilityAttribute(enum class EAttributeType InAttributeType, struct FString AttributeString); // Function /Script/Game.ClampAbilityAttribute.InitAbilityAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CustomEffectActor
// Size: 0x0 (Inherited: 0x0)
struct ACustomEffectActor : AActor {
	char pad_220[0x8]; // 0x0(0x0)
	char Attached : 1; // 0x0(0x0)
	char pad_228_1 : 7; // 0x0(0x0)
	char pad_229[0x3]; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)
	char bAutoDestroyed : 1; // 0x0(0x0)
	char pad_234_1 : 7; // 0x0(0x0)
	char pad_235[0x3]; // 0x0(0x0)
	struct FVector OriginLocation; // 0x0(0x0)
	struct FVector ApplyLocation; // 0x0(0x0)
	struct AActor* Launcher; // 0x0(0x0)
	struct AActor* Target; // 0x0(0x0)
	struct FBoneResult BoneResult; // 0x0(0x0)
	struct FBoneResult PartResult; // 0x0(0x0)
	struct FBoneResult PartitionResult; // 0x0(0x0)
	__int32 OwnerModifierID; // 0x0(0x0)
	__int32 ModifierOverlaidNum; // 0x0(0x0)
	__int32 ModifierLevel; // 0x0(0x0)
	__int32 ModifierRunTimeID; // 0x0(0x0)
	struct TArray<struct FQueryResult> EmitterQueryResults; // 0x0(0x0)

	void SetScalarParameterValueOnMaterials(struct AActor* Actor, struct FName ParameterName, float ParameterValue, __int32 MatIndex); // Function /Script/Game.CustomEffectActor.SetScalarParameterValueOnMaterials // (Final|Native|Protected|BlueprintCallable) // @ game+0
	void OnOwnerModifierOverlaidChange(__int32 ModifierID, __int32 NewOverlaidNum); // Function /Script/Game.CustomEffectActor.OnOwnerModifierOverlaidChange // (Final|Native|Public) // @ game+0
	void LookCamera(); // Function /Script/Game.CustomEffectActor.LookCamera // (Final|Native|Protected|BlueprintCallable) // @ game+0
	void K2_ReceiveTick(float DeltaSeconds); // Function /Script/Game.CustomEffectActor.K2_ReceiveTick // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ReceiveDeActive(); // Function /Script/Game.CustomEffectActor.K2_ReceiveDeActive // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ReceiveActive(); // Function /Script/Game.CustomEffectActor.K2_ReceiveActive // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_OnOwnerModifierOverlaidChange(__int32 PreModifierOverliadNum, __int32 CurModifierOverlaidNum); // Function /Script/Game.CustomEffectActor.K2_OnOwnerModifierOverlaidChange // (Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.AbilityBufferCustomEffect
// Size: 0x0 (Inherited: 0x0)
struct UAbilityBufferCustomEffect : UGameAbilityBuffer {
	struct TArray<struct ACustomEffectActor*> CustomEffectActorClasses; // 0x0(0x0)
	struct TArray<struct ACustomEffectActor*> CustomEffectActors; // 0x0(0x0)
};

 // Class /Script/Game.AbilityBufferRandomSettings
// Size: 0x0 (Inherited: 0x0)
struct UAbilityBufferRandomSettings : UGameInstanceSubsystem {
	char pad_30[0x20]; // 0x0(0x0)
	struct TArray<struct FAbilityBufferPrice> AbilityBufferPrices; // 0x0(0x0)
	char pad_60[0x10]; // 0x0(0x0)
	struct TArray<struct FAbilityBufferShop> AbilityBufferShopes; // 0x0(0x0)
	struct TArray<struct FAbilityBufferRandomSetting> AbilityBufferRandomSettings; // 0x0(0x0)
	char pad_90[0x50]; // 0x0(0x0)

	void OnAsyncLoadAbilityBlueprint(struct TArray<struct FSoftObjectPath> LoadedPaths, struct TArray<__int32> BufferIds); // Function /Script/Game.AbilityBufferRandomSettings.OnAsyncLoadAbilityBlueprint // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.AbilityBufferSkill
// Size: 0x0 (Inherited: 0x0)
struct UAbilityBufferSkill : UGameAbilityBuffer {
	struct TArray<__int32> BufferSkilles; // 0x0(0x0)
	__int32 CurrentSkillId; // 0x0(0x0)
	char pad_E4[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AbilityBufferSummon
// Size: 0x0 (Inherited: 0x0)
struct UAbilityBufferSummon : UGameAbilityBuffer {
	struct TArray<struct AActor*> SummonActors; // 0x0(0x0)
};

 // Class /Script/Game.AbilityBufferGroupSummon
// Size: 0x0 (Inherited: 0x0)
struct UAbilityBufferGroupSummon : UAbilityBufferSummon {
	struct TArray<struct FSummonSetting> SummonActorClasses; // 0x0(0x0)
};

 // Class /Script/Game.AbilityBufferStackSummon
// Size: 0x0 (Inherited: 0x0)
struct UAbilityBufferStackSummon : UAbilityBufferSummon {
	struct TArray<struct FStackSummonSetting> SummonActorClasses; // 0x0(0x0)
};

 // Class /Script/Game.AbilityCollision_Sphere
// Size: 0x0 (Inherited: 0x0)
struct UAbilityCollision_Sphere : USphereComponent {
	char pad_470[0x8]; // 0x0(0x0)
	enum class ECollisionPurposeType CollisionPurposeType; // 0x0(0x0)
	char pad_479[0x3]; // 0x0(0x0)
	float ValidAngle; // 0x0(0x0)
	struct UCurveFloat* InnerRadiusCurve; // 0x0(0x0)
	struct UCurveFloat* RadiusCurve; // 0x0(0x0)
	struct UCurveVector* RotatorCurve; // 0x0(0x0)
	struct UCurveVector* OffsetCurve; // 0x0(0x0)
	bool bApplyEffect; // 0x0(0x0)
	char pad_4A1[0x7]; // 0x0(0x0)
	struct TArray<__int32> EffectEmitterIDs; // 0x0(0x0)
	struct TArray<struct FCastEmitterCondition> ConditionEmitterID; // 0x0(0x0)
	bool bUseGroup; // 0x0(0x0)
	char pad_4C9[0x3]; // 0x0(0x0)
	__int32 CollisionQueryTimes; // 0x0(0x0)
	float ActiveTime; // 0x0(0x0)
	char pad_4D4[0xD4]; // 0x0(0x0)
	struct TMap<struct FEmitterEffectApplyData, struct FEmitterEffectSaveData> LastEffectTimeMap; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> CollisionCheckCondition; // 0x0(0x0)
	char pad_648[0x8]; // 0x0(0x0)
	struct UParticleSystemComponent* ParticleComp; // 0x0(0x0)
	struct USceneComponent* OldUpdateComp; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameSkill> CurGameSkill; // 0x0(0x0)
	char pad_668[0x8]; // 0x0(0x0)

	void TickFreshSphere(float DeltaTime); // Function /Script/Game.AbilityCollision_Sphere.TickFreshSphere // (Final|Native|Public) // @ game+0
	void OnOuterMoveCollisionOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Sphere.OnOuterMoveCollisionOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnEffectBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Sphere.OnEffectBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnAbilityCollisionEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex); // Function /Script/Game.AbilityCollision_Sphere.OnAbilityCollisionEndOverlap // (Final|Native|Public) // @ game+0
	void OnAbilityCollisionBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Sphere.OnAbilityCollisionBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnAbilityCollisionActivated(struct UActorComponent* Component, bool bReset); // Function /Script/Game.AbilityCollision_Sphere.OnAbilityCollisionActivated // (Final|Native|Public) // @ game+0
	void DisableAbilityCollision(); // Function /Script/Game.AbilityCollision_Sphere.DisableAbilityCollision // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.AbilityCollision_Capsual
// Size: 0x0 (Inherited: 0x0)
struct UAbilityCollision_Capsual : UCapsuleComponent {
	char pad_470[0x8]; // 0x0(0x0)
	enum class ECollisionPurposeType CollisionPurposeType; // 0x0(0x0)
	char pad_479[0x7]; // 0x0(0x0)
	struct UCurveFloat* CapsuleRadiusCurve; // 0x0(0x0)
	struct UCurveFloat* CapsuleHalfHeightCurve; // 0x0(0x0)
	struct UCurveVector* RotatorCurve; // 0x0(0x0)
	struct UCurveVector* OffsetCurve; // 0x0(0x0)
	bool HalfHeightForward; // 0x0(0x0)
	bool bApplyEffect; // 0x0(0x0)
	char pad_4A2[0x6]; // 0x0(0x0)
	struct TArray<__int32> EffectEmitterIDs; // 0x0(0x0)
	struct TArray<struct FCastEmitterCondition> ConditionEmitterID; // 0x0(0x0)
	bool bUseGroup; // 0x0(0x0)
	char pad_4C9[0x3]; // 0x0(0x0)
	__int32 CollisionQueryTimes; // 0x0(0x0)
	float ActiveTime; // 0x0(0x0)
	char pad_4D4[0xE4]; // 0x0(0x0)
	struct TMap<struct FEmitterEffectApplyData, struct FEmitterEffectSaveData> LastEffectTimeMap; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> CollisionCheckCondition; // 0x0(0x0)
	bool bNeedSlide; // 0x0(0x0)
	bool bSlideOnHitPawn; // 0x0(0x0)
	char pad_65A[0x6]; // 0x0(0x0)
	struct UParticleSystemComponent* ParticleComp; // 0x0(0x0)
	struct USceneComponent* OldUpdateComp; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameSkill> CurGameSkill; // 0x0(0x0)
	char pad_678[0x8]; // 0x0(0x0)

	void TickFreshCapsual(float DeltaTime); // Function /Script/Game.AbilityCollision_Capsual.TickFreshCapsual // (Final|Native|Public) // @ game+0
	void OnOuterMoveCollisionOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Capsual.OnOuterMoveCollisionOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnEffectBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Capsual.OnEffectBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnAbilityCollisionEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex); // Function /Script/Game.AbilityCollision_Capsual.OnAbilityCollisionEndOverlap // (Final|Native|Public) // @ game+0
	void OnAbilityCollisionBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Capsual.OnAbilityCollisionBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnAbilityCollisionActivated(struct UActorComponent* Component, bool bReset); // Function /Script/Game.AbilityCollision_Capsual.OnAbilityCollisionActivated // (Final|Native|Public) // @ game+0
	void DisableAbilityCollision(); // Function /Script/Game.AbilityCollision_Capsual.DisableAbilityCollision // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.AbilityCollision_Box
// Size: 0x0 (Inherited: 0x0)
struct UAbilityCollision_Box : UBoxComponent {
	enum class ECollisionPurposeType CollisionPurposeType; // 0x0(0x0)
	char pad_481[0x7]; // 0x0(0x0)
	struct UCurveVector* BoxExtendCurve; // 0x0(0x0)
	struct UCurveVector* RotatorCurve; // 0x0(0x0)
	struct UCurveVector* OffsetCurve; // 0x0(0x0)
	char BoxExtendForwardX : 1; // 0x0(0x0)
	char BoxExtendForwardY : 1; // 0x0(0x0)
	char BoxExtendForwardZ : 1; // 0x0(0x0)
	char pad_4A0_3 : 5; // 0x0(0x0)
	bool bApplyEffect; // 0x0(0x0)
	char pad_4A2[0x6]; // 0x0(0x0)
	struct TArray<__int32> EffectEmitterIDs; // 0x0(0x0)
	struct TArray<struct FCastEmitterCondition> ConditionEmitterID; // 0x0(0x0)
	bool bUseGroup; // 0x0(0x0)
	char pad_4C9[0x3]; // 0x0(0x0)
	__int32 CollisionQueryTimes; // 0x0(0x0)
	char pad_4D0[0x58]; // 0x0(0x0)
	float ActiveTime; // 0x0(0x0)
	char pad_52C[0x94]; // 0x0(0x0)
	struct TMap<struct FEmitterEffectApplyData, struct FEmitterEffectSaveData> LastEffectTimeMap; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> CollisionCheckCondition; // 0x0(0x0)
	char pad_660[0x8]; // 0x0(0x0)
	struct UParticleSystemComponent* ParticleComp; // 0x0(0x0)
	struct USceneComponent* OldUpdateComp; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameSkill> CurGameSkill; // 0x0(0x0)

	void OnOuterMoveCollisionOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Box.OnOuterMoveCollisionOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnEffectBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Box.OnEffectBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnAbilityCollisionEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex); // Function /Script/Game.AbilityCollision_Box.OnAbilityCollisionEndOverlap // (Final|Native|Public) // @ game+0
	void OnAbilityCollisionBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.AbilityCollision_Box.OnAbilityCollisionBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0
	void OnAbilityCollisionActivated(struct UActorComponent* Component, bool bReset); // Function /Script/Game.AbilityCollision_Box.OnAbilityCollisionActivated // (Final|Native|Public) // @ game+0
	void DisableAbilityCollision(); // Function /Script/Game.AbilityCollision_Box.DisableAbilityCollision // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.AbilityCollisionEditor
// Size: 0x0 (Inherited: 0x0)
struct AAbilityCollisionEditor : AActor {

	struct TArray<struct FQueryResult> QueryTargetOverlap(struct TArray<struct FHitResult>& Hits, enum class EApplyLocationType LocationType, float RandRadius, struct UAbilityComponentBase* Launcher, struct FTargetsQueryInfo& Info, struct USkillEmitter* EmitterRef); // Function /Script/Game.AbilityCollisionEditor.QueryTargetOverlap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FHitResult> GetSweepHits(struct UShapeComponent* shape, struct TArray<struct AActor*> IgnoreActors, struct FTransform InOldTransform); // Function /Script/Game.AbilityCollisionEditor.GetSweepHits // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AbilityCollisionInterface
// Size: 0x0 (Inherited: 0x0)
struct UAbilityCollisionInterface : UInterface {
};

 // Class /Script/Game.AbilityCharacterInterface
// Size: 0x0 (Inherited: 0x0)
struct UAbilityCharacterInterface : UInterface {

	bool IsUseDestroyValue(); // Function /Script/Game.AbilityCharacterInterface.IsUseDestroyValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsMinion(); // Function /Script/Game.AbilityCharacterInterface.IsMinion // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int64 GetPlayerCardTeamplateID(); // Function /Script/Game.AbilityCharacterInterface.GetPlayerCardTeamplateID // (Native|Public|BlueprintCallable) // @ game+0
	struct AActor* GetOwnerActor(); // Function /Script/Game.AbilityCharacterInterface.GetOwnerActor // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameCharacter* GetMinionMaster(); // Function /Script/Game.AbilityCharacterInterface.GetMinionMaster // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetLevel(char AttackLevel); // Function /Script/Game.AbilityCharacterInterface.GetLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetGrowAttributeID(__int32& OutLevel); // Function /Script/Game.AbilityCharacterInterface.GetGrowAttributeID // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	char GetAttackLevel(char AttackLevel); // Function /Script/Game.AbilityCharacterInterface.GetAttackLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetAppearID(); // Function /Script/Game.AbilityCharacterInterface.GetAppearID // (Native|Public|BlueprintCallable) // @ game+0
	struct UAbilityComponentBase* GetAbilityComponent(); // Function /Script/Game.AbilityCharacterInterface.GetAbilityComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.RelationshipInterface
// Size: 0x0 (Inherited: 0x0)
struct URelationshipInterface : UInterface {

	enum class ECharacterType GetOwnerCharacterType(); // Function /Script/Game.RelationshipInterface.GetOwnerCharacterType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetCampType(); // Function /Script/Game.RelationshipInterface.GetCampType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.AbilityCollisionEditorInterface
// Size: 0x0 (Inherited: 0x0)
struct UAbilityCollisionEditorInterface : UInterface {

	bool CheckCollisionEmitterTraceType(enum class ETraceTypeQuery TraceChannel); // Function /Script/Game.AbilityCollisionEditorInterface.CheckCollisionEmitterTraceType // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BulletEnchantCollisionEditorInterface
// Size: 0x0 (Inherited: 0x0)
struct UBulletEnchantCollisionEditorInterface : UInterface {

	bool GetEnchantEmitterInfo(struct UAbilityComponentBase* Target, struct FBulletInfo& BulletInfo, struct FWeaponEnchantEmitterInfo& OutInfo, __int32& OutBulletEnchantID); // Function /Script/Game.BulletEnchantCollisionEditorInterface.GetEnchantEmitterInfo // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameAbilityComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameAbilityComponent : UActorComponent {
	float SpecializationSkillBlockTime; // 0x0(0x0)
	char pad_B4[0x4]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnBufferActive; // 0x0(0x0)
	struct FMulticastInlineDelegate OnBufferDeActive; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSkillBlockup; // 0x0(0x0)
	struct FMulticastInlineDelegate OnQTEChange; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSkillCdChange; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSkillCoolDown; // 0x0(0x0)
	struct TArray<struct UAvailableSkill*> AvailableSkills; // 0x0(0x0)
	struct TArray<struct UAvailableSkill*> ClientPredictiveSkills; // 0x0(0x0)
	struct FAbilityAttributeArray AbilityAttributes; // 0x0(0x0)
	struct FGameplayTagContainer GameplayTagContainer; // 0x0(0x0)
	struct TMap<unsigned __int32, __int32> SkillCDConfigInfo; // 0x0(0x0)
	char pad_2D8[0x8]; // 0x0(0x0)
	struct TArray<struct UGameAbilityBuffer*> AbilityBufferes; // 0x0(0x0)
	struct TArray<struct UGameAbilityBuffer*> RemoveBufferes; // 0x0(0x0)
	char pad_300[0x8]; // 0x0(0x0)
	struct TArray<struct UAbilitySpecialAttribute*> SpecialAttributes; // 0x0(0x0)
	float HitAbnormalForbideTime; // 0x0(0x0)
	enum class EAbnormalState ForbideState; // 0x0(0x0)
	char pad_31D[0x3]; // 0x0(0x0)
	struct FBeakInvisibleData BreakInvisibleData; // 0x0(0x0)
	char pad_32C[0xC]; // 0x0(0x0)
	unsigned __int64 CurrentAbilityState; // 0x0(0x0)
	struct FMulticastInlineDelegate OnGameAbilityDestroyed; // 0x0(0x0)
	char pad_350[0x28]; // 0x0(0x0)

	bool UnPauseAllSkill(); // Function /Script/Game.GameAbilityComponent.UnPauseAllSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAllSpecializationSkill(float StopTime); // Function /Script/Game.GameAbilityComponent.StopAllSpecializationSkill // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void SetSkillTempCDByTagName(struct FString TagName, float TempCD, bool bUsePercentChange); // Function /Script/Game.GameAbilityComponent.SetSkillTempCDByTagName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSkillTempCDBySkillType(struct TArray<struct FString>& TypeName, float TempCD, bool bUsePercentChange); // Function /Script/Game.GameAbilityComponent.SetSkillTempCDBySkillType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetSkillTempCD(__int32 SkillID, float TempCD, bool bUsePercentChange); // Function /Script/Game.GameAbilityComponent.SetSkillTempCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSkillCurrentCDByTagName(struct FString TagName, float InCD, bool bUsePercentChange); // Function /Script/Game.GameAbilityComponent.SetSkillCurrentCDByTagName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSkillCurrentCD(__int32 SkillID, float InCD, bool bUsePercentChange); // Function /Script/Game.GameAbilityComponent.SetSkillCurrentCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetMaxAttributeValue(struct UAbilityAttribute* AbilityAttribute, float InValue); // Function /Script/Game.GameAbilityComponent.SetMaxAttributeValue // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetGodFather(bool InType); // Function /Script/Game.GameAbilityComponent.SetGodFather // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetBreakInvisibleData(struct FBeakInvisibleData& Data); // Function /Script/Game.GameAbilityComponent.SetBreakInvisibleData // (Final|Native|Public|HasOutParms) // @ game+0
	void SetAttributeValue(struct UAbilityAttribute* lpAbilityAttribute, float fAttributeValue); // Function /Script/Game.GameAbilityComponent.SetAttributeValue // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetSkillCurrentCDByTagName(struct FString TagName); // Function /Script/Game.GameAbilityComponent.ResetSkillCurrentCDByTagName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetSkillCurrentCD(__int32 SkillID); // Function /Script/Game.GameAbilityComponent.ResetSkillCurrentCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveAllBuffer(); // Function /Script/Game.GameAbilityComponent.RemoveAllBuffer // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool PauseAllInAnimSkill(); // Function /Script/Game.GameAbilityComponent.PauseAllInAnimSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnRepAvailableSkills(); // Function /Script/Game.GameAbilityComponent.OnRepAvailableSkills // (Final|Native|Protected) // @ game+0
	void OnQTESkillsChange(enum class EQTESkillCastableType CastableType, __int32 SkillID); // Function /Script/Game.GameAbilityComponent.OnQTESkillsChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void OnGameAbilityDestroyedSignature__DelegateSignature(); // DelegateFunction /Script/Game.GameAbilityComponent.OnGameAbilityDestroyedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	bool K2_IsDead(); // Function /Script/Game.GameAbilityComponent.K2_IsDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool K2_IsAlive(); // Function /Script/Game.GameAbilityComponent.K2_IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void K2_InitAttribute(struct UAbilityAttribute* AbilityAttribute, float fBaseValue, float fAddtionRate, float fAddtionValue, float fCurValue); // Function /Script/Game.GameAbilityComponent.K2_InitAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FSkillInfo K2_GetSkillInfo(__int32 nSkillId); // Function /Script/Game.GameAbilityComponent.K2_GetSkillInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	float K2_GetCurrentRealValue(struct UAbilityAttribute* AbilityAttribute); // Function /Script/Game.GameAbilityComponent.K2_GetCurrentRealValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float K2_GetCurrentCDRemainingPercent(__int32 SkillSlot); // Function /Script/Game.GameAbilityComponent.K2_GetCurrentCDRemainingPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAvailableSkill* K2_GetAvaliableSkillInfo(__int32 InID); // Function /Script/Game.GameAbilityComponent.K2_GetAvaliableSkillInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct UAvailableSkill*> K2_GetAllAvaliableSkillInfo(); // Function /Script/Game.GameAbilityComponent.K2_GetAllAvaliableSkillInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool K2_CastSkill(__int32 SkillSlot, struct FString SkillTagSuffix, enum class ESkillCastType CastType); // Function /Script/Game.GameAbilityComponent.K2_CastSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsSkillWaitForCD(__int32 SkillID); // Function /Script/Game.GameAbilityComponent.IsSkillWaitForCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsSkillInEndTime(__int32 SkillID); // Function /Script/Game.GameAbilityComponent.IsSkillInEndTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsSkillInActive(__int32 SkillID); // Function /Script/Game.GameAbilityComponent.IsSkillInActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInState(enum class EAbilityState nAbilityState); // Function /Script/Game.GameAbilityComponent.IsInState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsInSpecializationSkillBlock(); // Function /Script/Game.GameAbilityComponent.IsInSpecializationSkillBlock // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInAbnormal(); // Function /Script/Game.GameAbilityComponent.IsInAbnormal // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsGodFather(); // Function /Script/Game.GameAbilityComponent.IsGodFather // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasActiveSkill(); // Function /Script/Game.GameAbilityComponent.HasActiveSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetVigourStorageRatio(); // Function /Script/Game.GameAbilityComponent.GetVigourStorageRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetVigourRush(); // Function /Script/Game.GameAbilityComponent.GetVigourRush // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetVigourOtherRatio(); // Function /Script/Game.GameAbilityComponent.GetVigourOtherRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetVigourDodgeRatio(); // Function /Script/Game.GameAbilityComponent.GetVigourDodgeRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetTeamCurrentValue(enum class EAttributeType AbilityAttributeType); // Function /Script/Game.GameAbilityComponent.GetTeamCurrentValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetSkillUsingCD(struct UAvailableSkill* nAvailableSkill); // Function /Script/Game.GameAbilityComponent.GetSkillUsingCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetSkillCurrentCD(struct UAvailableSkill* nAvailableSkill); // Function /Script/Game.GameAbilityComponent.GetSkillCurrentCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetSkillChargeTimBySkillIndex(__int32 SkillIndex, __int32& CurrentChargeTime, __int32& MaxChargeTime); // Function /Script/Game.GameAbilityComponent.GetSkillChargeTimBySkillIndex // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetSkillCharageTime(__int32 SkillID, __int32& CurrentChargeTime, __int32& MaxChargeTime); // Function /Script/Game.GameAbilityComponent.GetSkillCharageTime // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AGameCharacter* GetOriginCharacter(); // Function /Script/Game.GameAbilityComponent.GetOriginCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetMaxAttributeValueDirect(struct UAbilityAttribute* AbilityAttribute, bool bDirect); // Function /Script/Game.GameAbilityComponent.GetMaxAttributeValueDirect // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetMaxAttributeValue(struct UAbilityAttribute* AbilityAttribute); // Function /Script/Game.GameAbilityComponent.GetMaxAttributeValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetForbidMoveAndRotationState(); // Function /Script/Game.GameAbilityComponent.GetForbidMoveAndRotationState // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetCurrentValueDirect(struct UAbilityAttribute* AbilityAttribute, char Level, bool bDirect); // Function /Script/Game.GameAbilityComponent.GetCurrentValueDirect // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetCurrentValue(struct UAbilityAttribute* AbilityAttribute, char Level); // Function /Script/Game.GameAbilityComponent.GetCurrentValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetCurrentAbnormalInfo(struct FAbnormalInfo& Info); // Function /Script/Game.GameAbilityComponent.GetCurrentAbnormalInfo // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetBreakInvisibleData(struct FBeakInvisibleData& Data); // Function /Script/Game.GameAbilityComponent.GetBreakInvisibleData // (Final|Native|Public|HasOutParms) // @ game+0
	float GetBaseValueDirect(struct UAbilityAttribute* AbilityAttribute, bool bDirect); // Function /Script/Game.GameAbilityComponent.GetBaseValueDirect // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetBaseValue(struct UAbilityAttribute* AbilityAttribute); // Function /Script/Game.GameAbilityComponent.GetBaseValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct UGameAbilityBuffer*> GetActiveAbilityBuffer(struct UGameAbilityBuffer*& nGameAbilityBufferClass); // Function /Script/Game.GameAbilityComponent.GetActiveAbilityBuffer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct UGameAbilityBuffer*> GetAbilityBuffer(struct UGameAbilityBuffer*& nGameAbilityBufferClass); // Function /Script/Game.GameAbilityComponent.GetAbilityBuffer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void FrazzStateStart(); // Function /Script/Game.GameAbilityComponent.FrazzStateStart // (Final|Native|Public|BlueprintCallable) // @ game+0
	void FrazzStateFinish(); // Function /Script/Game.GameAbilityComponent.FrazzStateFinish // (Final|Native|Public) // @ game+0
	void ForbidSwitchAndCastSkill(); // Function /Script/Game.GameAbilityComponent.ForbidSwitchAndCastSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ForbidMoveAndRotation(); // Function /Script/Game.GameAbilityComponent.ForbidMoveAndRotation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ForbidFire(); // Function /Script/Game.GameAbilityComponent.ForbidFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EnableSwitchAndCastSkill(); // Function /Script/Game.GameAbilityComponent.EnableSwitchAndCastSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EnableMoveAndRotation(); // Function /Script/Game.GameAbilityComponent.EnableMoveAndRotation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EnableFire(); // Function /Script/Game.GameAbilityComponent.EnableFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DeActiveAbilityBuffer(struct UGameAbilityBuffer* lpGameAbilityBuffer); // Function /Script/Game.GameAbilityComponent.DeActiveAbilityBuffer // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Client_SetSkillCurrentCD(__int32 InSkillId, float InCD); // Function /Script/Game.GameAbilityComponent.Client_SetSkillCurrentCD // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_ResetSkillPublicCD(__int32 InSkillId, float InCD); // Function /Script/Game.GameAbilityComponent.Client_ResetSkillPublicCD // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_ResetSkillCD(__int32 InSkillId, float InCD); // Function /Script/Game.GameAbilityComponent.Client_ResetSkillCD // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_NotifySkillCDChanged(); // Function /Script/Game.GameAbilityComponent.Client_NotifySkillCDChanged // (Net|Native|Event|Public|NetClient) // @ game+0
	void Client_AbilityBufferState(unsigned __int64 nCurAbilityBufferState, unsigned __int64 nLastAbilityBufferState); // Function /Script/Game.GameAbilityComponent.Client_AbilityBufferState // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void ClearBreakInvisibleData(); // Function /Script/Game.GameAbilityComponent.ClearBreakInvisibleData // (Final|Native|Public) // @ game+0
	void ChangeSkillCDByTagName(struct FString TagName, float ChangeValue, bool bPercentChange); // Function /Script/Game.GameAbilityComponent.ChangeSkillCDByTagName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ChangeSkillCDBySkillType(struct TArray<struct FString>& TypeName, float ChangeValue, bool bPercentChange, __int32 ChargeType); // Function /Script/Game.GameAbilityComponent.ChangeSkillCDBySkillType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void ChangeSkillCD(__int32 SkillID, float ChangeValue, bool bPercentChange); // Function /Script/Game.GameAbilityComponent.ChangeSkillCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ChangeAllNonChargingSkill(float ChangeValue, bool bPercentChange); // Function /Script/Game.GameAbilityComponent.ChangeAllNonChargingSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ChangeAllChargingSkill(float ChangeValue, bool bPercentChange); // Function /Script/Game.GameAbilityComponent.ChangeAllChargingSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CancleSpecificSkill(enum class ESkillInterruptedType Type, __int32 SkillID); // Function /Script/Game.GameAbilityComponent.CancleSpecificSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CancleAllSkill(enum class ESkillInterruptedType Type, bool bDieCause, bool bIncludeAdditiveSkill); // Function /Script/Game.GameAbilityComponent.CancleAllSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CancleAllInAnimSkill_Accessory(enum class ESkillInterruptedType Type); // Function /Script/Game.GameAbilityComponent.CancleAllInAnimSkill_Accessory // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CancleAllInAnimSkill(enum class ESkillInterruptedType Type, bool bExceptHalfSkil, bool bDieCause); // Function /Script/Game.GameAbilityComponent.CancleAllInAnimSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddSkillChargeTimebyTag(struct FString TagName, __int32 ChangeValue); // Function /Script/Game.GameAbilityComponent.AddSkillChargeTimebyTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddSkillChargeTime(__int32 SkillID, __int32 ChangeValue); // Function /Script/Game.GameAbilityComponent.AddSkillChargeTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAbilitySpecialAttribute* ActiveSpecialAttribute(struct UAbilitySpecialAttribute*& InSpecialAttributeClass, struct UObject* InOuter); // Function /Script/Game.GameAbilityComponent.ActiveSpecialAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UGameAbilityBuffer* ActiveAbilityBuffer(struct UGameAbilityBuffer*& nGameAbilityBufferClass, struct UGameAbilityComponent* lpInstigator, struct TArray<struct FParamInfo>& Info, struct UObject* Outer, __int32 InLevel, struct UModifier* OwnerModifier); // Function /Script/Game.GameAbilityComponent.ActiveAbilityBuffer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AbilityComponentBase
// Size: 0x0 (Inherited: 0x0)
struct UAbilityComponentBase : UGameAbilityComponent {
	bool bShowDamageText; // 0x0(0x0)
	char pad_379[0x7]; // 0x0(0x0)
	struct UHitDelayRecoverAttribute* ShieldRecoverClass; // 0x0(0x0)
	struct UResetRecoverTimerOnReduceAndSwitch* CharacterEnergyRecover; // 0x0(0x0)
	struct TArray<struct FElemExplosionEffect> ElemExplosionEffects; // 0x0(0x0)
	char pad_3A0[0x18]; // 0x0(0x0)
	struct TArray<struct UModifier*> AppliedModifiers; // 0x0(0x0)
	struct TArray<struct UModifier*> DirtyModifiers; // 0x0(0x0)
	struct TArray<struct FModifierExhibitionData> AppliedModifierDatas; // 0x0(0x0)
	struct TArray<__int32> PassiveSkillIDs; // 0x0(0x0)
	struct FMulticastInlineDelegate OnEmitterEnd; // 0x0(0x0)
	struct FMulticastInlineDelegate OnModifierApplied; // 0x0(0x0)
	struct FMulticastInlineDelegate OnModifierRecived; // 0x0(0x0)
	struct FMulticastInlineDelegate OnModifierPreApply; // 0x0(0x0)
	struct FMulticastInlineDelegate OnModifierRemove; // 0x0(0x0)
	struct FMulticastInlineDelegate OnModifierRemoveEnd; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAppliedModifierOverlaidChange; // 0x0(0x0)
	char pad_468[0x18]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSkillCancel; // 0x0(0x0)
	char pad_490[0x18]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSkillEnd; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPreDeadCheck; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPreDead; // 0x0(0x0)
	struct FMulticastInlineDelegate OnDead; // 0x0(0x0)
	char pad_4E8[0x10]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnShieldChange; // 0x0(0x0)
	struct FMulticastInlineDelegate OnShieldDisappear; // 0x0(0x0)
	char pad_518[0xB0]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyModifyHealth; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReceiveDamage; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyReceiveDamage; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyApplyDamage; // 0x0(0x0)
	struct FMulticastInlineDelegate OnElemExplosion; // 0x0(0x0)
	struct FMulticastInlineDelegate OnChangeElemExplosion; // 0x0(0x0)
	struct FMulticastInlineDelegate OnApplyDamage; // 0x0(0x0)
	struct FMulticastInlineDelegate OnApplyHeal; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReceiveHeal; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReceiveDamageSkillOnce; // 0x0(0x0)
	struct FMulticastInlineDelegate OnApplyDamageSkillOnce; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReceiveHit; // 0x0(0x0)
	struct FMulticastInlineDelegate OnApplyHit; // 0x0(0x0)
	struct FMulticastInlineDelegate OnApplyBulletHitOnce; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReceiveHitAffterDamage; // 0x0(0x0)
	struct FMulticastInlineDelegate OnApplyHitAffterDamage; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAbilityCastSkill; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAbilitySkillEnd; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAbilitySkillCastSuccess; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAbilitySkillCancle; // 0x0(0x0)
	struct FMulticastInlineDelegate OnEmitterTrigger; // 0x0(0x0)
	struct FMulticastInlineDelegate OnEmitterApplyMagic; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAppliedModifierChange; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAppliedModifierChangeToUI; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAppliedModifierRemainingTimeChange; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSpawnBullet; // 0x0(0x0)
	struct FMulticastInlineDelegate OnRecycleBullet; // 0x0(0x0)
	struct FMulticastInlineDelegate OnBulletHitTarget; // 0x0(0x0)
	struct FMulticastInlineDelegate OnByBulletHit; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPreModifierHealth; // 0x0(0x0)
	struct FMulticastInlineDelegate OnBlockDamage; // 0x0(0x0)
	struct FMulticastInlineDelegate OnTyrLock; // 0x0(0x0)
	struct FMulticastInlineDelegate OnTyrLockEnd; // 0x0(0x0)
	struct FMulticastInlineDelegate OnFightPowerChanged; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReceiveAbnormal; // 0x0(0x0)
	struct FMulticastInlineDelegate OnApplyAbnormal; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPreApplyAbnormal; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyReloadLogic; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyReloadState; // 0x0(0x0)
	bool bInReloadState; // 0x0(0x0)
	char pad_839[0x3]; // 0x0(0x0)
	struct TWeakObjectPtr<struct URecordSkillCostBuffer> RecordSkillCostBuffer; // 0x0(0x0)
	char pad_844[0x4]; // 0x0(0x0)
	struct TArray<__int32> AllSkillFixIds; // 0x0(0x0)
	struct TArray<__int32> FixTeamPassiveSkills; // 0x0(0x0)
	struct TArray<struct FSkillInfo> FixSkillInfos; // 0x0(0x0)
	struct TArray<struct FEmitterInfo> FixEmitterInfos; // 0x0(0x0)
	struct TArray<struct FModifierDataInfo> FixModifierInfos; // 0x0(0x0)
	struct TArray<struct FBulletInfo> FixBulletInfos; // 0x0(0x0)
	struct TArray<struct FTrapSpawnInfo> FixTrapInfos; // 0x0(0x0)
	struct TArray<__int32> ActiveSkillIds; // 0x0(0x0)
	struct TArray<__int32> ActiveEmitterIds; // 0x0(0x0)
	__int32 ModifierRunTimeID; // 0x0(0x0)
	__int32 SkillRunTimeID; // 0x0(0x0)
	char pad_8E0[0xA8]; // 0x0(0x0)
	struct TArray<__int32> DeActiveModifierIDs; // 0x0(0x0)
	struct FGameplayTagContainer DeActiveModifierTags; // 0x0(0x0)
	struct FAbnormalInfo CurrentAbonormalInfo; // 0x0(0x0)
	struct TArray<__int32> QTESkills; // 0x0(0x0)
	struct TWeakObjectPtr<struct UBreakOrZeroInCDToRecover> VigourRecoverBuffer; // 0x0(0x0)
	struct TArray<struct FAbnormalInfo> AbnormalStateInfos; // 0x0(0x0)
	struct UAbilityAttributeAgent* Attribute; // 0x0(0x0)
	struct FEnchantBulletInfo SkillEnchantBulletInfo; // 0x0(0x0)
	struct TMap<__int32, struct FDeriveSkillIDs> ActiveDeriveSkills; // 0x0(0x0)
	struct TMap<__int32, struct FDeriveSkillIDs> DeActiveDeriveSkills; // 0x0(0x0)
	struct TArray<enum class EModifyHPType> EnchantDamageType; // 0x0(0x0)
	struct TArray<__int32> SpecificEnchantID; // 0x0(0x0)
	struct TArray<__int32> EnchantEmitter; // 0x0(0x0)
	char pad_B28[0x58]; // 0x0(0x0)
	struct TMap<struct FString, struct FElemExplosionBaseData> ElemExplosionBaseData; // 0x0(0x0)
	struct FElemExplosion ElemExplosion; // 0x0(0x0)
	struct TMap<struct FString, struct FPartBounceData> PartBounceData; // 0x0(0x0)
	struct TMap<unsigned __int32, struct FDealArrayModifierDamageEffect> DealDamageEffectInfos; // 0x0(0x0)
	struct TArray<struct FAttributeChangeValue> CacheTempEffectChangeValue; // 0x0(0x0)
	char pad_CD0[0x10]; // 0x0(0x0)
	__int32 InvalidSpecifiedSkill; // 0x0(0x0)
	struct FCacheSkillInfo CacheSkillInfo; // 0x0(0x0)
	struct FCacheDodgeInfo CacheDodgeInfo; // 0x0(0x0)
	struct FControlProtectionInfo ControlProtectionInfo; // 0x0(0x0)
	struct TArray<struct FIgnoreByControlProtectionModifierInfo> DelayActiveModifierInfo; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAbnormalControlBegin; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAbnormalControlEnd; // 0x0(0x0)

	float VigourRecoverFunc(float InValue); // Function /Script/Game.AbilityComponentBase.VigourRecoverFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	float VigourCostFunc(float InValue, float Ratio); // Function /Script/Game.AbilityComponentBase.VigourCostFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TurnCharacterFaceCameraForward(); // Function /Script/Game.AbilityComponentBase.TurnCharacterFaceCameraForward // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void TryJumpToNextSkill(__int32 InID, __int32 PreSkillID); // Function /Script/Game.AbilityComponentBase.TryJumpToNextSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TryCastSpecificSkill(__int32 InID, enum class ESkillCastType InType, bool bAutoCast, __int32 DelegateCastIndex); // Function /Script/Game.AbilityComponentBase.TryCastSpecificSkill // (Native|Public|BlueprintCallable) // @ game+0
	void TestFixEmitter(__int32 FixID); // Function /Script/Game.AbilityComponentBase.TestFixEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopFullSkillAnimMontage(); // Function /Script/Game.AbilityComponentBase.StopFullSkillAnimMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAnimMontage(struct UAnimMontage* AnimMontage); // Function /Script/Game.AbilityComponentBase.StopAnimMontage // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void SkillFinish(__int32 ID, struct TArray<__int32>& OriginIDs); // Function /Script/Game.AbilityComponentBase.SkillFinish // (Native|Public|HasOutParms) // @ game+0
	void SkillEmit(__int32 ID); // Function /Script/Game.AbilityComponentBase.SkillEmit // (Native|Public) // @ game+0
	void SkillCancle(__int32 ID, struct TArray<__int32> OriginIDs, enum class ESkillInterruptedType InType); // Function /Script/Game.AbilityComponentBase.SkillCancle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	float ShieldRecoverFunc(float InValue, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.AbilityComponentBase.ShieldRecoverFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSkillEnchantBulletInfo(__int32 InID, __int32 InOriginalID, float InPro, struct UAbilityComponentBase* InAbility, __int32 InLevel); // Function /Script/Game.AbilityComponentBase.SetSkillEnchantBulletInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPropertieValueFromString(struct FString RoleName, float fAttributeValue); // Function /Script/Game.AbilityComponentBase.SetPropertieValueFromString // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetInvalidSpecifiedSkill(__int32 InIndex); // Function /Script/Game.AbilityComponentBase.SetInvalidSpecifiedSkill // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void SetEndNewAbnormalControlStateCall(enum class EAbnormalState NewState); // Function /Script/Game.AbilityComponentBase.SetEndNewAbnormalControlStateCall // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCurrentAbnormalInfo(struct FAbnormalInfo& Info); // Function /Script/Game.AbilityComponentBase.SetCurrentAbnormalInfo // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetBeginNewAbnormalControlStateCall(enum class EAbnormalState NewState); // Function /Script/Game.AbilityComponentBase.SetBeginNewAbnormalControlStateCall // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAllowTickAbility(bool AllowTickAbility); // Function /Script/Game.AbilityComponentBase.SetAllowTickAbility // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0
	void SetAdvancedAction(enum class ESkillActionType nSkillActionType, float fRetainWeaponRaising, bool bKeepWeaponRaisingOnSkillStart); // Function /Script/Game.AbilityComponentBase.SetAdvancedAction // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void Server_CastSubSkillAtTrans(__int32 InID, __int32 Level, struct AActor* Launcher, enum class ESkillCastType InType, struct FTransform InOverrideSpawnTrans); // Function /Script/Game.AbilityComponentBase.Server_CastSubSkillAtTrans // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0
	void Server_CastSubSkill(__int32 InID, __int32 Level, struct AActor* Launcher, enum class ESkillCastType InType); // Function /Script/Game.AbilityComponentBase.Server_CastSubSkill // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0
	void RPC_Die(struct UAbilityComponentBase* InLauncher, struct FHealthChangeValue nChangeValueData); // Function /Script/Game.AbilityComponentBase.RPC_Die // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void RemoveSpecificEnchantInfo(__int32 ID); // Function /Script/Game.AbilityComponentBase.RemoveSpecificEnchantInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveSkill(__int32 InID); // Function /Script/Game.AbilityComponentBase.RemoveSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveModifierFromTag(struct FGameplayTag& ModifierTag); // Function /Script/Game.AbilityComponentBase.RemoveModifierFromTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void RemoveModifierFromSkillID(__int32 SkillID); // Function /Script/Game.AbilityComponentBase.RemoveModifierFromSkillID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveModifierFromRunTimeID(__int32 RunTimeID); // Function /Script/Game.AbilityComponentBase.RemoveModifierFromRunTimeID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveModifierFromEmitter(struct USkillEmitter* Modifier); // Function /Script/Game.AbilityComponentBase.RemoveModifierFromEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveModifierFormModifierID(__int32 ModifierID, struct UAbilityComponentBase* SpecificAbility, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.AbilityComponentBase.RemoveModifierFormModifierID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveModifierByBuffer(struct UGameAbilityBuffer* InBuffer); // Function /Script/Game.AbilityComponentBase.RemoveModifierByBuffer // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveModifier(struct UModifier* Modifier, bool bRemoveAll); // Function /Script/Game.AbilityComponentBase.RemoveModifier // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveEnchantEmitter(__int32 InEmitterID); // Function /Script/Game.AbilityComponentBase.RemoveEnchantEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveEnchantDamageByName(struct FString NewDamageTypeName); // Function /Script/Game.AbilityComponentBase.RemoveEnchantDamageByName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveEnchantDamage(enum class EModifyHPType NewDamageType); // Function /Script/Game.AbilityComponentBase.RemoveEnchantDamage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveAllSkill(); // Function /Script/Game.AbilityComponentBase.RemoveAllSkill // (Native|Public|BlueprintCallable) // @ game+0
	void RemoveAllModifier(); // Function /Script/Game.AbilityComponentBase.RemoveAllModifier // (Native|Public|BlueprintCallable) // @ game+0
	void RemoveAbnormalStateForArray(enum class EAbnormalState InvalidState, __int32 InModifierRunTimeID); // Function /Script/Game.AbilityComponentBase.RemoveAbnormalStateForArray // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void RemoveAbnormalState(enum class EAbnormalState InvalidState, __int32 InModifierRunTimeID, bool bForceRemove); // Function /Script/Game.AbilityComponentBase.RemoveAbnormalState // (Native|Public|BlueprintCallable) // @ game+0
	bool ReceiveAbnormalState(enum class EAbnormalState NewState, struct FAbnormalInfo& AbnormalInfo, float Scale, bool bForceApply, bool bNewApply); // Function /Script/Game.AbilityComponentBase.ReceiveAbnormalState // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void PlayAnimMontage_JumpToSection(struct UAnimMontage* AnimMontage, struct FString Section); // Function /Script/Game.AbilityComponentBase.PlayAnimMontage_JumpToSection // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void PlayAnimMontage_JumpToPosition(struct UAnimMontage* AnimMontage, float Position); // Function /Script/Game.AbilityComponentBase.PlayAnimMontage_JumpToPosition // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void PlayAnimMontage(struct UAnimMontage* AnimMontage, bool StopAll, float InPlayRate, struct FName StartSectionName); // Function /Script/Game.AbilityComponentBase.PlayAnimMontage // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void OnRep_StateIDChange(); // Function /Script/Game.AbilityComponentBase.OnRep_StateIDChange // (Final|Native|Protected) // @ game+0
	void OnRep_SetAbnormalStateMask(); // Function /Script/Game.AbilityComponentBase.OnRep_SetAbnormalStateMask // (Final|Native|Public) // @ game+0
	void OnRep_AllSkillFixIds(); // Function /Script/Game.AbilityComponentBase.OnRep_AllSkillFixIds // (Final|Native|Public) // @ game+0
	float NormalEnergyRecoverFunc(float InValue); // Function /Script/Game.AbilityComponentBase.NormalEnergyRecoverFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	float NormalEnergyCostFunc(float InValue, __int32 SkillIndex); // Function /Script/Game.AbilityComponentBase.NormalEnergyCostFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	float ModifyHealth(struct UAbilityComponentBase* InLauncher, struct FHealthChangeValue& nChangeValueData, bool bFloatHp); // Function /Script/Game.AbilityComponentBase.ModifyHealth // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void LoadTrapInfoStatic(__int32 InID, struct FTrapSpawnInfo& OutTrapInfo, struct UAbilityComponentBase* InAbility); // Function /Script/Game.AbilityComponentBase.LoadTrapInfoStatic // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void LoadEmitterStatic(__int32 InID, struct FEmitterInfo& Resultinfo, struct UAbilityComponentBase* InAbility); // Function /Script/Game.AbilityComponentBase.LoadEmitterStatic // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void LoadBulletInfoStatic(__int32 InID, struct FBulletInfo& BulletInfo, struct UAbilityComponentBase* InAbility); // Function /Script/Game.AbilityComponentBase.LoadBulletInfoStatic // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	float LimitControlTime(float KeepTime); // Function /Script/Game.AbilityComponentBase.LimitControlTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FModifierDataInfo K2_LoadModifierInfoStatic(__int32 InID, struct UAbilityComponentBase* InAbility); // Function /Script/Game.AbilityComponentBase.K2_LoadModifierInfoStatic // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FSkillInfo K2_GetSkillInfoStatic(__int32 nSkillId, struct UAbilityComponentBase* InAbility); // Function /Script/Game.AbilityComponentBase.K2_GetSkillInfoStatic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FSkillFixInfo K2_GetSkillFixInfoStatic(__int32 nFixId); // Function /Script/Game.AbilityComponentBase.K2_GetSkillFixInfoStatic // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FEmitterInfo K2_GetFixEmitterStatic(__int32 InID, struct UAbilityComponentBase* InAbility); // Function /Script/Game.AbilityComponentBase.K2_GetFixEmitterStatic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FCharacterCardGrowTemplate K2_GetCardGrowTemplateData(); // Function /Script/Game.AbilityComponentBase.K2_GetCardGrowTemplateData // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool K2_FindOrAddSkill(__int32 InID, __int32 InLevel, bool bQTESkill); // Function /Script/Game.AbilityComponentBase.K2_FindOrAddSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool K2_ApplyAttributeValue(__int32 AttributeId, struct FApplyAttributeValueEvent& ApplyAttributeEvent); // Function /Script/Game.AbilityComponentBase.K2_ApplyAttributeValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void JumpSkill(__int32 InID, __int32 PreID, __int32 InLevel); // Function /Script/Game.AbilityComponentBase.JumpSkill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0
	bool IsTurnable(); // Function /Script/Game.AbilityComponentBase.IsTurnable // (Native|Public|BlueprintCallable) // @ game+0
	enum class EQTESkillCastableType IsQTESkillEnable(); // Function /Script/Game.AbilityComponentBase.IsQTESkillEnable // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsPlayerActionInAbnormalBlock(enum class EPlayerAction PlayerAction); // Function /Script/Game.AbilityComponentBase.IsPlayerActionInAbnormalBlock // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsOpenControlProtection(); // Function /Script/Game.AbilityComponentBase.IsOpenControlProtection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsMoveable(struct TArray<__int32>& InterruptSkill); // Function /Script/Game.AbilityComponentBase.IsMoveable // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool IsModifierHideFightWidget(enum class EFightWidgetPart Part); // Function /Script/Game.AbilityComponentBase.IsModifierHideFightWidget // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsModifierExistMark(__int32 ModifierID, struct FBoneResult& ApplyPartitionInfo, struct FBoneResult& ApplyPartInfo, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.AbilityComponentBase.IsModifierExistMark // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsModifierExistByTagNameMark(struct FString TagName, struct FBoneResult& ApplyPartitionInfo, struct FBoneResult& ApplyPartInfo); // Function /Script/Game.AbilityComponentBase.IsModifierExistByTagNameMark // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsModifierExistByTagName(struct FString TagName); // Function /Script/Game.AbilityComponentBase.IsModifierExistByTagName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsModifierExistByTagMark(struct FGameplayTag& Tag, struct FBoneResult& ApplyPartitionInfo, struct FBoneResult& ApplyPartInfo); // Function /Script/Game.AbilityComponentBase.IsModifierExistByTagMark // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsModifierExistByTag(struct FGameplayTag& Tag); // Function /Script/Game.AbilityComponentBase.IsModifierExistByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsModifierExist(__int32 ModifierID, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.AbilityComponentBase.IsModifierExist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInRootMotionSkill(); // Function /Script/Game.AbilityComponentBase.IsInRootMotionSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInputInAbnormalBlock(__int32 InputType, __int32 SkillIndex); // Function /Script/Game.AbilityComponentBase.IsInputInAbnormalBlock // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInControlProtectionTimeCall(); // Function /Script/Game.AbilityComponentBase.IsInControlProtectionTimeCall // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsDerivedSkill(__int32 SkillID); // Function /Script/Game.AbilityComponentBase.IsDerivedSkill // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsControllable(); // Function /Script/Game.AbilityComponentBase.IsControllable // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsCharacterEnergyAttributeExist(); // Function /Script/Game.AbilityComponentBase.IsCharacterEnergyAttributeExist // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsCastingSkillInAnim(bool bIncludeAdditiveSkill); // Function /Script/Game.AbilityComponentBase.IsCastingSkillInAnim // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsCastingSkill(); // Function /Script/Game.AbilityComponentBase.IsCastingSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsCastingHalfSkill(); // Function /Script/Game.AbilityComponentBase.IsCastingHalfSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAttributeLocked(enum class EAttributeType AttributeType, float LockRange); // Function /Script/Game.AbilityComponentBase.IsAttributeLocked // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsAimEnable(); // Function /Script/Game.AbilityComponentBase.IsAimEnable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InputIntteruptAbnormal(__int32 InputType, __int32 SkillIndex); // Function /Script/Game.AbilityComponentBase.InputIntteruptAbnormal // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InitHitLagValue(struct FHitLag& HitLag); // Function /Script/Game.AbilityComponentBase.InitHitLagValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool HasShield(); // Function /Script/Game.AbilityComponentBase.HasShield // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void HandleFlyImmuneControl(struct UAbilityComponentBase* InLauncher, struct FString& StrDesc); // Function /Script/Game.AbilityComponentBase.HandleFlyImmuneControl // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void HandleFlyHpOrShieldChange(struct FDamageInfo& Info); // Function /Script/Game.AbilityComponentBase.HandleFlyHpOrShieldChange // (Native|Public|HasOutParms) // @ game+0
	void HandleFlyDestroy(struct UAbilityComponentBase* InLauncher, struct FVector& ImpactPoint); // Function /Script/Game.AbilityComponentBase.HandleFlyDestroy // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void HandleFlyAddShield(struct UAbilityComponentBase* InLauncher, float Value); // Function /Script/Game.AbilityComponentBase.HandleFlyAddShield // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GMAttackMonitor(struct FGMRunDamageInfo InRunDamageInfo); // Function /Script/Game.AbilityComponentBase.GMAttackMonitor // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	struct UAvailableSkill* GetSkill(__int32 InID); // Function /Script/Game.AbilityComponentBase.GetSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetRolePropertieValue(enum class EAttributeType AttrType, char Level); // Function /Script/Game.AbilityComponentBase.GetRolePropertieValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetRolePropertieMaxValue(enum class EAttributeType AttrType); // Function /Script/Game.AbilityComponentBase.GetRolePropertieMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetRolePropertieClassValue(struct UAbilityAttribute* InAbility, char Level); // Function /Script/Game.AbilityComponentBase.GetRolePropertieClassValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetRolePropertieClassMaxValue(struct UAbilityAttribute* InAbility); // Function /Script/Game.AbilityComponentBase.GetRolePropertieClassMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetRolePropertieBaseValue(enum class EAttributeType AttrType); // Function /Script/Game.AbilityComponentBase.GetRolePropertieBaseValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetPropertieValueFromString(struct FString RoleName); // Function /Script/Game.AbilityComponentBase.GetPropertieValueFromString // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetPropertieMaxValueFromString(struct FString RoleName); // Function /Script/Game.AbilityComponentBase.GetPropertieMaxValueFromString // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetPartBounceData(struct FBoneResult& PartResult, float& OutBouncePre, float& OutBounceExtraPre); // Function /Script/Game.AbilityComponentBase.GetPartBounceData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetMaxPriorityInCastingSkill(); // Function /Script/Game.AbilityComponentBase.GetMaxPriorityInCastingSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetInvalidSpecifiedSkill(); // Function /Script/Game.AbilityComponentBase.GetInvalidSpecifiedSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<__int32> GetEnchantEmitterIDs(); // Function /Script/Game.AbilityComponentBase.GetEnchantEmitterIDs // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetEnchantDamageTypes(struct TArray<enum class EModifyHPType>& DamageTypes, struct TArray<__int32>& EnchantIDs); // Function /Script/Game.AbilityComponentBase.GetEnchantDamageTypes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<__int32> GetCastingSkillOriginIDs(); // Function /Script/Game.AbilityComponentBase.GetCastingSkillOriginIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetCastingSkillIDInAnim(); // Function /Script/Game.AbilityComponentBase.GetCastingSkillIDInAnim // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<__int32> GetAllDeActiveDeriveSkills(); // Function /Script/Game.AbilityComponentBase.GetAllDeActiveDeriveSkills // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<__int32> GetAllActiveDeriveSkills(); // Function /Script/Game.AbilityComponentBase.GetAllActiveDeriveSkills // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAbilityAttribute* GetAbilityAttributeFromString(struct FString RoleName); // Function /Script/Game.AbilityComponentBase.GetAbilityAttributeFromString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void ForceFinishSpecificSkill(__int32 SkillID); // Function /Script/Game.AbilityComponentBase.ForceFinishSpecificSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool FindQTESkill(__int32 ID); // Function /Script/Game.AbilityComponentBase.FindQTESkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct UModifier*> FindModifiersByTagName(struct FString TagName); // Function /Script/Game.AbilityComponentBase.FindModifiersByTagName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct UModifier*> FindModifiersByTag(struct FGameplayTag& Tag); // Function /Script/Game.AbilityComponentBase.FindModifiersByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct UModifier*> FindModifiersByStateTagName(struct FString TagName, bool bExactMatch); // Function /Script/Game.AbilityComponentBase.FindModifiersByStateTagName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct UModifier*> FindModifiersByStateTag(struct FGameplayTag& Tag, bool bExactMatch); // Function /Script/Game.AbilityComponentBase.FindModifiersByStateTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FModifierExhibitionData FindModifierDataInfoByRuntimeID(__int32 InRunTimeID); // Function /Script/Game.AbilityComponentBase.FindModifierDataInfoByRuntimeID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FModifierExhibitionData FindModifierDataInfo(__int32 ID); // Function /Script/Game.AbilityComponentBase.FindModifierDataInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UModifier* FindModifierByRunTimeID(__int32 RunTimeID); // Function /Script/Game.AbilityComponentBase.FindModifierByRunTimeID // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UModifier* FindModifierByID(__int32 ID, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.AbilityComponentBase.FindModifierByID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct UModifier*> FindAllModifierByID(__int32 ID, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.AbilityComponentBase.FindAllModifierByID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void FindAllModifier(struct TArray<struct UModifier*>& OutModifiers, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.AbilityComponentBase.FindAllModifier // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void EndNewAbnormalControlStateNotify(float ProtectionDuration); // Function /Script/Game.AbilityComponentBase.EndNewAbnormalControlStateNotify // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void DealDamageEffect(bool bStart, struct FPreDamageResultData& PreDamageData); // Function /Script/Game.AbilityComponentBase.DealDamageEffect // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void DeActiveDeriveSkillByModifier(__int32 InModifierRunTimeID, struct TArray<__int32> DeriveSkillIDs); // Function /Script/Game.AbilityComponentBase.DeActiveDeriveSkillByModifier // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Client_ShowCastSkillFailUMG(enum class EFightTipType InTipTyp); // Function /Script/Game.AbilityComponentBase.Client_ShowCastSkillFailUMG // (Net|Native|Event|Public|NetClient) // @ game+0
	void Client_RemoveAppliedModifier(struct FModifierExhibitionData Data); // Function /Script/Game.AbilityComponentBase.Client_RemoveAppliedModifier // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void Client_OverlaidAppliedModifier(struct FModifierSyncOverlapData Data); // Function /Script/Game.AbilityComponentBase.Client_OverlaidAppliedModifier // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void Client_OnPropertyChange(float CurrentVal, float MaxVal, enum class EAttributeType AttributeType, float OldValue, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.AbilityComponentBase.Client_OnPropertyChange // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void Client_NotifyElemExplosionChange(struct AGamePlayerController* lpLuancherController, struct UAbilityComponentBase* lpOriginAbility, enum class EModifyHPType InType, float CurValue, float TriggerValue, float OutTime); // Function /Script/Game.AbilityComponentBase.Client_NotifyElemExplosionChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_NextXBulletAppliedModifier(__int32 ModifierID, __int32 NextXBullet); // Function /Script/Game.AbilityComponentBase.Client_NextXBulletAppliedModifier // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void Client_HitSound(struct UAbilityComponentBase* Target, __int32 ModifyResult, __int32 DamageOriginTypeID); // Function /Script/Game.AbilityComponentBase.Client_HitSound // (Net|Native|Event|Public|NetClient) // @ game+0
	void Client_HitPhysicalSimulated(struct UAbilityComponentBase* Target, struct FApplyHitPhysicalResultData HitPhysicalResult); // Function /Script/Game.AbilityComponentBase.Client_HitPhysicalSimulated // (Net|Native|Event|NetMulticast|Public) // @ game+0
	void Client_FreshModifierRemainTime(__int32 ModifierHashID, __int32 ModifierID, float RemainTime); // Function /Script/Game.AbilityComponentBase.Client_FreshModifierRemainTime // (Net|Native|Event|NetMulticast|Public) // @ game+0
	void Client_ClearAbnormalState(struct FString TypeName, bool bClearAll); // Function /Script/Game.AbilityComponentBase.Client_ClearAbnormalState // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void Client_AddAppliedModifier(struct FModifierExhibitionData Data); // Function /Script/Game.AbilityComponentBase.Client_AddAppliedModifier // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void ClearAllModifierOnDead(); // Function /Script/Game.AbilityComponentBase.ClearAllModifierOnDead // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearAbnormalState(struct FString TypeName, bool bClearAll); // Function /Script/Game.AbilityComponentBase.ClearAbnormalState // (Native|Public|BlueprintCallable) // @ game+0
	bool CheckSkillIDActive(__int32 InSkillId); // Function /Script/Game.AbilityComponentBase.CheckSkillIDActive // (Native|Public|BlueprintCallable) // @ game+0
	bool CheckModifyResultFlag(__int32 InResult, enum class EModifyHPResult InType); // Function /Script/Game.AbilityComponentBase.CheckModifyResultFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool CheckInvalidSpecifiedSkill(__int32 InType); // Function /Script/Game.AbilityComponentBase.CheckInvalidSpecifiedSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckEmitterIDActive(__int32 InEmitterID); // Function /Script/Game.AbilityComponentBase.CheckEmitterIDActive // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckEmitterActive(struct FEmitterInfo& InEmitter); // Function /Script/Game.AbilityComponentBase.CheckEmitterActive // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	float CharacterEnergyRecoverFunc(float InValue); // Function /Script/Game.AbilityComponentBase.CharacterEnergyRecoverFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	float CharacterEnergyDamageRecoverFunc(float HitEnergy, float CriticalHitEnergy, bool bCrit); // Function /Script/Game.AbilityComponentBase.CharacterEnergyDamageRecoverFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	float CharacterEnergyCostFunc(float InValue); // Function /Script/Game.AbilityComponentBase.CharacterEnergyCostFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CastSubSkill(__int32 InID, __int32 Level, struct AActor* Launcher, enum class ESkillCastType InType); // Function /Script/Game.AbilityComponentBase.CastSubSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CastSkill(__int32 InID, enum class ESkillCastType InType, __int32 InLevel, bool bAutoCast, __int32 DelegateCastIndex); // Function /Script/Game.AbilityComponentBase.CastSkill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0
	float BulletRecoverFunc(float InValue); // Function /Script/Game.AbilityComponentBase.BulletRecoverFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	float BullerCostFunc(float InValue); // Function /Script/Game.AbilityComponentBase.BullerCostFunc // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BeginNewAbnormalControlStateNotify(); // Function /Script/Game.AbilityComponentBase.BeginNewAbnormalControlStateNotify // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	bool ApplyModifier(struct UModifier* Modifier); // Function /Script/Game.AbilityComponentBase.ApplyModifier // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAbilityComponentBase* ApplyAttributeChange(struct UAbilityComponentBase* TargetAbility, struct FAttributeChangeValue& ChangeInfo, struct FVector ApplyLocation, struct FVector OriginLocation); // Function /Script/Game.AbilityComponentBase.ApplyAttributeChange // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void AppendHealthValue(struct UAbilityComponentBase* InLauncher, float fValue, struct FHealthChangeValue& HealthChange); // Function /Script/Game.AbilityComponentBase.AppendHealthValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AddSpecificEnchantInfo(__int32 ID); // Function /Script/Game.AbilityComponentBase.AddSpecificEnchantInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct UAvailableSkill*> AddSkill(__int32 InID, __int32 InLevel, bool bQTESkill, bool bWeaponSkill, __int32 InIndex); // Function /Script/Game.AbilityComponentBase.AddSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddPartBounceData(struct FString& PartName, float InBouncePre, float InBounceExtraPre); // Function /Script/Game.AbilityComponentBase.AddPartBounceData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AddEnmity(struct UAbilityComponentBase* TargetAbility, float Value, enum class EEnmityType Type, enum class EEnmityClearType ClearType); // Function /Script/Game.AbilityComponentBase.AddEnmity // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddEnchantEmitter(__int32 InEmitterID, struct UAbilityComponentBase* EmitterSourceAbility, bool bApplyBySource, __int32 InLevel); // Function /Script/Game.AbilityComponentBase.AddEnchantEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddEnchantDamageByName(struct FString NewDamageTypeName); // Function /Script/Game.AbilityComponentBase.AddEnchantDamageByName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddEnchantDamage(enum class EModifyHPType NewDamageType); // Function /Script/Game.AbilityComponentBase.AddEnchantDamage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ActiveDeriveSkillByModifier(__int32 InModifierRunTimeID, struct TArray<__int32> DeriveSkillIDs); // Function /Script/Game.AbilityComponentBase.ActiveDeriveSkillByModifier // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AbilityComponent
// Size: 0x0 (Inherited: 0x0)
struct UAbilityComponent : UAbilityComponentBase {
	bool bCanFireNow; // 0x0(0x0)
	bool bAutoAimEnable; // 0x0(0x0)
	char pad_D5A[0x6]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCharacterDie; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCharacterFire; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCharacterFireStop; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAbnormalStateUpdate; // 0x0(0x0)
	struct FMulticastInlineDelegate FOnCurrentAbnormalStateReset; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAdditiveHitReceive; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCastEnergyStorage; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSkillReplace; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCastSkillByIndex; // 0x0(0x0)
	char pad_DF0[0xC]; // 0x0(0x0)
	float RetainWeaponRaising; // 0x0(0x0)
	enum class ESkillActionType CurrentSkillActionType; // 0x0(0x0)
	bool bKeepWeaponRaisingOnSkillAnim; // 0x0(0x0)
	char pad_E02[0x6]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct UWeaponAbiliityComponent>> AccessoryAbilitys; // 0x0(0x0)
	__int32 ReloadSkill; // 0x0(0x0)
	char pad_E1C[0x4]; // 0x0(0x0)
	struct TArray<__int32> DodgeSkillIDs; // 0x0(0x0)
	struct TArray<__int32> CrossSkillIDs; // 0x0(0x0)
	struct TArray<__int32> BunkerInteractSkillIDs; // 0x0(0x0)
	struct TArray<__int32> BunkerEdgeBackSkillIDs; // 0x0(0x0)
	struct TArray<__int32> FireSkills; // 0x0(0x0)
	struct TArray<__int32> NormalSkillID1; // 0x0(0x0)
	struct TArray<__int32> NormalSkillID2; // 0x0(0x0)
	struct TArray<__int32> SupSkillID; // 0x0(0x0)
	struct TArray<__int32> ReplaceDodgeNormal; // 0x0(0x0)
	struct TArray<__int32> RushSkillID; // 0x0(0x0)
	struct TArray<__int32> SupportSkillID; // 0x0(0x0)
	struct TArray<struct FTempRelaceSkillData> TempReplaceSkill; // 0x0(0x0)
	struct TArray<struct FTempRelaceSkillData> DirtyTempSkill; // 0x0(0x0)
	char bIsSpawn : 1; // 0x0(0x0)
	char pad_EF0_1 : 7; // 0x0(0x0)
	char pad_EF1[0x7]; // 0x0(0x0)
	struct FTimerHandle PasueFrameCountdownTimerHandle; // 0x0(0x0)
	bool bPasueFrame; // 0x0(0x0)
	char pad_F01[0x13]; // 0x0(0x0)
	bool bWaitSKillBackBunker; // 0x0(0x0)
	char pad_F15[0x3]; // 0x0(0x0)

	void TickFreshExhibitionSkillInfo(float DeltaTime); // Function /Script/Game.AbilityComponent.TickFreshExhibitionSkillInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_CallOnCharacterFire(struct FFireInfo Info, bool bStartFire); // Function /Script/Game.AbilityComponent.Server_CallOnCharacterFire // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void ReplaceSkillAtIndex(__int32 ArrayIndex, __int32 SkillID, float ActiveTime, __int32 SymbiosisModifierID); // Function /Script/Game.AbilityComponent.ReplaceSkillAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ReceiveAdditiveHitNotify(struct FVector HitDirection, float Strength, struct FString BoneName); // Function /Script/Game.AbilityComponent.ReceiveAdditiveHitNotify // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void ReceiveAbnormalNotify(struct FAbnormalInfo AbnormalInfo, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.AbilityComponent.ReceiveAbnormalNotify // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void PlayerExitBunkerLeaned(bool bFireStop, bool bAimStop); // Function /Script/Game.AbilityComponent.PlayerExitBunkerLeaned // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayerEnterBunkerLeaned(); // Function /Script/Game.AbilityComponent.PlayerEnterBunkerLeaned // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsRushSkill(__int32 SkillID); // Function /Script/Game.AbilityComponent.IsRushSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsRunAdvancedAction(); // Function /Script/Game.AbilityComponent.IsRunAdvancedAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsReloadSkillForMontage(struct UAnimMontage* InMontage); // Function /Script/Game.AbilityComponent.IsReloadSkillForMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsReloadSkill(__int32 ID); // Function /Script/Game.AbilityComponent.IsReloadSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsQTESkill(__int32 ID); // Function /Script/Game.AbilityComponent.IsQTESkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInStaySkill(); // Function /Script/Game.AbilityComponent.IsInStaySkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsDodgeStopAdvance(); // Function /Script/Game.AbilityComponent.IsDodgeStopAdvance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsDodgeSkill(__int32 ID); // Function /Script/Game.AbilityComponent.IsDodgeSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsCrossSkill(__int32 ID); // Function /Script/Game.AbilityComponent.IsCrossSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsBunkerSkill(__int32 ID); // Function /Script/Game.AbilityComponent.IsBunkerSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsBunkerEdgeBackSkill(__int32 ID); // Function /Script/Game.AbilityComponent.IsBunkerEdgeBackSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsBlendToAdvanceAction(); // Function /Script/Game.AbilityComponent.IsBlendToAdvanceAction // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsAdvancedAction(); // Function /Script/Game.AbilityComponent.IsAdvancedAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetTempSkillRemainingActiveTime(__int32 Index, float& CurrentTime, float& MaxTime); // Function /Script/Game.AbilityComponent.GetTempSkillRemainingActiveTime // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	enum class ERecordSkillCostType GetSkillTypeOfRecord(__int32 SkillID); // Function /Script/Game.AbilityComponent.GetSkillTypeOfRecord // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetSkillIndexBySelf(__int32 SkillID); // Function /Script/Game.AbilityComponent.GetSkillIndexBySelf // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetSkillIndexByAll(__int32 SkillID); // Function /Script/Game.AbilityComponent.GetSkillIndexByAll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetSkillIndex(__int32 SkillID); // Function /Script/Game.AbilityComponent.GetSkillIndex // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<__int32> GetSkillGroupByIndex(__int32 Index); // Function /Script/Game.AbilityComponent.GetSkillGroupByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetMasterSkillIndex(__int32 SkillID); // Function /Script/Game.AbilityComponent.GetMasterSkillIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class ESkillCastFailType GetDodgeSkillCastFailType(__int32 DodgeIndex); // Function /Script/Game.AbilityComponent.GetDodgeSkillCastFailType // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class EButtonType GetButtonTypeByIndex(__int32 Index); // Function /Script/Game.AbilityComponent.GetButtonTypeByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class EButtonCastType GetButtonCastTypeByIndex(__int32 Index); // Function /Script/Game.AbilityComponent.GetButtonCastTypeByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct UWeaponAbiliityComponent*> GetAllAccessoryAbilities(); // Function /Script/Game.AbilityComponent.GetAllAccessoryAbilities // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckSkillCastableByIndex(__int32 Index); // Function /Script/Game.AbilityComponent.CheckSkillCastableByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckEnterBunkerSkillStop(__int32 InSkillId); // Function /Script/Game.AbilityComponent.CheckEnterBunkerSkillStop // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckDodgeSkill(__int32 DodgeIndex); // Function /Script/Game.AbilityComponent.CheckDodgeSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckCrossSkill(__int32 CrossIndex); // Function /Script/Game.AbilityComponent.CheckCrossSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckBunkerInteractSkill(__int32 BunkerInteractIndex); // Function /Script/Game.AbilityComponent.CheckBunkerInteractSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CastSkillIgnoreSkillCondition(__int32 SkillID); // Function /Script/Game.AbilityComponent.CastSkillIgnoreSkillCondition // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CastSkillByIndex(__int32 Index, enum class ESkillCastType InType, float PressTime); // Function /Script/Game.AbilityComponent.CastSkillByIndex // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void CastReloadSkill(bool bIsAutoReload); // Function /Script/Game.AbilityComponent.CastReloadSkill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void CastFightPowerToRushFail(); // Function /Script/Game.AbilityComponent.CastFightPowerToRushFail // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CastFightPowerFail(__int32 SkillIndex); // Function /Script/Game.AbilityComponent.CastFightPowerFail // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CastDodgeSkill(__int32 DodgeIndex); // Function /Script/Game.AbilityComponent.CastDodgeSkill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void CastCrossSkill(__int32 CrossIndex); // Function /Script/Game.AbilityComponent.CastCrossSkill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void CastBunkerInteractSkill(__int32 BunkerInteractIndex); // Function /Script/Game.AbilityComponent.CastBunkerInteractSkill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void CastAccessorySkill(__int32 ID); // Function /Script/Game.AbilityComponent.CastAccessorySkill // (Native|Public|BlueprintCallable) // @ game+0
	void CallOnCharacterFire(struct FFireInfo Info, bool bStartFire); // Function /Script/Game.AbilityComponent.CallOnCharacterFire // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AbilityComponent_AI
// Size: 0x0 (Inherited: 0x0)
struct UAbilityComponent_AI : UAbilityComponent {
};

 // Class /Script/Game.AbilityComponent_Bunker
// Size: 0x0 (Inherited: 0x0)
struct UAbilityComponent_Bunker : UAbilityComponent {
};

 // Class /Script/Game.AbilityComponent_Destructible
// Size: 0x0 (Inherited: 0x0)
struct UAbilityComponent_Destructible : UAbilityComponentBase {
	struct UAbilityComponentBase* ParenAbility; // 0x0(0x0)
};

 // Class /Script/Game.AbilityComponent_KillZone
// Size: 0x0 (Inherited: 0x0)
struct UAbilityComponent_KillZone : UAbilityComponentBase {
};

 // Class /Script/Game.AbilityComponent_LevelDrop
// Size: 0x0 (Inherited: 0x0)
struct UAbilityComponent_LevelDrop : UAbilityComponentBase {
};

 // Class /Script/Game.MagicAssets
// Size: 0x0 (Inherited: 0x0)
struct UMagicAssets : UDataAsset {
	struct FString MagicName; // 0x0(0x0)
	struct FString MarkInfo; // 0x0(0x0)
	struct TArray<struct FParamInfo> Params; // 0x0(0x0)
	bool bOnBulletHit; // 0x0(0x0)
	bool bPreDeadExec; // 0x0(0x0)
	bool bDeadCheck; // 0x0(0x0)
	bool bCheckHitType; // 0x0(0x0)
	char pad_64[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.ModifierPostProcess
// Size: 0x0 (Inherited: 0x0)
struct UModifierPostProcess : UObject {
	enum class EPostProcessType ProcessType; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)
	struct UPostProcessParams* Params; // 0x0(0x0)
};

 // Class /Script/Game.ModifierSpecialEffectObject
// Size: 0x0 (Inherited: 0x0)
struct UModifierSpecialEffectObject : UObject {
	char pad_28[0xC]; // 0x0(0x0)
	__int32 EffectType; // 0x0(0x0)
	struct TArray<struct FParamInfo> Params; // 0x0(0x0)
	struct TWeakObjectPtr<struct UAbilityComponentBase> Launcher; // 0x0(0x0)
	struct TWeakObjectPtr<struct UWeaponFireModifierEffect> FireModifierEffect; // 0x0(0x0)
	struct TWeakObjectPtr<struct UModifier> OwnerModifier; // 0x0(0x0)
	__int32 Level; // 0x0(0x0)
	char pad_64[0x4]; // 0x0(0x0)
	struct TArray<struct FModifierDamageEffect> BulletDamageEffects; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> DamageEffectConditions; // 0x0(0x0)
	struct TArray<struct FAttributeChangeValue> CacheTempEffectChangeValue; // 0x0(0x0)

	void ReceiveOnWeaponFire(char ForceShootCount); // Function /Script/Game.ModifierSpecialEffectObject.ReceiveOnWeaponFire // (Event|Public|BlueprintEvent) // @ game+0
	void OnNotifyModifyHealth(bool bStart, struct FPreDamageResultData& PreDamageData, bool bClearTempAttribute); // Function /Script/Game.ModifierSpecialEffectObject.OnNotifyModifyHealth // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AFireBullet* K2_WeaponSpawnSpecialBullet(struct AActor* lpOwner, struct UWeaponAbiliityComponent* AccessoryAbility, struct FVector& nStartPosition, struct FVector& nShootDirection, __int32 BulletID); // Function /Script/Game.ModifierSpecialEffectObject.K2_WeaponSpawnSpecialBullet // (Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	void K2_ReceiveTrigger(struct UAbilityComponentBase* InTarget, struct FVector& ApplyLocation, struct FQueryResult& Result); // Function /Script/Game.ModifierSpecialEffectObject.K2_ReceiveTrigger // (Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ReceiveInitialize(struct TArray<struct FParamInfo>& Info); // Function /Script/Game.ModifierSpecialEffectObject.K2_ReceiveInitialize // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ReceiveDeActive(); // Function /Script/Game.ModifierSpecialEffectObject.K2_ReceiveDeActive // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ReceiveActive(); // Function /Script/Game.ModifierSpecialEffectObject.K2_ReceiveActive // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_OnNotifyActiveChanged(bool bNewActive); // Function /Script/Game.ModifierSpecialEffectObject.K2_OnNotifyActiveChanged // (Event|Public|BlueprintEvent) // @ game+0
	float K2_GetBulletExtraDamageScaler(); // Function /Script/Game.ModifierSpecialEffectObject.K2_GetBulletExtraDamageScaler // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	float K2_GetBulletExtraDamage(); // Function /Script/Game.ModifierSpecialEffectObject.K2_GetBulletExtraDamage // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	float K2_GetBulletExtraCritical(); // Function /Script/Game.ModifierSpecialEffectObject.K2_GetBulletExtraCritical // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	void K2_BulletHitTarger(struct UAbilityComponentBase* InTarget, struct FVector& ApplyLocation, struct FQueryResult& Result, bool bBeforeDamage, __int32 FireTimeId); // Function /Script/Game.ModifierSpecialEffectObject.K2_BulletHitTarger // (Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0
	struct UAbilityComponentBase* GetLuancher(enum class EModifierExecEmitterType InType); // Function /Script/Game.ModifierSpecialEffectObject.GetLuancher // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetBulletExtraDamageScaler(); // Function /Script/Game.ModifierSpecialEffectObject.GetBulletExtraDamageScaler // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetBulletExtraDamage(); // Function /Script/Game.ModifierSpecialEffectObject.GetBulletExtraDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetBulletExtraCritical(); // Function /Script/Game.ModifierSpecialEffectObject.GetBulletExtraCritical // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.CalcAttributeSpecialFunction
// Size: 0x0 (Inherited: 0x0)
struct UCalcAttributeSpecialFunction : UObject {

	float CaclValue(struct UAbilityComponentBase* InLauncher, struct UAbilityComponentBase* InTarget, struct TArray<struct FParamInfo>& Params, struct FPreDamageResultData& PreDamageData, __int32 InSkillLevel); // Function /Script/Game.CalcAttributeSpecialFunction.CaclValue // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.GMAttribute
// Size: 0x0 (Inherited: 0x0)
struct UGMAttribute : UObject {
	struct FString Name; // 0x0(0x0)
	struct FString CardNum; // 0x0(0x0)
	struct FString SupportNum; // 0x0(0x0)
	struct FString WeaponNum; // 0x0(0x0)
	struct FString TotalNum; // 0x0(0x0)
	struct FString TotalNum2; // 0x0(0x0)
};

 // Class /Script/Game.AbilityFunctionLibrary
// Size: 0x0 (Inherited: 0x0)
struct UAbilityFunctionLibrary : UBlueprintFunctionLibrary {

	void WriteKeyToCurveFloat(struct UCurveFloat* Curve, float Time, float Value); // Function /Script/Game.AbilityFunctionLibrary.WriteKeyToCurveFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float VerifyRealDistance(struct FVector& StartLoc, struct FQueryResult& QR, enum class ESearchTargetPartType PartType); // Function /Script/Game.AbilityFunctionLibrary.VerifyRealDistance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool StateBlockTypeCheck(struct UAbilityComponentBase* CheckTarget, struct TArray<struct FString> BlockType); // Function /Script/Game.AbilityFunctionLibrary.StateBlockTypeCheck // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SaveStringToSpecificFile(struct FString Filename, struct FString Content); // Function /Script/Game.AbilityFunctionLibrary.SaveStringToSpecificFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ResetCurve(struct UCurveFloat* Curve); // Function /Script/Game.AbilityFunctionLibrary.ResetCurve // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithSquareInfo(struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Square& SquareInfo, struct UAbilityComponentBase* Querier, struct FTargetsQueryInfo& QueryInfo, struct FQueryExcuInfo& ExcuInfo); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsWithSquareInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithEmitterInfoForTransform(struct UAbilityComponentBase* Querier, struct AActor* CastActor, struct AGameCharacter* Instigator, __int32 EmitterID); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsWithEmitterInfoForTransform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithEmitterInfoForModifier(struct UAbilityComponentBase* Querier, struct AActor* CastActor, __int32 EmitterID, struct AActor* ModifierOwner); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsWithEmitterInfoForModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithEmitterInfo(struct UAbilityComponentBase* Querier, struct AActor* CastActor, struct AGameCharacter* Instigator, __int32 EmitterID); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsWithEmitterInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithCylinderInfo(struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Cylinder& CylinderInfo, struct UAbilityComponentBase* Querier, struct FTargetsQueryInfo& QueryInfo, struct FQueryExcuInfo& ExcuInfo); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsWithCylinderInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithCircleInfoInCreateCollision(struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Circle& CircleInfo, struct UAbilityComponentBase* Querier, struct FTargetsQueryInfo& QueryInfo, struct FQueryExcuInfo& ExcuInfo); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsWithCircleInfoInCreateCollision // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithCircleInfo(struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Circle& CircleInfo, struct UAbilityComponentBase* Querier, struct FTargetsQueryInfo& QueryInfo, struct FQueryExcuInfo& ExcuInfo); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsWithCircleInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithCapsuleInfo(struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Capsual& CapsuleInfo, struct UAbilityComponentBase* Querier, struct FTargetsQueryInfo& QueryInfo, struct FQueryExcuInfo& ExcuInfo); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsWithCapsuleInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsInQuerierTrap(struct UAbilityComponentBase* Querier, enum class EApplyLocationType LocationType, float RandRadius); // Function /Script/Game.AbilityFunctionLibrary.QueryTargetsInQuerierTrap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryRandomLocWithSquareInfo(__int32 Num, enum class EApplyLocationType LocationType, struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Square& SquareInfo, struct UAbilityComponentBase* Querier); // Function /Script/Game.AbilityFunctionLibrary.QueryRandomLocWithSquareInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryRandomLocWithCylinder(__int32 Num, enum class EApplyLocationType LocationType, struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Cylinder& CylinderInfo, struct UAbilityComponentBase* Querier); // Function /Script/Game.AbilityFunctionLibrary.QueryRandomLocWithCylinder // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryRandomLocWithCircleInfo(__int32 Num, enum class EApplyLocationType LocationType, struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Circle& CircleInfo, struct UAbilityComponentBase* Querier); // Function /Script/Game.AbilityFunctionLibrary.QueryRandomLocWithCircleInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryRandomLocWithCapsule(__int32 Num, enum class EApplyLocationType LocationType, struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Capsual& CapsualInfo, struct UAbilityComponentBase* Querier); // Function /Script/Game.AbilityFunctionLibrary.QueryRandomLocWithCapsule // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool QueryEqual(struct FQueryResult& Query1, struct FQueryResult& Query2); // Function /Script/Game.AbilityFunctionLibrary.QueryEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct AActor*> QueryCharacterAndAccessoryWithCircleInfo(struct FVector& CenterLocation, struct FRotator& Rotator, struct FSearchShape_Circle& CircleInfo, enum class ETargetType TargetType, struct UAbilityComponentBase* Querier, bool bUseRelationCheck, struct TArray<enum class ECampRelation> TargetRelations, struct FGameplayTagContainer AccessoryTagContainer); // Function /Script/Game.AbilityFunctionLibrary.QueryCharacterAndAccessoryWithCircleInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool ProcessBpFunction(struct UObject* ObjectRef, struct FName& FuncName); // Function /Script/Game.AbilityFunctionLibrary.ProcessBpFunction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FVector MultiLIneTraceToBlockLocation(struct USkillEmitter* EmitterRef, bool bApplyEffect, struct FTransform& Transform, struct FBulletInfo& RayInfo, float RayMaxDistance); // Function /Script/Game.AbilityFunctionLibrary.MultiLIneTraceToBlockLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FQueryResult MakeQueryResult_SpecificLocation(struct AActor* Target, struct FVector Location); // Function /Script/Game.AbilityFunctionLibrary.MakeQueryResult_SpecificLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FQueryResult MakeQueryResult_AdjustToTarget(struct AActor* Target, enum class EApplyLocationType LocationType, float RandRadius); // Function /Script/Game.AbilityFunctionLibrary.MakeQueryResult_AdjustToTarget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool LoadStringToSpecificFile(struct FString Filename, struct FString& Content); // Function /Script/Game.AbilityFunctionLibrary.LoadStringToSpecificFile // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FHitResult LineTraceSingle(struct FVector& StartLoc, struct FVector& EndLoc, enum class ECollisionChannel Channel, struct AActor* Launcher, struct TArray<struct AActor*>& IgnoreActors); // Function /Script/Game.AbilityFunctionLibrary.LineTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FHitResult> LineTraceMulti(struct FVector& StartLoc, struct FVector& EndLoc, enum class ECollisionChannel Channel, struct AActor* Launcher, struct TArray<struct AActor*>& IgnoreActors, bool bOnlyCharacter); // Function /Script/Game.AbilityFunctionLibrary.LineTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool IsServer(struct AActor* Outer); // Function /Script/Game.AbilityFunctionLibrary.IsServer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsRelavantSkill(__int32 SkillID1, __int32 SkillID2); // Function /Script/Game.AbilityFunctionLibrary.IsRelavantSkill // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsMasterSkill(struct UAbilityComponent* InAbility, __int32 InSkillId, __int32 InType); // Function /Script/Game.AbilityFunctionLibrary.IsMasterSkill // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsMainSkill(struct UAbilityComponent* InAbility, __int32 InSkillId, __int32 InType); // Function /Script/Game.AbilityFunctionLibrary.IsMainSkill // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsLocationInSquare(struct FVector& TargetLoc, struct FVector& CenterLoc, struct FRotator& Rotator, struct FSearchShape_Square& SquareInfo); // Function /Script/Game.AbilityFunctionLibrary.IsLocationInSquare // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool IsLocationInCylinder(struct FVector& TargetLoc, struct FVector& CenterLoc, struct FRotator& Rotator, struct FSearchShape_Cylinder& CylinderInfo); // Function /Script/Game.AbilityFunctionLibrary.IsLocationInCylinder // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool IsLocationInCircle(struct FVector& TargetLoc, struct FVector& CenterLoc, struct FRotator& Rotator, struct FSearchShape_Circle& CircleInfo); // Function /Script/Game.AbilityFunctionLibrary.IsLocationInCircle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool IsLocationInCapsule(struct FVector& TargetLoc, struct FVector& CenterLoc, struct FRotator& Rotator, struct FSearchShape_Capsual& CapsualInfo); // Function /Script/Game.AbilityFunctionLibrary.IsLocationInCapsule // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool IsJustNeedModifierToState(struct UAbilityComponentBase* CheckTarget, struct FString StateName, __int32 ModifierID); // Function /Script/Game.AbilityFunctionLibrary.IsJustNeedModifierToState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsJustNeedAbnormalToState(struct UAbilityComponentBase* CheckTarget, struct FString StateName, enum class EAbnormalState AbnormalState); // Function /Script/Game.AbilityFunctionLibrary.IsJustNeedAbnormalToState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsIgnoreStateBlockTypes(struct UAbilityComponentBase* CheckTarget, struct TArray<struct FString> StateNames, bool bCheckAnd); // Function /Script/Game.AbilityFunctionLibrary.IsIgnoreStateBlockTypes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsIgnoreOneStateBlockType(struct UAbilityComponentBase* CheckTarget, struct FString StateName); // Function /Script/Game.AbilityFunctionLibrary.IsIgnoreOneStateBlockType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsEnermy(struct AActor* Launcher, struct AActor* Target); // Function /Script/Game.AbilityFunctionLibrary.IsEnermy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsClient(struct AActor* Outer); // Function /Script/Game.AbilityFunctionLibrary.IsClient // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsBpFunctionExsit(struct UObject* ObjectRef, struct FName& FuncName); // Function /Script/Game.AbilityFunctionLibrary.IsBpFunctionExsit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool IsActorBelongToTarget(struct AActor* CheckActor, struct AActor* CheckTarget); // Function /Script/Game.AbilityFunctionLibrary.IsActorBelongToTarget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsAbnormalModifierID(__int32 ModifierID); // Function /Script/Game.AbilityFunctionLibrary.IsAbnormalModifierID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct ACharacterAccessory* GetWeaponClass(__int32 WeaponID); // Function /Script/Game.AbilityFunctionLibrary.GetWeaponClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FValueRangeInfo> GetValueRangeInfoArray(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetValueRangeInfoArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FSkillInfo GetSuperSkillInfoFromCharacterID(__int32 CharacterTemplateID); // Function /Script/Game.AbilityFunctionLibrary.GetSuperSkillInfoFromCharacterID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<float> GetStringfloatArrayValue(struct FString Info); // Function /Script/Game.AbilityFunctionLibrary.GetStringfloatArrayValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FString> GetStringArrayValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetStringArrayValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FVector GetSocketLocationFromActor(struct FName Socket, struct AActor* Target); // Function /Script/Game.AbilityFunctionLibrary.GetSocketLocationFromActor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	__int32 GetSkillDamageType(struct FString InStrSkillClass); // Function /Script/Game.AbilityFunctionLibrary.GetSkillDamageType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetSkillClassType(struct FString InStrSkillClass); // Function /Script/Game.AbilityFunctionLibrary.GetSkillClassType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetResizeNumParamsFromAbnormalState(enum class EAbnormalState AbnormalType); // Function /Script/Game.AbilityFunctionLibrary.GetResizeNumParamsFromAbnormalState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class ECampRelation GetRelationBetweenAWithB(struct AActor* TargetA, struct AActor* TargetB); // Function /Script/Game.AbilityFunctionLibrary.GetRelationBetweenAWithB // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class ECampRelation GetRelation(struct AActor* Launcher, struct AActor* Target); // Function /Script/Game.AbilityFunctionLibrary.GetRelation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetQueryResultsFromHitResult(struct TArray<struct FHitResult>& HitResults, struct UAbilityComponentBase* Querier, struct FTargetsQueryInfo& QueryInfo, struct FQueryExcuInfo& ExcuInfo, struct TArray<struct FQueryResult>& QueryResults); // Function /Script/Game.AbilityFunctionLibrary.GetQueryResultsFromHitResult // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TMap<struct FVector2D, struct FColor> GetPictureRGBFromPath(struct FString Filename, __int32& XSize, __int32& YSize, __int32 Interval); // Function /Script/Game.AbilityFunctionLibrary.GetPictureRGBFromPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FBoneResult GetPartResult(struct FHitResult& HitResult); // Function /Script/Game.AbilityFunctionLibrary.GetPartResult // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FBoneResult GetPartitionResult(struct FHitResult& HitResult); // Function /Script/Game.AbilityFunctionLibrary.GetPartitionResult // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 GetParamintValueForLevel(struct FParamInfo& Info, __int32 InLevel); // Function /Script/Game.AbilityFunctionLibrary.GetParamintValueForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetParamintValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetParamintValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<__int32> GetParamInt32ArrayValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetParamInt32ArrayValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetParamGDPLValue(struct FParamInfo& Info, __int32& G, __int32& D, __int32& P, __int32& L); // Function /Script/Game.AbilityFunctionLibrary.GetParamGDPLValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	float GetParamfloatValueForLevel(struct FParamInfo& Info, __int32 InLevel); // Function /Script/Game.AbilityFunctionLibrary.GetParamfloatValueForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	float GetParamfloatValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetParamfloatValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<float> GetParamfloatArrayValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetParamfloatArrayValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool GetParamboolValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetParamboolValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AGameCharacter* GetOriginPlayerByAbility(struct UAbilityComponentBase* InAbility); // Function /Script/Game.AbilityFunctionLibrary.GetOriginPlayerByAbility // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameCharacter* GetOriginPlayer(struct AGameCharacter* InCharacter); // Function /Script/Game.AbilityFunctionLibrary.GetOriginPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int64 GetObjectHashIndex(struct UObject* ObjectRef); // Function /Script/Game.AbilityFunctionLibrary.GetObjectHashIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetHitTypeForHit(struct FHitResult& InHit, float& DamageScale, bool bFindScaredCrow); // Function /Script/Game.AbilityFunctionLibrary.GetHitTypeForHit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	float GetHitType(struct AActor* InTarget, struct FBoneResult& InResult, enum class EEmitterDamageType OverrideDamageType, bool& bWeaknessDamage, bool& bInefficientDamage); // Function /Script/Game.AbilityFunctionLibrary.GetHitType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 GetHitPartType(struct AActor* InTarget, struct FBoneResult& InResult, float& DamageScale); // Function /Script/Game.AbilityFunctionLibrary.GetHitPartType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FVector GetFVectorValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetFVectorValue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FVector2D GetFVector2DValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetFVector2DValue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FRotator GetFRotatorValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetFRotatorValue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool GetEmitterResult(struct UAbilityComponentBase* AbilityQuerier, __int32 SkillID, __int32 EmitterID, struct TArray<struct FQueryResult>& Queries); // Function /Script/Game.AbilityFunctionLibrary.GetEmitterResult // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FVector GetCheckActorLocation(enum class EHitOriginLocation HitLocationType, struct AActor* CheckActor, struct FString OriginSocketName); // Function /Script/Game.AbilityFunctionLibrary.GetCheckActorLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct USceneComponent* GetCharacterMeshComponentBySocket(struct FName Socket, struct AGameCharacter* Character); // Function /Script/Game.AbilityFunctionLibrary.GetCharacterMeshComponentBySocket // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<enum class ECampRelation> GetCampRelationValue(struct FParamInfo& Info); // Function /Script/Game.AbilityFunctionLibrary.GetCampRelationValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct UModifier*> GetBlockStateModifiersInTarget(struct UAbilityComponentBase* CheckTarget, struct TArray<struct FString> BlockType); // Function /Script/Game.AbilityFunctionLibrary.GetBlockStateModifiersInTarget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<enum class EAppointTargetType> GetAppointTargetType(struct AActor* Launcher, struct AActor* Target, bool& bHasResult); // Function /Script/Game.AbilityFunctionLibrary.GetAppointTargetType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct AGameCharacter*> GetAllAppendage(struct AGameCharacter* AppendageOwner); // Function /Script/Game.AbilityFunctionLibrary.GetAllAppendage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetAllAbility(struct UObject* WorldContextObject, struct TArray<struct UAbilityComponentBase*>& OutAllAbility); // Function /Script/Game.AbilityFunctionLibrary.GetAllAbility // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString FormatRGBResultToString(__int32 XSize, __int32 YSize, struct TMap<struct FVector2D, struct FColor>& Points); // Function /Script/Game.AbilityFunctionLibrary.FormatRGBResultToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool FindTeleportSpot(struct AActor* TestActor, struct FVector TestLocation, struct FRotator TestRotation, struct FVector& ResultLoc); // Function /Script/Game.AbilityFunctionLibrary.FindTeleportSpot // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FName FindTargetViewPoint(struct USceneComponent* TargetComponent, struct FVector& OutWorldLocation, struct FVector& OutOffsetLocaiton); // Function /Script/Game.AbilityFunctionLibrary.FindTargetViewPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector FindTargetFloorPoint(struct AActor* Target); // Function /Script/Game.AbilityFunctionLibrary.FindTargetFloorPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FVector FindLocationFloorPoint(struct AActor* QueryLauncher, struct FVector TargetLocation); // Function /Script/Game.AbilityFunctionLibrary.FindLocationFloorPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	void FindCollisionClassAndFindAttachToTarget(struct USkeletalMeshComponent* MeshComp, struct FName& CollisionTag, __int32 SkillLevel, struct UAnimNotifyState_NewCollision* AnimNotifyState); // Function /Script/Game.AbilityFunctionLibrary.FindCollisionClassAndFindAttachToTarget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void FindAndDestroyCollisionComponent(struct USkeletalMeshComponent* MeshComp, struct FName& CollisionTag); // Function /Script/Game.AbilityFunctionLibrary.FindAndDestroyCollisionComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FVector FindActorViewPoint(struct AActor* InActor); // Function /Script/Game.AbilityFunctionLibrary.FindActorViewPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckWeaknessPart(struct AActor* InTarget, struct FBoneResult& InResult); // Function /Script/Game.AbilityFunctionLibrary.CheckWeaknessPart // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool CheckSkillDamageType(enum class EModifyHPType DamageType, __int32 InType); // Function /Script/Game.AbilityFunctionLibrary.CheckSkillDamageType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckSkillClassType(struct UAbilityComponent* InAbility, __int32 InSkillId, __int32 InType); // Function /Script/Game.AbilityFunctionLibrary.CheckSkillClassType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool CheckRelation(enum class ECampRelation Relation, struct AActor* Launcher, struct AActor* Target); // Function /Script/Game.AbilityFunctionLibrary.CheckRelation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FVector CalcShootPosition(struct AGameCharacter* Querier); // Function /Script/Game.AbilityFunctionLibrary.CalcShootPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	bool BoneResultEqual(struct FBoneResult& Query1, struct FBoneResult& Query2); // Function /Script/Game.AbilityFunctionLibrary.BoneResultEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct TMap<struct FVector2D, struct FColor> AnalysisStringToRGBResult(struct FString Content, __int32& XSize, __int32& YSize); // Function /Script/Game.AbilityFunctionLibrary.AnalysisStringToRGBResult // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AddCharacterOffset(struct AGameCharacter* CharacterRef, struct FVector Offset); // Function /Script/Game.AbilityFunctionLibrary.AddCharacterOffset // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AbilityLibrary
// Size: 0x0 (Inherited: 0x0)
struct UAbilityLibrary : UBlueprintFunctionLibrary {

	void StartOrderTransparentMarking(struct AActor* TargetOwner, struct AActor* Marker); // Function /Script/Game.AbilityLibrary.StartOrderTransparentMarking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void StartNoReceiveDecals(struct AActor* Actor); // Function /Script/Game.AbilityLibrary.StartNoReceiveDecals // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveCircleWarning(__int32 ID); // Function /Script/Game.AbilityLibrary.RemoveCircleWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReleaceSkillDesc(struct FString FilePath, __int32 InHeaderLine, struct FString EndName); // Function /Script/Game.AbilityLibrary.ReleaceSkillDesc // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 MakeRenderStatePriority(__int32 EffectType, __int32 Priority); // Function /Script/Game.AbilityLibrary.MakeRenderStatePriority // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 MakePostProcessPriority(__int32 EffectType, __int32 Priority); // Function /Script/Game.AbilityLibrary.MakePostProcessPriority // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void KeepTwoValidDecimal(float InValue, struct FString& OutString); // Function /Script/Game.AbilityLibrary.KeepTwoValidDecimal // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FSkillDescribeValue> GetSkillValueForArray(struct TArray<struct FString>& AllParams, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetSkillValueForArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FSkillDescribeValue> GetSkillValue(struct FString InParam, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetSkillValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FSoftObjectPath GetSkillIcon(__int32 InSkillId); // Function /Script/Game.AbilityLibrary.GetSkillIcon // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FSoftObjectPath GetSkillFixInfoStaticId(__int32 nFixId); // Function /Script/Game.AbilityLibrary.GetSkillFixInfoStaticId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FString GetSkillDescribe(struct FString InDesc, struct TArray<struct FString>& AllParams, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetSkillDescribe // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	float GetSkillCharacterEnergyCost(__int32 InSkillId, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetSkillCharacterEnergyCost // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetMapValueForLevel(struct TMap<__int32, float>& InMapValue, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetMapValueForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetIntMapValueForLevel(struct TMap<__int32, __int32>& InMapValue, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetIntMapValueForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	float GetIntArrayValueForLevel(struct TArray<__int32>& Value, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetIntArrayValueForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	float GetFloatValueStringForLevel(struct FString Value, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetFloatValueStringForLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetFloatArrayValueForLevel(struct TArray<float>& Value, __int32 InLevel); // Function /Script/Game.AbilityLibrary.GetFloatArrayValueForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString FormatDescribe(struct FString InDesc, struct TArray<struct FString>& InParams); // Function /Script/Game.AbilityLibrary.FormatDescribe // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void EndOrderTransparentMarking(struct AActor* TargetOwner); // Function /Script/Game.AbilityLibrary.EndOrderTransparentMarking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EndNoReceiveDecals(struct AActor* Actor); // Function /Script/Game.AbilityLibrary.EndNoReceiveDecals // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 AddCircleWarning(struct FVector& Location, float Radius); // Function /Script/Game.AbilityLibrary.AddCircleWarning // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AbilityRunTimeInfoStorge
// Size: 0x0 (Inherited: 0x0)
struct AAbilityRunTimeInfoStorge : AActor {
	struct TArray<struct FSkillRunTimeInfo> RunTimeInfos; // 0x0(0x0)
	struct FBossStateDamage BossStateDamage; // 0x0(0x0)
	struct TArray<struct FRuntimeDamageInfo> RuntimeDamageInfo; // 0x0(0x0)
	char pad_2A8[0xA0]; // 0x0(0x0)
	struct TMap<struct AActor*, struct FPlayerRecordData> PlayerRecordData; // 0x0(0x0)
	struct FDestructibleRecordData DestructibleRecordData; // 0x0(0x0)
	__int32 KillZoneCount; // 0x0(0x0)
	struct FString PlayerInputOperate; // 0x0(0x0)
	float DropTreatHealth; // 0x0(0x0)
	__int32 DropTreatCount; // 0x0(0x0)
	float DropShieldValue; // 0x0(0x0)
	__int32 DropShieldCount; // 0x0(0x0)
	float ExplosiveContrlMonTime; // 0x0(0x0)
	__int32 ExplosiveContrlMonCount; // 0x0(0x0)
	float ExplosiveContrlPlayerTime; // 0x0(0x0)
	__int32 ExplosiveContrlPlayerCount; // 0x0(0x0)
	struct TArray<struct FLogShieldInfo> LogContrlInfos; // 0x0(0x0)
	struct TArray<struct FLogShieldInfo> LogExplosiveInfos; // 0x0(0x0)
	struct TArray<struct FLogShieldInfo> LogDamageInfos; // 0x0(0x0)
	struct TArray<struct FLogShieldInfo> LogShieldInfos; // 0x0(0x0)
	struct TArray<struct FLogShieldInfo> LogTreatInfo; // 0x0(0x0)

	struct AAbilityRunTimeInfoStorge* GetStorge(); // Function /Script/Game.AbilityRunTimeInfoStorge.GetStorge // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetSkillInfoByAbility(struct UAbilityComponentBase* Launcher, struct TArray<struct FSkillRunTimeInfo>& Results); // Function /Script/Game.AbilityRunTimeInfoStorge.GetSkillInfoByAbility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool GetSkillInfo(struct UAbilityComponentBase* Launcher, __int32 SkillID, struct FSkillRunTimeInfo& Result); // Function /Script/Game.AbilityRunTimeInfoStorge.GetSkillInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	float GetPlayerTotalDamage(struct AActor* PlayerController); // Function /Script/Game.AbilityRunTimeInfoStorge.GetPlayerTotalDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetPlayerData(__int32 Index, struct FPlayerRecordData& OutData); // Function /Script/Game.AbilityRunTimeInfoStorge.GetPlayerData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FSkillRunTimeInfo> GetMonsterDamage(); // Function /Script/Game.AbilityRunTimeInfoStorge.GetMonsterDamage // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FDestructibleRecordData GetDestructibleData(); // Function /Script/Game.AbilityRunTimeInfoStorge.GetDestructibleData // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FBossStateDamage GetBossStateDamage(); // Function /Script/Game.AbilityRunTimeInfoStorge.GetBossStateDamage // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FSkillRunTimeInfo> GetBossSkillDamage(); // Function /Script/Game.AbilityRunTimeInfoStorge.GetBossSkillDamage // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetAbilityComponentsByModifierID(__int32 ModifierID, struct TArray<struct UAbilityComponentBase*>& Abilities); // Function /Script/Game.AbilityRunTimeInfoStorge.GetAbilityComponentsByModifierID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void CallGameEnd(); // Function /Script/Game.AbilityRunTimeInfoStorge.CallGameEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AbilitySpecialAttribute
// Size: 0x0 (Inherited: 0x0)
struct UAbilitySpecialAttribute : UObject {
	char pad_28[0x4]; // 0x0(0x0)
	__int32 MinValue; // 0x0(0x0)
	__int32 MaxValue; // 0x0(0x0)
	__int32 CurValue; // 0x0(0x0)
	struct UAbilityAttribute* Attribute; // 0x0(0x0)
	char bIsAllowTick : 1; // 0x0(0x0)
	char pad_40_1 : 7; // 0x0(0x0)
	char pad_41[0x7]; // 0x0(0x0)
	struct UAbilityComponentBase* AbilityOwner; // 0x0(0x0)

	void SetIsAllowTick(bool V); // Function /Script/Game.AbilitySpecialAttribute.SetIsAllowTick // (Final|Native|Public|BlueprintCallable) // @ game+0
	void K2_ReceiveTick(float DeltaSeconds, struct UAbilityComponentBase* InOwner); // Function /Script/Game.AbilitySpecialAttribute.K2_ReceiveTick // (Event|Protected|BlueprintEvent) // @ game+0
	void K2_ReceiveDeActive(struct UGameAbilityComponent* Pawn); // Function /Script/Game.AbilitySpecialAttribute.K2_ReceiveDeActive // (Event|Protected|BlueprintEvent) // @ game+0
	void K2_ReceiveActive(struct UObject* Instigator); // Function /Script/Game.AbilitySpecialAttribute.K2_ReceiveActive // (Event|Protected|BlueprintEvent) // @ game+0
	bool IsAllowTick(); // Function /Script/Game.AbilitySpecialAttribute.IsAllowTick // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameCharacter* GetOwnerCharacter(); // Function /Script/Game.AbilitySpecialAttribute.GetOwnerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAbilityAttribute* GetAttributeClass(); // Function /Script/Game.AbilitySpecialAttribute.GetAttributeClass // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.AbnormalAnimAsset
// Size: 0x0 (Inherited: 0x0)
struct UAbnormalAnimAsset : UDataAsset {
	struct TMap<enum class EAbnormalState, struct FAbnormalAnimList> AbnormalAnimMap; // 0x0(0x0)
};

 // Class /Script/Game.AbnormalAnimBase
// Size: 0x0 (Inherited: 0x0)
struct UAbnormalAnimBase : UCurveSequenceControllerAnimInstance {
	bool bCanWakeUp; // 0x0(0x0)
	bool bInParalysisReaction; // 0x0(0x0)
	char pad_422[0x6]; // 0x0(0x0)
	struct UAnimSequenceBase* IdleAnim; // 0x0(0x0)
	struct UAnimMontage* BunkerRepelStandMontage_Left; // 0x0(0x0)
	struct UAnimMontage* BunkerRepelStandMontage_Right; // 0x0(0x0)
	struct UAnimMontage* RepelStand1Montage; // 0x0(0x0)
	struct UAnimMontage* RepelStand2Montage; // 0x0(0x0)
	struct UAnimMontage* RepelStand3Montage; // 0x0(0x0)
	struct UAnimMontage* RepelStand4Montage; // 0x0(0x0)
	struct UAnimMontage* RepelStandMontage_Head; // 0x0(0x0)
	struct UAnimMontage* RepelMontage; // 0x0(0x0)
	struct UAnimMontage* FloatingMontage_Far; // 0x0(0x0)
	struct UAnimMontage* FloatingMontage_High; // 0x0(0x0)
	struct UAnimMontage* FloatingMontage; // 0x0(0x0)
	struct UAnimMontage* LieDownMontage; // 0x0(0x0)
	struct UAnimMontage* StandUpMontage; // 0x0(0x0)
	struct UAnimMontage* StunMontage; // 0x0(0x0)
	struct UAnimMontage* StunHitMontage; // 0x0(0x0)
	struct UAnimMontage* ParalysisMontage; // 0x0(0x0)
	struct UAnimMontage* ParalysisHitMontage; // 0x0(0x0)
	float ParalysisMontagePlayTime; // 0x0(0x0)
	char pad_4BC[0x4]; // 0x0(0x0)
	struct UAnimMontage* BreathlessMontage; // 0x0(0x0)
	struct AGameCharacter* Monster; // 0x0(0x0)
	struct UAnimMontage* AbnormalMontage; // 0x0(0x0)
	struct UAnimMontage* SubAbnormalMontage; // 0x0(0x0)
	char pad_4E0[0x60]; // 0x0(0x0)

	void UpdateAbnormalAnim(float DeltaTime); // Function /Script/Game.AbnormalAnimBase.UpdateAbnormalAnim // (Final|Native|Public) // @ game+0
	void OnAbnormalUpdate(struct FAbnormalInfo& InAbnormalInfo, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.AbnormalAnimBase.OnAbnormalUpdate // (Final|Native|Public|HasOutParms) // @ game+0
	void OnAbnormalStateReset(); // Function /Script/Game.AbnormalAnimBase.OnAbnormalStateReset // (Final|Native|Public) // @ game+0
	struct UAnimMontage* GetRepelMontageFromIndex(__int32 Index); // Function /Script/Game.AbnormalAnimBase.GetRepelMontageFromIndex // (Final|Native|Public) // @ game+0
	float GetRepelEndTime(); // Function /Script/Game.AbnormalAnimBase.GetRepelEndTime // (Final|Native|Public) // @ game+0
	float GetInAbnormalBlendAlpha(); // Function /Script/Game.AbnormalAnimBase.GetInAbnormalBlendAlpha // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.AbnormalComponent
// Size: 0x0 (Inherited: 0x0)
struct UAbnormalComponent : UActorComponent {
	struct UAbnormalAnimAsset* AbnormalAnimAsset; // 0x0(0x0)
	struct UCurveFloat* RepelMotionCurve; // 0x0(0x0)
	bool bHaveStandUpMotion; // 0x0(0x0)
	bool bIsInAbnormal; // 0x0(0x0)
	char pad_C2[0x6]; // 0x0(0x0)
	struct UAbilityComponent* AbilityComponent; // 0x0(0x0)
	bool bCanWakeUp; // 0x0(0x0)
	char pad_D1[0x7]; // 0x0(0x0)

	void OnAbnormalStateReceive(struct FAbnormalInfo& AbnormalInfo, bool bAdd, bool bNewApply); // Function /Script/Game.AbnormalComponent.OnAbnormalStateReceive // (Final|Native|Public|HasOutParms) // @ game+0
	bool HaveStandUpMotion(); // Function /Script/Game.AbnormalComponent.HaveStandUpMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetStunRemainingTime(); // Function /Script/Game.AbnormalComponent.GetStunRemainingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UCurveFloat* GetRepeleMotionCurve(); // Function /Script/Game.AbnormalComponent.GetRepeleMotionCurve // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetParalysisRemainingTime(); // Function /Script/Game.AbnormalComponent.GetParalysisRemainingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetKeepAbnormalRemainingTime(enum class EAbnormalState& State); // Function /Script/Game.AbnormalComponent.GetKeepAbnormalRemainingTime // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetIsInStun(); // Function /Script/Game.AbnormalComponent.GetIsInStun // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInRepel_EndStage(); // Function /Script/Game.AbnormalComponent.GetIsInRepel_EndStage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInRepel(); // Function /Script/Game.AbnormalComponent.GetIsInRepel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInOutControl(); // Function /Script/Game.AbnormalComponent.GetIsInOutControl // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInLie(); // Function /Script/Game.AbnormalComponent.GetIsInLie // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInFloating_Rising(); // Function /Script/Game.AbnormalComponent.GetIsInFloating_Rising // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInFloating_Floating(); // Function /Script/Game.AbnormalComponent.GetIsInFloating_Floating // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInFloating_Down(); // Function /Script/Game.AbnormalComponent.GetIsInFloating_Down // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInFloating(); // Function /Script/Game.AbnormalComponent.GetIsInFloating // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInBreathless(); // Function /Script/Game.AbnormalComponent.GetIsInBreathless // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetIsInBackRepel(); // Function /Script/Game.AbnormalComponent.GetIsInBackRepel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetIsInAbnormal(); // Function /Script/Game.AbnormalComponent.GetIsInAbnormal // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetInStandUp(); // Function /Script/Game.AbnormalComponent.GetInStandUp // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetCanWakeUp(); // Function /Script/Game.AbnormalComponent.GetCanWakeUp // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetBreathlessRemainingTime(); // Function /Script/Game.AbnormalComponent.GetBreathlessRemainingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetAnimType(); // Function /Script/Game.AbnormalComponent.GetAnimType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.CharacterAccessory
// Size: 0x0 (Inherited: 0x0)
struct ACharacterAccessory : AActor {
	char pad_220[0x20]; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)
	struct FName AccessoryBlongToPartitionBoneName; // 0x0(0x0)
	struct FName PropName; // 0x0(0x0)
	char bIsChildren : 1; // 0x0(0x0)
	char pad_258_1 : 7; // 0x0(0x0)
	char pad_259[0x7]; // 0x0(0x0)
	struct UAnimMontage* AnimMontage; // 0x0(0x0)
	struct AAbilityCollisionEditor* AbilityCollisionExhibition; // 0x0(0x0)
	bool bResetLocAtTick; // 0x0(0x0)
	char pad_271[0x7]; // 0x0(0x0)
	struct AGameCharacter* OwnGameCharacter; // 0x0(0x0)
	struct FPawnViewData PawnViewData; // 0x0(0x0)
	struct TArray<struct FPawnViewData> PawnViewDataList; // 0x0(0x0)
	struct UUMGDataComponent* UMGDataComponent; // 0x0(0x0)
	struct UAnimMontage* RunStopMontage; // 0x0(0x0)
	struct UAnimMontage* RushStopMontage; // 0x0(0x0)
	struct UAnimMontage* LaunchMontage; // 0x0(0x0)
	struct UAnimMontage* RunPivotingMontage; // 0x0(0x0)
	struct UAnimMontage* RushPivotingMontage; // 0x0(0x0)
	struct TArray<struct USkeletalMeshComponent*> AllMesh; // 0x0(0x0)
	struct TArray<struct USkeletalMeshComponent*> NonePartitionSkeletalComp; // 0x0(0x0)
	struct TArray<struct USkeletalMeshComponent*> NoneBonePartSkeletalComp; // 0x0(0x0)
	struct TArray<struct USkeletalMeshComponent*> PartitionSkeletalComp; // 0x0(0x0)
	struct TArray<struct UBonePartitionBaseData*> PartitionDatas; // 0x0(0x0)
	struct TArray<struct UBonePartData*> BonePartDatas; // 0x0(0x0)

	void RPC_OnOwnerDie(); // Function /Script/Game.CharacterAccessory.RPC_OnOwnerDie // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void OnOwnerDiePerform(struct AGameCharacter* OwnerCharacter); // Function /Script/Game.CharacterAccessory.OnOwnerDiePerform // (Event|Public|BlueprintEvent) // @ game+0
	void OnOwnerCharacterDie(struct AGameCharacter* Character, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.CharacterAccessory.OnOwnerCharacterDie // (Native|Public|HasOutParms) // @ game+0
	struct USkeletalMeshComponent* GetSkeletalMesh(); // Function /Script/Game.CharacterAccessory.GetSkeletalMesh // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	struct FBoneResult GetPartMainBone(struct FBoneResult& PartResult, bool bFindScaredCrow); // Function /Script/Game.CharacterAccessory.GetPartMainBone // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AGameCharacter* GetGameCharacter(); // Function /Script/Game.CharacterAccessory.GetGameCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetCurrentStateId(char StateMachineIdx); // Function /Script/Game.CharacterAccessory.GetCurrentStateId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.Accessory_ChracterSkill
// Size: 0x0 (Inherited: 0x0)
struct AAccessory_ChracterSkill : ACharacterAccessory {
	char pad_338[0x8]; // 0x0(0x0)
	struct TArray<struct FAnimStateEventInfo> ActiveAnimStateEvent; // 0x0(0x0)
	struct TArray<struct FollowPlaySkill> FollowPlayerSkillAnim; // 0x0(0x0)
	char pad_360[0x50]; // 0x0(0x0)
	struct UAnimMontage* FollowPlayerMontage; // 0x0(0x0)
	char pad_3B8[0x8]; // 0x0(0x0)

	void FollowPlayerStopAnim(__int32 InPlayerSkillId); // Function /Script/Game.Accessory_ChracterSkill.FollowPlayerStopAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void FollowPlayerPlayAnim(__int32 InPlayerSkillId, float PlayRate, bool bStopAllMontages); // Function /Script/Game.Accessory_ChracterSkill.FollowPlayerPlayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void FollowPlayerEndStorageProgress(__int32 InPlayerSkillId, float Position); // Function /Script/Game.Accessory_ChracterSkill.FollowPlayerEndStorageProgress // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.Accessory_Destructible
// Size: 0x0 (Inherited: 0x0)
struct AAccessory_Destructible : ACharacterAccessory {
	struct UAbilityComponent_Destructible* Ability; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAccessoryDestructibleDeath; // 0x0(0x0)
	bool bAsBodyPendant; // 0x0(0x0)
	bool bAOESelectAsActor; // 0x0(0x0)
	bool bCheckModifierIncludeParent; // 0x0(0x0)
	bool bApplyToOwner; // 0x0(0x0)
	bool bApplyHitNotifyToOwner; // 0x0(0x0)
	bool bWeaknessPart; // 0x0(0x0)
	char pad_356[0x2]; // 0x0(0x0)
	float DamageScale; // 0x0(0x0)
	float DamageScaleOnDestroy; // 0x0(0x0)
	float DamageSelfScale; // 0x0(0x0)
	float BreathForOwner; // 0x0(0x0)
	float MaxHealth; // 0x0(0x0)
	__int32 CardGrowID; // 0x0(0x0)
	bool bUseDestroyValue; // 0x0(0x0)
	bool bCheckCharacterDeath; // 0x0(0x0)
	char pad_372[0x2]; // 0x0(0x0)
	__int32 DamageBlinkPriority; // 0x0(0x0)
	struct FFlexibleEnumValue DamageBlinkCharacterEffectType; // 0x0(0x0)
	char pad_37C[0x4]; // 0x0(0x0)
	struct UCurveFloat* DamageBlinkCurve; // 0x0(0x0)
	struct UAnimMontage* AccessoryBrokenAnim; // 0x0(0x0)
	struct USceneComponent* AssistTargetComponent; // 0x0(0x0)
	struct FGameplayTagContainer TagContainer; // 0x0(0x0)
	char pad_3B8[0x28]; // 0x0(0x0)

	void SetBlinkEnable(bool Value); // Function /Script/Game.Accessory_Destructible.SetBlinkEnable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAbilityEnable(bool Value); // Function /Script/Game.Accessory_Destructible.SetAbilityEnable // (Final|Native|Public|BlueprintCallable|Const) // @ game+0
	void RPC_Destructed(); // Function /Script/Game.Accessory_Destructible.RPC_Destructed // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void OnModifyHeath(float Value); // Function /Script/Game.Accessory_Destructible.OnModifyHeath // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnDestructed(); // Function /Script/Game.Accessory_Destructible.OnDestructed // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnDead(bool IsBreak, struct UAbilityComponentBase* InLauncher, struct FHealthChangeValue& HealthChangeData); // Function /Script/Game.Accessory_Destructible.OnDead // (Native|Public|HasOutParms) // @ game+0
	struct FBoneResult K2_GetPartitionMainPart(struct FString PartitionName); // Function /Script/Game.Accessory_Destructible.K2_GetPartitionMainPart // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FBoneResult K2_GetPartitionMainBone(struct FString PartitionName); // Function /Script/Game.Accessory_Destructible.K2_GetPartitionMainBone // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Client_OnModifyHeath(float Value); // Function /Script/Game.Accessory_Destructible.Client_OnModifyHeath // (Net|Native|Event|NetMulticast|Public) // @ game+0
};

 // Class /Script/Game.Accessory_HeadBase
// Size: 0x0 (Inherited: 0x0)
struct AAccessory_HeadBase : ACharacterAccessory {
	struct USkeletalMesh* OriginHeadMesh; // 0x0(0x0)

	void StopFacialAnimation(); // Function /Script/Game.Accessory_HeadBase.StopFacialAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetOriginHeadMesh(struct USkeletalMesh* Mesh); // Function /Script/Game.Accessory_HeadBase.SetOriginHeadMesh // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetHeadTempMesh(struct FString HeadPath); // Function /Script/Game.Accessory_HeadBase.SetHeadTempMesh // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetHeadMesh(); // Function /Script/Game.Accessory_HeadBase.ResetHeadMesh // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayFacialAnimation(struct UAnimSequenceBase* AnimAssset, bool bIsLooping); // Function /Script/Game.Accessory_HeadBase.PlayFacialAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AnimInstance_AccessoryBase
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_AccessoryBase : UAnimInstance {
	struct UAnimInstanceBase* OwnerAnimInstance; // 0x0(0x0)

	char GetCurrentStateId(char StateMachineIdx); // Function /Script/Game.AnimInstance_AccessoryBase.GetCurrentStateId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetBlackboardState(enum class ESMBlackboardMask Mask); // Function /Script/Game.AnimInstance_AccessoryBase.GetBlackboardState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.AccessoryAnimInstance
// Size: 0x0 (Inherited: 0x0)
struct UAccessoryAnimInstance : UAnimInstance_AccessoryBase {
	struct UGameCharacterAnimInstance* CharacterAnimInstance; // 0x0(0x0)
	char pad_2C8[0x8]; // 0x0(0x0)

	bool IsShooting(); // Function /Script/Game.AccessoryAnimInstance.IsShooting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsShootForced(); // Function /Script/Game.AccessoryAnimInstance.IsShootForced // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsMontagePlaying(struct FName SlotName); // Function /Script/Game.AccessoryAnimInstance.IsMontagePlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsLocallyControlled(); // Function /Script/Game.AccessoryAnimInstance.IsLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInHalfSkillMontage(); // Function /Script/Game.AccessoryAnimInstance.IsInHalfSkillMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsAdvancedAction(); // Function /Script/Game.AccessoryAnimInstance.IsAdvancedAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class EWeaponState GetWeaponState(); // Function /Script/Game.AccessoryAnimInstance.GetWeaponState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector2D GetMoveDirection(); // Function /Script/Game.AccessoryAnimInstance.GetMoveDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetDodgeAnimationId(); // Function /Script/Game.AccessoryAnimInstance.GetDodgeAnimationId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetCurrentShootAdditive(); // Function /Script/Game.AccessoryAnimInstance.GetCurrentShootAdditive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetCurrentPreFireTime(); // Function /Script/Game.AccessoryAnimInstance.GetCurrentPreFireTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector2D GetAimOffset(); // Function /Script/Game.AccessoryAnimInstance.GetAimOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckCharacterActionState(enum class ECharacterActionState CharacterStateFlag); // Function /Script/Game.AccessoryAnimInstance.CheckCharacterActionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.AccessoryAnimInstance_Head
// Size: 0x0 (Inherited: 0x0)
struct UAccessoryAnimInstance_Head : UAccessoryAnimInstance {
	struct TMap<struct FString, __int32> RandomFacialContainer; // 0x0(0x0)
	struct TMap<struct FName, __int32> AnimSlotGroupPriority; // 0x0(0x0)
	float RandomFacialCoolDown; // 0x0(0x0)
	float HurtFacialPR; // 0x0(0x0)
	struct UAnimSequence* Base_Act; // 0x0(0x0)
	struct UAnimSequence* Hurt; // 0x0(0x0)
	struct UAnimSequence* Base_Eye; // 0x0(0x0)
	struct FString SkinAnimNameSuffix; // 0x0(0x0)
	char pad_3A0[0x70]; // 0x0(0x0)
	struct TMap<struct FString, struct UAnimSequence*> AnimSequnceMap; // 0x0(0x0)
};

 // Class /Script/Game.ActiveAble
// Size: 0x0 (Inherited: 0x0)
struct UActiveAble : UInterface {

	void SetActive(bool Inactive); // Function /Script/Game.ActiveAble.SetActive // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	bool IsActive(); // Function /Script/Game.ActiveAble.IsActive // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.ActorPhysicalMaterialMask
// Size: 0x0 (Inherited: 0x0)
struct UActorPhysicalMaterialMask : UActorComponent {
	char pad_B0[0x8]; // 0x0(0x0)
	struct UPhysicalMaterial* PhysicalMaterial; // 0x0(0x0)
	bool bNeedTick; // 0x0(0x0)
	char pad_C1[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.ActorQueryLibrary
// Size: 0x0 (Inherited: 0x0)
struct UActorQueryLibrary : UBlueprintFunctionLibrary {

	bool SearchActorsInSphere(struct TArray<struct AActor*>& ActorResults, struct AGameCharacter* Player, struct FVector& Pos, float Radius, __int32 RelationMask, enum class ECollisionChannel CollisionType); // Function /Script/Game.ActorQueryLibrary.SearchActorsInSphere // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool SearchActorsInFan(struct TArray<struct AActor*>& ActorResults, struct AGameCharacter* Player, float Radius, float Angle, __int32 RelationMask, enum class ECollisionChannel CollisionType); // Function /Script/Game.ActorQueryLibrary.SearchActorsInFan // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool SearchActorsInBox(struct TArray<struct AActor*>& ActorResults, struct AGameCharacter* Player, struct FVector& Start, struct FVector& End, struct FVector2D& Size, __int32 RelationMask, enum class ECollisionChannel CollisionType); // Function /Script/Game.ActorQueryLibrary.SearchActorsInBox // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool IsBehindSomebody(struct AActor* lpPlayer, struct AActor* lpOtherPlayer, float fCheckAngle); // Function /Script/Game.ActorQueryLibrary.IsBehindSomebody // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ActorRenderUtilities
// Size: 0x0 (Inherited: 0x0)
struct UActorRenderUtilities : UGameInstanceSubsystem {
};

 // Class /Script/Game.ActorShadowMapMask
// Size: 0x0 (Inherited: 0x0)
struct UActorShadowMapMask : UActorComponent {
	char pad_B0[0x1]; // 0x0(0x0)
	bool bShadowMapMask; // 0x0(0x0)
	bool bNeedTick; // 0x0(0x0)
	char pad_B3[0x5]; // 0x0(0x0)
	struct UTexture2D* DefaultTexture_Black; // 0x0(0x0)
	struct UTexture2D* DefaultTexture_White; // 0x0(0x0)
	char pad_C8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.AIDirectorObject
// Size: 0x0 (Inherited: 0x0)
struct UAIDirectorObject : UObject {
};

 // Class /Script/Game.AIDirectorEvent
// Size: 0x0 (Inherited: 0x0)
struct UAIDirectorEvent : UAIDirectorObject {

	void TriggerEvent(struct AGameAICharacter* AIChar); // Function /Script/Game.AIDirectorEvent.TriggerEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnTrigger(struct AGameAICharacter* AIChar); // Function /Script/Game.AIDirectorEvent.OnTrigger // (Native|Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.ADEvent_SetFightSignal
// Size: 0x0 (Inherited: 0x0)
struct UADEvent_SetFightSignal : UAIDirectorEvent {
	enum class EAIFightSignalType SignalType; // 0x0(0x0)
	enum class EAIAttackAttitude AttackAttitude; // 0x0(0x0)
	enum class EAIMoveAttitude MoveAttitude; // 0x0(0x0)
	enum class EAIMoveSpeedType MoveSpeedType; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDirectorGlobalEvent
// Size: 0x0 (Inherited: 0x0)
struct UAIDirectorGlobalEvent : UAIDirectorObject {

	void OnTrigger(); // Function /Script/Game.AIDirectorGlobalEvent.OnTrigger // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.ADGlobalEvent_MonstersTrigger
// Size: 0x0 (Inherited: 0x0)
struct UADGlobalEvent_MonstersTrigger : UAIDirectorGlobalEvent {
	struct TArray<struct UAICondition*> MonsterFilterConditions; // 0x0(0x0)
	struct UAIDirectorEvent* Event; // 0x0(0x0)
};

 // Class /Script/Game.AGameSpecialTrigger
// Size: 0x0 (Inherited: 0x0)
struct AAGameSpecialTrigger : AActor {
	char bHasFilter : 1; // 0x0(0x0)
	char pad_220_1 : 7; // 0x0(0x0)
	char pad_221[0x7]; // 0x0(0x0)
	struct TArray<struct APawn*> AllowPawnTypes; // 0x0(0x0)

	void OnPawnEndOverlap(struct APawn* Pawn); // Function /Script/Game.AGameSpecialTrigger.OnPawnEndOverlap // (Event|Protected|BlueprintEvent) // @ game+0
	void OnPawnBeginOverlap(struct APawn* Pawn); // Function /Script/Game.AGameSpecialTrigger.OnPawnBeginOverlap // (Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.HouseTestMontage
// Size: 0x0 (Inherited: 0x0)
struct AHouseTestMontage : AActor {
	__int32 NpcId; // 0x0(0x0)
	char pad_224[0x4]; // 0x0(0x0)
	struct FString MontageName; // 0x0(0x0)

	void CallNpc(); // Function /Script/Game.HouseTestMontage.CallNpc // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AIBaseStateParams
// Size: 0x0 (Inherited: 0x0)
struct UAIBaseStateParams : UObject {
};

 // Class /Script/Game.AIBaseState
// Size: 0x0 (Inherited: 0x0)
struct UAIBaseState : UDataAsset {
	struct FString StateName; // 0x0(0x0)
	struct UAIBaseStateParams* Params; // 0x0(0x0)
};

 // Class /Script/Game.AILogicComponent
// Size: 0x0 (Inherited: 0x0)
struct UAILogicComponent : UActorComponent {
};

 // Class /Script/Game.AICharControl
// Size: 0x0 (Inherited: 0x0)
struct UAICharControl : UObject {

	void OnTick(struct AGameAIController* Controller); // Function /Script/Game.AICharControl.OnTick // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnStart(struct AGameAIController* Controller); // Function /Script/Game.AICharControl.OnStart // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnEnd(struct AGameAIController* Controller); // Function /Script/Game.AICharControl.OnEnd // (Native|Event|Public|BlueprintEvent) // @ game+0
	enum class EAIFaceType CalcFaceType(struct AGameAIController* Controller); // Function /Script/Game.AICharControl.CalcFaceType // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.AICharControl_Base
// Size: 0x0 (Inherited: 0x0)
struct UAICharControl_Base : UAICharControl {
	enum class EAIFaceType FaceType; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AICharControl_Section
// Size: 0x0 (Inherited: 0x0)
struct UAICharControl_Section : UAICharControl {
	struct TSoftObjectPtr<UAnimMontage> Montage; // 0x0(0x0)
	struct TMap<struct FName, enum class EAIFaceType> SectionFaceType; // 0x0(0x0)
	struct TMap<struct FName, float> SectionRotateYawModify; // 0x0(0x0)
	char pad_F0[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition
// Size: 0x0 (Inherited: 0x0)
struct UAICondition : UObject {
	bool bInverse; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_AND
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_AND : UAICondition {
	struct TArray<struct UAICondition*> Conditions; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_OR
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_OR : UAICondition {
	struct TArray<struct UAICondition*> Conditions; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition : UObject {
	bool bInverse; // 0x0(0x0)
	char pad_29[0x3]; // 0x0(0x0)
	float Weight; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_AND
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_AND : UAIWeightCondition {
	struct TArray<struct UAICondition*> Conditions; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_OR
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_OR : UAIWeightCondition {
	struct TArray<struct UAICondition*> Conditions; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_AngleBetweenSkillPos2Forward
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_AngleBetweenSkillPos2Forward : UAICondition {
	struct FVector2D Range; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_AngleRangeForward2Target
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_AngleRangeForward2Target : UAICondition {
	struct FVector2D Range; // 0x0(0x0)
	bool bBoth; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_AngleRangeForward2Target
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_AngleRangeForward2Target : UAIWeightCondition {
	struct FVector2D Range; // 0x0(0x0)
	bool bBoth; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_AngleRangeSpecialForward2Target
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_AngleRangeSpecialForward2Target : UAICondition {
	struct FVector2D Range; // 0x0(0x0)
	bool bBoth; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_AngleRangeSpecialForward2Target
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_AngleRangeSpecialForward2Target : UAIWeightCondition {
	struct FVector2D Range; // 0x0(0x0)
	bool bBoth; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_BlueprintLogic
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_BlueprintLogic : UObject {

	bool PerformanceCheck(struct AGameCharacter* Who); // Function /Script/Game.AICondition_BlueprintLogic.PerformanceCheck // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.AICondition_Blueprint
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_Blueprint : UAICondition {
	struct UAICondition_BlueprintLogic* Logic; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_Blueprint
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_Blueprint : UAIWeightCondition {
	struct UAICondition_BlueprintLogic* Logic; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_CheckFightSignal
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_CheckFightSignal : UAICondition {
	enum class EAIFightSignalType SignalType; // 0x0(0x0)
	enum class EAIAttackAttitude AttackAttitude; // 0x0(0x0)
	enum class EAIMoveAttitude MoveAttitude; // 0x0(0x0)
	enum class EAIMoveSpeedType MoveSpeedType; // 0x0(0x0)
	char pad_34[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_CheckFightSignal
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_CheckFightSignal : UAIWeightCondition {
	enum class EAIFightSignalType SignalType; // 0x0(0x0)
	enum class EAIAttackAttitude AttackAttitude; // 0x0(0x0)
	enum class EAIMoveAttitude MoveAttitude; // 0x0(0x0)
	enum class EAIMoveSpeedType MoveSpeedType; // 0x0(0x0)
	char pad_34[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_Distance2DToTarget
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_Distance2DToTarget : UAICondition {
	struct FVector2D Range; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_Distance2DToTarget
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_Distance2DToTarget : UAIWeightCondition {
	struct FVector2D Range; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_DpsIn5s
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_DpsIn5s : UAICondition {
	bool bIsCaptain; // 0x0(0x0)
	bool bCheckActorTarget; // 0x0(0x0)
	bool bCheckOthersToSelf; // 0x0(0x0)
	char pad_33[0x1]; // 0x0(0x0)
	float DpsMoreThan; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_DpsIn5s
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_DpsIn5s : UAIWeightCondition {
	bool bIsCaptain; // 0x0(0x0)
	bool bCheckActorTarget; // 0x0(0x0)
	bool bCheckOthersToSelf; // 0x0(0x0)
	char pad_33[0x1]; // 0x0(0x0)
	float DpsMoreThan; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_FightCastSuccess
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_FightCastSuccess : UAICondition {
	bool bIsCaptain; // 0x0(0x0)
	char pad_31[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_FightCastSuccess
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_FightCastSuccess : UAIWeightCondition {
	bool bIsCaptain; // 0x0(0x0)
	char pad_31[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_HasSkillState
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_HasSkillState : UAICondition {
	__int32 ModifierID; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_35[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_HasSkillState
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_HasSkillState : UAIWeightCondition {
	__int32 ModifierID; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_35[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_Hearth
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_Hearth : UAICondition {
	float Value; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	enum class EOperationType OpeType; // 0x0(0x0)
	char pad_36[0x2]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_Hearth
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_Hearth : UAIWeightCondition {
	float Value; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	enum class EOperationType OpeType; // 0x0(0x0)
	char pad_36[0x2]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_Hearth_Acc
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_Hearth_Acc : UAICondition {
	float Value; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	enum class EOperationType OpeType; // 0x0(0x0)
	char pad_36[0x2]; // 0x0(0x0)
	struct ACharacterAccessory* AccType; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_Hearth_Acc
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_Hearth_Acc : UAIWeightCondition {
	float Value; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	enum class EOperationType OpeType; // 0x0(0x0)
	char pad_36[0x2]; // 0x0(0x0)
	struct ACharacterAccessory* AccType; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_InPreSkill
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_InPreSkill : UAICondition {
	__int32 SkillID; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_35[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_InPreSkill
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_InPreSkill : UAIWeightCondition {
	__int32 SkillID; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_35[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_IsAutoAimTarget
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_IsAutoAimTarget : UAICondition {
	bool bIsCaptain; // 0x0(0x0)
	bool bIsFire; // 0x0(0x0)
	char pad_32[0x6]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_IsAutoAimTarget
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_IsAutoAimTarget : UAIWeightCondition {
	bool bIsCaptain; // 0x0(0x0)
	bool bIsFire; // 0x0(0x0)
	char pad_32[0x6]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_IsCastingSkill
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_IsCastingSkill : UAICondition {
	__int32 SkillID; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_35[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_IsCastingSkill
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_IsCastingSkill : UAIWeightCondition {
	__int32 SkillID; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_35[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_MonsterTag
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_MonsterTag : UAICondition {
	struct FName MonsterTag; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_Ray2Target
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_Ray2Target : UAICondition {
	enum class ECollisionChannel Channel; // 0x0(0x0)
	char pad_31[0x3]; // 0x0(0x0)
	float Radius; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_Ray2Target
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_Ray2Target : UAIWeightCondition {
	enum class ECollisionChannel Channel; // 0x0(0x0)
	char pad_31[0x3]; // 0x0(0x0)
	float Radius; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_SkillTimes
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_SkillTimes : UAICondition {
	__int32 SkillID; // 0x0(0x0)
	__int32 Times; // 0x0(0x0)
	__int32 EmitterIndex; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_3D[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_SkillTimes
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_SkillTimes : UAIWeightCondition {
	__int32 SkillID; // 0x0(0x0)
	__int32 Times; // 0x0(0x0)
	__int32 EmitterIndex; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_3D[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_Speed
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_Speed : UAICondition {
	float Value; // 0x0(0x0)
	char pad_34[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_Speed
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_Speed : UAIWeightCondition {
	float Value; // 0x0(0x0)
	char pad_34[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_TeamCharNum
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_TeamCharNum : UAICondition {
	__int32 Template; // 0x0(0x0)
	__int32 Times; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_TeamCharNum
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_TeamCharNum : UAIWeightCondition {
	__int32 Template; // 0x0(0x0)
	__int32 Times; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_TimeAfterCastSkill
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_TimeAfterCastSkill : UAICondition {
	__int32 SkillID; // 0x0(0x0)
	float Time; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_TimeAfterCastSkill
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_TimeAfterCastSkill : UAIWeightCondition {
	__int32 SkillID; // 0x0(0x0)
	float Time; // 0x0(0x0)
	bool bIsCaptain; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AICondition_TimeAfterTeamMemberCastSkillNative
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_TimeAfterTeamMemberCastSkillNative : UAICondition_BlueprintLogic {

	bool DoLogic(struct AGameCharacter* Who, __int32 SkillIdVal, float TimeVal, enum class EOperationType OperationTypeVal); // Function /Script/Game.AICondition_TimeAfterTeamMemberCastSkillNative.DoLogic // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AICondition_TimeToLastDps
// Size: 0x0 (Inherited: 0x0)
struct UAICondition_TimeToLastDps : UAICondition {
	bool bIsCaptain; // 0x0(0x0)
	bool bDps2Self; // 0x0(0x0)
	char pad_32[0x2]; // 0x0(0x0)
	float Time; // 0x0(0x0)
	enum class EOperationType OpeType; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AIWeightCondition_TimeToLastDps
// Size: 0x0 (Inherited: 0x0)
struct UAIWeightCondition_TimeToLastDps : UAIWeightCondition {
	bool bIsCaptain; // 0x0(0x0)
	bool bDps2Self; // 0x0(0x0)
	char pad_32[0x2]; // 0x0(0x0)
	float Time; // 0x0(0x0)
	enum class EOperationType OpeType; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AIControlDataComponent
// Size: 0x0 (Inherited: 0x0)
struct UAIControlDataComponent : UActorComponent {
	__int32 ID; // 0x0(0x0)
	struct TWeakObjectPtr<struct AAITeamLogic> Team; // 0x0(0x0)
	char pad_BC[0x4]; // 0x0(0x0)
	struct FAIControlParam AIControlPara; // 0x0(0x0)
	struct TWeakObjectPtr<struct APatrolPathDefiner> PatrolPath; // 0x0(0x0)
	__int32 PatrolRegionId; // 0x0(0x0)
	__int32 PatrolLineId; // 0x0(0x0)
	struct TWeakObjectPtr<struct APatrolPoint_New> PatrolPoint; // 0x0(0x0)
	float OwEndFightRange; // 0x0(0x0)
	float OwEndFightNotAttackedRange; // 0x0(0x0)
	char pad_170[0x1]; // 0x0(0x0)
	bool InOwEndFight; // 0x0(0x0)
	char pad_172[0x2]; // 0x0(0x0)
	struct TWeakObjectPtr<struct ACollapseTeamTriggerBox> CollapseTeamBox; // 0x0(0x0)
	struct TWeakObjectPtr<struct UFollowSocketComponent> FollowSocket; // 0x0(0x0)
	struct FVector Forward; // 0x0(0x0)
	enum class EAIFaceType FaceType; // 0x0(0x0)
	char pad_191[0x7]; // 0x0(0x0)
	struct TArray<__int32> AIEntries; // 0x0(0x0)
	struct AActor* TargetActor; // 0x0(0x0)
	struct UBunkerPointComponent* TargetBunkerPoint; // 0x0(0x0)
	struct FHighestDpsInfo HighestDps2Other; // 0x0(0x0)
	struct FHighestDpsInfo HighestDps2Self; // 0x0(0x0)
	struct TMap<__int32, struct FAISkillTargets> SkillTargets; // 0x0(0x0)
	struct TArray<struct UAISkillTargetTracker*> SkillTargetTracker; // 0x0(0x0)
	char pad_230[0xF0]; // 0x0(0x0)
	enum class EAIAttackAttitude AttackAttitude; // 0x0(0x0)
	enum class EAIMoveAttitude MoveAttitude; // 0x0(0x0)
	enum class EAIMoveSpeedType MoveSpeedType; // 0x0(0x0)
	char pad_323[0x25]; // 0x0(0x0)
	enum class EPatrolMode PatrolMode; // 0x0(0x0)
	char pad_349[0x3]; // 0x0(0x0)
	struct FName PatrolAreaTag; // 0x0(0x0)
	char pad_354[0x4]; // 0x0(0x0)

	void UpdateAISkillTargets(__int32 SkillID, struct FVector& Pos); // Function /Script/Game.AIControlDataComponent.UpdateAISkillTargets // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetTargetActor(struct AActor* InTargetActor); // Function /Script/Game.AIControlDataComponent.SetTargetActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPatrolPoint(struct APatrolPoint_New* InPatrolPoint); // Function /Script/Game.AIControlDataComponent.SetPatrolPoint // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetOWEnterFightPos(struct FVector InPos); // Function /Script/Game.AIControlDataComponent.SetOWEnterFightPos // (Final|Native|Public|HasDefaults) // @ game+0
	void SetOWEndFightRange(float InOwEndFightNotAttackedRange, float InOwEndFightRange); // Function /Script/Game.AIControlDataComponent.SetOWEndFightRange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetInOwEndFight(bool IsIn); // Function /Script/Game.AIControlDataComponent.SetInOwEndFight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAICacheData(__int32 InID, struct FString Name, float Value); // Function /Script/Game.AIControlDataComponent.SetAICacheData // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAdvancedStateTargetTag(enum class EAIAdvancedState AdState, struct FString TargetTag); // Function /Script/Game.AIControlDataComponent.SetAdvancedStateTargetTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAdvancedStateFlag(enum class EAIAdvancedState AdState, bool bFlag); // Function /Script/Game.AIControlDataComponent.SetAdvancedStateFlag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveAISkillTargetTracker(struct UAISkillTargetTracker* InAISkillTracker); // Function /Script/Game.AIControlDataComponent.RemoveAISkillTargetTracker // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnSkillStart(__int32 SkillID); // Function /Script/Game.AIControlDataComponent.OnSkillStart // (Final|Native|Protected) // @ game+0
	void OnSkillEnd(__int32 SkillID); // Function /Script/Game.AIControlDataComponent.OnSkillEnd // (Final|Native|Protected) // @ game+0
	void OnSkillCancel(__int32 SkillID, enum class ESkillInterruptedType InType); // Function /Script/Game.AIControlDataComponent.OnSkillCancel // (Final|Native|Protected) // @ game+0
	struct APatrolPoint_New* NextPatrolPoint(); // Function /Script/Game.AIControlDataComponent.NextPatrolPoint // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool HasAIEntry(__int32 EntryID); // Function /Script/Game.AIControlDataComponent.HasAIEntry // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetTargetActor(); // Function /Script/Game.AIControlDataComponent.GetTargetActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector GetOWEnterFightPos(); // Function /Script/Game.AIControlDataComponent.GetOWEnterFightPos // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FAISkillTargets GetCurrSkillTargetLoc(); // Function /Script/Game.AIControlDataComponent.GetCurrSkillTargetLoc // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FAISkillTargets GetAISkillTargets(__int32 SkillID, bool& bOk); // Function /Script/Game.AIControlDataComponent.GetAISkillTargets // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetAICacheData(__int32 InID, struct FString Name); // Function /Script/Game.AIControlDataComponent.GetAICacheData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FName GetAdvancedStateTargetTag(enum class EAIAdvancedState AdState); // Function /Script/Game.AIControlDataComponent.GetAdvancedStateTargetTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetAdvancedStateFlag(enum class EAIAdvancedState AdState); // Function /Script/Game.AIControlDataComponent.GetAdvancedStateFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void ClearOWEndFightInfoOnSkillCast(__int32 SkillID, struct TArray<__int32>& OriginSkills, struct UGameAbilityComponent* AbilityRef); // Function /Script/Game.AIControlDataComponent.ClearOWEndFightInfoOnSkillCast // (Final|Native|Public|HasOutParms) // @ game+0
	void ClearOWEndFightInfo(); // Function /Script/Game.AIControlDataComponent.ClearOWEndFightInfo // (Final|Native|Public) // @ game+0
	void AddAISkillTargetTracker(struct UAISkillTargetTracker* InAISkillTracker); // Function /Script/Game.AIControlDataComponent.AddAISkillTargetTracker // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AIDirectorCondition
// Size: 0x0 (Inherited: 0x0)
struct UAIDirectorCondition : UAIDirectorObject {

	bool Check(); // Function /Script/Game.AIDirectorCondition.Check // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.AIDirectorConfigAsset
// Size: 0x0 (Inherited: 0x0)
struct UAIDirectorConfigAsset : UDataAsset {
	__int32 BunkerToken; // 0x0(0x0)
	char pad_34[0x4]; // 0x0(0x0)
	struct UBunkerQueryAsset* BunkerQuery; // 0x0(0x0)
	struct TArray<struct FAIDirectorConditionGlobalEvent> ConditionTriggerEvents; // 0x0(0x0)
	struct TArray<struct FAIDirectorGroup> Groups; // 0x0(0x0)
};

 // Class /Script/Game.GameWorldSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UGameWorldSubsystem : UWorldSubsystem {
	char pad_30[0x8]; // 0x0(0x0)
	struct TArray<struct FString> IgnoredLevelNames; // 0x0(0x0)
};

 // Class /Script/Game.GameTickableWorldSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UGameTickableWorldSubsystem : UGameWorldSubsystem {
	char pad_48[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.AIDirectorSystem
// Size: 0x0 (Inherited: 0x0)
struct UAIDirectorSystem : UGameTickableWorldSubsystem {
	bool bDebugBunkerInfo; // 0x0(0x0)
	char pad_59[0x7]; // 0x0(0x0)
	struct TMap<struct UAIDirectorGlobalEvent*, float> AIDirectorEventCDMap; // 0x0(0x0)
	struct UAIDirectorConfigAsset* Config; // 0x0(0x0)
	struct FTokenNum BunkerToken; // 0x0(0x0)
	char pad_C4[0x4]; // 0x0(0x0)
	struct TMap<__int32, struct FAIDirectorGroup> ActiveGroups; // 0x0(0x0)
	struct TArray<struct FAIDirectorCDGroup> CDGroups; // 0x0(0x0)
	struct TMap<__int32, struct FAIDirectorGroup> DeactiveGroups; // 0x0(0x0)
	char pad_178[0x58]; // 0x0(0x0)
	struct TArray<struct ABunker*> AvalidBunkers; // 0x0(0x0)
	struct TArray<struct UBunkerPointComponent*> AvalidBunkerPoints; // 0x0(0x0)
	struct TArray<struct UBunkerPointComponent*> OccupiedBunkerPoints; // 0x0(0x0)
	struct TArray<struct UBunkerPointComponent*> FreeBunkerPoints; // 0x0(0x0)
	struct TArray<struct UBunkerPointComponent*> SafeBunkerPoints; // 0x0(0x0)
	char pad_220[0x8]; // 0x0(0x0)

	void SetGroupTokenCD(__int32 GroupId, enum class ESkillRangeType SkillType, float CD); // Function /Script/Game.AIDirectorSystem.SetGroupTokenCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetGroupToken(__int32 GroupId, struct TMap<enum class ESkillRangeType, struct FTokenNum> TokenConfig); // Function /Script/Game.AIDirectorSystem.SetGroupToken // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetGroupEliteTokenRatio(__int32 GroupId, __int32 Ratio); // Function /Script/Game.AIDirectorSystem.SetGroupEliteTokenRatio // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetBunkerToken(__int32 TokenNum); // Function /Script/Game.AIDirectorSystem.SetBunkerToken // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAllGroupTokenCD(enum class ESkillRangeType SkillType, float CD); // Function /Script/Game.AIDirectorSystem.SetAllGroupTokenCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct AGameAICharacter*> GetMembersByGroupID(__int32 GroupId); // Function /Script/Game.AIDirectorSystem.GetMembersByGroupID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetGroupIDOfMonster(struct AGameAICharacter* InAIChar); // Function /Script/Game.AIDirectorSystem.GetGroupIDOfMonster // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FAIDirectorGroup GetGroupConfigOfMonster(struct AGameAICharacter* InAIChar); // Function /Script/Game.AIDirectorSystem.GetGroupConfigOfMonster // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FAIDirectorGroup GetGroupConfigByID(__int32 GroupId); // Function /Script/Game.AIDirectorSystem.GetGroupConfigByID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FTokenNum GetBunkerToken(); // Function /Script/Game.AIDirectorSystem.GetBunkerToken // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<struct AGameAICharacter*> GetAllMonsters(); // Function /Script/Game.AIDirectorSystem.GetAllMonsters // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void DeactiveGroup(__int32 GroupId); // Function /Script/Game.AIDirectorSystem.DeactiveGroup // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanRequestSkillToken(struct AGameAICharacter* AIChar, enum class ESkillRangeType SkillType); // Function /Script/Game.AIDirectorSystem.CanRequestSkillToken // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void AddNewGroup(struct TArray<struct AGameAICharacter*> GroupMembers, struct FAIDirectorGroup& GroupConfig); // Function /Script/Game.AIDirectorSystem.AddNewGroup // (Final|Native|Public|HasOutParms) // @ game+0
	void ActiveGroup(__int32 GroupId); // Function /Script/Game.AIDirectorSystem.ActiveGroup // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AIEvent
// Size: 0x0 (Inherited: 0x0)
struct UAIEvent : UObject {
	char pad_28[0x8]; // 0x0(0x0)
	bool bFinished; // 0x0(0x0)
	char pad_31[0x7]; // 0x0(0x0)
	struct FString Param0; // 0x0(0x0)
	struct FString Param1; // 0x0(0x0)
	struct FString Param2; // 0x0(0x0)
	struct FString Param3; // 0x0(0x0)
	struct FString Param4; // 0x0(0x0)
	struct FString Param5; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameAICharacter> AICharacter; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameAIController> AIController; // 0x0(0x0)

	void OnTick(float DeltaTime); // Function /Script/Game.AIEvent.OnTick // (Event|Public|BlueprintEvent) // @ game+0
	void OnFinish(); // Function /Script/Game.AIEvent.OnFinish // (Event|Public|BlueprintEvent) // @ game+0
	void OnExecute(struct AGameCharacter* Character); // Function /Script/Game.AIEvent.OnExecute // (Native|Event|Public|BlueprintEvent) // @ game+0
	bool IsStopMovement(); // Function /Script/Game.AIEvent.IsStopMovement // (Native|Event|Public|BlueprintEvent) // @ game+0
	bool IsPersistentEvent(); // Function /Script/Game.AIEvent.IsPersistentEvent // (Native|Event|Public|BlueprintEvent) // @ game+0
	void EventFinish(); // Function /Script/Game.AIEvent.EventFinish // (Native|Public|BlueprintCallable) // @ game+0
	bool CanInterruptFight(); // Function /Script/Game.AIEvent.CanInterruptFight // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.AIEvent_AreaRandomMove
// Size: 0x0 (Inherited: 0x0)
struct UAIEvent_AreaRandomMove : UAIEvent {
	struct AActor* MoveCenter; // 0x0(0x0)
	float MoveRadius; // 0x0(0x0)
	__int32 RequestMoveTime; // 0x0(0x0)
	bool bCanInterruptFight; // 0x0(0x0)
	char pad_B9[0xF]; // 0x0(0x0)

	void OnMoveCompleted(struct FAIRequestID RequestID, enum class EPathFollowingResult Result); // Function /Script/Game.AIEvent_AreaRandomMove.OnMoveCompleted // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.AIEvent_FollowSceneTargetBase
// Size: 0x0 (Inherited: 0x0)
struct UAIEvent_FollowSceneTargetBase : UAIEvent {
	char pad_A8[0x40]; // 0x0(0x0)

	void OnMoveCompleted(struct FAIRequestID RequestID, enum class EPathFollowingResult Result); // Function /Script/Game.AIEvent_FollowSceneTargetBase.OnMoveCompleted // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.AIEvent_MoveToBunkerPoint
// Size: 0x0 (Inherited: 0x0)
struct UAIEvent_MoveToBunkerPoint : UAIEvent {
	struct ABunker* TargetBunkerActor; // 0x0(0x0)
	__int32 BunkerPointIndex; // 0x0(0x0)
	bool bForceMove; // 0x0(0x0)
	char pad_B5[0x3]; // 0x0(0x0)
	float SpeedModify; // 0x0(0x0)
	bool bCancelAllSkill; // 0x0(0x0)
	char pad_BD[0x1B]; // 0x0(0x0)

	void OnMoveCompleted(struct FAIRequestID RequestID, enum class EPathFollowingResult Result); // Function /Script/Game.AIEvent_MoveToBunkerPoint.OnMoveCompleted // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.AIEvent_RandomMoveBase
// Size: 0x0 (Inherited: 0x0)
struct UAIEvent_RandomMoveBase : UAIEvent {
	struct AActor* SearchCenter; // 0x0(0x0)
	char pad_B0[0x48]; // 0x0(0x0)

	void ConditionalPerformMove(); // Function /Script/Game.AIEvent_RandomMoveBase.ConditionalPerformMove // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.AIGlobalStatistic
// Size: 0x0 (Inherited: 0x0)
struct AAIGlobalStatistic : AInfo {
	bool bDisplayEnmityDebugData; // 0x0(0x0)
	bool bDisplayDpsDebugData; // 0x0(0x0)
	char pad_222[0x6]; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, struct AEnmityReplaceActor*> StealthChars; // 0x0(0x0)
	char pad_278[0x8]; // 0x0(0x0)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct UAIStatisticData*> PersonalFightData; // 0x0(0x0)
	struct TMap<struct TWeakObjectPtr<struct AAITeamLogic>, struct UAIStatisticData*> TeamFightData; // 0x0(0x0)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FAIArray> AITargetData; // 0x0(0x0)

	void SwitchActorEnmity(struct AActor* InActor, struct AActor* ToActor); // Function /Script/Game.AIGlobalStatistic.SwitchActorEnmity // (Final|Native|Public|BlueprintCallable) // @ game+0
	void QueryTeamTargets(struct AActor* Char, struct TArray<struct AActor*>& OutTargets); // Function /Script/Game.AIGlobalStatistic.QueryTeamTargets // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void QueryTargets(struct AActor* Char, struct TArray<struct AActor*>& OutTargets); // Function /Script/Game.AIGlobalStatistic.QueryTargets // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float QueryLastEmitSkillTimeById(struct AActor* Char, __int32 SkillID); // Function /Script/Game.AIGlobalStatistic.QueryLastEmitSkillTimeById // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float QueryLastEmitSkillTime(struct AActor* Char); // Function /Script/Game.AIGlobalStatistic.QueryLastEmitSkillTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void QueryHighestDPS2Self(struct AActor* Char, struct AActor*& OutWho, float& OutValue); // Function /Script/Game.AIGlobalStatistic.QueryHighestDPS2Self // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsBeingTargetSpecify(struct AActor* SourcActor, struct AActor* TargetActor); // Function /Script/Game.AIGlobalStatistic.IsBeingTargetSpecify // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsBeingTarget(struct AActor* InActor); // Function /Script/Game.AIGlobalStatistic.IsBeingTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasDps2Self(struct AActor* Char); // Function /Script/Game.AIGlobalStatistic.HasDps2Self // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetHasSameTargetActors(struct AActor* InTargetActor, struct TArray<struct AActor*>& OutActors); // Function /Script/Game.AIGlobalStatistic.GetHasSameTargetActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetAllTeams(struct TArray<struct AAITeamLogic*>& OutTeams); // Function /Script/Game.AIGlobalStatistic.GetAllTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AAIGlobalStatistic* Get(struct UObject* WorldContextObject); // Function /Script/Game.AIGlobalStatistic.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.AIStatisticData
// Size: 0x0 (Inherited: 0x0)
struct UAIStatisticData : UObject {
	char pad_28[0x300]; // 0x0(0x0)
};

 // Class /Script/Game.AILibrary
// Size: 0x0 (Inherited: 0x0)
struct UAILibrary : UBlueprintFunctionLibrary {

	void UpdateAllPlayersFightCheckResult(struct UObject* WorldContext); // Function /Script/Game.AILibrary.UpdateAllPlayersFightCheckResult // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void UpdateAIControlParam(struct AActor* AIActor, __int32 InParamID); // Function /Script/Game.AILibrary.UpdateAIControlParam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void StartStealthToAI(struct AGameCharacter* StealthChar); // Function /Script/Game.AILibrary.StartStealthToAI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveFollower(struct AGameCharacter* Leader, struct AGameCharacter* Who); // Function /Script/Game.AILibrary.RemoveFollower // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetPlayersFightCheckResult(struct UObject* WorldContext); // Function /Script/Game.AILibrary.GetPlayersFightCheckResult // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameAIController* GetGameAIController(struct USMInstance* Instance); // Function /Script/Game.AILibrary.GetGameAIController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FBulletInfo GetBulletInfoInSkill(__int32 SkillID); // Function /Script/Game.AILibrary.GetBulletInfoInSkill // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetActorByString(struct UObject* Context, struct FString inString); // Function /Script/Game.AILibrary.GetActorByString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UActorComponent* FindOrAddComponent(struct AActor* Actor, struct UActorComponent* Class); // Function /Script/Game.AILibrary.FindOrAddComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EndStealthToAI(struct AGameCharacter* StealthChar); // Function /Script/Game.AILibrary.EndStealthToAI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddFollower(struct AGameCharacter* Leader, struct AGameCharacter* Who); // Function /Script/Game.AILibrary.AddFollower // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddEnmityInLoc(struct AActor* Target, struct FVector Loc, float Radius, float Value, enum class EEnmityType Type, enum class EEnmityClearType ClearType); // Function /Script/Game.AILibrary.AddEnmityInLoc // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AIMove
// Size: 0x0 (Inherited: 0x0)
struct UAIMove : UObject {
	struct FString Remark; // 0x0(0x0)
	float Time; // 0x0(0x0)
	float RandomDeviation; // 0x0(0x0)
	float Weight; // 0x0(0x0)
	float SpeedModify; // 0x0(0x0)
	enum class EAIFaceType FaceType; // 0x0(0x0)
	bool bCastUpperSkill; // 0x0(0x0)
	bool bCastFullBodySkill; // 0x0(0x0)
	char pad_4B[0x5]; // 0x0(0x0)
	struct TArray<struct UAIWeightCondition*> Conditions; // 0x0(0x0)
	bool bNeedInterruptBunkerState; // 0x0(0x0)
	char pad_61[0x1F]; // 0x0(0x0)
};

 // Class /Script/Game.AIMove_BunkerPoint
// Size: 0x0 (Inherited: 0x0)
struct UAIMove_BunkerPoint : UAIMove {
	struct UBunkerQueryAsset* BunkerQueryAsset; // 0x0(0x0)
};

 // Class /Script/Game.AIMove_EQS
// Size: 0x0 (Inherited: 0x0)
struct UAIMove_EQS : UAIMove {
	struct FEQSParametrizedQueryExecutionRequest EQSRequest; // 0x0(0x0)
	struct AActor* EQSRequester; // 0x0(0x0)
	char pad_D0[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.AIMove_SafeArea
// Size: 0x0 (Inherited: 0x0)
struct UAIMove_SafeArea : UAIMove {
	struct FVector2D Range; // 0x0(0x0)
	bool bCustomEQS; // 0x0(0x0)
	char pad_89[0x7]; // 0x0(0x0)
	struct UEnvQuery* QueryTemplate; // 0x0(0x0)
	char pad_98[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.AIMove_Simple
// Size: 0x0 (Inherited: 0x0)
struct UAIMove_Simple : UAIMove {
	struct FVector2D Angle; // 0x0(0x0)
	struct FVector2D Distance; // 0x0(0x0)
	enum class EAISimpleMoveForwardType ForwardType; // 0x0(0x0)
	char pad_91[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AIMove_Stand
// Size: 0x0 (Inherited: 0x0)
struct UAIMove_Stand : UAIMove {
};

 // Class /Script/Game.AIMove_TrackingTarget
// Size: 0x0 (Inherited: 0x0)
struct UAIMove_TrackingTarget : UAIMove {
};

 // Class /Script/Game.AIMove_SceneTarget
// Size: 0x0 (Inherited: 0x0)
struct UAIMove_SceneTarget : UAIMove {
};

 // Class /Script/Game.AIPerformanceComponent
// Size: 0x0 (Inherited: 0x0)
struct UAIPerformanceComponent : UActorComponent {
	struct APerformanceManager* PerformanceManager; // 0x0(0x0)
	char pad_B8[0x8]; // 0x0(0x0)
	struct UCharacterMovementComponent* MovComp; // 0x0(0x0)
	struct ACharacter* Char; // 0x0(0x0)
	struct USkeletalMeshComponent* CharMesh; // 0x0(0x0)
	struct AGameTaskActor* TaskActor; // 0x0(0x0)
	char pad_E0[0x1]; // 0x0(0x0)
	bool bControlAnimationPerformance; // 0x0(0x0)
	char pad_E2[0xE]; // 0x0(0x0)
	struct FVector4 MoveLODIntervals; // 0x0(0x0)
	struct FVector4 ScreenPercetage; // 0x0(0x0)
	__int32 Lod0SkipFrame; // 0x0(0x0)
	__int32 Lod1SkipFrame; // 0x0(0x0)
	__int32 Lod2SkipFrame; // 0x0(0x0)
	__int32 Lod3SkipFrame; // 0x0(0x0)
	bool bIgnoreMoveOptimization; // 0x0(0x0)
	bool bUseScreenPercentage; // 0x0(0x0)
	bool bForceSuspendAITick; // 0x0(0x0)
	char pad_123[0xD]; // 0x0(0x0)

	float GetCurrentScreenPercentage(); // Function /Script/Game.AIPerformanceComponent.GetCurrentScreenPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetCurrentLODLevel(); // Function /Script/Game.AIPerformanceComponent.GetCurrentLODLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.AISkillCaster
// Size: 0x0 (Inherited: 0x0)
struct UAISkillCaster : UObject {
	bool bCustomBT; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)
	struct FSoftObjectPath BT; // 0x0(0x0)
	float AbandonTime; // 0x0(0x0)
	float SpeedModify; // 0x0(0x0)
	struct UAICondition* EmitChecker; // 0x0(0x0)
	struct UAICondition* InterruptChecker; // 0x0(0x0)
	struct UAIEvent* FightEventAfterInterrupt; // 0x0(0x0)
	struct UAICondition* EndChecker; // 0x0(0x0)
	struct UAICondition* CasterEndChecker; // 0x0(0x0)
};

 // Class /Script/Game.AISkillEmitter_EQS
// Size: 0x0 (Inherited: 0x0)
struct UAISkillEmitter_EQS : UAISkillCaster {
	float Range; // 0x0(0x0)
	char pad_7C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AISkillEmitter_EQS_Chase
// Size: 0x0 (Inherited: 0x0)
struct UAISkillEmitter_EQS_Chase : UAISkillEmitter_EQS {
};

 // Class /Script/Game.AISkillEmitter_EQS_Rotate
// Size: 0x0 (Inherited: 0x0)
struct UAISkillEmitter_EQS_Rotate : UAISkillEmitter_EQS {
};

 // Class /Script/Game.AISkillEmitter_Immediate
// Size: 0x0 (Inherited: 0x0)
struct UAISkillEmitter_Immediate : UAISkillCaster {
};

 // Class /Script/Game.AISkillTargetTracker
// Size: 0x0 (Inherited: 0x0)
struct UAISkillTargetTracker : UObject {
	__int32 SkillID; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
	struct TArray<__int32> SubSkillId; // 0x0(0x0)
	float PerceptionSeconed; // 0x0(0x0)
	char pad_44[0x4]; // 0x0(0x0)

	void TickEvent(struct UAIControlDataComponent* AIControlData, float DeltaTime); // Function /Script/Game.AISkillTargetTracker.TickEvent // (Event|Public|BlueprintEvent) // @ game+0
	bool ShouldDestroy(); // Function /Script/Game.AISkillTargetTracker.ShouldDestroy // (Native|Public|BlueprintCallable) // @ game+0
	void OnTick(struct UAIControlDataComponent* AIControlData, float DeltaTime); // Function /Script/Game.AISkillTargetTracker.OnTick // (Native|Public|BlueprintCallable) // @ game+0
	void OnStart(struct UAIControlDataComponent* AIControlData); // Function /Script/Game.AISkillTargetTracker.OnStart // (Native|Public|BlueprintCallable) // @ game+0
	void OnEnd(struct UAIControlDataComponent* AIControlData); // Function /Script/Game.AISkillTargetTracker.OnEnd // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AISkillTargetTracker_SelfForward
// Size: 0x0 (Inherited: 0x0)
struct UAISkillTargetTracker_SelfForward : UAISkillTargetTracker {
};

 // Class /Script/Game.AISkillTargetTracker_SelfForward_AimTarget
// Size: 0x0 (Inherited: 0x0)
struct UAISkillTargetTracker_SelfForward_AimTarget : UAISkillTargetTracker {
	float Speed; // 0x0(0x0)
	struct FVector2D Range; // 0x0(0x0)
	char pad_54[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.AISkillTargetTracker_Target
// Size: 0x0 (Inherited: 0x0)
struct UAISkillTargetTracker_Target : UAISkillTargetTracker {
	enum class EAI_STT_TargetType TargetType; // 0x0(0x0)
	char pad_49[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AISkillTargetTracker_TargetSocket
// Size: 0x0 (Inherited: 0x0)
struct UAISkillTargetTracker_TargetSocket : UAISkillTargetTracker {
	bool bIntervalRandom; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	float Interval; // 0x0(0x0)
	float Ratio; // 0x0(0x0)
	char pad_54[0x4]; // 0x0(0x0)
	struct TMap<struct FName, __int32> Weights; // 0x0(0x0)
	char pad_A8[0x60]; // 0x0(0x0)
};

 // Class /Script/Game.AISMInstance
// Size: 0x0 (Inherited: 0x0)
struct UAISMInstance : USMInstance {

	void SetCharacterEvent(char idx, char Event); // Function /Script/Game.AISMInstance.SetCharacterEvent // (Final|Native|Public|BlueprintCallable|Const) // @ game+0
	float PartHearth(struct ACharacterAccessory* AccessoryClass); // Function /Script/Game.AISMInstance.PartHearth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInBunker(); // Function /Script/Game.AISMInstance.IsInBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsDead(); // Function /Script/Game.AISMInstance.IsDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAlive(); // Function /Script/Game.AISMInstance.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool HasTargetBunkerPoint(); // Function /Script/Game.AISMInstance.HasTargetBunkerPoint // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasTarget(); // Function /Script/Game.AISMInstance.HasTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool HasPatrolPath(); // Function /Script/Game.AISMInstance.HasPatrolPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetAdvancedStateFlag(enum class EAIAdvancedState AdState); // Function /Script/Game.AISMInstance.GetAdvancedStateFlag // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AGameCharacter* GameCharacter(); // Function /Script/Game.AISMInstance.GameCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameAIController* GameAIController(); // Function /Script/Game.AISMInstance.GameAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckHasTrapActorTarget(); // Function /Script/Game.AISMInstance.CheckHasTrapActorTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckHasSceneTarget(); // Function /Script/Game.AISMInstance.CheckHasSceneTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckHasCharacterActorTarget(); // Function /Script/Game.AISMInstance.CheckHasCharacterActorTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanInFight(); // Function /Script/Game.AISMInstance.CanInFight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.AIStateMachineComponent
// Size: 0x0 (Inherited: 0x0)
struct UAIStateMachineComponent : USMStateMachineComponent {
};

 // Class /Script/Game.AIStateParams_Fight
// Size: 0x0 (Inherited: 0x0)
struct UAIStateParams_Fight : UAIBaseStateParams {
	bool bCustomTCQ; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)
	struct UEnvQuery* TargetChooseQuery; // 0x0(0x0)
	struct FAISkillConf Skills; // 0x0(0x0)
	struct FAIMoveConf MoveConf; // 0x0(0x0)
	struct TArray<struct FFightAIEventConf> FightAIEventConfs; // 0x0(0x0)
};

 // Class /Script/Game.PatrolPoint
// Size: 0x0 (Inherited: 0x0)
struct APatrolPoint : AActor {
	struct UCapsuleComponent* Capsule; // 0x0(0x0)
};

 // Class /Script/Game.PatrolPathDefiner
// Size: 0x0 (Inherited: 0x0)
struct APatrolPathDefiner : AActor {
	struct TArray<struct FPatrolSection> Sections; // 0x0(0x0)
};

 // Class /Script/Game.AIStateParams_Patrol
// Size: 0x0 (Inherited: 0x0)
struct UAIStateParams_Patrol : UAIBaseStateParams {
	float SpeedModify; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AITeamLogic
// Size: 0x0 (Inherited: 0x0)
struct AAITeamLogic : AActor {
	struct UArrowComponent* ArrowComponent; // 0x0(0x0)
	struct FTeamSafeAreaStoreInfo TeamSafeAreaStoreInfo; // 0x0(0x0)
	struct TArray<struct AGameCharacter*> TeamMembers; // 0x0(0x0)
	__int32 MembersMaxNum; // 0x0(0x0)
	char pad_254[0x4]; // 0x0(0x0)
	struct FString Name; // 0x0(0x0)
	struct TArray<struct AAITeamSlot*> Slots; // 0x0(0x0)
	enum class ESlotTowardType SlotTowardType; // 0x0(0x0)
	char pad_279[0x3]; // 0x0(0x0)
	float SlotRotationRate; // 0x0(0x0)
	bool bIsCaptainFiring; // 0x0(0x0)
	char pad_281[0x7]; // 0x0(0x0)
	struct FFireInfo CaptainFireInfo; // 0x0(0x0)
	struct UAITeamSlotConfigAsset* TeamSlotConfig; // 0x0(0x0)
	struct UAITeamSlotConfigAsset* SpecialTeamSlotConfig; // 0x0(0x0)
	char pad_2D8[0x58]; // 0x0(0x0)
	bool bTeamHadInFight; // 0x0(0x0)
	char pad_331[0x7]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct AGameCharacter>> CustomTeamMembers; // 0x0(0x0)
	char pad_348[0x10]; // 0x0(0x0)

	void UpdateSlotConfig(); // Function /Script/Game.AITeamLogic.UpdateSlotConfig // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetTeamSlotConfig(struct FString ConfigName); // Function /Script/Game.AITeamLogic.SetTeamSlotConfig // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSpecialTeamSlotConfig(struct UAITeamSlotConfigAsset* InAITeamSlotConfig); // Function /Script/Game.AITeamLogic.SetSpecialTeamSlotConfig // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCaptain(struct AGameCharacter* Char); // Function /Script/Game.AITeamLogic.SetCaptain // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveMember(struct AGameCharacter* Char); // Function /Script/Game.AITeamLogic.RemoveMember // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool RefreshMembersMaxNum(); // Function /Script/Game.AITeamLogic.RefreshMembersMaxNum // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnTeamMemberDie(struct AGameCharacter* InCharacter, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.AITeamLogic.OnTeamMemberDie // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnTeamMemberDestroy(struct AActor* DestroyedActor); // Function /Script/Game.AITeamLogic.OnTeamMemberDestroy // (Final|Native|Protected) // @ game+0
	void OnCaptainStopFire(); // Function /Script/Game.AITeamLogic.OnCaptainStopFire // (Final|Native|Protected) // @ game+0
	void OnCaptainFire(struct FFireInfo Info, bool bStartFire); // Function /Script/Game.AITeamLogic.OnCaptainFire // (Final|Native|Protected) // @ game+0
	bool IsSlotEmpty(__int32 SlotIndex, float CheckEmptyRadius); // Function /Script/Game.AITeamLogic.IsSlotEmpty // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetTeamName(); // Function /Script/Game.AITeamLogic.GetTeamName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FTransform GetSlotTransformByIndex(__int32 SlotIndex); // Function /Script/Game.AITeamLogic.GetSlotTransformByIndex // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FTransform GetNextEmptySlotTrans(); // Function /Script/Game.AITeamLogic.GetNextEmptySlotTrans // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetMembersMaxNum(); // Function /Script/Game.AITeamLogic.GetMembersMaxNum // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAITeamSlotConfigAsset* GetCurrentTeamSlotConfig(); // Function /Script/Game.AITeamLogic.GetCurrentTeamSlotConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetCaptainIsFiring(); // Function /Script/Game.AITeamLogic.GetCaptainIsFiring // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FFireInfo GetCaptainFireInfo(); // Function /Script/Game.AITeamLogic.GetCaptainFireInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameCharacter* GetCaptain(); // Function /Script/Game.AITeamLogic.GetCaptain // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct AGameCharacter*> GetAllMembersPtr(bool bNotCaptain); // Function /Script/Game.AITeamLogic.GetAllMembersPtr // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void ClearTemporaryMembers(struct AActor* InOwner); // Function /Script/Game.AITeamLogic.ClearTemporaryMembers // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearForeverMembers(struct AActor* InOwner); // Function /Script/Game.AITeamLogic.ClearForeverMembers // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<__int32> ClearExcessMembers(__int32 ClearNum); // Function /Script/Game.AITeamLogic.ClearExcessMembers // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CleanSpecialTeamSlotConfig(); // Function /Script/Game.AITeamLogic.CleanSpecialTeamSlotConfig // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddMember(struct AGameCharacter* Char, __int32 ForceIndex); // Function /Script/Game.AITeamLogic.AddMember // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AITeamSlotConfig
// Size: 0x0 (Inherited: 0x0)
struct AAITeamSlotConfig : AActor {
	struct TArray<struct USlotConfigComponent*> SlotComponents; // 0x0(0x0)
};

 // Class /Script/Game.SlotConfigComponent
// Size: 0x0 (Inherited: 0x0)
struct USlotConfigComponent : UArrowComponent {
	__int32 Index; // 0x0(0x0)
};

 // Class /Script/Game.AITeamSlot
// Size: 0x0 (Inherited: 0x0)
struct AAITeamSlot : AActor {
	struct USlotConfigComponent* SlotConfigComponent; // 0x0(0x0)
	char pad_228[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.AITeamSlotConfigAsset
// Size: 0x0 (Inherited: 0x0)
struct UAITeamSlotConfigAsset : UDataAsset {
	struct TArray<struct FTeamSlotConfigInfo> TeamSlotConfigInfos; // 0x0(0x0)
};

 // Class /Script/Game.AlphaCanvasPanel
// Size: 0x0 (Inherited: 0x0)
struct UAlphaCanvasPanel : UCanvasPanel {
	struct FSlateBrush MaskTexture; // 0x0(0x0)
};

 // Class /Script/Game.AlphaMaskImage
// Size: 0x0 (Inherited: 0x0)
struct UAlphaMaskImage : UImage {
	struct FString PaintingType; // 0x0(0x0)
	bool bApplyAlphaMask; // 0x0(0x0)
	char pad_239[0x17]; // 0x0(0x0)
};

 // Class /Script/Game.AnimCurveBackup
// Size: 0x0 (Inherited: 0x0)
struct UAnimCurveBackup : UDataAsset {
	struct TArray<struct FFloatCurve> Curves; // 0x0(0x0)
};

 // Class /Script/Game.AnimInstance_Drone
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_Drone : UAnimInstance {
	struct UAnimSequenceBase* Base_Move; // 0x0(0x0)
	struct UAimOffsetBlendSpace* AO_MoveBlendSpace; // 0x0(0x0)
	float RightSpeed; // 0x0(0x0)
	float ForwardAcceleration; // 0x0(0x0)
	float CaclAccelarationSpeedScale; // 0x0(0x0)
	float InterpSpeed; // 0x0(0x0)
	float LastForwardSpeed; // 0x0(0x0)
};

 // Class /Script/Game.AnimInstance_Fishing
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_Fishing : UAnimInstance {
	struct UAnimSequenceBase* Idle; // 0x0(0x0)
	struct UAnimSequenceBase* Wait; // 0x0(0x0)
	struct UAnimSequenceBase* Battle; // 0x0(0x0)
	struct UAnimSequenceBase* Throw; // 0x0(0x0)
	struct UAnimSequenceBase* PullStart; // 0x0(0x0)
	struct UAnimSequenceBase* PullEnd; // 0x0(0x0)
	struct AGameCharacter* OwnerCharacter; // 0x0(0x0)
	struct UCurveSequenceControllerAnimInstance* MainAnimInstance; // 0x0(0x0)
	enum class EFishingStage FishingStage; // 0x0(0x0)

	void OnFishingEvent(enum class EFishingEvent NewEvent); // Function /Script/Game.AnimInstance_Fishing.OnFishingEvent // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.AnimInstanceBase
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstanceBase : UCurveSequenceControllerAnimInstance {
	struct USMStateMachineComponent* StateMachine; // 0x0(0x0)
	struct FVector HitDirection; // 0x0(0x0)
	bool bIsWeaponHandOff; // 0x0(0x0)
	bool bEnableTargetWarping; // 0x0(0x0)
	char pad_436[0x72]; // 0x0(0x0)
	struct TArray<struct UAnimNotifyState_HandOffWeapon*> WeaponOffNotifys; // 0x0(0x0)
	char pad_4B8[0x58]; // 0x0(0x0)

	void StopMontageBySlotGroup(struct FString InGroupSlotName); // Function /Script/Game.AnimInstanceBase.StopMontageBySlotGroup // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool SetStateEventId(char StateMachineIdx, char EventId); // Function /Script/Game.AnimInstanceBase.SetStateEventId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void SetHitDirection(struct FVector Direction); // Function /Script/Game.AnimInstanceBase.SetHitDirection // (Native|Public|HasDefaults) // @ game+0
	void ReplaceMontageByVariableName(struct FString OldVariableName, struct FString NewVariableName, bool bLoadAnim_External); // Function /Script/Game.AnimInstanceBase.ReplaceMontageByVariableName // (Native|Public|BlueprintCallable) // @ game+0
	void ReplaceBlendSpaceByVariableName(struct FString OldVariableName, struct FString NewVariableName, bool bLoadAnim_External); // Function /Script/Game.AnimInstanceBase.ReplaceBlendSpaceByVariableName // (Native|Public|BlueprintCallable) // @ game+0
	void ReplaceBlendSpace1DByVariableName(struct FString OldVariableName, struct FString NewVariableName, bool bLoadAnim_External); // Function /Script/Game.AnimInstanceBase.ReplaceBlendSpace1DByVariableName // (Native|Public|BlueprintCallable) // @ game+0
	void ReplaceAnimSequenceByVariableName(struct FString OldVariableName, struct FString NewVariableName, bool bLoadAnim_External); // Function /Script/Game.AnimInstanceBase.ReplaceAnimSequenceByVariableName // (Native|Public|BlueprintCallable) // @ game+0
	void OnMontageStartedHandler(struct UAnimMontage* Montage); // Function /Script/Game.AnimInstanceBase.OnMontageStartedHandler // (Final|Native|Protected) // @ game+0
	void OnMontageEndedHandler(struct UAnimMontage* Montage, bool bInterrupted); // Function /Script/Game.AnimInstanceBase.OnMontageEndedHandler // (Native|Protected) // @ game+0
	void OnMontageBlendingOutHandler(struct UAnimMontage* Montage, bool bInterrupted); // Function /Script/Game.AnimInstanceBase.OnMontageBlendingOutHandler // (Final|Native|Protected) // @ game+0
	void OnCharacterHit(struct FVector Direction, float Strength, struct FString BoneName); // Function /Script/Game.AnimInstanceBase.OnCharacterHit // (Native|Public|HasDefaults) // @ game+0
	void LoadMontageAndPlay(struct FString MontageName); // Function /Script/Game.AnimInstanceBase.LoadMontageAndPlay // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LoadAnimSequanceAndPlayBySlotGroup(struct FString SequenceName, struct FString InGroupSlotName, __int32 LoopCount); // Function /Script/Game.AnimInstanceBase.LoadAnimSequanceAndPlayBySlotGroup // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInFightState(); // Function /Script/Game.AnimInstanceBase.IsInFightState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAlive(); // Function /Script/Game.AnimInstanceBase.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool HasTarget(); // Function /Script/Game.AnimInstanceBase.HasTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool HasPatrolPath(); // Function /Script/Game.AnimInstanceBase.HasPatrolPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetPartHearth(struct ACharacterAccessory* AccessoryClass); // Function /Script/Game.AnimInstanceBase.GetPartHearth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetCurrentStateId(char StateMachineIdx); // Function /Script/Game.AnimInstanceBase.GetCurrentStateId // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetBlackboardState(enum class ESMBlackboardMask Mask); // Function /Script/Game.AnimInstanceBase.GetBlackboardState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetAnimMontageCurveData(struct UAnimMontage* InAnimMontage, struct FName InCurveName); // Function /Script/Game.AnimInstanceBase.GetAnimMontageCurveData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.MonsterAnimInstance
// Size: 0x0 (Inherited: 0x0)
struct UMonsterAnimInstance : UAnimInstanceBase {
	struct UAnimInstance* AnimLinkLayerClass; // 0x0(0x0)

	void ClampAimOffset_Yaw(struct FVector2D& AimoffsetRange_Yaw, struct FRotator& OutAimOffset); // Function /Script/Game.MonsterAnimInstance.ClampAimOffset_Yaw // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0
	void ClampAimOffset_Pitch(struct FVector2D& AimoffsetRange_Pitch, struct FRotator& OutAimOffset); // Function /Script/Game.MonsterAnimInstance.ClampAimOffset_Pitch // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0
	struct FVector CalcBoneLookAt(struct FName& BoneName, struct FVector& Offset1, struct FVector& Offset2, bool bTrans, bool bComponentTrans); // Function /Script/Game.MonsterAnimInstance.CalcBoneLookAt // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.AnimInstance_Humanoid
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_Humanoid : UMonsterAnimInstance {
	struct TArray<struct UAnimSequence*> IdleAnims; // 0x0(0x0)
	struct TArray<struct UAnimSequence*> RandomIdleAnims; // 0x0(0x0)
	struct FVector2D AimoffsetRange_Yaw; // 0x0(0x0)
	struct FVector2D AimoffsetRange_Pitch; // 0x0(0x0)
	struct FName CharEyeSocketName; // 0x0(0x0)
	bool bUseBoneTransAsCharEye; // 0x0(0x0)
	bool bUseProjectAimoffset; // 0x0(0x0)
	char pad_54A[0x2]; // 0x0(0x0)
	float AimTargetHeightOffset; // 0x0(0x0)
	struct FVector AimRightVector; // 0x0(0x0)
	struct FVector AimUpVector; // 0x0(0x0)
	struct FVector2D MoveDirection; // 0x0(0x0)
	float Speed; // 0x0(0x0)
	struct FRotator AimOffset; // 0x0(0x0)
	bool bInWalking; // 0x0(0x0)
	char pad_581[0x3]; // 0x0(0x0)
	float RepelKeepTime; // 0x0(0x0)
	float HitStrength; // 0x0(0x0)
	float GetUpTime; // 0x0(0x0)
	enum class EAbnormalState AbnormalState; // 0x0(0x0)
	char pad_591[0x3]; // 0x0(0x0)
	struct FVector HeadIkOffSet1; // 0x0(0x0)
	struct FVector HeadIkOffSet2; // 0x0(0x0)
	bool bTrans; // 0x0(0x0)
	bool bUseComponentLookAt; // 0x0(0x0)
	char pad_5AE[0x6]; // 0x0(0x0)
	bool bIsFalling; // 0x0(0x0)
	bool bIsCastingSkillInAnim; // 0x0(0x0)
	bool bIsInOutControl; // 0x0(0x0)
	bool bIsInAbnormal; // 0x0(0x0)
	bool bIsUnactivatedIdle; // 0x0(0x0)
	bool bDisableHeadIK; // 0x0(0x0)
	bool bIsMoving; // 0x0(0x0)
	bool bIsStand_OutsideBunker; // 0x0(0x0)
	struct FVector HeadIkTarget; // 0x0(0x0)
	struct UAnimSequence* UsedIdleAnim; // 0x0(0x0)

	void OnAdditiveHit(struct FVector InHitDirection, float Strength, struct FString BoneName); // Function /Script/Game.AnimInstance_Humanoid.OnAdditiveHit // (Final|Native|Protected|HasDefaults) // @ game+0
	void OnAbnormalUpdate(struct FAbnormalInfo& Info, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.AnimInstance_Humanoid.OnAbnormalUpdate // (Final|Native|Protected|HasOutParms) // @ game+0
	struct UAnimInstance_Locomotion* GetLocomotionAnimInstance(); // Function /Script/Game.AnimInstance_Humanoid.GetLocomotionAnimInstance // (Final|Native|Public) // @ game+0
	bool GetIsInBunker(); // Function /Script/Game.AnimInstance_Humanoid.GetIsInBunker // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAnimSequence* GetIdleAnim(); // Function /Script/Game.AnimInstance_Humanoid.GetIdleAnim // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector2D DirectionFilter(struct FVector2D& Direction, float MinValue); // Function /Script/Game.AnimInstance_Humanoid.DirectionFilter // (Final|Native|Static|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.AnimInstance_Locomotion
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_Locomotion : UAnimInstance {
	struct UAnimSequenceBase* Falling_Fight_Stand; // 0x0(0x0)
	struct UAnimSequenceBase* Falling_Loop; // 0x0(0x0)
	struct UAnimSequenceBase* Falling_End; // 0x0(0x0)
	struct UAnimSequenceBase* Bunker_Start_Left; // 0x0(0x0)
	struct UAnimSequenceBase* Bunker_Loop_Left; // 0x0(0x0)
	struct UAnimSequenceBase* Bunker_End_Left; // 0x0(0x0)
	struct UAnimSequenceBase* Bunker_Start_Right; // 0x0(0x0)
	struct UAnimSequenceBase* Bunker_Loop_Right; // 0x0(0x0)
	struct UAnimSequenceBase* Bunker_End_Right; // 0x0(0x0)
	struct UBlendSpaceBase* Move_Fight; // 0x0(0x0)
	struct UBlendSpaceBase* Move_Base; // 0x0(0x0)
	enum class EMoveBlendToggleType MoveBlendToggleType; // 0x0(0x0)
	struct ACharacterAccessory* WeaponClass; // 0x0(0x0)
	struct UAnimMontage* Stop_Montage; // 0x0(0x0)
	struct UAnimMontage* Launch_Montage; // 0x0(0x0)
	bool bIsInBunker; // 0x0(0x0)
	bool bIsEnteringBunker; // 0x0(0x0)
	bool bIsLeavingBunker; // 0x0(0x0)
	float BunkerDistRatio; // 0x0(0x0)
	enum class EBunkerAnimType BunkerAnimType; // 0x0(0x0)
	char pad_339[0x3]; // 0x0(0x0)
	float Speed; // 0x0(0x0)
	bool bIsFaceToMoveDir; // 0x0(0x0)
	char pad_341[0x3]; // 0x0(0x0)
	float MoveToControllerAngle; // 0x0(0x0)
	bool bIsCastingSkill; // 0x0(0x0)
	char pad_349[0x3]; // 0x0(0x0)
	float MaxSpeed; // 0x0(0x0)
	bool bIsFalling; // 0x0(0x0)
	bool bIsFighting; // 0x0(0x0)
	bool bHasGun; // 0x0(0x0)
	bool bToggleMoveBlend; // 0x0(0x0)
	float ScaleHorizontalSpeed; // 0x0(0x0)
	float HorizontalSpeed; // 0x0(0x0)
	char pad_35C[0x4]; // 0x0(0x0)

	struct AGameAICharacter* GetAIOwner(); // Function /Script/Game.AnimInstance_Locomotion.GetAIOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.AnimInstance_PostProcess
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_PostProcess : UCurveSequenceControllerAnimInstance {
	struct UAnimSequenceBase* HitReactAnim; // 0x0(0x0)
	struct TMap<enum class EHitDirectionType, struct FHitReactSectionInfo> HitReactAnimContainer; // 0x0(0x0)
	struct TArray<struct FBoneReference> ExcludBoneContainer; // 0x0(0x0)
	struct FSeasunInputBlendPose CustomLayerSetup; // 0x0(0x0)
	float HitReactionCoolDownTime; // 0x0(0x0)
	float HitReactionDuration; // 0x0(0x0)
	float BlendInTime; // 0x0(0x0)
	float BlendOutTime; // 0x0(0x0)
	float PlayRate; // 0x0(0x0)
	float AlphaScale; // 0x0(0x0)
	struct FName SlotName; // 0x0(0x0)
	struct TMap<enum class EHitReactPerformance, struct FHitReactPerformanceData> HitReactPerformanceContainer; // 0x0(0x0)
	struct AGameCharacter* OwnerCharacter; // 0x0(0x0)
	struct UCurveSequenceControllerAnimInstance* MainAnimInstance; // 0x0(0x0)
	float HitReactElapsedTime; // 0x0(0x0)
	float HitReactCoolDownElapsedTime; // 0x0(0x0)
	float HitReactAlpha; // 0x0(0x0)
	char pad_524[0x4]; // 0x0(0x0)
	struct FHitReactPerformanceData CurHitReactPerformanceData; // 0x0(0x0)
	char pad_5B8[0x8]; // 0x0(0x0)

	void OnOwenerDoHitReaction(struct FApplyHitPhysicalResultData& HitDamage); // Function /Script/Game.AnimInstance_PostProcess.OnOwenerDoHitReaction // (Final|Native|Protected|HasOutParms) // @ game+0
};

 // Class /Script/Game.AnimMoveStateBase
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateBase : UObject {
	struct AGamePlayer* Player; // 0x0(0x0)
	struct UGameCharacterAnimInstance* AnimInstance; // 0x0(0x0)
	char pad_38[0x38]; // 0x0(0x0)
	struct TArray<struct FAccesoryInstanceInfo> AccessoyInfos; // 0x0(0x0)

	void Update(float DeltaTime); // Function /Script/Game.AnimMoveStateBase.Update // (Native|Public|BlueprintCallable) // @ game+0
	void Start(); // Function /Script/Game.AnimMoveStateBase.Start // (Native|Public|BlueprintCallable) // @ game+0
	void Exit(); // Function /Script/Game.AnimMoveStateBase.Exit // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AnimMoveStateBunker
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateBunker : UAnimMoveStateBase {
	char pad_80[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.AnimMoveStateDistanceMap
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateDistanceMap : UAnimMoveStateBase {
	float EnableLerpTimeProgress; // 0x0(0x0)
	float CurrentAccDirBlendSpd; // 0x0(0x0)
	char pad_88[0xE8]; // 0x0(0x0)
};

 // Class /Script/Game.AnimMoveStateIdle
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateIdle : UAnimMoveStateBase {
	float PlayIdleIntervale; // 0x0(0x0)
	__int32 IdleSwitchCount; // 0x0(0x0)
	char pad_88[0x8]; // 0x0(0x0)
	struct UAnimMontage* IdleMontage; // 0x0(0x0)
	char pad_98[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.AnimMoveStateLaunch
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateLaunch : UAnimMoveStateDistanceMap {
	struct TMap<struct FString, struct FMontageSectionInfo> LaunchSectionInfos; // 0x0(0x0)
};

 // Class /Script/Game.AnimMoveStatePivot
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStatePivot : UAnimMoveStateDistanceMap {
	struct TMap<struct FString, struct FMontageSectionInfo> RunSectionInfos; // 0x0(0x0)
	struct TMap<struct FString, struct FMontageSectionInfo> RushSectionInfos; // 0x0(0x0)
	float RushReEntryTime_TurnLeft; // 0x0(0x0)
	float RushReEntryTime_TurnRight; // 0x0(0x0)
	float RunReEntryTime_TurnLeft; // 0x0(0x0)
	float RunReEntryTime_TurnRight; // 0x0(0x0)
	float PivotReEntryTime; // 0x0(0x0)
	bool bPivotingKeepEnterAcc; // 0x0(0x0)
	char pad_225[0x3]; // 0x0(0x0)
	float fPivotAccLerpSpd; // 0x0(0x0)
	float fPivotAccLerpAngle; // 0x0(0x0)
	char pad_230[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.AnimMoveStateRun
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateRun : UAnimMoveStateBase {
};

 // Class /Script/Game.AnimMoveStateRush
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateRush : UAnimMoveStateBase {
	struct FName LeftSectionName; // 0x0(0x0)
	struct FName RightSectionName; // 0x0(0x0)
	struct FName LoopSectionName; // 0x0(0x0)
};

 // Class /Script/Game.AnimMoveStateSkill
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateSkill : UAnimMoveStateBase {
};

 // Class /Script/Game.AnimMoveStateStop
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateStop : UAnimMoveStateBase {
	struct UAnimMontage* StopMontage; // 0x0(0x0)
	char pad_88[0x4]; // 0x0(0x0)
	float RushStopTime; // 0x0(0x0)
	struct UAnimMontage* RunMontage; // 0x0(0x0)
	struct UAnimMontage* RushMontage; // 0x0(0x0)
};

 // Class /Script/Game.AnimMoveStateTurnInPlace
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateTurnInPlace : UAnimMoveStateBase {
	float TurnDelay; // 0x0(0x0)
	float FastTurnAngle; // 0x0(0x0)
	struct UAnimMontage* CurrentMontage; // 0x0(0x0)
	char pad_90[0x40]; // 0x0(0x0)
};

 // Class /Script/Game.AnimMoveStateWalk
// Size: 0x0 (Inherited: 0x0)
struct UAnimMoveStateWalk : UAnimMoveStateBase {
};

 // Class /Script/Game.CustomAnimNotify
// Size: 0x0 (Inherited: 0x0)
struct UCustomAnimNotify : UAnimNotify {
	char pad_38[0x1]; // 0x0(0x0)
	char bIsClient : 1; // 0x0(0x0)
	char bClientAndServer : 1; // 0x0(0x0)
	char bIsLocalClient : 1; // 0x0(0x0)
	char pad_39_3 : 5; // 0x0(0x0)
	char pad_3A[0x6]; // 0x0(0x0)

	void ReceiveNotify(struct AActor* Character, struct AGameSkill* GameSkill); // Function /Script/Game.CustomAnimNotify.ReceiveNotify // (Event|Protected|BlueprintCallable|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.AnimNotify_AbilityNotify
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_AbilityNotify : UCustomAnimNotify {
	struct FString ParamName; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_BulletLoaded
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_BulletLoaded : UAnimNotify {
	struct FString NotifyName; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_Camera
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_Camera : UAnimNotify_AbilityNotify {
	struct FName CameraSocketName; // 0x0(0x0)
	char bActiveSocketAnimation : 1; // 0x0(0x0)
	char pad_58_1 : 7; // 0x0(0x0)
	char pad_59[0x3]; // 0x0(0x0)
	float MaxCameraTime; // 0x0(0x0)
	float CameraBlendInTime; // 0x0(0x0)
	float CameraBlendOutTime; // 0x0(0x0)
	bool bApplySceneTranslucent; // 0x0(0x0)
	char pad_69[0x7]; // 0x0(0x0)
	struct UCurveFloat* FOVCurve; // 0x0(0x0)
	struct FVector TargetCameraPosition; // 0x0(0x0)
	bool bStopTempCamera; // 0x0(0x0)
	char pad_85[0x3]; // 0x0(0x0)
	float EndTime; // 0x0(0x0)
	bool bUseTempCameraPosition; // 0x0(0x0)
	char pad_8D[0x3]; // 0x0(0x0)
	float WaitTimeEnd; // 0x0(0x0)
	bool bCancelSkillStopCamera; // 0x0(0x0)
	char pad_95[0x3]; // 0x0(0x0)
	float TempArmLengthOffset; // 0x0(0x0)
	float TempCameraFOVOffset; // 0x0(0x0)
	struct FVector TempSocketOffset; // 0x0(0x0)
	struct FVector TempArmPosition; // 0x0(0x0)
	float TempLerpSpeed; // 0x0(0x0)
	char pad_BC[0x4]; // 0x0(0x0)
	struct FRuntimeFloatCurve FadeIn; // 0x0(0x0)
	struct FRuntimeFloatCurve FadeOut; // 0x0(0x0)
	bool bLockCamera; // 0x0(0x0)
	char pad_1D1[0x7]; // 0x0(0x0)
	struct FRuntimeFloatCurve LagCurve; // 0x0(0x0)
	float MaxLagDistance; // 0x0(0x0)
	float LagWaitTimeEnd; // 0x0(0x0)
	char bInLockCamera : 1; // 0x0(0x0)
	char bInTempCamera : 1; // 0x0(0x0)
	char pad_268_2 : 6; // 0x0(0x0)
	char pad_269[0x7]; // 0x0(0x0)

	void StopCameraCurve(struct AGameCharacter* Character); // Function /Script/Game.AnimNotify_Camera.StopCameraCurve // (Final|Native|Protected|Const) // @ game+0
};

 // Class /Script/Game.AnimNotify_CameraAnimation
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_CameraAnimation : UAnimNotify_AbilityNotify {
	enum class ECameraAnimationType AnimationType; // 0x0(0x0)
	enum class ECameraTargetMode CameraTargetMode; // 0x0(0x0)
	char Priority; // 0x0(0x0)
	bool bHideBunker; // 0x0(0x0)
	enum class EEnableBunker EnableInBunker; // 0x0(0x0)
	enum class EEnableBunkerMode FullBunkerMode; // 0x0(0x0)
	bool bIgnoreBunkerEffect; // 0x0(0x0)
	bool bDoCollisionTest; // 0x0(0x0)
	bool bStopAnimWhenInterrupted; // 0x0(0x0)
	bool bUseBaseCameraBlendIn; // 0x0(0x0)
	bool bCancelAnimationAtTheEndOfTime; // 0x0(0x0)
	bool bUseCameraOffset; // 0x0(0x0)
	bool bFollowControlRotation; // 0x0(0x0)
	bool bEnableLocationLag; // 0x0(0x0)
	char LagSpeed; // 0x0(0x0)
	char pad_5F[0x1]; // 0x0(0x0)
	float MaxLagDistance; // 0x0(0x0)
	char pad_64[0x4]; // 0x0(0x0)
	struct UCurveFloat* LagSpeedCurve; // 0x0(0x0)
	float fLerpSpeed; // 0x0(0x0)
	char pad_74[0x4]; // 0x0(0x0)
	struct UCurveFloat* LerpSpeedCurve; // 0x0(0x0)
	float fLagBlendOutTime; // 0x0(0x0)
	char pad_84[0x4]; // 0x0(0x0)
	struct FAlphaBlend BlendIn; // 0x0(0x0)
	struct FAlphaBlend BlendOut; // 0x0(0x0)
	float BlendTriggerTime; // 0x0(0x0)
	struct FName CameraSocketName; // 0x0(0x0)
	char pad_F4[0x4]; // 0x0(0x0)
	struct UCurveFloat* FOVCurve; // 0x0(0x0)
	struct UCurveFloat* LocationXCurve; // 0x0(0x0)
	float LocationOffsetX; // 0x0(0x0)
	float RecoverTime; // 0x0(0x0)
	struct UGameCameraAnimMetaData* CustomAnimationAsset; // 0x0(0x0)
	float TargetFOV; // 0x0(0x0)
	float TargetFOVOffset; // 0x0(0x0)
	struct FVector TargetAnimationPosition; // 0x0(0x0)
	bool bLockCamera; // 0x0(0x0)
	bool bApplySceneTranslucent; // 0x0(0x0)
	bool bAllowCameraOffset; // 0x0(0x0)
	char pad_12F[0x9]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_CameraAnimation_NotifyAll
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_CameraAnimation_NotifyAll : UAnimNotify_AbilityNotify {
	float CameraArmLength; // 0x0(0x0)
	struct FVector CameraSocketOffset; // 0x0(0x0)
	struct FVector CameraArmPosition; // 0x0(0x0)
	float CameraFOV; // 0x0(0x0)
	float BlendInSpeed; // 0x0(0x0)
	float BlendOutSpeed; // 0x0(0x0)
	float BlendOutTime; // 0x0(0x0)
	bool bIsBlendOut; // 0x0(0x0)
	char pad_7D[0x3]; // 0x0(0x0)
	float ViewPitchMinAdditive; // 0x0(0x0)
	float ViewPitchMaxAdditive; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_CameraPitchInterp
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_CameraPitchInterp : UAnimNotify {
	float InterpTime; // 0x0(0x0)
	float PitchValue; // 0x0(0x0)
	float YawValue; // 0x0(0x0)
	char pad_44[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_CameraShake
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_CameraShake : UAnimNotify {
	struct UCameraShakeBase* CameraShakeClass; // 0x0(0x0)
	struct FString NotifyName; // 0x0(0x0)
	float ShakeMaxValidDistance; // 0x0(0x0)
	bool bAttenuation; // 0x0(0x0)
	bool bEffectSelf; // 0x0(0x0)
	char pad_56[0x2]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_CameraYawClampControl
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_CameraYawClampControl : UAnimNotify_AbilityNotify {
	struct FString NotifyName; // 0x0(0x0)
	float MaxYawOffset; // 0x0(0x0)
	bool bCameraStopYawClamp; // 0x0(0x0)
	char pad_65[0x3]; // 0x0(0x0)
	float MaxPitchOffset; // 0x0(0x0)
	bool bCameraStopPitchClamp; // 0x0(0x0)
	char bInClampCamera : 1; // 0x0(0x0)
	char pad_6D_1 : 7; // 0x0(0x0)
	char pad_6E[0x2]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_ChessNpcInteractEnd
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_ChessNpcInteractEnd : UAnimNotify {
};

 // Class /Script/Game.AnimNotify_CustomMotionState
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_CustomMotionState : UAnimNotifyState {
	struct FAnimMotionCustomData MotionData; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_EmitterArray
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_EmitterArray : UAnimNotify_AbilityNotify {
	struct TArray<__int32> EmitterIDs; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_EmitterNotify
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_EmitterNotify : UAnimNotify_AbilityNotify {
	__int32 EmitterID; // 0x0(0x0)
	bool bMarkSkillCastSuccess; // 0x0(0x0)
	char pad_55[0x13]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_EndSkill
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_EndSkill : UAnimNotify_AbilityNotify {
	struct FString NotifyName; // 0x0(0x0)
	bool bNormalMove; // 0x0(0x0)
	bool bAutoEnd_Aiming; // 0x0(0x0)
	bool bForceSkillEnd; // 0x0(0x0)
	bool bForceReplayShootMontage; // 0x0(0x0)
	float fReplayShootMontagePlayRate; // 0x0(0x0)
	enum class EWeaponState ReplayShootMontageWeaponState; // 0x0(0x0)
	char pad_69[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_EnergyStorageEndPosition
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_EnergyStorageEndPosition : UAnimNotify_AbilityNotify {
	struct FString NotifyName; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_OnChessFootLanding
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_OnChessFootLanding : UAnimNotify {
};

 // Class /Script/Game.AnimNotify_PlayEffect
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayEffect : UAnimNotify_PlayParticleEffect {
	enum class EAttachLocation AttachLocation; // 0x0(0x0)
	char bLockLocation : 1; // 0x0(0x0)
	char bLockRotation : 1; // 0x0(0x0)
	char bHideInGame : 1; // 0x0(0x0)
	char bReplaceEffect : 1; // 0x0(0x0)
	char pad_91_4 : 4; // 0x0(0x0)
	enum class EParticleEndPlayTriggerType EndPlayTriggerType; // 0x0(0x0)
	enum class EParticleDisappearType DisappearType; // 0x0(0x0)
	float PlayRate; // 0x0(0x0)
	enum class EGPSCPoolMethod PoolMethod; // 0x0(0x0)
	bool bSolo; // 0x0(0x0)
	bool bDeattachWhenSwitch; // 0x0(0x0)
	bool bAimNoSpawn; // 0x0(0x0)
	struct TWeakObjectPtr<struct UFXSystemComponent> SpawnedEffect; // 0x0(0x0)
	char pad_A4[0xC]; // 0x0(0x0)

	struct UFXSystemComponent* GetSpawnedEffect(); // Function /Script/Game.AnimNotify_PlayEffect.GetSpawnedEffect // (Final|Native|Public|BlueprintCallable|Const) // @ game+0
};

 // Class /Script/Game.AnimNotify_PlayEffect_Niagara
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayEffect_Niagara : UAnimNotify_PlayNiagaraEffect {
	enum class EAttachLocation AttachLocation; // 0x0(0x0)
	char bLockLocation : 1; // 0x0(0x0)
	char bLockRotation : 1; // 0x0(0x0)
	char bHideInGame : 1; // 0x0(0x0)
	char bReplaceEffect : 1; // 0x0(0x0)
	char pad_91_4 : 4; // 0x0(0x0)
	enum class EParticleEndPlayTriggerType EndPlayTriggerType; // 0x0(0x0)
	enum class EParticleDisappearType DisappearType; // 0x0(0x0)
	float PlayRate; // 0x0(0x0)
	enum class EGPSCPoolMethod PoolMethod; // 0x0(0x0)
	bool bSolo; // 0x0(0x0)
	bool bDeattachWhenSwitch; // 0x0(0x0)
	bool bAimNoSpawn; // 0x0(0x0)
	char pad_9C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_PlayEffect_Niagara_InBunker
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayEffect_Niagara_InBunker : UAnimNotify_PlayEffect_Niagara {
	bool bUseBunkerRot; // 0x0(0x0)
	char pad_A1[0xF]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_PlayEffectActor
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayEffectActor : UAnimNotify {
	struct FSoftClassPath EffectActorClassesPath; // 0x0(0x0)
	float EffectActorKeepTime; // 0x0(0x0)
	char pad_54[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_PlayFacialAnim
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayFacialAnim : UAnimNotifyState {
	__int32 FacialAnimDataID; // 0x0(0x0)
	char pad_34[0x24]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_PlayFacialAnim_Skm
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayFacialAnim_Skm : UAnimNotify {
	struct FString FacialAnimName; // 0x0(0x0)
	bool bUseWeaponName; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	struct FName SlotName; // 0x0(0x0)
	float BlendTime; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_PlayVoice
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayVoice : UAnimNotify {
	struct FString VoiceID; // 0x0(0x0)
	__int32 CharacterID; // 0x0(0x0)
	bool bAttached; // 0x0(0x0)
	char pad_4D[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_PlayWeaponEffect
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayWeaponEffect : UAnimNotify_PlayParticleEffect {
};

 // Class /Script/Game.AnimNotify_PlayWeaponNiagaraEffect
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayWeaponNiagaraEffect : UAnimNotify_PlayNiagaraEffect {
};

 // Class /Script/Game.AnimNotify_PlayWwise
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_PlayWwise : UAnimNotify {
	struct FString EventName; // 0x0(0x0)
	char bAttached : 1; // 0x0(0x0)
	char pad_48_1 : 7; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)
	__int32 SwitchState; // 0x0(0x0)
	enum class EParticleEndPlayTriggerType EndPlayTriggerType; // 0x0(0x0)
	char pad_59[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_SamePriorityBreakPoint
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_SamePriorityBreakPoint : UAnimNotify_AbilityNotify {
	struct FString NotifyName; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_SelectorTrigger
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_SelectorTrigger : UAnimNotify_AbilityNotify {
	struct FString NotifyName; // 0x0(0x0)
	float JumpToTime; // 0x0(0x0)
	char pad_64[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_SetAccessoryMaterial
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_SetAccessoryMaterial : UAnimNotify {
	struct TMap<__int32, struct UMaterialInterface*> Materials; // 0x0(0x0)
	struct ACharacterAccessory* AccessoryClass; // 0x0(0x0)
};

 // Class /Script/Game.CustomAnimNotifyState
// Size: 0x0 (Inherited: 0x0)
struct UCustomAnimNotifyState : UAnimNotifyState {
	char pad_30[0x3]; // 0x0(0x0)
	char bIsClient : 1; // 0x0(0x0)
	char bClientAndServer : 1; // 0x0(0x0)
	char bIsLocalClient : 1; // 0x0(0x0)
	char bUniversalWheelTip : 1; // 0x0(0x0)
	char pad_33_4 : 4; // 0x0(0x0)
	char pad_34[0xC]; // 0x0(0x0)

	void ReceiveTick(struct AActor* Character, struct UAnimSequenceBase* Animation, float FrameDeltaTime, struct AGameSkill* GameSkillRef, __int32 HashValue); // Function /Script/Game.CustomAnimNotifyState.ReceiveTick // (Event|Protected|BlueprintCallable|BlueprintEvent|Const) // @ game+0
	void ReceiveStop(struct AActor* Character, struct UAnimSequenceBase* Animation, struct AGameSkill* GameSkillRef, __int32 HashValue); // Function /Script/Game.CustomAnimNotifyState.ReceiveStop // (Event|Protected|BlueprintCallable|BlueprintEvent|Const) // @ game+0
	void ReceiveActive(struct AActor* Character, struct UAnimSequenceBase* AnimSquence, float TotalDuration, struct AGameSkill* GameSkillRef, __int32 HashValue); // Function /Script/Game.CustomAnimNotifyState.ReceiveActive // (Event|Protected|BlueprintCallable|BlueprintEvent|Const) // @ game+0
	void CheckUniversalWheelTip(struct AActor* Character, float TotalDuration); // Function /Script/Game.CustomAnimNotifyState.CheckUniversalWheelTip // (Final|Native|Protected|Const) // @ game+0
};

 // Class /Script/Game.AnimNotifyState_Base
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_Base : UCustomAnimNotifyState {
	bool bSkillCanceled; // 0x0(0x0)
	char pad_41[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_ShowTraceWarningTips
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_ShowTraceWarningTips : UAnimNotifyState_Base {
	struct FString SocketName; // 0x0(0x0)
	struct FSoftObjectPath TraceParticlePath; // 0x0(0x0)
	struct FSoftObjectPath HitPointParticlePath; // 0x0(0x0)
	struct FSoftObjectPath HitPointBlinkParticlePath; // 0x0(0x0)
	float TraceLength; // 0x0(0x0)
	float WarningTime; // 0x0(0x0)
	float BlinkTime; // 0x0(0x0)
	enum class ECollisionChannel BulletChannel; // 0x0(0x0)
	char pad_AD[0x3]; // 0x0(0x0)
	struct FSoftClassPath PathClass; // 0x0(0x0)
	bool bIgnoreFriendly; // 0x0(0x0)
	char pad_C9[0x7]; // 0x0(0x0)
	struct TMap<struct AActor*, struct TWeakObjectPtr<struct ARayPathWarning>> PathRefMap; // 0x0(0x0)
	char pad_120[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_ShowTraceWarningTipsForEmitter
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_ShowTraceWarningTipsForEmitter : UAnimNotifyState_Base {
	struct FString SocketName; // 0x0(0x0)
	__int32 EmitterID; // 0x0(0x0)
	bool bTickSearch; // 0x0(0x0)
	char pad_5D[0x3]; // 0x0(0x0)
	struct FSoftObjectPath TraceParticlePath; // 0x0(0x0)
	struct FSoftObjectPath HitPointParticlePath; // 0x0(0x0)
	struct FSoftObjectPath HitPointBlinkParticlePath; // 0x0(0x0)
	float WarningTime; // 0x0(0x0)
	float BlinkTime; // 0x0(0x0)
	enum class ECollisionChannel BulletChannel; // 0x0(0x0)
	char pad_B1[0x7]; // 0x0(0x0)
	struct FSoftClassPath PathClass; // 0x0(0x0)
	bool bIgnoreFriendly; // 0x0(0x0)
	char pad_D1[0x7]; // 0x0(0x0)
	struct FQueryResult Target; // 0x0(0x0)
	struct TMap<struct AActor*, struct TWeakObjectPtr<struct ARayPathWarning>> PathRefMap; // 0x0(0x0)
	char pad_198[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_UniversalWheelTip
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_UniversalWheelTip : UAnimNotifyState_Base {
};

 // Class /Script/Game.RayPathWarning
// Size: 0x0 (Inherited: 0x0)
struct ARayPathWarning : AActor {
	struct TWeakObjectPtr<struct AActor> RayPathOwner; // 0x0(0x0)
	struct FString SocketName; // 0x0(0x0)
	struct FSoftObjectPath TraceParticlePath; // 0x0(0x0)
	struct FSoftObjectPath HitPointParticlePath; // 0x0(0x0)
	struct FSoftObjectPath HitPointBlinkParticlePath; // 0x0(0x0)
	float BlinkTime; // 0x0(0x0)
	float TraceLength; // 0x0(0x0)
	enum class ECollisionChannel BulletChannel; // 0x0(0x0)
	bool bIgnoreFriendly; // 0x0(0x0)
	char pad_28A[0x6]; // 0x0(0x0)
	struct FQueryResult AimTarget; // 0x0(0x0)
	struct UFXSystemComponent* RayParticleRef; // 0x0(0x0)
	struct UFXSystemComponent* RayHitParticleRef; // 0x0(0x0)
	char pad_310[0x8]; // 0x0(0x0)

	void K2_ShowHitRayParticle(struct AActor* RayOwner, struct FHitResult& HitResult); // Function /Script/Game.RayPathWarning.K2_ShowHitRayParticle // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void K2_RayParticleDeactive(); // Function /Script/Game.RayPathWarning.K2_RayParticleDeactive // (Event|Public|BlueprintEvent) // @ game+0
	void K2_FreshRayParticle(struct AActor* RayOwner, float DeltaTime); // Function /Script/Game.RayPathWarning.K2_FreshRayParticle // (Event|Public|BlueprintEvent) // @ game+0
	void K2_CreateRayParticle(struct AActor* RayOwner); // Function /Script/Game.RayPathWarning.K2_CreateRayParticle // (Event|Public|BlueprintEvent) // @ game+0
	void FreshAimTarget(struct FQueryResult Result); // Function /Script/Game.RayPathWarning.FreshAimTarget // (Net|Native|Event|NetMulticast|Public) // @ game+0
};

 // Class /Script/Game.AnimNotify_SkeletalMeshAnim
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_SkeletalMeshAnim : UAnimNotify_AbilityNotify {
	struct USkeletalMesh* SkeletalMesh; // 0x0(0x0)
	struct UAnimationAsset* Sequence; // 0x0(0x0)
	bool bAttach; // 0x0(0x0)
	char pad_61[0x3]; // 0x0(0x0)
	struct FName Socket; // 0x0(0x0)
	struct FVector LocationOffset; // 0x0(0x0)
	struct FRotator RotatorOffset; // 0x0(0x0)
	char pad_84[0x4]; // 0x0(0x0)
	struct FSoftClassPath SkeletalMeshAgentClass; // 0x0(0x0)
	enum class EEnableBunker EnableInBunker; // 0x0(0x0)
	enum class EEnableBunkerMode FullBunkerMode; // 0x0(0x0)
	char pad_A2[0x6]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_SkeletalMeshAnimState
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_SkeletalMeshAnimState : UAnimNotifyState_Base {
	struct USkeletalMesh* SkeletalMesh; // 0x0(0x0)
	struct UAnimationAsset* Sequence; // 0x0(0x0)
	bool bLoop; // 0x0(0x0)
	bool bAttach; // 0x0(0x0)
	char pad_5A[0x2]; // 0x0(0x0)
	struct FName Socket; // 0x0(0x0)
	struct FVector LocationOffset; // 0x0(0x0)
	struct FRotator RotatorOffset; // 0x0(0x0)
	struct FVector Scale; // 0x0(0x0)
	struct FSoftClassPath SkeletalMeshAgentClass; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveFloat*> FloatParameters; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveLinearColor*> ColorParameters; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveVector*> VectorParameters; // 0x0(0x0)
	enum class ECharacterRenderStateType StateType; // 0x0(0x0)
	bool bIsCharacterMaterial; // 0x0(0x0)
	char pad_192[0x6]; // 0x0(0x0)
	struct FMaterialStateParameter Parameters; // 0x0(0x0)
	enum class EEnableBunker EnableInBunker; // 0x0(0x0)
	enum class EEnableBunkerMode FullBunkerMode; // 0x0(0x0)
	char pad_1DA[0xE]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_SpeedWarpingState
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_SpeedWarpingState : UAnimNotifyState {
};

 // Class /Script/Game.AnimNotify_StartEnergyStorage
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_StartEnergyStorage : UAnimNotify_AbilityNotify {
	struct FString NotifyName; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_StorageCharacterTransform
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_StorageCharacterTransform : UAnimNotify_AbilityNotify {
	enum class EStorageRotationType TurnType; // 0x0(0x0)
	char pad_51[0x17]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotify_WeaponTempYawOffsetClamp
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotify_WeaponTempYawOffsetClamp : UAnimNotify_AbilityNotify {
	struct FString NotifyName; // 0x0(0x0)
	bool bStopTempOffset; // 0x0(0x0)
	char pad_61[0x3]; // 0x0(0x0)
	float TempAimOffset; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyBackup
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyBackup : UDataAsset {
	struct TArray<struct FSavedAnimNotify> Data; // 0x0(0x0)
};

 // Class /Script/Game.AnimSyncMarkerBackup
// Size: 0x0 (Inherited: 0x0)
struct UAnimSyncMarkerBackup : UDataAsset {
	struct TArray<struct FSavedAnimSyncMarker> Data; // 0x0(0x0)
};

 // Class /Script/Game.SkeletonSocketBackup
// Size: 0x0 (Inherited: 0x0)
struct USkeletonSocketBackup : UDataAsset {
	struct TArray<struct FSaveSkeletonSocket> Data; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_AbilityBuffer
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_AbilityBuffer : UAnimNotifyState {
	struct TArray<struct UGameAbilityBuffer*> ActiveBufferClasses; // 0x0(0x0)
	struct TArray<struct UGameAbilityBuffer*> ActiveBufferes; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_AimWithSkill
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_AimWithSkill : UAnimNotifyState_Base {
};

 // Class /Script/Game.AnimNotifyState_CameraLag
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_CameraLag : UAnimNotifyState_Base {
	struct UCurveFloat* LagCurve; // 0x0(0x0)
	float MaxLagDistance; // 0x0(0x0)
	char pad_54[0x4]; // 0x0(0x0)
	__int32 IndexTest; // 0x0(0x0)
	char pad_5C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_CamLookTarget
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_CamLookTarget : UAnimNotifyState_Base {
	enum class EFaceToTargetType TargetType; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	__int32 EmitterID; // 0x0(0x0)
	char pad_50[0x10]; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, struct AActor*> TargetActorMap; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, struct FBoneResult> EmitterTargetMap; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, struct FVector> TargetLocMap; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_ChangeBoundsScale
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_ChangeBoundsScale : UAnimNotifyState_Base {
	float ChangeBoundsScale; // 0x0(0x0)
	char pad_4C[0x4]; // 0x0(0x0)
	struct TMap<struct USkeletalMeshComponent*, float> BoundsMap; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_CheckLocationValid
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_CheckLocationValid : UAnimNotifyState_Base {
	struct TArray<enum class EObjectTypeQuery> InvalidObjectTypes; // 0x0(0x0)
	struct FString NotifyName; // 0x0(0x0)
	char pad_68[0x38]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_CheckReloadEnd
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_CheckReloadEnd : UAnimNotifyState_Base {
	struct FName Section; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_CurveControlBase
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_CurveControlBase : UAnimNotifyState_Base {
	struct FSoftObjectPath CurveDataPath; // 0x0(0x0)
	char pad_60[0x10]; // 0x0(0x0)
	struct UCurveFloat* CurveData; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_AddRotation
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_AddRotation : UAnimNotifyState_CurveControlBase {
};

 // Class /Script/Game.AnimNotifyState_DisableAimOffsetLag
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_DisableAimOffsetLag : UAnimNotifyState {
	char pad_30[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_DisablePhysicalAnim
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_DisablePhysicalAnim : UAnimNotifyState {
};

 // Class /Script/Game.AnimNotifyState_DodgeBreakable
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_DodgeBreakable : UAnimNotifyState_Base {
	struct FString NotifyName; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_Dodgging
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_Dodgging : UAnimNotifyState {
};

 // Class /Script/Game.DropClipSettings
// Size: 0x0 (Inherited: 0x0)
struct UDropClipSettings : UObject {
	struct TArray<struct FDropClipRule> DropClipRules; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_DropClip
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_DropClip : UAnimNotifyState {
	char pad_30[0x8]; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)
	float MinWeaponClipLifeTime; // 0x0(0x0)
	float MaxWeaponClipLifeTime; // 0x0(0x0)
	float RandomDropSpeed; // 0x0(0x0)
	char bImmediately : 1; // 0x0(0x0)
	char pad_4C_1 : 7; // 0x0(0x0)
	char pad_4D[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_EmitterNotify
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_EmitterNotify : UAnimNotifyState_Base {
	__int32 EmitterID; // 0x0(0x0)
	bool bKeepRunning; // 0x0(0x0)
	bool bNeedJumpToEndPosition; // 0x0(0x0)
	char pad_4E[0x12]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_EnableDerivedSkill
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_EnableDerivedSkill : UAnimNotifyState_Base {
	struct FString NotifyName; // 0x0(0x0)
	struct TArray<__int32> DerivedSkills; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_EnablePriorityBreakableSkill
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_EnablePriorityBreakableSkill : UAnimNotifyState_Base {
	struct FString NotifyName; // 0x0(0x0)
	struct TArray<__int32> SkillIDs; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_EnergyStorageParticle
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_EnergyStorageParticle : UAnimNotifyState_Base {
	struct TArray<struct FEnergyStorageEffect> Effects; // 0x0(0x0)
	struct TArray<struct FEnergyStorageEffect> KeepParticles; // 0x0(0x0)
	struct TMap<struct AGameSkill*, struct FEffectStorage> EffectGameRefMap; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_EnermySlomo
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_EnermySlomo : UAnimNotifyState_Base {
	struct FString CurveName; // 0x0(0x0)
	enum class ESlomoTarget TargetType; // 0x0(0x0)
	bool bScaleSlomo; // 0x0(0x0)
	enum class ESlomPriority SlomPriority; // 0x0(0x0)
	char pad_5B[0x15]; // 0x0(0x0)
	float CurrentTimeDilation; // 0x0(0x0)
	char pad_74[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_ExternalKawaiiPhysicSetting
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_ExternalKawaiiPhysicSetting : UAnimNotifyState {
	struct UCachedKawaiiPhysicsSettings* ExternalKawaiiPhysicsSettings; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_FaceToAimLoc
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_FaceToAimLoc : UAnimNotifyState_Base {
	enum class EFaceToTargetType TargetType; // 0x0(0x0)
	bool SkillUseCtrl; // 0x0(0x0)
	char pad_4A[0x2]; // 0x0(0x0)
	__int32 EmitterID; // 0x0(0x0)
	float RotatorSpeed; // 0x0(0x0)
	float LerpThreahold; // 0x0(0x0)
	bool bFaceApplyInBunker; // 0x0(0x0)
	char pad_59[0x17]; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, struct AActor*> TargetActorMap; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, struct FBoneResult> EmitterTargetMap; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, struct FVector> TargetLocMap; // 0x0(0x0)
	float RotDuration; // 0x0(0x0)
	struct FRotator LastTargetRotator; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_HandIKCorrection
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_HandIKCorrection : UAnimNotifyState {
	struct FHandIKCorrectionBoneIno CorrectionData; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_HandOffWeapon
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_HandOffWeapon : UAnimNotifyState {
};

 // Class /Script/Game.AnimNotifyState_SetWeaponInvisible
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_SetWeaponInvisible : UAnimNotifyState_HandOffWeapon {
};

 // Class /Script/Game.AnimNotifyState_HideFightCross
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_HideFightCross : UAnimNotifyState {
};

 // Class /Script/Game.AnimNotifyState_InterruptEmitter
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_InterruptEmitter : UAnimNotifyState_Base {
	__int32 EmitterID; // 0x0(0x0)
	bool bEndExecute; // 0x0(0x0)
	char pad_4D[0x13]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_ModifyCustomRotationParam
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_ModifyCustomRotationParam : UAnimNotifyState_Base {
	struct FVector RotationSpeed_Add; // 0x0(0x0)
	char pad_54[0x4]; // 0x0(0x0)
	struct FRuntimeFloatCurve RatationRatio_AngleDiffCurve; // 0x0(0x0)
	float RatationRatio; // 0x0(0x0)
	float DecelerationRatio; // 0x0(0x0)
	float AecelerationRatio; // 0x0(0x0)
	char pad_EC[0x4]; // 0x0(0x0)
	struct TArray<enum class ESimpleMoveType> ExcludeMoveTypeContainer; // 0x0(0x0)
	char pad_100[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_NewCollision
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_NewCollision : UAnimNotifyState_Base {
	struct FName CollisionTag; // 0x0(0x0)
	bool bApplyEffect; // 0x0(0x0)
	char pad_51[0x3]; // 0x0(0x0)
	__int32 EffectEmitterID; // 0x0(0x0)
	struct TArray<__int32> EffectEmitterIDs; // 0x0(0x0)
	struct TArray<struct FCastEmitterCondition> ConditionEmitters; // 0x0(0x0)
	bool bUseGroup; // 0x0(0x0)
	char pad_79[0x3]; // 0x0(0x0)
	__int32 CollisionQueryTimes; // 0x0(0x0)
	enum class EANS_MarkSkillCastSuccessType MarkCastSuccessType; // 0x0(0x0)
	char pad_81[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_Niagara_AimHide
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_Niagara_AimHide : UAnimNotifyState_TimedNiagaraEffect {
};

 // Class /Script/Game.AnimNotifyState_ParametersChangeOnMat
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_ParametersChangeOnMat : UAnimNotifyState {
	char bUseForAllMat : 1; // 0x0(0x0)
	char bUseForAllMesh : 1; // 0x0(0x0)
	char pad_30_2 : 6; // 0x0(0x0)
	char pad_31[0x7]; // 0x0(0x0)
	struct TArray<__int32> Indexs; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveFloat*> FloatParameters; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveLinearColor*> ColorParameters; // 0x0(0x0)
	struct TMap<struct FName, float> EndFloatParameters; // 0x0(0x0)
	struct TMap<struct FName, struct FLinearColor> EndColorParameters; // 0x0(0x0)
	bool bReset; // 0x0(0x0)
	char pad_189[0x3]; // 0x0(0x0)
	float CurrentTime; // 0x0(0x0)
	float TotalTime; // 0x0(0x0)
	char pad_194[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_PauseLevelTime
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_PauseLevelTime : UAnimNotifyState {
};

 // Class /Script/Game.AnimNotifyState_PlayEffectActor
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_PlayEffectActor : UAnimNotifyState {
	struct FSoftClassPath EffectActorClassesPath; // 0x0(0x0)
	struct TArray<struct ACustomEffectActor*> EffectActors; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_PlayWwise
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_PlayWwise : UAnimNotifyState {
	struct FString EventName; // 0x0(0x0)
	char bAttached : 1; // 0x0(0x0)
	char pad_40_1 : 7; // 0x0(0x0)
	char pad_41[0x3]; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)
	char pad_4C[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_PostProcess
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_PostProcess : UAnimNotifyState_Base {
	enum class EPostProcessType ProcessType; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	struct FName Linker; // 0x0(0x0)
	char pad_54[0x4]; // 0x0(0x0)
	struct UPostProcessParams* Params; // 0x0(0x0)
	char pad_60[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_CharacterEffect
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_CharacterEffect : UAnimNotifyState_Base {
	bool bApplyStart; // 0x0(0x0)
	bool bApplyTick; // 0x0(0x0)
	bool bApplyEnd; // 0x0(0x0)
	char pad_4B[0x1]; // 0x0(0x0)
	struct FName EffectName; // 0x0(0x0)
	enum class ECharacterRenderStateType StateType; // 0x0(0x0)
	char pad_55[0x3]; // 0x0(0x0)
	struct FFlexibleEnumValue CharacterEffectType; // 0x0(0x0)
	__int32 Priority; // 0x0(0x0)
	__int32 Slot; // 0x0(0x0)
	bool bIgnoreTranslucent2Mask; // 0x0(0x0)
	char pad_65[0x3]; // 0x0(0x0)
	float OutlineBlendTime; // 0x0(0x0)
	bool bUseCustomDepth; // 0x0(0x0)
	bool bCustomDepth; // 0x0(0x0)
	bool bUseCustomStencil; // 0x0(0x0)
	char pad_6F[0x1]; // 0x0(0x0)
	__int32 CustomStencil; // 0x0(0x0)
	__int32 SecondarySlot; // 0x0(0x0)
	struct UMaterialInterface* SecondaryMaterial; // 0x0(0x0)
	struct UCurveFloat* Curve; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveFloat*> FloatParameters; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveLinearColor*> ColorParameters; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveVector*> VectorParameters; // 0x0(0x0)
	struct FMaterialStateParameter Parameters; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_CharacterEffect2
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_CharacterEffect2 : UAnimNotifyState {
	bool bApplyStart; // 0x0(0x0)
	bool bApplyTick; // 0x0(0x0)
	bool bApplyEnd; // 0x0(0x0)
	enum class ECharacterRenderStateType StateType; // 0x0(0x0)
	bool bUseCustomDepth; // 0x0(0x0)
	bool bCustomDepth; // 0x0(0x0)
	bool bUseCustomStencil; // 0x0(0x0)
	char pad_37[0x1]; // 0x0(0x0)
	__int32 CustomStencil; // 0x0(0x0)
	char pad_3C[0x4]; // 0x0(0x0)
	struct UCurveFloat* Curve; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveFloat*> FloatParameters; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveLinearColor*> ColorParameters; // 0x0(0x0)
	struct TMap<struct FName, struct UCurveVector*> VectorParameters; // 0x0(0x0)
	struct FMaterialStateParameter Parameters; // 0x0(0x0)
	char pad_178[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.CustomAnimNotify_NiagaraSpeed
// Size: 0x0 (Inherited: 0x0)
struct UCustomAnimNotify_NiagaraSpeed : UAnimNotify_AbilityNotify {
	struct FString Tag; // 0x0(0x0)
	float Speed; // 0x0(0x0)
	char pad_64[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.CustomAnimNotify_UMGEffect
// Size: 0x0 (Inherited: 0x0)
struct UCustomAnimNotify_UMGEffect : UAnimNotifyState {
	struct UUserWidget* UMG; // 0x0(0x0)
	struct UUserWidget* Widget; // 0x0(0x0)
};

 // Class /Script/Game.CustomAnimNotify_CameraNearPlane
// Size: 0x0 (Inherited: 0x0)
struct UCustomAnimNotify_CameraNearPlane : UAnimNotifyState {
	float Value; // 0x0(0x0)
	char pad_34[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.CustomAnimNotify_CloseExponentialHeightFog
// Size: 0x0 (Inherited: 0x0)
struct UCustomAnimNotify_CloseExponentialHeightFog : UAnimNotifyState_Base {
};

 // Class /Script/Game.CustomAnimNotify_CallBlueprintEvent
// Size: 0x0 (Inherited: 0x0)
struct UCustomAnimNotify_CallBlueprintEvent : UAnimNotify {
	struct FString EventName; // 0x0(0x0)
	struct AActor* Class; // 0x0(0x0)
	bool bForceCall; // 0x0(0x0)
	char pad_51[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_PreReloading
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_PreReloading : UAnimNotifyState_Base {
	char pad_48[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_ReloadBullet
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_ReloadBullet : UAnimNotifyState_Base {
	__int32 BulletCount; // 0x0(0x0)
	float AheadCompleteTime; // 0x0(0x0)
	bool bLoopReload; // 0x0(0x0)
	char pad_51[0x17]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_Reloading
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_Reloading : UAnimNotifyState_Base {
	bool bStopAllowInterruptReload; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	float CanStopReloadTime; // 0x0(0x0)
	bool bIsShotGun; // 0x0(0x0)
	char pad_51[0x3]; // 0x0(0x0)
	float CurrentReloadDuration; // 0x0(0x0)
	float ReloadTotalDuration; // 0x0(0x0)
	char pad_5C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_ReloadState
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_ReloadState : UAnimNotifyState_Base {
};

 // Class /Script/Game.AnimNotifyState_RenewClip
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_RenewClip : UAnimNotifyState {
	char pad_30[0x8]; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_SetBunkerExitTime
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_SetBunkerExitTime : UAnimNotifyState_Base {
	float ExitTime; // 0x0(0x0)
	char pad_4C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_SetCollProfile
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_SetCollProfile : UAnimNotifyState_Base {
	struct FCollisionProfileName CollisionPresets; // 0x0(0x0)
	bool bEndReset; // 0x0(0x0)
	char pad_51[0x7]; // 0x0(0x0)
	struct FString NotifyName; // 0x0(0x0)
	char pad_68[0x28]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_SetSkeletonAimTargetLoc
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_SetSkeletonAimTargetLoc : UAnimNotifyState_Base {
	__int32 EmitterID; // 0x0(0x0)
	char pad_4C[0x14]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_SkillAimOffset
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_SkillAimOffset : UAnimNotifyState_Base {
	struct FSkillAimOffsetData CorrectionData; // 0x0(0x0)
	float fBlendOutTime; // 0x0(0x0)
	bool bUseSkillBlendOut; // 0x0(0x0)
	char pad_1A5[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_TargetWarping
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_TargetWarping : UAnimNotifyState {
	struct UMotionCurveModifier* MotionCurveModifier; // 0x0(0x0)
	bool bEnableMotionCurveNinjaMode; // 0x0(0x0)
	bool bLockPlayerMove; // 0x0(0x0)
	bool bLockPlayerControl; // 0x0(0x0)
	bool bLockPlayerFireAndAim; // 0x0(0x0)
	bool bMatchTargetLocationWhenNotifyEnd; // 0x0(0x0)
	char pad_3D[0x3]; // 0x0(0x0)

	void OnWarpUpdate(struct UTargetWarpingComponent* MotionWarpingComp, struct UMotionCurveModifier* Modifier); // Function /Script/Game.AnimNotifyState_TargetWarping.OnWarpUpdate // (Event|Public|BlueprintEvent|Const) // @ game+0
	void OnWarpEnd(struct UTargetWarpingComponent* MotionWarpingComp, struct UMotionCurveModifier* Modifier); // Function /Script/Game.AnimNotifyState_TargetWarping.OnWarpEnd // (Event|Public|BlueprintEvent|Const) // @ game+0
	void OnWarpBegin(struct UTargetWarpingComponent* MotionWarpingComp, struct UMotionCurveModifier* Modifier); // Function /Script/Game.AnimNotifyState_TargetWarping.OnWarpBegin // (Event|Public|BlueprintEvent|Const) // @ game+0
	void OnMotionCurveModifierUpdate(struct UTargetWarpingComponent* MotionWarpingComp, struct UMotionCurveModifier* Modifier, enum class EMotionCurveModifierState MotionCurveModifierState); // Function /Script/Game.AnimNotifyState_TargetWarping.OnMotionCurveModifierUpdate // (Final|Native|Public|Const) // @ game+0
	void OnMotionCurveModifierDeactivate(struct UTargetWarpingComponent* MotionWarpingComp, struct UMotionCurveModifier* Modifier, enum class EMotionCurveModifierState MotionCurveModifierState); // Function /Script/Game.AnimNotifyState_TargetWarping.OnMotionCurveModifierDeactivate // (Final|Native|Public|Const) // @ game+0
	void OnMotionCurveModifierActivate(struct UTargetWarpingComponent* MotionWarpingComp, struct UMotionCurveModifier* Modifier, enum class EMotionCurveModifierState MotionCurveModifierState); // Function /Script/Game.AnimNotifyState_TargetWarping.OnMotionCurveModifierActivate // (Final|Native|Public|Const) // @ game+0
	struct UMotionCurveModifier* AddMotionCurveModifier(struct UTargetWarpingComponent* MotionWarpingComp, struct UAnimSequenceBase* Animation, float StartTime, float EndTime); // Function /Script/Game.AnimNotifyState_TargetWarping.AddMotionCurveModifier // (Native|Event|Public|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.AnimNotifyState_WeaponReload
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_WeaponReload : UAnimNotifyState_InterruptEmitter {
	float NotifyStateTotalDuration; // 0x0(0x0)
	float FrameTotalDuration; // 0x0(0x0)
	float NotifyStateThreshold; // 0x0(0x0)
	char pad_6C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AutoPSO
// Size: 0x0 (Inherited: 0x0)
struct AAutoPSO : AActor {
	struct FMulticastInlineDelegate OnPSOStateChanged; // 0x0(0x0)
	struct UAutoPSOSubsystem* PSOSystem; // 0x0(0x0)
	__int32 MaxPreivewCount; // 0x0(0x0)
	char pad_23C[0x4]; // 0x0(0x0)
	struct AGamePlayerController* PlayerController; // 0x0(0x0)
	char pad_248[0x18]; // 0x0(0x0)
	struct AActor* ViewActor; // 0x0(0x0)
	struct AActor* ViewCastSkill; // 0x0(0x0)
	char pad_270[0x58]; // 0x0(0x0)

	bool Begin(); // Function /Script/Game.AutoPSO.Begin // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AutoPSOSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UAutoPSOSubsystem : UGameInstanceSubsystem {
	char pad_30[0x18]; // 0x0(0x0)
	struct FAutoPSOConfig Config; // 0x0(0x0)
	struct FAutoPSORuntime Runtime; // 0x0(0x0)
	char pad_88[0xC8]; // 0x0(0x0)

	void Stop(); // Function /Script/Game.AutoPSOSubsystem.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Pause(bool InPause); // Function /Script/Game.AutoPSOSubsystem.Pause // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnMapReady(); // Function /Script/Game.AutoPSOSubsystem.OnMapReady // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnMapExit(); // Function /Script/Game.AutoPSOSubsystem.OnMapExit // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetCurrentPercent(); // Function /Script/Game.AutoPSOSubsystem.GetCurrentPercent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Begin(); // Function /Script/Game.AutoPSOSubsystem.Begin // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AutoUploadPipelinecache(__int32 BuildNumber); // Function /Script/Game.AutoPSOSubsystem.AutoUploadPipelinecache // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BalanceShow
// Size: 0x0 (Inherited: 0x0)
struct ABalanceShow : ACineCameraActor {
	char bActived : 1; // 0x0(0x0)
	char pad_810_1 : 7; // 0x0(0x0)
	char pad_811[0x7]; // 0x0(0x0)
	struct UGameCameraAnimMetaDataInfo* AnimationAsset; // 0x0(0x0)
	__int32 StartCameraIndex; // 0x0(0x0)
	__int32 EndCameraIndex; // 0x0(0x0)
	float DealyExhibitionTime; // 0x0(0x0)
	char pad_82C[0x14]; // 0x0(0x0)

	void StartBalanceShow(enum class ELevelFinishResult FinishResult); // Function /Script/Game.BalanceShow.StartBalanceShow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReceiveShowExhibition(); // Function /Script/Game.BalanceShow.ReceiveShowExhibition // (Event|Protected|BlueprintEvent|Const) // @ game+0
	void ReceiveSettlement(); // Function /Script/Game.BalanceShow.ReceiveSettlement // (Event|Protected|BlueprintEvent|Const) // @ game+0
	bool ReceiveActive(enum class ELevelFinishResult FinishResult); // Function /Script/Game.BalanceShow.ReceiveActive // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0
	struct USceneComponent* FindComponentByTag(struct FName Tag); // Function /Script/Game.BalanceShow.FindComponentByTag // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.BaseMovementComponent
// Size: 0x0 (Inherited: 0x0)
struct UBaseMovementComponent : UCharacterMovementComponent {
	struct UAbilityComponent* AbilityComponent; // 0x0(0x0)
	char bRunning : 1; // 0x0(0x0)
	char bEnableJump : 1; // 0x0(0x0)
	char pad_B08_2 : 6; // 0x0(0x0)
	char pad_B09[0x7]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnRisingToFloating; // 0x0(0x0)
	struct FMulticastInlineDelegate OnFloatingToDown; // 0x0(0x0)
	char pad_B30[0x10]; // 0x0(0x0)
	enum class EAbnormalState CurrentAbnormalState; // 0x0(0x0)
	char pad_B41[0x7]; // 0x0(0x0)
	struct FAbnormalInfo CurrentStateInfo; // 0x0(0x0)
	char pad_BA0[0x20]; // 0x0(0x0)
	struct USkillMove* SkillMove; // 0x0(0x0)
	struct TArray<struct USkillMove*> SkillMove_Update; // 0x0(0x0)
	struct TArray<struct USkillMove*> DirtyMove; // 0x0(0x0)
	struct UAbnormalMove* AbnormalMove; // 0x0(0x0)
	float FrozenTime; // 0x0(0x0)
	char pad_BF4[0x4]; // 0x0(0x0)
	struct UCurveFloat* FrozenCurve; // 0x0(0x0)
	struct FVector LastCurveMoveVolocity; // 0x0(0x0)
	struct FVector AdditiveVelocity; // 0x0(0x0)
	struct URepelAbnormalMove* RepelAbnormal; // 0x0(0x0)
	struct UFloatingAbnormalMove* FloatingAbnormal; // 0x0(0x0)
	char pad_C28[0x1]; // 0x0(0x0)
	char bDisableVectorProjectWhenBlock : 1; // 0x0(0x0)
	char pad_C29_1 : 7; // 0x0(0x0)
	char pad_C2A[0x2]; // 0x0(0x0)
	float MoveBlockVectorProjectMinFactor; // 0x0(0x0)
	float TargetFramerate; // 0x0(0x0)
	char pad_C34[0xC]; // 0x0(0x0)

	void SetVectorProjectWhenBlockEnabled(bool bEnabled); // Function /Script/Game.BaseMovementComponent.SetVectorProjectWhenBlockEnabled // (Native|Public|BlueprintCallable) // @ game+0
	void SetCurrentSkillMove(struct USkillMove* NewSkillMove); // Function /Script/Game.BaseMovementComponent.SetCurrentSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCurrentAbnormalState(enum class EAbnormalState NewState, bool bForceRemove); // Function /Script/Game.BaseMovementComponent.SetCurrentAbnormalState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetMaxSpeed(); // Function /Script/Game.BaseMovementComponent.ResetMaxSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveUpdateSkillMove(struct USkillMove* InvalidSkillMove); // Function /Script/Game.BaseMovementComponent.RemoveUpdateSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnAbnormalUpdate(struct FAbnormalInfo& StateInfo, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.BaseMovementComponent.OnAbnormalUpdate // (Final|Native|Public|HasOutParms) // @ game+0
	void MoveBlock(struct FHitResult& HitResult); // Function /Script/Game.BaseMovementComponent.MoveBlock // (Final|Native|Public|HasOutParms) // @ game+0
	void ModifyMaxSpeed(float Value); // Function /Script/Game.BaseMovementComponent.ModifyMaxSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ModifyMaxRotationRate(float Pitch, float Yaw, float Roll); // Function /Script/Game.BaseMovementComponent.ModifyMaxRotationRate // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FRotator K2_GetDeltaRotation(float DeltaTime); // Function /Script/Game.BaseMovementComponent.K2_GetDeltaRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float K2_GetCharacterMaxSpeed(); // Function /Script/Game.BaseMovementComponent.K2_GetCharacterMaxSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInSkillMove(); // Function /Script/Game.BaseMovementComponent.IsInSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInAnimMotionState(); // Function /Script/Game.BaseMovementComponent.IsInAnimMotionState // (Final|Native|Public) // @ game+0
	bool GetMoveStatus(float& OutDirection); // Function /Script/Game.BaseMovementComponent.GetMoveStatus // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetIsCurveMotionState(); // Function /Script/Game.BaseMovementComponent.GetIsCurveMotionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct USkillMove* GetCurrentSkillMove(); // Function /Script/Game.BaseMovementComponent.GetCurrentSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetAbnormalInfo(struct FAbnormalInfo& Info); // Function /Script/Game.BaseMovementComponent.GetAbnormalInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void CreatSkillMoveByMagic(struct FVector TargetLocation, struct AActor* Goal, struct AGameCharacter* Target, struct FMagicParameter& Info, struct UModifier* ModifierRef, struct FString SkillMoveName); // Function /Script/Game.BaseMovementComponent.CreatSkillMoveByMagic // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void CreateSkillMoveByMagic_Multi(struct FVector TargetLocation, struct AActor* Goal, __int32 ModifierRunTimeID, struct FMagicParameter Info, struct FString SkillMoveName, unsigned __int32 InUniqueID); // Function /Script/Game.BaseMovementComponent.CreateSkillMoveByMagic_Multi // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void CreateSkillMove_Multi(struct FQueryResult Target, __int32 EmitterID, float EmitterMontageDurationTime, struct FString SkillMoveName, unsigned __int32 InUniqueID); // Function /Script/Game.BaseMovementComponent.CreateSkillMove_Multi // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void CreateSkillMove(struct FQueryResult& Target, struct USkillEmitter* EmitterOwner, __int32 EmitterID, float EmitterMontageDurationTime, struct FString SkillMoveName); // Function /Script/Game.BaseMovementComponent.CreateSkillMove // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void CancleSkillMoveByModifier(__int32 ModifierRunTimeID); // Function /Script/Game.BaseMovementComponent.CancleSkillMoveByModifier // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void CancleCurrentSkillMove_Multi(unsigned __int32 InSkillMoveUniqueID); // Function /Script/Game.BaseMovementComponent.CancleCurrentSkillMove_Multi // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void CancleCurrentSkillMove(struct USkillMove* RemoveMove); // Function /Script/Game.BaseMovementComponent.CancleCurrentSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CancelAllSkillMove(); // Function /Script/Game.BaseMovementComponent.CancelAllSkillMove // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void AddUpdateSkillMove(struct USkillMove* NewSkillMove); // Function /Script/Game.BaseMovementComponent.AddUpdateSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameCharacter
// Size: 0x0 (Inherited: 0x0)
struct AGameCharacter : ACharacter {
	char pad_4C0[0x18]; // 0x0(0x0)
	struct UAbilityComponent* Ability; // 0x0(0x0)
	struct UAIControlDataComponent* AIControlData; // 0x0(0x0)
	struct UCharacterRenderComponent* CharacterRenderComponent; // 0x0(0x0)
	struct UUMGDataComponent* UMGDataComponent; // 0x0(0x0)
	struct UAbnormalComponent* AbnormalComponent; // 0x0(0x0)
	struct UPauseFrameComponent* PauseFrameComponent; // 0x0(0x0)
	enum class ECharacterType Type; // 0x0(0x0)
	enum class ESummonType SummonType; // 0x0(0x0)
	char Camp; // 0x0(0x0)
	char Level; // 0x0(0x0)
	__int32 AreaId; // 0x0(0x0)
	char bIsCaptain : 1; // 0x0(0x0)
	char pad_510_1 : 7; // 0x0(0x0)
	char pad_511[0x7]; // 0x0(0x0)
	struct TMap<__int32, __int32> SpineNodeSkillIdAndLevel; // 0x0(0x0)
	__int32 PatrolIndex; // 0x0(0x0)
	char pad_56C[0x4]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct AGameCharacter>> AllSummoned; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> SummonedOwner; // 0x0(0x0)
	struct FRuntimeEASInfo SummonedRuntimeEASInfo; // 0x0(0x0)
	struct TWeakObjectPtr<struct AController> SummonedOwnerController; // 0x0(0x0)
	char pad_5AC[0x4]; // 0x0(0x0)
	struct AGamePlayerController* CharacterController; // 0x0(0x0)
	char pad_5B8[0x8]; // 0x0(0x0)
	struct FTransform SpawnTransform; // 0x0(0x0)
	bool bIgnore; // 0x0(0x0)
	char pad_5F1[0x7]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct ACharacterAccessory>> CharacterAccessories; // 0x0(0x0)
	enum class ECharacterCameraFade CameraFadeType; // 0x0(0x0)
	char pad_609[0x7]; // 0x0(0x0)
	__int64 TemplateId; // 0x0(0x0)
	__int64 CharacterCardID; // 0x0(0x0)
	char pad_620[0x10]; // 0x0(0x0)
	struct UCharacterCard* PlayerLineupMember; // 0x0(0x0)
	char pad_638[0x8]; // 0x0(0x0)
	struct USkeletalMesh* OriginSkeletal; // 0x0(0x0)
	struct USMStateMachineComponent* CharacterStateMachineClass; // 0x0(0x0)
	struct USMStateMachineComponent* CharacterStateMachine; // 0x0(0x0)
	struct UCharacterMovementComponent* CharacterMovementClass; // 0x0(0x0)
	bool bOptimizeNavWalk; // 0x0(0x0)
	char pad_661[0x7]; // 0x0(0x0)
	struct AAbilityCollisionEditor* AbilityCollisionExhibition; // 0x0(0x0)
	struct TArray<struct USceneComponent*> AllDamageComponents; // 0x0(0x0)
	struct FMulticastInlineDelegate OnMoveBlockBy; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAbilityCollisionEditorNotifyEnter; // 0x0(0x0)
	struct TArray<struct APlayerWeapon*> AllPlayerWeapons; // 0x0(0x0)
	struct APlayerWeapon* PlayerWeapon; // 0x0(0x0)
	bool bWeaponHiddenInGame; // 0x0(0x0)
	char pad_6B9[0x3]; // 0x0(0x0)
	unsigned __int32 ActorHiddenType; // 0x0(0x0)
	float DodgeYawThreshold; // 0x0(0x0)
	char bInHalfSkillMontage : 1; // 0x0(0x0)
	char pad_6C4_1 : 7; // 0x0(0x0)
	char DodgeAnimationId; // 0x0(0x0)
	char pad_6C6[0x2]; // 0x0(0x0)
	float DodgeDesiredYaw; // 0x0(0x0)
	char pad_6CC[0x24]; // 0x0(0x0)
	struct FTransform AbnormalEffectOffset; // 0x0(0x0)
	float PreFireTime; // 0x0(0x0)
	float CurrentPreFireTime; // 0x0(0x0)
	char pad_728[0x4]; // 0x0(0x0)
	float AimingShootRange; // 0x0(0x0)
	float NormalShootRange; // 0x0(0x0)
	char pad_734[0x4]; // 0x0(0x0)
	struct TMap<enum class ERangeAttackState, struct UHitReactData*> HitReactionDataContainer; // 0x0(0x0)
	struct UAttributeAbnormalReactData* AttributeAbnormalReactData; // 0x0(0x0)
	struct UAbnormalReactData* AbnormalReactData; // 0x0(0x0)
	bool bCloseAnimOptimizations; // 0x0(0x0)
	char pad_799[0x3]; // 0x0(0x0)
	struct FPawnViewData PawnViewData; // 0x0(0x0)
	char pad_7B4[0x4]; // 0x0(0x0)
	struct TArray<struct FPawnViewData> PawnViewDataList; // 0x0(0x0)
	struct USpringArmComponent* SpringArmComponent; // 0x0(0x0)
	struct USceneComponent* AssistTargetComponent; // 0x0(0x0)
	char pad_7D8[0x1]; // 0x0(0x0)
	char bBlockCheckTarget : 1; // 0x0(0x0)
	char bIsAttacked : 1; // 0x0(0x0)
	char pad_7D9_2 : 6; // 0x0(0x0)
	char pad_7DA[0x2]; // 0x0(0x0)
	float EnterSwitchTime; // 0x0(0x0)
	float LeaveSwitchTime; // 0x0(0x0)
	char pad_7E4[0x4]; // 0x0(0x0)
	struct FMulticastInlineDelegate StageBreakProgress; // 0x0(0x0)
	struct FMulticastInlineDelegate OnFinishSwitchCharacter; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyPlayerActionFlay; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyPlayerMoveState; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCameraMove; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyEquipedWeapon; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifySummon; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyTriggerAvoid; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPickupDrop; // 0x0(0x0)
	struct FMulticastInlineDelegate OnMoveStepEvent; // 0x0(0x0)
	struct FMulticastInlineDelegate OnDoHitReaction; // 0x0(0x0)
	__int32 HitSoundEvent; // 0x0(0x0)
	__int32 HitWeaknessSoundEvent; // 0x0(0x0)
	struct TMap<enum class EModifyHPResult, __int32> SoundEventMap; // 0x0(0x0)
	__int32 KilledSoundEvent; // 0x0(0x0)
	float CurrentTimeDilation; // 0x0(0x0)
	struct TArray<struct UObject*> TimeDilationSources; // 0x0(0x0)
	struct TArray<struct USkeletalMeshComponent*> AllMesh; // 0x0(0x0)
	struct TArray<struct USkeletalMeshComponent*> NonePartitionSkeletalComp; // 0x0(0x0)
	struct TArray<struct USkeletalMeshComponent*> PartitionSkeletalComp; // 0x0(0x0)
	struct TArray<struct UBonePartitionBaseData*> PartitionDatas; // 0x0(0x0)
	struct TArray<struct FScaredCrowPartitionData> ScaredCrowPartitions; // 0x0(0x0)
	struct UBonePartitionBaseData* MainMeshPartitionData; // 0x0(0x0)
	float UseReviveCoinTime; // 0x0(0x0)
	char pad_964[0x4]; // 0x0(0x0)
	struct TMap<struct FString, struct UCurveSequence_PhysicalRecoilAnimation*> RecoilCurveSequencePhyContainer; // 0x0(0x0)
	struct TMap<struct FString, struct UCurveSequence_RecoilAnimation*> RecoilCurveSequenceContainer; // 0x0(0x0)
	struct TMap<struct FString, struct FRecoilSetup> HitsSetup; // 0x0(0x0)
	char pad_A58[0x80]; // 0x0(0x0)
	struct AActor* MeshActor; // 0x0(0x0)
	char CollisionMask; // 0x0(0x0)
	char MoveIgnoreCollisionMask; // 0x0(0x0)
	char pad_AE2[0xE]; // 0x0(0x0)

	void UpdateTips(enum class EFightMonsterTipsType InTipsType, bool Inactive); // Function /Script/Game.GameCharacter.UpdateTips // (Final|Native|Protected) // @ game+0
	void TryReaction_AttributeAbnormal(enum class EAttributeAbnormalState InAttributeAbnormalState); // Function /Script/Game.GameCharacter.TryReaction_AttributeAbnormal // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAnimation(); // Function /Script/Game.GameCharacter.StopAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StartAnimation(); // Function /Script/Game.GameCharacter.StartAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Spwaned(); // Function /Script/Game.GameCharacter.Spwaned // (Native|Event|Public|BlueprintEvent) // @ game+0
	void ShowFightTip(__int32 TipType, struct FString Message, bool bShowUIAnim); // Function /Script/Game.GameCharacter.ShowFightTip // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWeaponState(enum class EWeaponState WeaponState); // Function /Script/Game.GameCharacter.SetWeaponState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWeaponHiddenInGame(bool bHiddenInGame); // Function /Script/Game.GameCharacter.SetWeaponHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWeapon(struct APlayerWeapon* lpPlayerWeapon); // Function /Script/Game.GameCharacter.SetWeapon // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void SetupComponents(); // Function /Script/Game.GameCharacter.SetupComponents // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetTempSkeletalMesh(struct FString SkeletalMeshPath, struct FString HeadMeshPath); // Function /Script/Game.GameCharacter.SetTempSkeletalMesh // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	bool SetStateEventId2(char StateMachineIdx, char EventId); // Function /Script/Game.GameCharacter.SetStateEventId2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool SetStateEventId(char StateMachineIdx, char EventId, bool bResetOwner); // Function /Script/Game.GameCharacter.SetStateEventId // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetRootMotionMode(enum class ERootMotionMode Value); // Function /Script/Game.GameCharacter.SetRootMotionMode // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetInHalfSkillMontage(bool bInHalfSkill); // Function /Script/Game.GameCharacter.SetInHalfSkillMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetGrowAttributeID(__int32 nGrowAttributeID); // Function /Script/Game.GameCharacter.SetGrowAttributeID // (Native|Public|BlueprintCallable) // @ game+0
	void SetDodgeDirection(); // Function /Script/Game.GameCharacter.SetDodgeDirection // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCharacterController(struct AGamePlayerController* InController); // Function /Script/Game.GameCharacter.SetCharacterController // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCanAsAITarget(bool InbCanAsAITarget); // Function /Script/Game.GameCharacter.SetCanAsAITarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAttrackEnmityEnable(bool bEnable); // Function /Script/Game.GameCharacter.SetAttrackEnmityEnable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ServerSetDodgeInfo(char nDodgeAnimationId, float fDodgeDesiredYaw); // Function /Script/Game.GameCharacter.ServerSetDodgeInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_DebugKillTeamMember(); // Function /Script/Game.GameCharacter.Server_DebugKillTeamMember // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_DebugKillSelf(); // Function /Script/Game.GameCharacter.Server_DebugKillSelf // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_DebugKillAllEnemy(); // Function /Script/Game.GameCharacter.Server_DebugKillAllEnemy // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void ResetSkeletalMesh(); // Function /Script/Game.GameCharacter.ResetSkeletalMesh // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void ResetCurrentPreFireTime(); // Function /Script/Game.GameCharacter.ResetCurrentPreFireTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveAccessory(struct ACharacterAccessory* InAcc); // Function /Script/Game.GameCharacter.RemoveAccessory // (Native|Public|BlueprintCallable) // @ game+0
	void ReceiveSkillStart(bool bHalfSkill, bool bHalfSkillInAim); // Function /Script/Game.GameCharacter.ReceiveSkillStart // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveSkillEnd(bool bHalfSkill, bool bHalfSkillInAim); // Function /Script/Game.GameCharacter.ReceiveSkillEnd // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveIsAllowAimed(struct AGameCharacter* CurrentInstigator); // Function /Script/Game.GameCharacter.ReceiveIsAllowAimed // (Event|Protected|BlueprintEvent|Const) // @ game+0
	void ReceiveHitAction(struct FHitResult& Hit); // Function /Script/Game.GameCharacter.ReceiveHitAction // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	float RecalcAttributeValue(struct UAbilityAttribute* AbilityAttribute, float CurrentValue, char CurrentLevel, bool bInverted); // Function /Script/Game.GameCharacter.RecalcAttributeValue // (Native|Public|BlueprintCallable) // @ game+0
	void PostEventAttachedActor(struct FString InEventName); // Function /Script/Game.GameCharacter.PostEventAttachedActor // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void PlayerExitBunkerInteract(); // Function /Script/Game.GameCharacter.PlayerExitBunkerInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayerEnterBunkerInteract(); // Function /Script/Game.GameCharacter.PlayerEnterBunkerInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OpenHighLightBorder(); // Function /Script/Game.GameCharacter.OpenHighLightBorder // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnTakeDamage(struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.GameCharacter.OnTakeDamage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void OnSwitchLeave(struct FTransform& Trans); // Function /Script/Game.GameCharacter.OnSwitchLeave // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
	void OnSwitchEnter(struct FTransform& Trans); // Function /Script/Game.GameCharacter.OnSwitchEnter // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
	void OnRep_UseReviveCoinTime(); // Function /Script/Game.GameCharacter.OnRep_UseReviveCoinTime // (Final|Native|Protected) // @ game+0
	void OnRep_TimeDilation(); // Function /Script/Game.GameCharacter.OnRep_TimeDilation // (Final|Native|Private) // @ game+0
	void OnRep_SetTemplateId(); // Function /Script/Game.GameCharacter.OnRep_SetTemplateId // (Final|Native|Public) // @ game+0
	void OnRep_SetInHalfSkillMontage(); // Function /Script/Game.GameCharacter.OnRep_SetInHalfSkillMontage // (Final|Native|Public) // @ game+0
	void OnRep_SetCharacterCardId(); // Function /Script/Game.GameCharacter.OnRep_SetCharacterCardId // (Final|Native|Public) // @ game+0
	void OnRep_CharacterAccessories(); // Function /Script/Game.GameCharacter.OnRep_CharacterAccessories // (Final|Native|Public) // @ game+0
	void OnMoveStep(); // Function /Script/Game.GameCharacter.OnMoveStep // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool OnLifeSpanExpired(); // Function /Script/Game.GameCharacter.OnLifeSpanExpired // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void OnKill(struct AGameCharacter* BeKilledCharacter); // Function /Script/Game.GameCharacter.OnKill // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void OnDie(struct AGameCharacter* Who, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.GameCharacter.OnDie // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0
	void NotifyFightUmgTips(bool Inactive); // Function /Script/Game.GameCharacter.NotifyFightUmgTips // (Native|Public|BlueprintCallable) // @ game+0
	void NotifyFightTipsFirstAdd(); // Function /Script/Game.GameCharacter.NotifyFightTipsFirstAdd // (Net|Native|Event|NetMulticast|Public) // @ game+0
	void Multicast_SwitchLeave(); // Function /Script/Game.GameCharacter.Multicast_SwitchLeave // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void Multicast_SwitchEnter(); // Function /Script/Game.GameCharacter.Multicast_SwitchEnter // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	bool K2_IsFalling(); // Function /Script/Game.GameCharacter.K2_IsFalling // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UCharacterCard* K2_GetPlayerMember(); // Function /Script/Game.GameCharacter.K2_GetPlayerMember // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FBoneResult K2_GetPartitionMainPart(struct FString PartitionName); // Function /Script/Game.GameCharacter.K2_GetPartitionMainPart // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FBoneResult K2_GetPartitionMainBone(struct FString PartitionName); // Function /Script/Game.GameCharacter.K2_GetPartitionMainBone // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct AGameCharacter*> K2_GetCachedGameCharacters(); // Function /Script/Game.GameCharacter.K2_GetCachedGameCharacters // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsVehicle(); // Function /Script/Game.GameCharacter.IsVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsTrap(); // Function /Script/Game.GameCharacter.IsTrap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsSummon(); // Function /Script/Game.GameCharacter.IsSummon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsSpecialized(); // Function /Script/Game.GameCharacter.IsSpecialized // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsQTECharacter(); // Function /Script/Game.GameCharacter.IsQTECharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsPlayerNpc(); // Function /Script/Game.GameCharacter.IsPlayerNpc // (Native|Event|Public|BlueprintEvent) // @ game+0
	bool IsPlayer(); // Function /Script/Game.GameCharacter.IsPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsOptimizeNavWalk(); // Function /Script/Game.GameCharacter.IsOptimizeNavWalk // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInSwitch(); // Function /Script/Game.GameCharacter.IsInSwitch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInRush(); // Function /Script/Game.GameCharacter.IsInRush // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInIdle(); // Function /Script/Game.GameCharacter.IsInIdle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInHalfSkillMontage(); // Function /Script/Game.GameCharacter.IsInHalfSkillMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInFire(); // Function /Script/Game.GameCharacter.IsInFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInAim(); // Function /Script/Game.GameCharacter.IsInAim // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsHostage(); // Function /Script/Game.GameCharacter.IsHostage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsDestructible(); // Function /Script/Game.GameCharacter.IsDestructible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsDead(); // Function /Script/Game.GameCharacter.IsDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsCurrentCharacter(); // Function /Script/Game.GameCharacter.IsCurrentCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsBunker(); // Function /Script/Game.GameCharacter.IsBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAlive(); // Function /Script/Game.GameCharacter.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAI(); // Function /Script/Game.GameCharacter.IsAI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAdvancedAction(); // Function /Script/Game.GameCharacter.IsAdvancedAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAbnormalStateIgnore(enum class EAbnormalState State); // Function /Script/Game.GameCharacter.IsAbnormalStateIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool HasRelation(struct AActor* InTarget, __int32 RelationMask); // Function /Script/Game.GameCharacter.HasRelation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct APlayerWeapon* GetWeapon(); // Function /Script/Game.GameCharacter.GetWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct FQueryResult> GetWeaknessPartsResults(bool bFindScaredCrow); // Function /Script/Game.GameCharacter.GetWeaknessPartsResults // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetWeaknessAndInefficientCount(__int32& WeaknessCount, __int32& InefficientlyCount); // Function /Script/Game.GameCharacter.GetWeaknessAndInefficientCount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	float GetUseReviveCoinRemainTime(); // Function /Script/Game.GameCharacter.GetUseReviveCoinRemainTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class ETriangleAttributeType GetTriangleType(); // Function /Script/Game.GameCharacter.GetTriangleType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	enum class EFightMonsterTipsType GetTipType(); // Function /Script/Game.GameCharacter.GetTipType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int64 GetTemplateID(); // Function /Script/Game.GameCharacter.GetTemplateID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FString GetTeamName(); // Function /Script/Game.GameCharacter.GetTeamName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UTeamAbilityComponent* GetTeamAbilityComponent(); // Function /Script/Game.GameCharacter.GetTeamAbilityComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetSummonMonsterType(enum class EMonsterType& OutMonsterType); // Function /Script/Game.GameCharacter.GetSummonMonsterType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AController* GetSummonedOwnerController(); // Function /Script/Game.GameCharacter.GetSummonedOwnerController // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameCharacter* GetSummonedOwner(); // Function /Script/Game.GameCharacter.GetSummonedOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector GetSpecialActorForward(); // Function /Script/Game.GameCharacter.GetSpecialActorForward // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FTransform GetSpawnTransform(); // Function /Script/Game.GameCharacter.GetSpawnTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetPlayerIndex(); // Function /Script/Game.GameCharacter.GetPlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetMonsterType(enum class EMonsterType& OutMonsterType); // Function /Script/Game.GameCharacter.GetMonsterType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FBoneResult GetMainPartition(bool bFindScaredCrow); // Function /Script/Game.GameCharacter.GetMainPartition // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAnimInstance* GetGameAnimInstance(); // Function /Script/Game.GameCharacter.GetGameAnimInstance // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetDodgeDirection(); // Function /Script/Game.GameCharacter.GetDodgeDirection // (Final|Native|Public|BlueprintCallable) // @ game+0
	char GetDodgeAnimationId(); // Function /Script/Game.GameCharacter.GetDodgeAnimationId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetCurrentStateId(char StateMachineIdx); // Function /Script/Game.GameCharacter.GetCurrentStateId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGamePlayerController* GetCharacterController(); // Function /Script/Game.GameCharacter.GetCharacterController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetCharacterCardID(); // Function /Script/Game.GameCharacter.GetCharacterCardID // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetCharacterActionState(); // Function /Script/Game.GameCharacter.GetCharacterActionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetCharacterAccessories(struct TArray<struct ACharacterAccessory*>& OutCharacterAccessories); // Function /Script/Game.GameCharacter.GetCharacterAccessories // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	char GetCamp(); // Function /Script/Game.GameCharacter.GetCamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetAllSummoned(struct TArray<struct AGameCharacter*>& OutAllSummoned); // Function /Script/Game.GameCharacter.GetAllSummoned // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<struct FBoneResult> GetAllPartition(bool bFindScaredCrow); // Function /Script/Game.GameCharacter.GetAllPartition // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetAimTime(); // Function /Script/Game.GameCharacter.GetAimTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct ACharacterAccessory* GetAccessoryByName(struct FString AccessoryName); // Function /Script/Game.GameCharacter.GetAccessoryByName // (Native|Public|BlueprintCallable) // @ game+0
	struct ACharacterAccessory* GetAccessoryByClass(struct ACharacterAccessory* AccessoryClass); // Function /Script/Game.GameCharacter.GetAccessoryByClass // (Native|Public|BlueprintCallable) // @ game+0
	void ForceIdle(bool bIsUpperBody); // Function /Script/Game.GameCharacter.ForceIdle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ForbidMoveAndRotation(); // Function /Script/Game.GameCharacter.ForbidMoveAndRotation // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector FindFloor(); // Function /Script/Game.GameCharacter.FindFloor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void EnablePhysicalAnimReact(); // Function /Script/Game.GameCharacter.EnablePhysicalAnimReact // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EnableMoveAndRotation(); // Function /Script/Game.GameCharacter.EnableMoveAndRotation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DoRecoilAction(enum class ERangeAttackState InState); // Function /Script/Game.GameCharacter.DoRecoilAction // (Native|Public|BlueprintCallable) // @ game+0
	void DoPhysicalRecoilAction(enum class ERangeAttackState InState, enum class ERecoilCurveDataType RecoilType); // Function /Script/Game.GameCharacter.DoPhysicalRecoilAction // (Native|Public|BlueprintCallable) // @ game+0
	void DisablePhysicalAnimReact(); // Function /Script/Game.GameCharacter.DisablePhysicalAnimReact // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CloseHighLightBorder(); // Function /Script/Game.GameCharacter.CloseHighLightBorder // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Client_OnSwitchLeave(struct FTransform Trans); // Function /Script/Game.GameCharacter.Client_OnSwitchLeave // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void Client_OnSwitchEnter(struct FTransform Trans); // Function /Script/Game.GameCharacter.Client_OnSwitchEnter // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	bool CheckSkillPriority(); // Function /Script/Game.GameCharacter.CheckSkillPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckPlayerActionFlag(enum class EPlayerAction PlayerAction); // Function /Script/Game.GameCharacter.CheckPlayerActionFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckCharacterActionState(enum class ECharacterActionState CharacterStateFlag); // Function /Script/Game.GameCharacter.CheckCharacterActionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckAllPlayerDead(); // Function /Script/Game.GameCharacter.CheckAllPlayerDead // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void CharacterHiddenInGame(bool bNewHidden, enum class EHiddenActorType InType); // Function /Script/Game.GameCharacter.CharacterHiddenInGame // (Native|Public|BlueprintCallable) // @ game+0
	void ChangeWeaponByItem(struct UWeaponItem* WeaponItem); // Function /Script/Game.GameCharacter.ChangeWeaponByItem // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ChangeWeapon(struct APlayerWeapon* Weapon); // Function /Script/Game.GameCharacter.ChangeWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanUseReviveCoin(); // Function /Script/Game.GameCharacter.CanUseReviveCoin // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanRush(); // Function /Script/Game.GameCharacter.CanRush // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CanProcessTriggerEvent(); // Function /Script/Game.GameCharacter.CanProcessTriggerEvent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CanAsAITarget(); // Function /Script/Game.GameCharacter.CanAsAITarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char CalcDodgeInfo(struct FVector TargetDodgeDir); // Function /Script/Game.GameCharacter.CalcDodgeInfo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	char CalcAdvanceMoveDirection(struct FVector TargetDodgeDir); // Function /Script/Game.GameCharacter.CalcAdvanceMoveDirection // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void BroadcastSetDodgeInfo(char nDodgeAnimationId, float fDodgeDesiredYaw); // Function /Script/Game.GameCharacter.BroadcastSetDodgeInfo // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void AttachWeapon(struct UWeaponItem* WeaponItem); // Function /Script/Game.GameCharacter.AttachWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool AttachCharacterAccessory(struct ACharacterAccessory* CharacterAccessoryClass); // Function /Script/Game.GameCharacter.AttachCharacterAccessory // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ApplyPhysicalSimulatedEffect(struct FApplyHitPhysicalResultData& HitPhysicalResultData); // Function /Script/Game.GameCharacter.ApplyPhysicalSimulatedEffect // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void ApplyKillTeamMember(); // Function /Script/Game.GameCharacter.ApplyKillTeamMember // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ApplyKillSelf(); // Function /Script/Game.GameCharacter.ApplyKillSelf // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ApplyKillAllEnemy(); // Function /Script/Game.GameCharacter.ApplyKillAllEnemy // (Final|Native|Public|BlueprintCallable) // @ game+0
	float Abnormal_RepelAnimTime(__int32 AnimType, bool bIsBack); // Function /Script/Game.GameCharacter.Abnormal_RepelAnimTime // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	float Abnormal_LieDownAnimTime(__int32 AnimType); // Function /Script/Game.GameCharacter.Abnormal_LieDownAnimTime // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	float Abnormal_GetUpAnimTime(__int32 AnimType); // Function /Script/Game.GameCharacter.Abnormal_GetUpAnimTime // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.GameAICharacter
// Size: 0x0 (Inherited: 0x0)
struct AGameAICharacter : AGameCharacter {
	bool bDisableCollisionWhenDie; // 0x0(0x0)
	bool bUseCrowdFollowing; // 0x0(0x0)
	float BunkerMoveCDAfterAbort; // 0x0(0x0)
	__int32 TransformedSkill; // 0x0(0x0)
	bool bUseAIPerception; // 0x0(0x0)
	bool bIsSpecialized; // 0x0(0x0)
	char pad_AFC[0x28]; // 0x0(0x0)
	struct FSpawnNpcSpCfg AdditionalAttribute; // 0x0(0x0)
	char pad_B34[0x4]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAILeave; // 0x0(0x0)
	struct FMulticastInlineDelegate OnDroneChangeState; // 0x0(0x0)
	char pad_B58[0x8]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnLeaveBunkerEvent; // 0x0(0x0)
	enum class EBunkerAnimType BunkerAnimType; // 0x0(0x0)
	bool bIsInBunker; // 0x0(0x0)
	bool bEnteringBunker; // 0x0(0x0)
	bool bLeavingBunker; // 0x0(0x0)
	char pad_B74[0x1C]; // 0x0(0x0)
	struct UAnimSequenceBase* EnterAnim; // 0x0(0x0)
	struct UAnimSequenceBase* LeaveAnim; // 0x0(0x0)
	struct UAnimSequenceBase* LeaveAnimManual; // 0x0(0x0)
	bool bUseEnterLeaveAnim; // 0x0(0x0)
	char pad_BA9[0x3]; // 0x0(0x0)
	float BlendTime; // 0x0(0x0)
	struct UAICondition* InFightCondition; // 0x0(0x0)
	bool bNeedAddToCaches; // 0x0(0x0)
	bool bIsInLifeSpanExpired; // 0x0(0x0)
	bool bIsInFightState; // 0x0(0x0)
	bool bHadOneShotKill; // 0x0(0x0)
	__int32 DynamicLevel; // 0x0(0x0)
	char pad_BC0[0x1]; // 0x0(0x0)
	bool bCharge; // 0x0(0x0)
	char pad_BC2[0x2]; // 0x0(0x0)
	float TotalChargeTime; // 0x0(0x0)
	float ChargeTime; // 0x0(0x0)
	char pad_BCC[0x4]; // 0x0(0x0)
	struct UAIPerformanceComponent* AIPerformanceComp; // 0x0(0x0)
	char pad_BD8[0x8]; // 0x0(0x0)
	struct TArray<struct FFlexibleEnumValue> CampPriority; // 0x0(0x0)
	bool bPushAwaySlowerOthers; // 0x0(0x0)
	char pad_BF1[0x3]; // 0x0(0x0)
	float PushDistance; // 0x0(0x0)
	struct UCharacterSqueezeComponent* SqueezeComponent; // 0x0(0x0)
	enum class EMovementMode CurrMovementMode; // 0x0(0x0)
	bool bUseNavWalk; // 0x0(0x0)
	char pad_C02[0xE]; // 0x0(0x0)

	void TriggerTransformedSkill(); // Function /Script/Game.GameAICharacter.TriggerTransformedSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AGameCharacter* TransformedToMonster(__int32 MonsterId, __int32 AIID); // Function /Script/Game.GameAICharacter.TransformedToMonster // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TitanCheckTeammateByCode(struct UAbilityComponent* InAbility, struct TArray<__int32> EliteIDArray); // Function /Script/Game.GameAICharacter.TitanCheckTeammateByCode // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StartLeaveBunker_BP(); // Function /Script/Game.GameAICharacter.StartLeaveBunker_BP // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AGameAICharacter* SpawnAICharacter(struct UObject* Conetext, struct FSpawnNpcParams& SpawnNpcParams, struct AActor* InOwner); // Function /Script/Game.GameAICharacter.SpawnAICharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetAICharacterEnable(bool bIsEnabled, bool bRemoveFromTeam); // Function /Script/Game.GameAICharacter.SetAICharacterEnable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResumeLogic(struct FString Reason); // Function /Script/Game.GameAICharacter.ResumeLogic // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PauseLogic(struct FString Reason); // Function /Script/Game.GameAICharacter.PauseLogic // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnSkillEnd(__int32 SkillID); // Function /Script/Game.GameAICharacter.OnSkillEnd // (Native|Protected) // @ game+0
	void OnSkillCancel(__int32 SkillID, enum class ESkillInterruptedType InType); // Function /Script/Game.GameAICharacter.OnSkillCancel // (Native|Protected) // @ game+0
	void OnLeaveBunker_Normal(); // Function /Script/Game.GameAICharacter.OnLeaveBunker_Normal // (Event|Public|BlueprintEvent) // @ game+0
	void OnAbnormalStateUpdate(struct FAbnormalInfo& AbnormalInfo, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.GameAICharacter.OnAbnormalStateUpdate // (Final|Native|Protected|HasOutParms) // @ game+0
	void NetMultiCast_PlayLeaveMontage(); // Function /Script/Game.GameAICharacter.NetMultiCast_PlayLeaveMontage // (Net|Native|Event|NetMulticast|Protected) // @ game+0
	void LeaveBunkerHandle_Timer(); // Function /Script/Game.GameAICharacter.LeaveBunkerHandle_Timer // (Final|Native|Protected) // @ game+0
	void Leave(); // Function /Script/Game.GameAICharacter.Leave // (Native|Public|BlueprintCallable) // @ game+0
	bool IsLeavingingBunker(); // Function /Script/Game.GameAICharacter.IsLeavingingBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsInBunker(); // Function /Script/Game.GameAICharacter.IsInBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsImmortal(); // Function /Script/Game.GameAICharacter.IsImmortal // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsEnteringBunker(); // Function /Script/Game.GameAICharacter.IsEnteringBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void HandleEnterAnimIndex(__int32 AnimIndex); // Function /Script/Game.GameAICharacter.HandleEnterAnimIndex // (Event|Public|BlueprintEvent) // @ game+0
	bool GetCharacterIsEnable(); // Function /Script/Game.GameAICharacter.GetCharacterIsEnable // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetBunkerDistRatio(); // Function /Script/Game.GameAICharacter.GetBunkerDistRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	enum class EBunkerAnimType GetBunkerAnimType(); // Function /Script/Game.GameAICharacter.GetBunkerAnimType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GameAIInstruction(struct FString Instruction, bool bIsEnable); // Function /Script/Game.GameAICharacter.GameAIInstruction // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EnterBunkerHandle_Timer(); // Function /Script/Game.GameAICharacter.EnterBunkerHandle_Timer // (Final|Native|Protected) // @ game+0
	void DispatchEventToClient(struct FName EventId); // Function /Script/Game.GameAICharacter.DispatchEventToClient // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void CastSkillImmediately(__int32 SkillID, __int32 InSkillLevel, struct AActor* SkillTarget, struct FVector PosTarget); // Function /Script/Game.GameAICharacter.CastSkillImmediately // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void CapsuleComponentHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComponent, struct FVector NormalImpulse, struct FHitResult& Hit); // Function /Script/Game.GameAICharacter.CapsuleComponentHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0
	void BeginCharge(float InChargeTime); // Function /Script/Game.GameAICharacter.BeginCharge // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BaseTitan
// Size: 0x0 (Inherited: 0x0)
struct ABaseTitan : AGameAICharacter {
	float TurnThreshold_End; // 0x0(0x0)
	float TurnThreshold; // 0x0(0x0)
	float TurnThresholdFight; // 0x0(0x0)
	float TurnThreshold_90; // 0x0(0x0)
	float YawRate_90; // 0x0(0x0)
	struct UAnimMontage* LTurnMontage; // 0x0(0x0)
	struct UAnimMontage* LTurnMontage_90; // 0x0(0x0)
	struct UAnimMontage* RTurnMontage; // 0x0(0x0)
	struct UAnimMontage* RTurnMontage_90; // 0x0(0x0)
};

 // Class /Script/Game.MonsterMovementComponent
// Size: 0x0 (Inherited: 0x0)
struct UMonsterMovementComponent : UBaseMovementComponent {
	struct UAIControlDataComponent* AIControlData; // 0x0(0x0)
	struct UMonsterMoveContextObject* MoveCtxObj; // 0x0(0x0)
	bool bGenerateMoveContext; // 0x0(0x0)
	float MainSpeedModify; // 0x0(0x0)

	void UpdateFloorOnGear(); // Function /Script/Game.MonsterMovementComponent.UpdateFloorOnGear // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 IsInAnimRootMotion(); // Function /Script/Game.MonsterMovementComponent.IsInAnimRootMotion // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetSpeedModifyValue(); // Function /Script/Game.MonsterMovementComponent.GetSpeedModifyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UMonsterMoveContextObject* GetMoveCtxObject(); // Function /Script/Game.MonsterMovementComponent.GetMoveCtxObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.MonsterMovementComponent_BaseTitan
// Size: 0x0 (Inherited: 0x0)
struct UMonsterMovementComponent_BaseTitan : UMonsterMovementComponent {
	char pad_C50[0x20]; // 0x0(0x0)
	struct UAnimMontage* TurnMontagePlaying; // 0x0(0x0)
	char pad_C78[0x8]; // 0x0(0x0)

	void OnMontageFinished(struct UAnimMontage* Montage, bool bInterrupted); // Function /Script/Game.MonsterMovementComponent_BaseTitan.OnMontageFinished // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.AnimInstance_BaseTitan
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_BaseTitan : UMonsterAnimInstance {
	float Speed; // 0x0(0x0)
	char pad_514[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.CharacterAccessory_Titan_FireArm
// Size: 0x0 (Inherited: 0x0)
struct ACharacterAccessory_Titan_FireArm : AAccessory_Destructible {
	struct FName FireBone; // 0x0(0x0)
};

 // Class /Script/Game.AnimInstance_Titan_FireArm
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_Titan_FireArm : UAnimInstance_AccessoryBase {
	struct FRotator AimOffset; // 0x0(0x0)
	char pad_2CC[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.GameAIController
// Size: 0x0 (Inherited: 0x0)
struct AGameAIController : AAIController {
	struct FMulticastInlineDelegate OnAIStateChange; // 0x0(0x0)
	char pad_338[0x4]; // 0x0(0x0)
	__int32 CurrStateIndex; // 0x0(0x0)
	struct UAIStateMachineComponent* StateMachine; // 0x0(0x0)
	char pad_348[0x60]; // 0x0(0x0)
	struct UFightLogicComponent* FightLogicComponent; // 0x0(0x0)
	struct UPatrolLogicComponent* PatrolLogicComponent; // 0x0(0x0)
	char pad_3B8[0x8]; // 0x0(0x0)
	struct TArray<struct UAIEvent*> AIEvents; // 0x0(0x0)
	struct UAIEvent* FightAIEvent; // 0x0(0x0)
	char pad_3D8[0x10]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAIHasNewTarget; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSkillEndDynamic; // 0x0(0x0)
	bool bCanDetect; // 0x0(0x0)
	char pad_409[0x7]; // 0x0(0x0)
	struct FMulticastInlineDelegate ReceiveMoveCompletedEx; // 0x0(0x0)
	struct UEnvQuery* TargetChooseQuery; // 0x0(0x0)
	char pad_428[0xC]; // 0x0(0x0)
	__int32 TemplateId; // 0x0(0x0)
	struct TArray<struct UAIBaseState*> States; // 0x0(0x0)
	struct AActor* PreTargetActor; // 0x0(0x0)
	struct AActor* ForceTargetActor; // 0x0(0x0)
	struct AActor* ForceActorTargetPlayerController; // 0x0(0x0)
	struct UBunkerPointComponent* TargetBunkerPoint; // 0x0(0x0)
	struct UBunkerPointComponent* PreTargetBunkerPoint; // 0x0(0x0)
	char pad_470[0x20]; // 0x0(0x0)

	void SetTargetBunkerPoint(struct UBunkerPointComponent* InPoint); // Function /Script/Game.GameAIController.SetTargetBunkerPoint // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSceneTarget(struct AActor* InTarget); // Function /Script/Game.GameAIController.SetSceneTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPreTargetBunkerPoint(struct UBunkerPointComponent* InPoint); // Function /Script/Game.GameAIController.SetPreTargetBunkerPoint // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetActorTarget(struct AActor* InTarget, bool bForce); // Function /Script/Game.GameAIController.SetActorTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResumeLogic(struct FString Reason); // Function /Script/Game.GameAIController.ResumeLogic // (Native|Public|BlueprintCallable) // @ game+0
	void RegisterOWEndFightEvent(); // Function /Script/Game.GameAIController.RegisterOWEndFightEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PutAIEvents(struct TArray<struct UAIEvent*> InAIEvents); // Function /Script/Game.GameAIController.PutAIEvents // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PutAIEventInClass(struct FString AIEventClass, struct FString FightEventFlag, struct FString Param0, struct FString Param1, struct FString Param2, struct FString Param3, struct FString Param4, struct FString Param5); // Function /Script/Game.GameAIController.PutAIEventInClass // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0
	void PutAIEvent(struct UAIEvent* InAIEvent, bool bInFightAIEvent); // Function /Script/Game.GameAIController.PutAIEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PauseLogic(struct FString Reason); // Function /Script/Game.GameAIController.PauseLogic // (Native|Public|BlueprintCallable) // @ game+0
	void OWEndFightMoveEnd(struct FAIRequestID RequestID, enum class EPathFollowingResult Result, struct AAIController* AIController); // Function /Script/Game.GameAIController.OWEndFightMoveEnd // (Final|Native|Public) // @ game+0
	void OnSMStateChanged(struct USMInstance* Instance, struct FSMStateInfo NewState, struct FSMStateInfo PreState); // Function /Script/Game.GameAIController.OnSMStateChanged // (Final|Native|Protected) // @ game+0
	void OnSkillEnd(__int32 SkillID); // Function /Script/Game.GameAIController.OnSkillEnd // (Final|Native|Protected) // @ game+0
	void OnSkillEmit(__int32 SkillID); // Function /Script/Game.GameAIController.OnSkillEmit // (Final|Native|Protected) // @ game+0
	void OnSkillCancel(__int32 SkillID, enum class ESkillInterruptedType InType); // Function /Script/Game.GameAIController.OnSkillCancel // (Final|Native|Protected) // @ game+0
	void OnPerceptionUpdated(struct AActor* Actor, struct FAIStimulus Stimulus); // Function /Script/Game.GameAIController.OnPerceptionUpdated // (Final|Native|Protected) // @ game+0
	bool IsState(struct FString Name); // Function /Script/Game.GameAIController.IsState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInFightState(); // Function /Script/Game.GameAIController.IsInFightState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool HasAIEvent(struct UAIEvent* AIEventClass); // Function /Script/Game.GameAIController.HasAIEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UEnvQuery* GetTargetChooseQuery(); // Function /Script/Game.GameAIController.GetTargetChooseQuery // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UBunkerPointComponent* GetTargetBunkerPoint(); // Function /Script/Game.GameAIController.GetTargetBunkerPoint // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetStateKeepTime(); // Function /Script/Game.GameAIController.GetStateKeepTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TSet<struct AGameCharacter*> GetSeeEnemyChars(); // Function /Script/Game.GameAIController.GetSeeEnemyChars // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetSceneTarget(); // Function /Script/Game.GameAIController.GetSceneTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UBunkerPointComponent* GetPreTargetBunkerPoint(); // Function /Script/Game.GameAIController.GetPreTargetBunkerPoint // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetNowStateIndex(); // Function /Script/Game.GameAIController.GetNowStateIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAIBaseState* GetNowState(); // Function /Script/Game.GameAIController.GetNowState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAIBaseStateParams* GetNowParams(); // Function /Script/Game.GameAIController.GetNowParams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector GetMoveTargetLocation(); // Function /Script/Game.GameAIController.GetMoveTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameCharacter* GetGameCharacterTarget(); // Function /Script/Game.GameAIController.GetGameCharacterTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAIEvent* GetCurrentEvent(bool bInFightAIEvent); // Function /Script/Game.GameAIController.GetCurrentEvent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetActorTarget(); // Function /Script/Game.GameAIController.GetActorTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void ClearTargetBunkerPoint(bool bUsePreBunkerPoint); // Function /Script/Game.GameAIController.ClearTargetBunkerPoint // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanInFight(); // Function /Script/Game.GameAIController.CanInFight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.GameAIController_BaseTitan
// Size: 0x0 (Inherited: 0x0)
struct AGameAIController_BaseTitan : AGameAIController {
};

 // Class /Script/Game.BiDataRecord
// Size: 0x0 (Inherited: 0x0)
struct UBiDataRecord : UBlueprintFunctionLibrary {

	void PostFromParam(struct FString InUrl, struct TMap<struct FString, struct FString>& InFormParams); // Function /Script/Game.BiDataRecord.PostFromParam // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void PostFromContent(struct FString InUrl, struct TMap<struct FString, struct FString>& InFormParams, struct TArray<char>& InContent); // Function /Script/Game.BiDataRecord.PostFromContent // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void Post(struct FString InUrl); // Function /Script/Game.BiDataRecord.Post // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetDeviceID(); // Function /Script/Game.BiDataRecord.GetDeviceID // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddBiEventFromParam(struct FString InEventId, struct FString InEventVal, struct TMap<struct FString, struct FString>& InParams); // Function /Script/Game.BiDataRecord.AddBiEventFromParam // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AddBiEvent(struct FString InEventId, struct FString InEventVal, struct FString InEventDes, struct FString InAccount, struct FString InMsgType); // Function /Script/Game.BiDataRecord.AddBiEvent // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BlockActor
// Size: 0x0 (Inherited: 0x0)
struct ABlockActor : AActor {
};

 // Class /Script/Game.BlockPushComponent_Capsual
// Size: 0x0 (Inherited: 0x0)
struct UBlockPushComponent_Capsual : UCapsuleComponent {
	struct FTransform OldTransform; // 0x0(0x0)
	struct FTransform CurrentTransform; // 0x0(0x0)
	struct AGameCharacter* OwnerCharacter; // 0x0(0x0)
	struct UBaseMovementComponent* OwnerBaseMoveent; // 0x0(0x0)
};

 // Class /Script/Game.BlockPushSkeletalMeshComponent
// Size: 0x0 (Inherited: 0x0)
struct UBlockPushSkeletalMeshComponent : USkeletalMeshComponent {
	bool bUseMeshToPushCharacter; // 0x0(0x0)
	char pad_F01[0xF]; // 0x0(0x0)
	struct FTransform OldTransform; // 0x0(0x0)
	struct FTransform CurrentTransform; // 0x0(0x0)
	struct AGameCharacter* OwnerCharacter; // 0x0(0x0)
	struct UBaseMovementComponent* OwnerBaseMoveent; // 0x0(0x0)
};

 // Class /Script/Game.BonePartDataBase
// Size: 0x0 (Inherited: 0x0)
struct UBonePartDataBase : UAssetUserData {
	struct TArray<struct FPartData> PartDatas; // 0x0(0x0)
	bool bHaveScaredCrow; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
	struct FPartData ScaredCrowPart; // 0x0(0x0)
	struct TArray<struct FString> ScaredCrowTargetTag; // 0x0(0x0)
};

 // Class /Script/Game.BonePartData
// Size: 0x0 (Inherited: 0x0)
struct UBonePartData : UBonePartDataBase {
	struct TArray<struct FPartEditorData> EditorDatas; // 0x0(0x0)
};

 // Class /Script/Game.BonePartDataClass
// Size: 0x0 (Inherited: 0x0)
struct UBonePartDataClass : UBonePartDataBase {
	struct UBonePartData* DataClass; // 0x0(0x0)
};

 // Class /Script/Game.BonePartitionBaseData
// Size: 0x0 (Inherited: 0x0)
struct UBonePartitionBaseData : UAssetUserData {
	struct TArray<struct FPartitionData> PartitionDatas; // 0x0(0x0)
	struct FPartitionData MainPartition; // 0x0(0x0)
	struct TArray<struct FBoneinfo> BoneTree; // 0x0(0x0)
	bool bHaveScaredCrow; // 0x0(0x0)
	char pad_121[0x7]; // 0x0(0x0)
	struct FPartitionData ScaredCrowPartition; // 0x0(0x0)
	struct TArray<struct FString> ScaredCrowTargetTag; // 0x0(0x0)
};

 // Class /Script/Game.BonePartitionUserData
// Size: 0x0 (Inherited: 0x0)
struct UBonePartitionUserData : UBonePartitionBaseData {
	struct TArray<struct FPartitionEditorData> PartitionData; // 0x0(0x0)
};

 // Class /Script/Game.BonePartitionClassUserData
// Size: 0x0 (Inherited: 0x0)
struct UBonePartitionClassUserData : UBonePartitionBaseData {
	struct UBonePartitionUserData* DataClass; // 0x0(0x0)
};

 // Class /Script/Game.BTDecorator_BBTimeLimit
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_BBTimeLimit : UBTDecorator {
	struct FBlackboardKeySelector TimeLimit; // 0x0(0x0)
};

 // Class /Script/Game.BTDecorator_CanAbilityMovable
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_CanAbilityMovable : UBTDecorator {
};

 // Class /Script/Game.BTDecorator_DoSkillChecker
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_DoSkillChecker : UBTDecorator_BlackboardBase {
};

 // Class /Script/Game.BTDecorator_InEndFightState
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_InEndFightState : UBTDecorator {

	void OnInEndFightStateChange(struct UBehaviorTreeComponent* OwnerComp, bool NewState); // Function /Script/Game.BTDecorator_InEndFightState.OnInEndFightStateChange // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.BTDecorator_IsAIStateChanged
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsAIStateChanged : UBTDecorator {
};

 // Class /Script/Game.BTDecorator_IsFightMoving
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsFightMoving : UBTDecorator {
};

 // Class /Script/Game.BTDecorator_IsHasAIEvent
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsHasAIEvent : UBTDecorator {
	bool bIsInFightAIEvent; // 0x0(0x0)
	char pad_69[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.BTDecorator_IsHasPatrolPath
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsHasPatrolPath : UBTDecorator {
};

 // Class /Script/Game.BTDecorator_IsPathHasCustomLink
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsPathHasCustomLink : UBTDecorator {
};

 // Class /Script/Game.BTDecorator_IsOpenWorldPatrol
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsOpenWorldPatrol : UBTDecorator {
};

 // Class /Script/Game.BTDecorator_IsRunTeamPatrol
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsRunTeamPatrol : UBTDecorator {
};

 // Class /Script/Game.BTDecorator_IsTeamLeader
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsTeamLeader : UBTDecorator {
};

 // Class /Script/Game.BTDecorator_IsRunPatrolLine
// Size: 0x0 (Inherited: 0x0)
struct UBTDecorator_IsRunPatrolLine : UBTDecorator {
};

 // Class /Script/Game.BTService_QueryTarget
// Size: 0x0 (Inherited: 0x0)
struct UBTService_QueryTarget : UBTService {
	struct FBlackboardKeySelector TargetActor; // 0x0(0x0)
};

 // Class /Script/Game.BTService_RandomSkill
// Size: 0x0 (Inherited: 0x0)
struct UBTService_RandomSkill : UBTService {
	struct FBlackboardKeySelector SkillID; // 0x0(0x0)
};

 // Class /Script/Game.BTService_UpdateAIMoveBehavior
// Size: 0x0 (Inherited: 0x0)
struct UBTService_UpdateAIMoveBehavior : UBTService_BlackboardBase {

	__int32 CalcSafeAreaType(struct AActor* InSelf, struct AActor* Target, struct FVector2D& Range); // Function /Script/Game.BTService_UpdateAIMoveBehavior.CalcSafeAreaType // (Final|Native|Static|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.BTService_UpdateFightAIEvent
// Size: 0x0 (Inherited: 0x0)
struct UBTService_UpdateFightAIEvent : UBTService {
};

 // Class /Script/Game.BTService_UpdateOWEndFightInfo
// Size: 0x0 (Inherited: 0x0)
struct UBTService_UpdateOWEndFightInfo : UBTService {
	char pad_70[0x20]; // 0x0(0x0)
};

 // Class /Script/Game.BTTask_CastSkill
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_CastSkill : UBTTask_BlackboardBase {
};

 // Class /Script/Game.BTTask_ClearFightMove
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_ClearFightMove : UBTTaskNode {
};

 // Class /Script/Game.BTTask_DoAIEvent
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_DoAIEvent : UBTTaskNode {
	bool bIsInFightAIEvent; // 0x0(0x0)
	char pad_71[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.BTTask_FakeCastSkill
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_FakeCastSkill : UBTTask_BlackboardBase {
};

 // Class /Script/Game.BTTask_FightMoveTo
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_FightMoveTo : UBTTask_BlackboardBase {
	float AIMoveAcceptableRadius; // 0x0(0x0)
	float AcceptableRadius; // 0x0(0x0)
	struct UNavigationQueryFilter* FilterClass; // 0x0(0x0)
	float ObservedBlackboardValueTolerance; // 0x0(0x0)
	char bObserveBlackboardValue : 1; // 0x0(0x0)
	char bAllowStrafe : 1; // 0x0(0x0)
	char bAllowPartialPath : 1; // 0x0(0x0)
	char bTrackMovingGoal : 1; // 0x0(0x0)
	char pad_AC_4 : 1; // 0x0(0x0)
	char bReachTestIncludesAgentRadius : 1; // 0x0(0x0)
	char bReachTestIncludesGoalRadius : 1; // 0x0(0x0)
	char bStopOnOverlap : 1; // 0x0(0x0)
	char bStopOnOverlapNeedsUpdate : 1; // 0x0(0x0)
	char pad_AD_1 : 7; // 0x0(0x0)
	char pad_AE[0x2]; // 0x0(0x0)
};

 // Class /Script/Game.HouseTaskNode
// Size: 0x0 (Inherited: 0x0)
struct UHouseTaskNode : UBTTaskNode {
};

 // Class /Script/Game.BTTask_InteractFurniture
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_InteractFurniture : UHouseTaskNode {
};

 // Class /Script/Game.BTTask_MoveToAsync
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_MoveToAsync : UBTTask_MoveTo {
};

 // Class /Script/Game.BTTask_MoveToInFight
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_MoveToInFight : UBTTask_BlackboardBase {
	float AcceptableRadius; // 0x0(0x0)
	char pad_9C[0x4]; // 0x0(0x0)
	struct UNavigationQueryFilter* FilterClass; // 0x0(0x0)
	float ObservedBlackboardValueTolerance; // 0x0(0x0)
	char bObserveBlackboardValue : 1; // 0x0(0x0)
	char bAllowStrafe : 1; // 0x0(0x0)
	char bAllowPartialPath : 1; // 0x0(0x0)
	char bTrackMovingGoal : 1; // 0x0(0x0)
	char bProjectGoalLocation : 1; // 0x0(0x0)
	char bReachTestIncludesAgentRadius : 1; // 0x0(0x0)
	char bReachTestIncludesGoalRadius : 1; // 0x0(0x0)
	char bStopOnOverlap : 1; // 0x0(0x0)
	char bStopOnOverlapNeedsUpdate : 1; // 0x0(0x0)
	char pad_AD_1 : 7; // 0x0(0x0)
	char pad_AE[0xA]; // 0x0(0x0)

	void OnMoveCompleted(struct FAIRequestID RequestID, enum class EPathFollowingResult Result, struct AAIController* AIController); // Function /Script/Game.BTTask_MoveToInFight.OnMoveCompleted // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.BTTask_OnGiftGiven
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_OnGiftGiven : UHouseTaskNode {
};

 // Class /Script/Game.BTTaskOWEndFight
// Size: 0x0 (Inherited: 0x0)
struct UBTTaskOWEndFight : UBTTaskNode {
};

 // Class /Script/Game.OWTaskNode
// Size: 0x0 (Inherited: 0x0)
struct UOWTaskNode : UBTTaskNode {
};

 // Class /Script/Game.BTTask_OWFindPatrolPoint
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_OWFindPatrolPoint : UOWTaskNode {
	struct FBlackboardKeySelector BlackboardKey; // 0x0(0x0)
	char pad_98[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.BTTask_OWPlayMontage
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_OWPlayMontage : UOWTaskNode {
	float Rate; // 0x0(0x0)
	struct FName MontageGroupName; // 0x0(0x0)
	char pad_7C[0x4]; // 0x0(0x0)
	struct UAnimMontage* Montage; // 0x0(0x0)
};

 // Class /Script/Game.BTTask_OWRunPatrolLine
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_OWRunPatrolLine : UOWTaskNode {
};

 // Class /Script/Game.BTTask_PatrolMove
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_PatrolMove : UBTTaskNode {
	float AcceptableRadius; // 0x0(0x0)
	char pad_74[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.BTTask_PatrolMove_New
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_PatrolMove_New : UBTTaskNode {
	float AcceptableRadius; // 0x0(0x0)
	char pad_74[0x4]; // 0x0(0x0)
	struct AGameAIController* AICtrl; // 0x0(0x0)
	struct AGameCharacter* AIChar; // 0x0(0x0)
	struct UAIControlDataComponent* AIData; // 0x0(0x0)
	struct APatrolPoint_New* TargetPatrolPoint; // 0x0(0x0)
	struct ADarkZonePatrolArea* TargetPatrolArea; // 0x0(0x0)
	char pad_A0[0x10]; // 0x0(0x0)

	void OnMoveCompleted(struct FAIRequestID RequestID, enum class EPathFollowingResult Result); // Function /Script/Game.BTTask_PatrolMove_New.OnMoveCompleted // (Final|Native|Protected) // @ game+0
	void OnAbnormalMontageStart(struct UAnimMontage* Montage); // Function /Script/Game.BTTask_PatrolMove_New.OnAbnormalMontageStart // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.BTTask_PlayMontage
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_PlayMontage : UHouseTaskNode {
};

 // Class /Script/Game.BTTask_QueryTarget
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_QueryTarget : UBTTask_BlackboardBase {
};

 // Class /Script/Game.BTTask_RotateToFaceTarget
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_RotateToFaceTarget : UBTTask_BlackboardBase {
	float RotateSpeedRatio; // 0x0(0x0)
	char pad_9C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.BTTask_RunCasterBT
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_RunCasterBT : UBTTask_RunBehavior {
	struct FBlackboardKeySelector AbandonTime; // 0x0(0x0)
};

 // Class /Script/Game.BTTask_RunMoveBT
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_RunMoveBT : UBTTask_RunBehavior {
};

 // Class /Script/Game.BTTask_RunStateBT
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_RunStateBT : UBTTask_RunBehavior {
};

 // Class /Script/Game.BTTask_TeamPatrolBase
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_TeamPatrolBase : UOWTaskNode {
};

 // Class /Script/Game.BTTask_TeamMemberPatrolReady
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_TeamMemberPatrolReady : UBTTask_TeamPatrolBase {
};

 // Class /Script/Game.BTTask_TeamLeaderPatrolReady
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_TeamLeaderPatrolReady : UBTTask_TeamMemberPatrolReady {
};

 // Class /Script/Game.BTTask_TeamMemberPatrolRun
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_TeamMemberPatrolRun : UBTTask_TeamPatrolBase {
};

 // Class /Script/Game.BTTask_TeamLeaderPatrolRun
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_TeamLeaderPatrolRun : UBTTask_TeamMemberPatrolRun {
};

 // Class /Script/Game.BTTask_TurnBack
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_TurnBack : UHouseTaskNode {
};

 // Class /Script/Game.BTTask_HouseTurnToPlayer
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_HouseTurnToPlayer : UHouseTaskNode {
};

 // Class /Script/Game.BTTask_UpdateTargetLoc
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_UpdateTargetLoc : UBTTask_BlackboardBase {
	char pad_98[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.BTTask_WaitFightMoveReach
// Size: 0x0 (Inherited: 0x0)
struct UBTTask_WaitFightMoveReach : UBTTaskNode {
	bool bIgnoreMoveFinished; // 0x0(0x0)
	char pad_71[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.BufferShop
// Size: 0x0 (Inherited: 0x0)
struct ABufferShop : AActor {
	bool bShowTip; // 0x0(0x0)
	char pad_221[0x3]; // 0x0(0x0)
	__int32 ShowTipTime; // 0x0(0x0)
	char pad_228[0x4]; // 0x0(0x0)
	enum class EBufferShopStateEnum ShopState; // 0x0(0x0)
	char pad_22D[0x3]; // 0x0(0x0)
	__int32 ShopId; // 0x0(0x0)
	char pad_234[0xC]; // 0x0(0x0)
	struct TArray<__int32> ShopRandomSeedes; // 0x0(0x0)
	struct FName ShopGroup; // 0x0(0x0)
	char bIsActived : 1; // 0x0(0x0)
	char pad_258_1 : 7; // 0x0(0x0)
	char pad_259[0x7]; // 0x0(0x0)
	struct TArray<struct FPlayerShopValid> PlayerShopValid; // 0x0(0x0)
	struct UMaterialInterface* MaterialDisable; // 0x0(0x0)
	struct UMaterialInterface* MaterialEnable; // 0x0(0x0)
	struct UMaterialInterface* MaterialComplete; // 0x0(0x0)
	struct UAnimationAsset* AssetOpenAnimation; // 0x0(0x0)
	struct UAnimationAsset* AssetCloseAnimation; // 0x0(0x0)
	struct UAnimationAsset* AssetStandLoopAnimation; // 0x0(0x0)
	struct UAnimationAsset* AssetOpenLoopAnimation; // 0x0(0x0)
	bool IsDynamicMaterial; // 0x0(0x0)
	char pad_2A9[0x7]; // 0x0(0x0)

	void UpdateShopState(bool InState); // Function /Script/Game.BufferShop.UpdateShopState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetShopState(enum class EBufferShopStateEnum InState); // Function /Script/Game.BufferShop.SetShopState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetIsOpen(bool InValue, bool bIsOpen); // Function /Script/Game.BufferShop.SetIsOpen // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetActived(struct UObject* WorldContextObject, struct FName ShopGroup, bool bActived); // Function /Script/Game.BufferShop.SetActived // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RPC_MulticastSetShopId(__int32 InShopId); // Function /Script/Game.BufferShop.RPC_MulticastSetShopId // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0
	void RefreshShopStateEffect(); // Function /Script/Game.BufferShop.RefreshShopStateEffect // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnRep_ShopState(); // Function /Script/Game.BufferShop.OnRep_ShopState // (Final|Native|Private) // @ game+0
	void NotifyChangeMaterial(enum class EBufferShopStateEnum InState, struct UMaterialInstanceDynamic* InMaterialDynamic); // Function /Script/Game.BufferShop.NotifyChangeMaterial // (Event|Public|BlueprintEvent) // @ game+0
	bool IsShopValid(struct AActor* Player); // Function /Script/Game.BufferShop.IsShopValid // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsActived(); // Function /Script/Game.BufferShop.IsActived // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	enum class EBufferShopStateEnum GetShopState(); // Function /Script/Game.BufferShop.GetShopState // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetShopId(); // Function /Script/Game.BufferShop.GetShopId // (Final|Native|Public|Const) // @ game+0
	bool GetIsOpen(); // Function /Script/Game.BufferShop.GetIsOpen // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetInteractiveMode(); // Function /Script/Game.BufferShop.GetInteractiveMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GameProjectileBase
// Size: 0x0 (Inherited: 0x0)
struct AGameProjectileBase : AActor {
	struct UGameProjectileMovementComponent* ProjectileMovement; // 0x0(0x0)
	struct USceneComponent* InterpolatedComponent; // 0x0(0x0)
};

 // Class /Script/Game.Bullet
// Size: 0x0 (Inherited: 0x0)
struct ABullet : AGameProjectileBase {
	char pad_230[0x30]; // 0x0(0x0)
	struct FBulletInfo BulletInfo; // 0x0(0x0)
	struct UFXSystemComponent* ParticleComp; // 0x0(0x0)
	struct UFXSystemComponent* TailParticleComp; // 0x0(0x0)
	struct UFXSystemComponent* TailBeamParticleComp; // 0x0(0x0)
	struct UAudioComponent* AudioComponent; // 0x0(0x0)
	struct TArray<struct FEnchantBulletInfo> EnchantBullets; // 0x0(0x0)
	struct TArray<struct FBulletEnchantInfo> BulletEnchantInfo; // 0x0(0x0)
	struct UAbilityComponentBase* AbilityOwner; // 0x0(0x0)
	__int32 BulletEmitterID; // 0x0(0x0)
	__int32 BulletLevel; // 0x0(0x0)
	__int32 CharacterActionStates; // 0x0(0x0)
	float BulletStrength; // 0x0(0x0)
	__int32 CurrentBulletID; // 0x0(0x0)
	char pad_64C[0x4]; // 0x0(0x0)
	struct UBulletSphereComponent* SphereCollision; // 0x0(0x0)
	struct UBulletBoxComponent* BoxCollision; // 0x0(0x0)
	struct TArray<struct UBulletSubBoxComponent*> SubCollisions; // 0x0(0x0)
	char bAllowRebound : 1; // 0x0(0x0)
	char bIgnoreInstigator : 1; // 0x0(0x0)
	char bClientIgnoreOverlapEvent : 1; // 0x0(0x0)
	char bIgnoreThesamePatition : 1; // 0x0(0x0)
	char pad_670_4 : 4; // 0x0(0x0)
	char pad_671[0x7]; // 0x0(0x0)
	struct UAbilityCollision_Sphere* AbilitySphereCollision; // 0x0(0x0)
	struct USphereComponent* BombCollision; // 0x0(0x0)
	struct UStaticMeshComponent* MeshComp; // 0x0(0x0)
	struct FVector SpawnedLocation; // 0x0(0x0)
	enum class EBulletMovementType MoveType; // 0x0(0x0)
	char pad_69D[0x3]; // 0x0(0x0)
	struct FVector HomingTargetPoint; // 0x0(0x0)
	char pad_6AC[0x4]; // 0x0(0x0)
	struct FString BulletName; // 0x0(0x0)
	float BulletExtremeRange; // 0x0(0x0)
	char pad_6C4[0x4]; // 0x0(0x0)
	__int32 BulletCollisionFlags; // 0x0(0x0)
	char pad_6CC[0x4]; // 0x0(0x0)
	struct TArray<struct UModifierSpecialEffectObject*> ModifierSpecialEffects; // 0x0(0x0)
	char pad_6E0[0xC]; // 0x0(0x0)
	float RemainTime; // 0x0(0x0)
	char pad_6F0[0x40]; // 0x0(0x0)
	struct FString CachePartitionName; // 0x0(0x0)
	__int32 HitCount; // 0x0(0x0)
	__int32 HitTargetCount; // 0x0(0x0)
	__int32 BulletThrouthCount; // 0x0(0x0)
	char pad_74C[0x2C]; // 0x0(0x0)
	struct ABullet* ParentBullet; // 0x0(0x0)
	char pad_780[0xB0]; // 0x0(0x0)
	struct TWeakObjectPtr<struct ABulletScreenEditor> BulletScreenEditor; // 0x0(0x0)
	struct UWwiseComponent* FlyWwiseComponent; // 0x0(0x0)
	struct TWeakObjectPtr<struct USkillEmitter> LauncherEmitter; // 0x0(0x0)
	__int32 LauncherEmitterID; // 0x0(0x0)
	__int32 LauncherSkillID; // 0x0(0x0)
	char pad_850[0x20]; // 0x0(0x0)

	void TickPauseFrame(float InDeltaTime); // Function /Script/Game.Bullet.TickPauseFrame // (Final|Native|Public) // @ game+0
	void StopMovementImmediately(); // Function /Script/Game.Bullet.StopMovementImmediately // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct ABullet* SpawnDeferred(struct UObject* InWorldContext, struct FTransform& InBornTransform, struct UAbilityComponentBase* InAbility, __int32 InLevel, __int32 BulletID, __int32 InEmitterID, bool bScreenBullet); // Function /Script/Game.Bullet.SpawnDeferred // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct ABullet* SpawnBullet(__int32 InBulletID, __int32 InEmitterID, struct FTransform& InTrans, struct FString InName); // Function /Script/Game.Bullet.SpawnBullet // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void ShowWarningParticle(); // Function /Script/Game.Bullet.ShowWarningParticle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetVelocityDir(struct FVector& InDir, float InDuration); // Function /Script/Game.Bullet.SetVelocityDir // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetTarget(struct FQueryResult& QueryResult, struct FString HomingSocket); // Function /Script/Game.Bullet.SetTarget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetTailParticle(struct UFXSystemAsset* InNewParticle); // Function /Script/Game.Bullet.SetTailParticle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSpeed(float InSpeed); // Function /Script/Game.Bullet.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSelfRotation(float InRotator); // Function /Script/Game.Bullet.SetSelfRotation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetRotationQuat(struct FRotator& InRot, float InDuration); // Function /Script/Game.Bullet.SetRotationQuat // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetRotation(struct FRotator& InRotator, float InDuration, bool FirstRotPitch); // Function /Script/Game.Bullet.SetRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetRemainTime(float InTime); // Function /Script/Game.Bullet.SetRemainTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetReboundImmediately(struct FVector& InNormal); // Function /Script/Game.Bullet.SetReboundImmediately // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetPauseFrame(float InTime); // Function /Script/Game.Bullet.SetPauseFrame // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetParticle(struct UFXSystemAsset* InNewParticle, float NewParticleScale); // Function /Script/Game.Bullet.SetParticle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetNoise(float InFrequency, float InFrequencyRange); // Function /Script/Game.Bullet.SetNoise // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetLoopEvent(float InDelayTime, __int32 InLoopCount); // Function /Script/Game.Bullet.SetLoopEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetLauncherEmitter(struct USkillEmitter* EmitterRef, __int32 InSkillId, __int32 InSkillRuntimeId); // Function /Script/Game.Bullet.SetLauncherEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetIgnoreActor(struct AActor* InBulletOwner); // Function /Script/Game.Bullet.SetIgnoreActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetHomingAngularSpeedXY(float InAngularSpeedX, float InAngularSpeedY); // Function /Script/Game.Bullet.SetHomingAngularSpeedXY // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetHomingAngularSpeed(float InAngularSpeed); // Function /Script/Game.Bullet.SetHomingAngularSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetGravityScale(float InGravityScale); // Function /Script/Game.Bullet.SetGravityScale // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetFixedHomingAngularSpeed(bool InFixedHomingAngularSpeed); // Function /Script/Game.Bullet.SetFixedHomingAngularSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetEnchantBulletID(struct FEnchantBulletInfo& InInfo, bool bAdd); // Function /Script/Game.Bullet.SetEnchantBulletID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetCollisionRadius(float InCollisionRadius); // Function /Script/Game.Bullet.SetCollisionRadius // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCollisionFlags(struct TArray<enum class EBulletCollision> InFlags); // Function /Script/Game.Bullet.SetCollisionFlags // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetBulletThrouth(struct FBulletThrough InThrouth); // Function /Script/Game.Bullet.SetBulletThrouth // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetBulletRebound(struct FBulletRebound InRebound); // Function /Script/Game.Bullet.SetBulletRebound // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetBulletEmitterID(__int32 InEmitterID); // Function /Script/Game.Bullet.SetBulletEmitterID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAcceleration(float InAcceleration); // Function /Script/Game.Bullet.SetAcceleration // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RPC_SetTarget(struct FQueryResult QueryResult, struct FString HomingSocket, struct FVector ActorLocation, struct FRotator ActorRotion, float Speed, bool Plane); // Function /Script/Game.Bullet.RPC_SetTarget // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void RPC_NotifyBulletFire(struct FVector ActorLocation, struct FRotator ActorRotion, float Speed); // Function /Script/Game.Bullet.RPC_NotifyBulletFire // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void ResetBullet(struct AActor* InBulletOwner, struct FVector_NetQuantize InPos, bool bTrail); // Function /Script/Game.Bullet.ResetBullet // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	void Recycle(struct FVector InLocation); // Function /Script/Game.Bullet.Recycle // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void ReceiveSonBulletDie(struct ABullet* InSonBullet); // Function /Script/Game.Bullet.ReceiveSonBulletDie // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveRecycle(); // Function /Script/Game.Bullet.ReceiveRecycle // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveParentBulletDie(struct ABullet* InParentBullet); // Function /Script/Game.Bullet.ReceiveParentBulletDie // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveNotifyImmediateBullet(); // Function /Script/Game.Bullet.ReceiveNotifyImmediateBullet // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveNotifyBullet(struct FString InNotify); // Function /Script/Game.Bullet.ReceiveNotifyBullet // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveLoopEvent(); // Function /Script/Game.Bullet.ReceiveLoopEvent // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveBulletRebound(bool InHitPawn, struct AActor* Other, struct FHitResult& Hit); // Function /Script/Game.Bullet.ReceiveBulletRebound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void ReceiveBulletLifeTimeOver(); // Function /Script/Game.Bullet.ReceiveBulletLifeTimeOver // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveBulletHit(bool InHitPawn, struct AActor* Other, struct FHitResult& Hit); // Function /Script/Game.Bullet.ReceiveBulletHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void ReceiveBulletFire(); // Function /Script/Game.Bullet.ReceiveBulletFire // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveBulletDamage(struct AActor* Other, struct FHitResult& Hit); // Function /Script/Game.Bullet.ReceiveBulletDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void ReceiveArriveHomingPoint(); // Function /Script/Game.Bullet.ReceiveArriveHomingPoint // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveAllocationTarget(); // Function /Script/Game.Bullet.ReceiveAllocationTarget // (Event|Public|BlueprintEvent) // @ game+0
	void QueryCacheTarget(struct AActor* Target, struct FVector TargetLoc, struct FString HomingSocket); // Function /Script/Game.Bullet.QueryCacheTarget // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ParabolaMove(); // Function /Script/Game.Bullet.ParabolaMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnTargetSwitch(struct AGameCharacter* EnterChar, struct AGameCharacter* LeaveChar); // Function /Script/Game.Bullet.OnTargetSwitch // (Final|Native|Public) // @ game+0
	void OnTargetOnQTESwitch(struct FQTESwitchParam& QTEParam); // Function /Script/Game.Bullet.OnTargetOnQTESwitch // (Final|Native|Public|HasOutParms) // @ game+0
	void OnRep_SetCurrentBulletID(); // Function /Script/Game.Bullet.OnRep_SetCurrentBulletID // (Native|Protected) // @ game+0
	void OnRep_BulletScreenEditor(); // Function /Script/Game.Bullet.OnRep_BulletScreenEditor // (Final|Native|Protected) // @ game+0
	void OnNotifyCacheQueryTarget(); // Function /Script/Game.Bullet.OnNotifyCacheQueryTarget // (Event|Public|BlueprintEvent) // @ game+0
	void OnNotifyBulletHit(struct FVector InHitPos, struct FVector InHitNormal, bool bChildBullet); // Function /Script/Game.Bullet.OnNotifyBulletHit // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void OnBombComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.Bullet.OnBombComponentBeginOverlap // (Native|Public|HasOutParms) // @ game+0
	void NotifyImmediateBullet(bool InNotifyParent, bool InNotifyBrothers, bool InNotifySons); // Function /Script/Game.Bullet.NotifyImmediateBullet // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyBullet(struct FString InNotify); // Function /Script/Game.Bullet.NotifyBullet // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NaturallyMove(); // Function /Script/Game.Bullet.NaturallyMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LookTarget(bool bLockCacheLocation); // Function /Script/Game.Bullet.LookTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsTraceWillThrough(struct UAbilityComponentBase* Caster, struct FBulletInfo& Info, struct FHitResult& TraceHitResult, struct FVector TraceForwardDirection, struct USkillEmitter* LauncherEmitter, __int32 InBulletCollisionFlags, bool& bApplyEffect, __int32& ThroughCount); // Function /Script/Game.Bullet.IsTraceWillThrough // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool IsPauseFrame(); // Function /Script/Game.Bullet.IsPauseFrame // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void HomingPointMove(bool InFixedHomingAngularSpeed); // Function /Script/Game.Bullet.HomingPointMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void HomingMultiPointMove(bool InFixedHomingAngularSpeed); // Function /Script/Game.Bullet.HomingMultiPointMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void HomingMove(bool InFixedHomingAngularSpeed, float ChangeFlyDistance, float ResistNoiseDistance); // Function /Script/Game.Bullet.HomingMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void HomingGroundMove(bool InFixedHomingAngularSpeed); // Function /Script/Game.Bullet.HomingGroundMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AActor* GetSpawnActor(); // Function /Script/Game.Bullet.GetSpawnActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GetSonBullet(struct TArray<struct ABullet*>& Sons); // Function /Script/Game.Bullet.GetSonBullet // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FVector GetQueryTargetLocation(); // Function /Script/Game.Bullet.GetQueryTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct ABullet* GetParentBullet(); // Function /Script/Game.Bullet.GetParentBullet // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class ECharacterType GetOwnerCharacterType(); // Function /Script/Game.Bullet.GetOwnerCharacterType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UBulletMovementComponent* GetMovement(); // Function /Script/Game.Bullet.GetMovement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetLauncherSkillID(__int32& SkillID, __int32& EmitterID, __int32& RuntimeSkillID); // Function /Script/Game.Bullet.GetLauncherSkillID // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct USkillEmitter* GetLauncherEmitter(); // Function /Script/Game.Bullet.GetLauncherEmitter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetExtraDamageScaler(); // Function /Script/Game.Bullet.GetExtraDamageScaler // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetExtraDamage(); // Function /Script/Game.Bullet.GetExtraDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetExtraCritical(); // Function /Script/Game.Bullet.GetExtraCritical // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetDefaultSpeed(); // Function /Script/Game.Bullet.GetDefaultSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AActor* GetCacheTarget(struct FVector& OutTargetLoc, struct FString& OutHomingSocket); // Function /Script/Game.Bullet.GetCacheTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UAbilityComponentBase* GetAbility(); // Function /Script/Game.Bullet.GetAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void ForceBulletDie(); // Function /Script/Game.Bullet.ForceBulletDie // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ForceBulletBomb(); // Function /Script/Game.Bullet.ForceBulletBomb // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CustomMove(struct FBulletCustomTrack& InCustomTrack); // Function /Script/Game.Bullet.CustomMove // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool ContainModifierSpecialEffect(struct UModifierSpecialEffectObject* InEffect); // Function /Script/Game.Bullet.ContainModifierSpecialEffect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool ContainEnchantBulletID(__int32 InID); // Function /Script/Game.Bullet.ContainEnchantBulletID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void ClientPauseFrame(bool bStart); // Function /Script/Game.Bullet.ClientPauseFrame // (Net|Native|Event|NetMulticast|Public) // @ game+0
	void Client_SetEnchantBulletID(struct FEnchantBulletInfo InInfo, bool bAdd); // Function /Script/Game.Bullet.Client_SetEnchantBulletID // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void Client_SetBulletInfo(struct ABullet* Son, struct ABullet* Parent, struct FString sBulletName); // Function /Script/Game.Bullet.Client_SetBulletInfo // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void Client_NotifySwitchTargetChange(struct ABullet* Son); // Function /Script/Game.Bullet.Client_NotifySwitchTargetChange // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void CircleMove(struct FBulletCircle& InCircle); // Function /Script/Game.Bullet.CircleMove // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 CheckSonBulletLive(struct FString InName); // Function /Script/Game.Bullet.CheckSonBulletLive // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckRecycle(); // Function /Script/Game.Bullet.CheckRecycle // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckHitThrough(struct FBulletThrough& Through, struct AActor* InActor); // Function /Script/Game.Bullet.CheckHitThrough // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool CheckHit(struct FBulletInfo& InBulletInfo, struct UAbilityComponentBase* CasterAbility, struct FHitResult& InHitResult, bool& OutHitPawn, struct AActor* CacheTarget, struct FString InPartitionName, __int32 InBulletCollisionFlags); // Function /Script/Game.Bullet.CheckHit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool CheckEnchantBullet(); // Function /Script/Game.Bullet.CheckEnchantBullet // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void CastSkill(__int32 InSkillId, __int32 InLevel); // Function /Script/Game.Bullet.CastSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CacheQueryTarget(struct FQueryResult QueryResult, struct FString HomingSocket); // Function /Script/Game.Bullet.CacheQueryTarget // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void BulletApplyEffect(struct UAbilityComponentBase* CasterAbility, struct FVector SpawnLocation, struct FBulletInfo& Info, struct AActor* InTarget, struct FHitResult& InHit, __int32 InBulletLevel, struct USkillEmitter* LauncherEmitter, struct ABullet* BulletRef); // Function /Script/Game.Bullet.BulletApplyEffect // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void AllocationTargets(struct TArray<struct FQueryResult> InResults, float InCacheTime); // Function /Script/Game.Bullet.AllocationTargets // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AllocationTarget(struct TArray<struct AActor*> InTargets, float InCacheTime); // Function /Script/Game.Bullet.AllocationTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BulletPool
// Size: 0x0 (Inherited: 0x0)
struct ABulletPool : AActor {
	struct TMap<unsigned __int32, struct FBulletCollection> Collections; // 0x0(0x0)
	struct FBulletCollection AllLiveBullets; // 0x0(0x0)
	struct FBulletCollection AllScreenBullets; // 0x0(0x0)
	char pad_290[0x58]; // 0x0(0x0)

	void OnParticleComponentFinished(struct UParticleSystemComponent* PSystem); // Function /Script/Game.BulletPool.OnParticleComponentFinished // (Final|Native|Public) // @ game+0
	void OnNiagaraComponentFinished(struct UNiagaraComponent* PSystem); // Function /Script/Game.BulletPool.OnNiagaraComponentFinished // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.BulletBox
// Size: 0x0 (Inherited: 0x0)
struct ABulletBox : ABullet {
};

 // Class /Script/Game.BulletEnchantCollision_Sphere
// Size: 0x0 (Inherited: 0x0)
struct UBulletEnchantCollision_Sphere : USphereComponent {
	char pad_470[0x8]; // 0x0(0x0)
	__int32 CheckBulletID; // 0x0(0x0)
	__int32 EnchantEmitterID; // 0x0(0x0)
	__int32 BulletEnchantID; // 0x0(0x0)
	float Percent; // 0x0(0x0)
	bool bApplyBySource; // 0x0(0x0)
	char pad_489[0x7]; // 0x0(0x0)
	struct TArray<enum class ECampRelation> RelationType; // 0x0(0x0)
};

 // Class /Script/Game.BulletEnchantCollision_Box
// Size: 0x0 (Inherited: 0x0)
struct UBulletEnchantCollision_Box : UBoxComponent {
	__int32 CheckBulletID; // 0x0(0x0)
	__int32 EnchantEmitterID; // 0x0(0x0)
	__int32 BulletEnchantID; // 0x0(0x0)
	float Percent; // 0x0(0x0)
	bool bApplyBySource; // 0x0(0x0)
	char pad_491[0x7]; // 0x0(0x0)
	struct TArray<enum class ECampRelation> RelationType; // 0x0(0x0)
	char pad_4A8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.BulletEnchantCollision_Capsual
// Size: 0x0 (Inherited: 0x0)
struct UBulletEnchantCollision_Capsual : UCapsuleComponent {
	char pad_470[0x8]; // 0x0(0x0)
	__int32 CheckBulletID; // 0x0(0x0)
	__int32 EnchantEmitterID; // 0x0(0x0)
	__int32 BulletEnchantID; // 0x0(0x0)
	float Percent; // 0x0(0x0)
	bool bApplyBySource; // 0x0(0x0)
	char pad_489[0x7]; // 0x0(0x0)
	struct TArray<enum class ECampRelation> RelationType; // 0x0(0x0)
};

 // Class /Script/Game.BulletMoveLogicBase
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogicBase : UObject {
	struct UBulletMovementComponent* BulletComp; // 0x0(0x0)
	char pad_30[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.BulletMoveLogic_Naturally
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogic_Naturally : UBulletMoveLogicBase {
};

 // Class /Script/Game.BulletMoveLogic_HomingBase
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogic_HomingBase : UBulletMoveLogic_Naturally {
	struct FVector NextHomingPoint; // 0x0(0x0)
	float HomingStopRemainingTime; // 0x0(0x0)
	char bUseNoise : 1; // 0x0(0x0)
	char pad_48_1 : 7; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	float NoiseFrequencyRange; // 0x0(0x0)
	float NoiseFrequency; // 0x0(0x0)
	float NoiseRemainTime; // 0x0(0x0)
	struct FVector NoiseRandRange; // 0x0(0x0)
	char pad_64[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.BulletMoveLogic_Homing
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogic_Homing : UBulletMoveLogic_HomingBase {
	struct AController* HomingTargetController; // 0x0(0x0)
	struct USceneComponent* HomingTargetComponent; // 0x0(0x0)
	struct FVector DestinationPoint; // 0x0(0x0)
	char pad_84[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.BulletMoveLogic_HomingGround
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogic_HomingGround : UBulletMoveLogic_Homing {
};

 // Class /Script/Game.BulletMoveLogic_HomingPoint
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogic_HomingPoint : UBulletMoveLogic_Homing {
};

 // Class /Script/Game.BulletMoveLogic_HomingMultiPoint
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogic_HomingMultiPoint : UBulletMoveLogic_HomingPoint {
	struct TArray<struct FVector> DestinationPoints; // 0x0(0x0)
	bool bHomingToTargetComponent; // 0x0(0x0)
	char pad_99[0x3]; // 0x0(0x0)
	float HomingStopTime; // 0x0(0x0)
	struct FRotator HomingSocketRotator; // 0x0(0x0)
	char pad_AC[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.BulletMoveLogic_Circle
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogic_Circle : UBulletMoveLogic_HomingBase {
	char pad_68[0xC8]; // 0x0(0x0)
};

 // Class /Script/Game.BulletMoveLogic_CustomTrack
// Size: 0x0 (Inherited: 0x0)
struct UBulletMoveLogic_CustomTrack : UBulletMoveLogic_HomingBase {
	char pad_68[0x58]; // 0x0(0x0)
};

 // Class /Script/Game.GameProjectileMovementComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameProjectileMovementComponent : UProjectileMovementComponent {
	bool bSimulateCompensation; // 0x0(0x0)
	char pad_1D1[0xF]; // 0x0(0x0)
};

 // Class /Script/Game.BulletMovementComponent
// Size: 0x0 (Inherited: 0x0)
struct UBulletMovementComponent : UGameProjectileMovementComponent {
	struct FBulletCommonMoveData MoveData; // 0x0(0x0)
	struct UBulletMoveLogicBase* MoveLogic; // 0x0(0x0)
	struct UFXSystemComponent* WarningParticle; // 0x0(0x0)
	struct AActor* WarningTipsActor; // 0x0(0x0)
	char pad_2D8[0x8]; // 0x0(0x0)

	void ShowWarningParticle(struct FVector TargetPoint); // Function /Script/Game.BulletMovementComponent.ShowWarningParticle // (Final|Native|Public|HasDefaults) // @ game+0
	void SetRefraction(struct FVector& InNewDir); // Function /Script/Game.BulletMovementComponent.SetRefraction // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetRebound(struct FVector& InNormal); // Function /Script/Game.BulletMovementComponent.SetRebound // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetNoise(float InFrequency, float InFrequencyRange); // Function /Script/Game.BulletMovementComponent.SetNoise // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BulletScreenEditor
// Size: 0x0 (Inherited: 0x0)
struct ABulletScreenEditor : AActor {
	char pad_220[0xC]; // 0x0(0x0)
	float InitLifeTime; // 0x0(0x0)
	bool BindRelativePosition; // 0x0(0x0)
	bool BindRelativeRotation; // 0x0(0x0)
	char pad_232[0x6]; // 0x0(0x0)
	struct FString BindSocketName; // 0x0(0x0)
	bool bUseInitDirMove; // 0x0(0x0)
	char pad_249[0x3]; // 0x0(0x0)
	float SelfMoveSpeed; // 0x0(0x0)
	float SelfMoveAcc; // 0x0(0x0)
	float SelfRotaAngle; // 0x0(0x0)
	float SelfRotaSpeed; // 0x0(0x0)
	float SelfRotaAcc; // 0x0(0x0)
	bool SkillCancleStop; // 0x0(0x0)
	bool SkillEndStop; // 0x0(0x0)
	bool LauncherDeadStop; // 0x0(0x0)
	bool KillSceneEditor; // 0x0(0x0)
	float DelayDestroyTime; // 0x0(0x0)
	enum class EDealKeepSceneEditor KeepEditorEffect; // 0x0(0x0)
	enum class EDealKillSceneEditor DestoryEditorEffect; // 0x0(0x0)
	char pad_26A[0x6]; // 0x0(0x0)
	struct TArray<__int32> AllSpawnBulletIDs; // 0x0(0x0)
	__int32 LuancherSkillID; // 0x0(0x0)
	__int32 LuancherSkillRuntimeID; // 0x0(0x0)
	__int32 LuancherLevel; // 0x0(0x0)
	__int32 CurrentSkillChargeTimes; // 0x0(0x0)
	struct UAbilityComponentBase* AbilityOwner; // 0x0(0x0)
	struct USkillEmitter* OnwerEmitter; // 0x0(0x0)
	struct TArray<struct ABullet*> AllBulets; // 0x0(0x0)
	struct TArray<struct FQueryResult> EmitterQueryResults; // 0x0(0x0)
	bool IsStopBulletEditor; // 0x0(0x0)
	bool IsCompleteLaunch; // 0x0(0x0)
	char pad_2C2[0x2]; // 0x0(0x0)
	struct FVector MoveDir; // 0x0(0x0)
	struct FVector RelativePosition; // 0x0(0x0)
	char pad_2DC[0x4]; // 0x0(0x0)
	struct FQuat RelativeRotation; // 0x0(0x0)
	struct TMap<__int64, struct FBulletScreenRay> RayRuntimes; // 0x0(0x0)
	struct TArray<__int64> DirtyRay; // 0x0(0x0)
	struct TArray<struct AActor*> IgnoreActors; // 0x0(0x0)

	struct ABullet* SpawnBulletAndSetTarget(struct FTransform InTransform, __int32 InBulletID, struct FQueryResult InQueryResult); // Function /Script/Game.BulletScreenEditor.SpawnBulletAndSetTarget // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct ABullet* SpawnBullet(struct FTransform InTransform, __int32 InBulletID); // Function /Script/Game.BulletScreenEditor.SpawnBullet // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetAllSpeed(float InSpeed); // Function /Script/Game.BulletScreenEditor.SetAllSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAllAcceleration(float InAcceleration); // Function /Script/Game.BulletScreenEditor.SetAllAcceleration // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RayTick(__int64 InRayID, struct FVector StartPosition, struct FVector EndPosition, __int32 InBulletID); // Function /Script/Game.BulletScreenEditor.RayTick // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void RayEnd(__int64 InRayID); // Function /Script/Game.BulletScreenEditor.RayEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int64 RayBegin(struct FVector StartPosition, struct FVector EndPosition, __int32 InBulletID, bool bAutoTickDamage, bool bEffectDestroyImmediately); // Function /Script/Game.BulletScreenEditor.RayBegin // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void RayAllEnd(); // Function /Script/Game.BulletScreenEditor.RayAllEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FTransform RandomAngle(struct FTransform& InTrans, float InAngle); // Function /Script/Game.BulletScreenEditor.RandomAngle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void OnSkillEnd(__int32 InSkillId); // Function /Script/Game.BulletScreenEditor.OnSkillEnd // (Final|Native|Protected) // @ game+0
	void OnSkillCancle(__int32 InSkillId, enum class ESkillInterruptedType InType); // Function /Script/Game.BulletScreenEditor.OnSkillCancle // (Final|Native|Protected) // @ game+0
	void OnCalcBulletLocAndRot(); // Function /Script/Game.BulletScreenEditor.OnCalcBulletLocAndRot // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void OnBulletSpawned(struct ABullet* InBullet); // Function /Script/Game.BulletScreenEditor.OnBulletSpawned // (Event|Public|BlueprintEvent) // @ game+0
	void OnAbilityDead(bool bDead, struct UAbilityComponentBase* InLauncher, struct FHealthChangeValue& HealthChange); // Function /Script/Game.BulletScreenEditor.OnAbilityDead // (Final|Native|Protected|HasOutParms) // @ game+0
	bool IsBulletEditorStop(); // Function /Script/Game.BulletScreenEditor.IsBulletEditorStop // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void CompleteLaunchBullet(); // Function /Script/Game.BulletScreenEditor.CompleteLaunchBullet // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CastBulletEditor(struct AActor* EditorOwner, struct USkillEmitter* LuancherEmitter, struct FSoftClassPath& BulletEditorClassPath, struct FTransform Transform, struct TArray<struct FQueryResult> InQueryResults); // Function /Script/Game.BulletScreenEditor.CastBulletEditor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct FTransform> AngleOffsetNum(struct FTransform& InTrans, float InAngle, float InNum); // Function /Script/Game.BulletScreenEditor.AngleOffsetNum // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BulletScreenReplicateEditor
// Size: 0x0 (Inherited: 0x0)
struct ABulletScreenReplicateEditor : ABulletScreenEditor {

	void OnNotifyBulletHit(struct FVector InHitPos, struct FVector InHitNormal); // Function /Script/Game.BulletScreenReplicateEditor.OnNotifyBulletHit // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void Client_NotifyBulletHit(struct FVector InHitPos, struct FVector InHitNormal); // Function /Script/Game.BulletScreenReplicateEditor.Client_NotifyBulletHit // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0
};

 // Class /Script/Game.BulletSphereComponent
// Size: 0x0 (Inherited: 0x0)
struct UBulletSphereComponent : USphereComponent {
	struct TArray<struct TWeakObjectPtr<struct AActor>> PenetratedActors; // 0x0(0x0)
	__int32 EndOverlapsFrame; // 0x0(0x0)
	__int32 CheckEndOverlapsFrame; // 0x0(0x0)
	char pad_488[0x8]; // 0x0(0x0)

	void ClearPenetratedActors(struct AActor* InActor); // Function /Script/Game.BulletSphereComponent.ClearPenetratedActors // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BulletBoxComponent
// Size: 0x0 (Inherited: 0x0)
struct UBulletBoxComponent : UBoxComponent {
	struct TArray<struct TWeakObjectPtr<struct AActor>> PenetratedActors; // 0x0(0x0)
	__int32 EndOverlapsFrame; // 0x0(0x0)
	__int32 CheckEndOverlapsFrame; // 0x0(0x0)
	char pad_498[0x8]; // 0x0(0x0)

	void ClearPenetratedActors(struct AActor* InActor); // Function /Script/Game.BulletBoxComponent.ClearPenetratedActors // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BulletSubBoxComponent
// Size: 0x0 (Inherited: 0x0)
struct UBulletSubBoxComponent : UBoxComponent {
};

 // Class /Script/Game.GameSkillInteractorBase
// Size: 0x0 (Inherited: 0x0)
struct AGameSkillInteractorBase : AGameCharacter {
	char pad_AF0[0x8]; // 0x0(0x0)
	__int32 InAreaId; // 0x0(0x0)
	float InActorShadow; // 0x0(0x0)
	float InSpawnDistance; // 0x0(0x0)
	char pad_B04[0x4]; // 0x0(0x0)
	struct FString InActorTag; // 0x0(0x0)
	struct TArray<__int32> customParams; // 0x0(0x0)
	bool UnReplaceable; // 0x0(0x0)
	char pad_B29[0x7]; // 0x0(0x0)

	void UpdateData(); // Function /Script/Game.GameSkillInteractorBase.UpdateData // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.Bunker
// Size: 0x0 (Inherited: 0x0)
struct ABunker : AGameSkillInteractorBase {
	char pad_B30[0x8]; // 0x0(0x0)
	struct FFlexibleEnumValue CampType; // 0x0(0x0)
	__int32 GrowTemplateID; // 0x0(0x0)
	__int32 BunkerLevel; // 0x0(0x0)
	bool bCanDestroyed; // 0x0(0x0)
	char pad_B45[0x3]; // 0x0(0x0)
	struct UStaticMeshComponent* BunkerMesh; // 0x0(0x0)
	char pad_B50[0x8]; // 0x0(0x0)
	struct TArray<struct ABlindage*> AssociateBlindages; // 0x0(0x0)
	char pad_B68[0x8]; // 0x0(0x0)

	void SetEnabled(bool bEnabled); // Function /Script/Game.Bunker.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnBunkerDestroyed(struct AGameCharacter* Character, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.Bunker.OnBunkerDestroyed // (Final|Native|Public|HasOutParms) // @ game+0
	bool IsDestroyed(); // Function /Script/Game.Bunker.IsDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UBunkerPointComponent* GetBunkerPointByIndex(__int32 BunkerPointIndex); // Function /Script/Game.Bunker.GetBunkerPointByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void DestroyBunkerPoints(struct TArray<__int32> DestroyIndex); // Function /Script/Game.Bunker.DestroyBunkerPoints // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.BunkerPointComponent
// Size: 0x0 (Inherited: 0x0)
struct UBunkerPointComponent : USphereComponent {
	__int32 PointIndex; // 0x0(0x0)
	enum class EBunkerAnimType AnimType; // 0x0(0x0)
	enum class EBunkerHeightType HeightType; // 0x0(0x0)
	bool bIsFirePoint; // 0x0(0x0)
	bool bDestroyed; // 0x0(0x0)
	char pad_478[0x18]; // 0x0(0x0)

	void SetOwnAICharacter(struct AGameAICharacter* InCharacter); // Function /Script/Game.BunkerPointComponent.SetOwnAICharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnEndOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex); // Function /Script/Game.BunkerPointComponent.OnEndOverLap // (Final|Native|Public) // @ game+0
	void OnBeginOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.BunkerPointComponent.OnBeginOverLap // (Final|Native|Public|HasOutParms) // @ game+0
	bool IsFree(); // Function /Script/Game.BunkerPointComponent.IsFree // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsDestroyed(); // Function /Script/Game.BunkerPointComponent.IsDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct ABunker* GetOwnBunker(); // Function /Script/Game.BunkerPointComponent.GetOwnBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameAICharacter* GetOwnAICharacter(); // Function /Script/Game.BunkerPointComponent.GetOwnAICharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetBlendRadius(); // Function /Script/Game.BunkerPointComponent.GetBlendRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.BunkerQueryAsset
// Size: 0x0 (Inherited: 0x0)
struct UBunkerQueryAsset : UDataAsset {
	struct TArray<struct UBunkerQueryTest*> QueryTests; // 0x0(0x0)
};

 // Class /Script/Game.BunkerQueryTest
// Size: 0x0 (Inherited: 0x0)
struct UBunkerQueryTest : UObject {
	enum class EBunkerQuerier Querier; // 0x0(0x0)
	enum class EEnvTestPurpose TestPurpose; // 0x0(0x0)
	char pad_2A[0x2]; // 0x0(0x0)
	float ScoreFactor; // 0x0(0x0)

	float GenerateScore(struct UBunkerPointComponent* BunkerPoint, struct AGameAICharacter* AIChar); // Function /Script/Game.BunkerQueryTest.GenerateScore // (Native|Event|Public|BlueprintEvent) // @ game+0
	bool CheckFilterCondition(struct UBunkerPointComponent* BunkerPoint, struct AGameAICharacter* AIChar); // Function /Script/Game.BunkerQueryTest.CheckFilterCondition // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.BunkerQueryTest_Distance
// Size: 0x0 (Inherited: 0x0)
struct UBunkerQueryTest_Distance : UBunkerQueryTest {
	enum class EEnvTestDistance DistanceOperateMode; // 0x0(0x0)
	enum class EOperationType Operator; // 0x0(0x0)
	char pad_32[0x2]; // 0x0(0x0)
	float DistanceLimit; // 0x0(0x0)
	struct AGameModeBase* SpMode; // 0x0(0x0)
	float DistanceLimitInSpMode; // 0x0(0x0)
	char pad_44[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.BunkerQueryTest_ModifyScore
// Size: 0x0 (Inherited: 0x0)
struct UBunkerQueryTest_ModifyScore : UBunkerQueryTest {
	__int32 FilterScore; // 0x0(0x0)
	enum class EOperationType Operator; // 0x0(0x0)
	char pad_35[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.BunkerQueryTest_PathCost
// Size: 0x0 (Inherited: 0x0)
struct UBunkerQueryTest_PathCost : UBunkerQueryTest {
	struct UNavigationQueryFilter* FilterClass; // 0x0(0x0)
	enum class EOperationType Operator; // 0x0(0x0)
	char pad_39[0x3]; // 0x0(0x0)
	float CostLimit; // 0x0(0x0)
};

 // Class /Script/Game.BunkerQueryTest_PathExist
// Size: 0x0 (Inherited: 0x0)
struct UBunkerQueryTest_PathExist : UBunkerQueryTest {
	bool bCheckPathExist; // 0x0(0x0)
	char pad_31[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.CameraLibrary
// Size: 0x0 (Inherited: 0x0)
struct UCameraLibrary : UBlueprintFunctionLibrary {

	struct UCameraComponent* GetMainCamera(struct UObject* WorldContextObject); // Function /Script/Game.CameraLibrary.GetMainCamera // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CanInteractAbilityComponent
// Size: 0x0 (Inherited: 0x0)
struct UCanInteractAbilityComponent : UAbilityComponent {
};

 // Class /Script/Game.CanInteractActor_Event
// Size: 0x0 (Inherited: 0x0)
struct UCanInteractActor_Event : UObject {

	struct ACanInteractActor* GetOwnerCanInteractActor(); // Function /Script/Game.CanInteractActor_Event.GetOwnerCanInteractActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void Execute_Server(struct AActor* InteractPlayer, struct AActor* InteractActor); // Function /Script/Game.CanInteractActor_Event.Execute_Server // (Native|Event|Public|BlueprintEvent) // @ game+0
	void Execute_Client(struct AActor* InteractPlayer); // Function /Script/Game.CanInteractActor_Event.Execute_Client // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.CanInteractActor
// Size: 0x0 (Inherited: 0x0)
struct ACanInteractActor : AGameSkillInteractorBase {
	struct FFlexibleEnumValue CampType; // 0x0(0x0)
	__int32 GrowID; // 0x0(0x0)
	__int32 GrowLevel; // 0x0(0x0)
	bool UsePresetGrowLevel; // 0x0(0x0)
	char pad_B3D[0x3]; // 0x0(0x0)
	float Health; // 0x0(0x0)
	bool bAoeSearch; // 0x0(0x0)
	bool bFlyHP; // 0x0(0x0)
	bool bCanPlayerAttack; // 0x0(0x0)
	bool bDestroyAfterDie; // 0x0(0x0)
	struct UCanInteractActor_Event* OnDieEvent; // 0x0(0x0)
	float ReceiveDamageCD; // 0x0(0x0)
	char pad_B54[0x4]; // 0x0(0x0)
	struct UCanInteractActor_Event* OnReceiveDamageEvent; // 0x0(0x0)
	float ReceiveHitCD; // 0x0(0x0)
	char pad_B64[0x4]; // 0x0(0x0)
	struct UCanInteractActor_Event* OnReceiveHitEvent; // 0x0(0x0)
	struct UCanInteractActor_Event* OnBeginPlayEvent; // 0x0(0x0)
	struct TMap<float, struct UCanInteractActor_Event*> LowHealthEvents; // 0x0(0x0)
	struct TMap<struct AActor*, struct UCanInteractActor_Event*> BeginOverlapTriggers; // 0x0(0x0)
	struct TMap<struct AActor*, struct UCanInteractActor_Event*> EndOverlapTriggers; // 0x0(0x0)
	char pad_C68[0x8]; // 0x0(0x0)

	void UseSkill(__int32 SkillInfoID); // Function /Script/Game.CanInteractActor.UseSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RPC_ClientExecuteEvent(struct UCanInteractActor_Event* InEvent, struct AActor* InteractActor); // Function /Script/Game.CanInteractActor.RPC_ClientExecuteEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	__int32 GetGrowLevel(); // Function /Script/Game.CanInteractActor.GetGrowLevel // (Final|Native|Public) // @ game+0
	void CheckOnReceiveHit(struct FApplyHitResultData& HitData); // Function /Script/Game.CanInteractActor.CheckOnReceiveHit // (Native|Public|HasOutParms) // @ game+0
	void CheckOnReceiveDamage(struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.CanInteractActor.CheckOnReceiveDamage // (Native|Public|HasOutParms) // @ game+0
	void CheckOnDie(struct AGameCharacter* Who, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.CanInteractActor.CheckOnDie // (Final|Native|Public|HasOutParms) // @ game+0
	void CheckEndOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function /Script/Game.CanInteractActor.CheckEndOverlap // (Final|Native|Public) // @ game+0
	void CheckBeginOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function /Script/Game.CanInteractActor.CheckBeginOverlap // (Final|Native|Public) // @ game+0
	bool CanExecuteReceiveHitEvent(struct FApplyHitResultData& HitData); // Function /Script/Game.CanInteractActor.CanExecuteReceiveHitEvent // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.CanSave_Interface
// Size: 0x0 (Inherited: 0x0)
struct UCanSave_Interface : UInterface {

	void ReSpawn(bool IsValid); // Function /Script/Game.CanSave_Interface.ReSpawn // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	bool IsStillValid(); // Function /Script/Game.CanSave_Interface.IsStillValid // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.CartoonLibrary
// Size: 0x0 (Inherited: 0x0)
struct UCartoonLibrary : UBlueprintFunctionLibrary {

	void SwitchLanguage(struct UGameInstance* InContext, struct FName InLang); // Function /Script/Game.CartoonLibrary.SwitchLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Stop(struct UObject* InContext); // Function /Script/Game.CartoonLibrary.Stop // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool Play(struct UGameInstance* InIns, struct FString InPath, struct FName InLanguage, struct FDelegate InEnd); // Function /Script/Game.CartoonLibrary.Play // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetRunningState(struct UObject* InContext); // Function /Script/Game.CartoonLibrary.GetRunningState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetRunningNodes(struct UObject* InContext); // Function /Script/Game.CartoonLibrary.GetRunningNodes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetObjectsPositionAndRotation(struct UObject* InContext); // Function /Script/Game.CartoonLibrary.GetObjectsPositionAndRotation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UCartoonSystem* GetCartoonSystem(struct UObject* InContext); // Function /Script/Game.CartoonLibrary.GetCartoonSystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CartoonSystem
// Size: 0x0 (Inherited: 0x0)
struct UCartoonSystem : UWorldSubsystem {
	char pad_30[0x50]; // 0x0(0x0)
	struct ACartoonRuntime* RuntimeActor; // 0x0(0x0)
	char pad_88[0x8]; // 0x0(0x0)

	void Stop(); // Function /Script/Game.CartoonSystem.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool Play(struct FString InPath, struct FDelegate InEnd); // Function /Script/Game.CartoonSystem.Play // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnHouseRoomLoadedCallback(); // Function /Script/Game.CartoonSystem.OnHouseRoomLoadedCallback // (Final|Native|Private) // @ game+0
	bool IsPlaying(); // Function /Script/Game.CartoonSystem.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void DebugPlay(struct FString InPath, struct FString InFile, struct FDelegate InEnd, struct AActor* InTalkNpc, __int32 InRunningType, __int32 InFlagPageId, __int32 InFlagLineId); // Function /Script/Game.CartoonSystem.DebugPlay // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CastConditionCheck
// Size: 0x0 (Inherited: 0x0)
struct UCastConditionCheck : UObject {
	char pad_28[0x18]; // 0x0(0x0)
	bool bTickable; // 0x0(0x0)
	enum class EConditionNetMode NetMode; // 0x0(0x0)
	char pad_42[0x6]; // 0x0(0x0)
	struct FConditionInfo Info; // 0x0(0x0)
	struct AActor* Launcher; // 0x0(0x0)
	struct AActor* Creator; // 0x0(0x0)
	struct UObject* Outer; // 0x0(0x0)
	__int32 OrignalSkillID; // 0x0(0x0)
	bool bTeamCheck; // 0x0(0x0)
	bool bOwnerCheck; // 0x0(0x0)
	bool bCacheTargetsInSameTime; // 0x0(0x0)
	bool bConditionAllowedTrigger; // 0x0(0x0)
	unsigned __int32 HashIndex; // 0x0(0x0)
	char pad_E4[0x4]; // 0x0(0x0)
	struct FTimerHandle CountdownTimerHandle; // 0x0(0x0)
	char pad_F0[0x8]; // 0x0(0x0)
	__int32 ConditionDelegateCastIndex; // 0x0(0x0)
	char pad_FC[0x4]; // 0x0(0x0)

	bool ResetCondition(); // Function /Script/Game.CastConditionCheck.ResetCondition // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	bool PrepareCondition(); // Function /Script/Game.CastConditionCheck.PrepareCondition // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_Tick(float DeltaSeconds); // Function /Script/Game.CastConditionCheck.K2_Tick // (Event|Public|BlueprintEvent) // @ game+0
	bool K2_PreLauncherChange(struct AActor* CurrentLauncher, struct AActor* NewLauncher); // Function /Script/Game.CastConditionCheck.K2_PreLauncherChange // (Event|Public|BlueprintEvent) // @ game+0
	bool K2_PostLauncherChange(struct AActor* PreLauncher, struct AActor* CurrentLauncher); // Function /Script/Game.CastConditionCheck.K2_PostLauncherChange // (Event|Public|BlueprintEvent) // @ game+0
	void K2_InitCondition(); // Function /Script/Game.CastConditionCheck.K2_InitCondition // (Event|Public|BlueprintEvent) // @ game+0
	bool K2_CheckCondition(); // Function /Script/Game.CastConditionCheck.K2_CheckCondition // (Event|Public|BlueprintEvent) // @ game+0
	void Init(); // Function /Script/Game.CastConditionCheck.Init // (Native|Public|BlueprintCallable) // @ game+0
	bool GetPreDamageData(struct FPreDamageResultData& Data); // Function /Script/Game.CastConditionCheck.GetPreDamageData // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0
	struct AGameCharacter* GetLauncherOriginCharacter(); // Function /Script/Game.CastConditionCheck.GetLauncherOriginCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAbilityComponentBase* GetLauncherAbility(); // Function /Script/Game.CastConditionCheck.GetLauncherAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetHealthChangeData(struct FHealthChangeValue& ChangeValue); // Function /Script/Game.CastConditionCheck.GetHealthChangeData // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct AGameCharacter*> GetCheckTarget(); // Function /Script/Game.CastConditionCheck.GetCheckTarget // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0
	void DelayCallCastAllowed(float InDeleyTime); // Function /Script/Game.CastConditionCheck.DelayCallCastAllowed // (Native|Public|BlueprintCallable) // @ game+0
	void ClearDelay(); // Function /Script/Game.CastConditionCheck.ClearDelay // (Native|Public|BlueprintCallable) // @ game+0
	bool CheckFireCondition(struct UAbilityComponentBase* Ability, struct AGameCharacter* Character, struct FHitResult& HitResult, bool bStartFire); // Function /Script/Game.CastConditionCheck.CheckFireCondition // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	bool CheckCondition(__int32 AllowIndex); // Function /Script/Game.CastConditionCheck.CheckCondition // (Native|Public|BlueprintCallable) // @ game+0
	void CallCastConditionAllowed(); // Function /Script/Game.CastConditionCheck.CallCastConditionAllowed // (Native|Public|BlueprintCallable) // @ game+0
	void CallCastCondition(); // Function /Script/Game.CastConditionCheck.CallCastCondition // (Native|Public|BlueprintCallable) // @ game+0
	void CacheTriggerTarget(struct UAbilityComponentBase* InTarget); // Function /Script/Game.CastConditionCheck.CacheTriggerTarget // (Native|Public|BlueprintCallable) // @ game+0
	void CacheTargets(struct TArray<struct UAbilityComponentBase*> InTargets); // Function /Script/Game.CastConditionCheck.CacheTargets // (Native|Public|BlueprintCallable) // @ game+0
	void CacheTarget(struct UAbilityComponentBase* InTarget); // Function /Script/Game.CastConditionCheck.CacheTarget // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CastConditionCheck_CharacterDie
// Size: 0x0 (Inherited: 0x0)
struct UCastConditionCheck_CharacterDie : UCastConditionCheck {

	void K2_OnGameCharacterDeath(struct AGameCharacter* DeadCharacter); // Function /Script/Game.CastConditionCheck_CharacterDie.K2_OnGameCharacterDeath // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.SkillEffectComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillEffectComponent : UActorComponent {
	char pad_B0[0x4]; // 0x0(0x0)
	float DelayTime; // 0x0(0x0)
	float DelayTimeRemain; // 0x0(0x0)
	enum class ESkillEffectState CurrentSkillEffectState; // 0x0(0x0)
	bool bAlwaysTick; // 0x0(0x0)
	bool bIgnoreStop; // 0x0(0x0)
	char pad_BF[0x1]; // 0x0(0x0)

	void SetSkillEffectState(enum class ESkillEffectState SkillEffectState); // Function /Script/Game.SkillEffectComponent.SetSkillEffectState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ReceiveTickSkill(float DeltaTime); // Function /Script/Game.SkillEffectComponent.ReceiveTickSkill // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void ReceiveStopSkill(bool bIsClient); // Function /Script/Game.SkillEffectComponent.ReceiveStopSkill // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void ReceiveSimulatedTick(float DeltaTime); // Function /Script/Game.SkillEffectComponent.ReceiveSimulatedTick // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void ReceiveActiveSkill(bool bIsClient); // Function /Script/Game.SkillEffectComponent.ReceiveActiveSkill // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void OnRep_SetSkillEffectState(enum class ESkillEffectState LastSkillEffectState); // Function /Script/Game.SkillEffectComponent.OnRep_SetSkillEffectState // (Final|Native|Protected) // @ game+0
	enum class ESkillEffectState K2_GetSkillEffectState(); // Function /Script/Game.SkillEffectComponent.K2_GetSkillEffectState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAbilityComponentBase* GetLauncherAbility(); // Function /Script/Game.SkillEffectComponent.GetLauncherAbility // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CastSkillComponent
// Size: 0x0 (Inherited: 0x0)
struct UCastSkillComponent : USkillEffectComponent {
	struct TArray<struct FQueryResult> SelectorQueryResults; // 0x0(0x0)
	struct FTransform SelectorQueryTransform; // 0x0(0x0)
};

 // Class /Script/Game.ChangeGameplayTagComponent
// Size: 0x0 (Inherited: 0x0)
struct UChangeGameplayTagComponent : USkillEffectComponent {
	struct FGameplayTagContainer RemoveGameplayTag; // 0x0(0x0)
	struct FGameplayTagContainer ActiveGameplayTag; // 0x0(0x0)
	struct FGameplayTagContainer DisableGameplayTag; // 0x0(0x0)
	struct USkillEffectComponent* PlayMontageSkill; // 0x0(0x0)
};

 // Class /Script/Game.CharacterAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct UCharacterAbilityAttribute : UGameAbilityBuffer {
	char pad_D0[0x8]; // 0x0(0x0)
	struct UAbilityAttribute* AbilityAttribute; // 0x0(0x0)
	float DelayTime; // 0x0(0x0)
	float IntervalTime; // 0x0(0x0)
	bool bIsAutoActive; // 0x0(0x0)
	bool bAbilityIsActived; // 0x0(0x0)
	char pad_EA[0x2]; // 0x0(0x0)
	float m_fIntervalTime; // 0x0(0x0)

	void K2_TickAbilityAttribute(struct UGameAbilityComponent* Pawn); // Function /Script/Game.CharacterAbilityAttribute.K2_TickAbilityAttribute // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_ActiveAbilityAttribute(struct UGameAbilityComponent* Pawn, bool IsActived); // Function /Script/Game.CharacterAbilityAttribute.K2_ActiveAbilityAttribute // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void DelayAbilityAttribute(float fDelayTime); // Function /Script/Game.CharacterAbilityAttribute.DelayAbilityAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.RecoverAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct URecoverAbilityAttribute : UCharacterAbilityAttribute {
	char pad_F0[0x4]; // 0x0(0x0)
	float RecoverValue; // 0x0(0x0)

	bool K2_RecoverAttribute(struct UAbilityComponentBase* InAbility, float InValue); // Function /Script/Game.RecoverAbilityAttribute.K2_RecoverAttribute // (Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.RecoverPercentAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct URecoverPercentAbilityAttribute : UCharacterAbilityAttribute {
	float RecoverValue; // 0x0(0x0)
	char pad_F4[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.HitLagAttribute
// Size: 0x0 (Inherited: 0x0)
struct UHitLagAttribute : URecoverPercentAbilityAttribute {
	bool bDisableApplyAttribute; // 0x0(0x0)
	bool bInLie; // 0x0(0x0)
	char pad_FA[0x2]; // 0x0(0x0)
	float DisableKeepTime; // 0x0(0x0)
	float TriggerInvalidTime; // 0x0(0x0)
	char pad_104[0x4]; // 0x0(0x0)

	void OnAbnormalUpdate(struct FAbnormalInfo& AbnormalInfo, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.HitLagAttribute.OnAbnormalUpdate // (Final|Native|Public|HasOutParms) // @ game+0
};

 // Class /Script/Game.ResetRecoverTimerOnReduceAndSwitch
// Size: 0x0 (Inherited: 0x0)
struct UResetRecoverTimerOnReduceAndSwitch : URecoverAbilityAttribute {
};

 // Class /Script/Game.HitDelayRecoverAttribute
// Size: 0x0 (Inherited: 0x0)
struct UHitDelayRecoverAttribute : URecoverAbilityAttribute {
};

 // Class /Script/Game.FullDelayRecoverAttribute
// Size: 0x0 (Inherited: 0x0)
struct UFullDelayRecoverAttribute : URecoverAbilityAttribute {
	float KeepFullTime; // 0x0(0x0)
	float ReduceAfterFullTime; // 0x0(0x0)
	__int32 AppliedModifierOnFull; // 0x0(0x0)
	bool bInFull; // 0x0(0x0)
	char pad_105[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.BreakOrZeroInCDToRecover
// Size: 0x0 (Inherited: 0x0)
struct UBreakOrZeroInCDToRecover : URecoverAbilityAttribute {
	bool bListenEmitter; // 0x0(0x0)
	char pad_F9[0x3]; // 0x0(0x0)
	float BreakCDTime; // 0x0(0x0)
	float ZeroCDTime; // 0x0(0x0)
	char pad_104[0x4]; // 0x0(0x0)

	void SetBreakCD(); // Function /Script/Game.BreakOrZeroInCDToRecover.SetBreakCD // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.InfluenceAbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct UInfluenceAbilityAttribute : UGameAbilityBuffer {
	struct UAbilityAttribute* AbilityAttribute; // 0x0(0x0)
	struct UAbilityAttribute* InfluenceAbilityAttribute; // 0x0(0x0)
	struct FRuntimeFloatCurve InfluenceCurve; // 0x0(0x0)
};

 // Class /Script/Game.InfluenceAbilityAttribute_OneToMany
// Size: 0x0 (Inherited: 0x0)
struct UInfluenceAbilityAttribute_OneToMany : UGameAbilityBuffer {
	struct UAbilityAttribute* AbilityAttribute; // 0x0(0x0)
	struct TArray<struct FInfluenceAbilityAttributeConfig> InfluencedWeaponProperties; // 0x0(0x0)
};

 // Class /Script/Game.CharacterAbnormalRenderState
// Size: 0x0 (Inherited: 0x0)
struct UCharacterAbnormalRenderState : UObject {
	struct TArray<struct FCharacterAbnormalRenderStateEffect> Particles; // 0x0(0x0)
	bool bDestroyEffectImmediately; // 0x0(0x0)
	bool bHasStartParticle; // 0x0(0x0)
	char pad_3A[0x6]; // 0x0(0x0)
	struct FCharacterAbnormalRenderStateEffect StartParticle; // 0x0(0x0)
	bool bHasEndParticle; // 0x0(0x0)
	char pad_A1[0xF]; // 0x0(0x0)
	struct FCharacterAbnormalRenderStateEffect EndParticle; // 0x0(0x0)
	bool bHasEffect; // 0x0(0x0)
	bool bIce; // 0x0(0x0)
	char pad_112[0x2]; // 0x0(0x0)
	__int32 Priority; // 0x0(0x0)
	struct FFlexibleEnumValue CharacterEffectType; // 0x0(0x0)
	__int32 Slot; // 0x0(0x0)
	enum class ECharacterMaterialType MaterialType; // 0x0(0x0)
	bool bUseCustomDepth; // 0x0(0x0)
	bool bCustomDepth; // 0x0(0x0)
	bool bUseCustomStencil; // 0x0(0x0)
	__int32 CustomStencil; // 0x0(0x0)
	struct FMaterialStateParameterWithFadeout CharacterEffect; // 0x0(0x0)
	struct UMaterialInterface* PostProcess; // 0x0(0x0)
	float TimeIn; // 0x0(0x0)
	char pad_1A4[0x4]; // 0x0(0x0)
	struct UCurveFloat* PostProcessCurveIn; // 0x0(0x0)
	float Timeout; // 0x0(0x0)
	char pad_1B4[0x4]; // 0x0(0x0)
	struct UCurveFloat* PostProcessCurveOut; // 0x0(0x0)
	struct TMap<enum class EPhysiqueType, struct UCharacterAbnormalRenderState*> PhysiqueAbnormalState; // 0x0(0x0)
	bool bStopStartSound; // 0x0(0x0)
	char pad_211[0xF]; // 0x0(0x0)
};

 // Class /Script/Game.CharacterAbnormalRenderComponent
// Size: 0x0 (Inherited: 0x0)
struct UCharacterAbnormalRenderComponent : UActorComponent {
	struct TArray<struct FCharacterAbnormalRenderStateInfo> StateInfos; // 0x0(0x0)
	struct TArray<struct UCharacterAbnormalRenderState*> CachedStates; // 0x0(0x0)
	struct TWeakObjectPtr<struct UWwiseComponent> StartSound; // 0x0(0x0)

	__int32 StartState(struct UCharacterAbnormalRenderState* StateClass); // Function /Script/Game.CharacterAbnormalRenderComponent.StartState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EndState(__int32 ID); // Function /Script/Game.CharacterAbnormalRenderComponent.EndState // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CharacterAbnormalRenderPoolSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UCharacterAbnormalRenderPoolSubsystem : UWorldSubsystem {
	struct TMap<struct UCharacterAbnormalRenderState*, struct FCharacterAbnormalRenderPool> PoolObjects; // 0x0(0x0)
};

 // Class /Script/Game.CharacterAccessory_Girl002a
// Size: 0x0 (Inherited: 0x0)
struct ACharacterAccessory_Girl002a : ACharacterAccessory {
	struct FVector HalfBunkerLocationOffset; // 0x0(0x0)
	struct FVector2D HalfBunkerClampRotate; // 0x0(0x0)
	struct FVector BunkerLocationOffset; // 0x0(0x0)
	struct FVector2D BunkerClampRotate; // 0x0(0x0)
	float BunkerLeftMulti; // 0x0(0x0)
	float BunkerRightMulti; // 0x0(0x0)
	float InBunkerForwardMulti; // 0x0(0x0)
	bool bIsLeftProp; // 0x0(0x0)
	char pad_36D[0x3]; // 0x0(0x0)
	struct FVector TargetPosition; // 0x0(0x0)
	struct FRotator TargetRotation; // 0x0(0x0)
};

 // Class /Script/Game.CharacterMaterialManager
// Size: 0x0 (Inherited: 0x0)
struct UCharacterMaterialManager : UActorComponent {
	char pad_B0[0x148]; // 0x0(0x0)
	struct TMap<struct TWeakObjectPtr<struct UMeshComponent>, struct FCharacterMaterialRuntimeInfo> MaterialRuntimeInfo; // 0x0(0x0)
	struct TMap<struct TWeakObjectPtr<struct UMeshComponent>, struct FCharacterDefaultMaterialInfo> MaterialDefaults; // 0x0(0x0)
	struct TMap<struct TWeakObjectPtr<struct UMeshComponent>, struct FCharacterMaterialOutlineRuntimeInfo> Outlines; // 0x0(0x0)
};

 // Class /Script/Game.CharacterRenderComponent
// Size: 0x0 (Inherited: 0x0)
struct UCharacterRenderComponent : UActorComponent {
	bool bShadowMapMask; // 0x0(0x0)
	bool bNeedTick; // 0x0(0x0)
	bool bPhysicalMaterialMask; // 0x0(0x0)
	char pad_B3[0x15]; // 0x0(0x0)
	struct UCharacterMaterialManager* CharacterMaterialManager; // 0x0(0x0)
	struct UActorShadowMapMask* CharacterShadowMapMask; // 0x0(0x0)
	struct UActorPhysicalMaterialMask* CharacterPhysicalMaterialMask; // 0x0(0x0)
	char pad_E0[0x78]; // 0x0(0x0)

	void UpdateSecondaryMaterialVectorParameters(__int32 ID, struct FString Name, struct FLinearColor& Value, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateSecondaryMaterialVectorParameters // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void UpdateSecondaryMaterialTextureParameters(__int32 ID, struct FString Name, struct UTexture* Value, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateSecondaryMaterialTextureParameters // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateSecondaryMaterialScalarParameters(__int32 ID, struct FString Name, float Value, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateSecondaryMaterialScalarParameters // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateMeshSecondaryMaterialVectorParameters(__int32 ID, struct UMeshComponent* MC, struct FString Name, struct FLinearColor& Value, __int32 Slot, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMeshSecondaryMaterialVectorParameters // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void UpdateMeshSecondaryMaterialTextureParameters(__int32 ID, struct UMeshComponent* MC, struct FString Name, struct UTexture* Value, __int32 Slot, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMeshSecondaryMaterialTextureParameters // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateMeshSecondaryMaterialScalarParameters(__int32 ID, struct UMeshComponent* MC, struct FString Name, float Value, __int32 Slot, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMeshSecondaryMaterialScalarParameters // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateMeshMaterialVectorParameters(__int32 ID, struct UMeshComponent* MC, struct FString Name, struct FLinearColor& Value, __int32 Slot, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMeshMaterialVectorParameters // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void UpdateMeshMaterialTextureParameters(__int32 ID, struct UMeshComponent* MC, struct FString Name, struct UTexture* Value, __int32 Slot, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMeshMaterialTextureParameters // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateMeshMaterialScalarParameters(__int32 ID, struct UMeshComponent* MC, struct FString Name, float Value, __int32 Slot, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMeshMaterialScalarParameters // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateMeshBlendParameter(__int32 ID, struct UMeshComponent* MC, struct FString Name); // Function /Script/Game.CharacterRenderComponent.UpdateMeshBlendParameter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateMaterialVectorParameters(__int32 ID, struct FString Name, struct FLinearColor& Value, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMaterialVectorParameters // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void UpdateMaterialTextureParameters(__int32 ID, struct FString Name, struct UTexture* Value, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMaterialTextureParameters // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateMaterialScalarParameters(__int32 ID, struct FString Name, float Value, __int32 LayerIndex); // Function /Script/Game.CharacterRenderComponent.UpdateMaterialScalarParameters // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateBlendParameter(__int32 ID, struct FString Name); // Function /Script/Game.CharacterRenderComponent.UpdateBlendParameter // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 StartCharacterStateSimple(enum class ECharacterRenderStateType Type, __int32 Priority); // Function /Script/Game.CharacterRenderComponent.StartCharacterStateSimple // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 StartCharacterStateParam(enum class ECharacterRenderStateType Type, __int32 Priority, struct FCharacterStateStartParam& Param); // Function /Script/Game.CharacterRenderComponent.StartCharacterStateParam // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 StartCharacterState(enum class ECharacterRenderStateType Type, __int32 Priority, struct TArray<struct AActor*>& Targets, __int32 InMatIndex); // Function /Script/Game.CharacterRenderComponent.StartCharacterState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 RegisterGlobalState(struct FString Name, __int32 Priority); // Function /Script/Game.CharacterRenderComponent.RegisterGlobalState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyManualReplaceMesh(struct UMeshComponent* MC); // Function /Script/Game.CharacterRenderComponent.NotifyManualReplaceMesh // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyManualReplaceDefaultOutlineMaterial(struct UMeshComponent* MC, __int32 Slot, struct UMaterialInterface* MI); // Function /Script/Game.CharacterRenderComponent.NotifyManualReplaceDefaultOutlineMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyManualReplaceDefaultMaterial(struct UMeshComponent* MC, __int32 Slot, struct UMaterialInstanceDynamic* Mid); // Function /Script/Game.CharacterRenderComponent.NotifyManualReplaceDefaultMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyCharacterSpawned(); // Function /Script/Game.CharacterRenderComponent.NotifyCharacterSpawned // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MarkNormalMode(); // Function /Script/Game.CharacterRenderComponent.MarkNormalMode // (Final|Native|Public|BlueprintCallable|Const) // @ game+0
	struct UMaterialInterface* GetMeshDefaultMaterial(struct UMeshComponent* MC, __int32 Slot); // Function /Script/Game.CharacterRenderComponent.GetMeshDefaultMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EndCharacterState(__int32 ID); // Function /Script/Game.CharacterRenderComponent.EndCharacterState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EndAllCharacterState(); // Function /Script/Game.CharacterRenderComponent.EndAllCharacterState // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MaterialParameter
// Size: 0x0 (Inherited: 0x0)
struct UMaterialParameter : UObject {
	__int32 Layer; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
	struct FString MaterialParameter; // 0x0(0x0)
	char TypeFlags; // 0x0(0x0)
	char pad_41[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialConstFloatParameter
// Size: 0x0 (Inherited: 0x0)
struct UMaterialConstFloatParameter : UMaterialParameter {
	float FloatValue; // 0x0(0x0)
	char pad_4C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialFloatCurveParameter
// Size: 0x0 (Inherited: 0x0)
struct UMaterialFloatCurveParameter : UMaterialParameter {
	struct UCurveFloat* Curve; // 0x0(0x0)
	bool bBlend; // 0x0(0x0)
	char pad_51[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialFloatRuntimeCurveParameter
// Size: 0x0 (Inherited: 0x0)
struct UMaterialFloatRuntimeCurveParameter : UMaterialParameter {
	struct FRuntimeFloatCurve Curve; // 0x0(0x0)
	bool bBlend; // 0x0(0x0)
	char pad_D1[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialConstColorParameter
// Size: 0x0 (Inherited: 0x0)
struct UMaterialConstColorParameter : UMaterialParameter {
	struct FLinearColor ConstColor; // 0x0(0x0)
};

 // Class /Script/Game.MaterialCurveLinearColorParameter
// Size: 0x0 (Inherited: 0x0)
struct UMaterialCurveLinearColorParameter : UMaterialParameter {
	struct UCurveLinearColor* Curve; // 0x0(0x0)
};

 // Class /Script/Game.MaterialRuntimeCurveLinearColorParameter
// Size: 0x0 (Inherited: 0x0)
struct UMaterialRuntimeCurveLinearColorParameter : UMaterialParameter {
	struct FRuntimeCurveLinearColor Curve; // 0x0(0x0)
};

 // Class /Script/Game.MaterialConstTextureParameter
// Size: 0x0 (Inherited: 0x0)
struct UMaterialConstTextureParameter : UMaterialParameter {
	struct UTexture* ConstTexture; // 0x0(0x0)
};

 // Class /Script/Game.CharacterSqueezeComponent
// Size: 0x0 (Inherited: 0x0)
struct UCharacterSqueezeComponent : UActorComponent {
	char pad_B0[0x60]; // 0x0(0x0)
	bool bActivePushAway; // 0x0(0x0)
	char pad_111[0x3]; // 0x0(0x0)
	float PushAwaySpeed; // 0x0(0x0)
};

 // Class /Script/Game.CharacterStateMachineComponent
// Size: 0x0 (Inherited: 0x0)
struct UCharacterStateMachineComponent : USMStateMachineComponent {
	__int32 CharacterActionStates; // 0x0(0x0)
	__int32 ActiveFireActionStates; // 0x0(0x0)
	__int32 PlayerActionFlags; // 0x0(0x0)
	char pad_1B4[0x4]; // 0x0(0x0)
	enum class EGamePlayerMoveState MoveState; // 0x0(0x0)
	enum class EGamePlayerMoveState LastMoveState; // 0x0(0x0)
	char pad_1BA[0x2]; // 0x0(0x0)
	float RetainBunkerLeaned; // 0x0(0x0)
	float RetainWeaponRaising; // 0x0(0x0)
	char bHoldWeaponInReload : 1; // 0x0(0x0)
	char bIsAutoReload : 1; // 0x0(0x0)
	char bIsAutoFire : 1; // 0x0(0x0)
	char pad_1C4_3 : 5; // 0x0(0x0)
	char pad_1C5[0x3]; // 0x0(0x0)

	bool TryRetractWeapon(); // Function /Script/Game.CharacterStateMachineComponent.TryRetractWeapon // (Final|Native|Public) // @ game+0
	void SetWeaponState(enum class EWeaponState WeaponState); // Function /Script/Game.CharacterStateMachineComponent.SetWeaponState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSkillPriority(__int32 SkillPriority); // Function /Script/Game.CharacterStateMachineComponent.SetSkillPriority // (Final|Native|Public|BlueprintCallable) // @ game+0
	float SetRetainWeaponRaising(enum class EWeaponState WeaponState, float Extratime); // Function /Script/Game.CharacterStateMachineComponent.SetRetainWeaponRaising // (Final|Native|Public|BlueprintCallable) // @ game+0
	float SetRetainBunkerLeaned(enum class EBackToBunkerState BackToBunkerState); // Function /Script/Game.CharacterStateMachineComponent.SetRetainBunkerLeaned // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPlayerMoveState(enum class EGamePlayerMoveState NewMoveState); // Function /Script/Game.CharacterStateMachineComponent.SetPlayerMoveState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPlayerActionFlag(enum class EPlayerAction PlayerAction); // Function /Script/Game.CharacterStateMachineComponent.SetPlayerActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetHoldWeapon(bool bHold); // Function /Script/Game.CharacterStateMachineComponent.SetHoldWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetDodgeDirection(); // Function /Script/Game.CharacterStateMachineComponent.SetDodgeDirection // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCharacterActionState(enum class ECharacterActionState CharacterStateFlag); // Function /Script/Game.CharacterStateMachineComponent.SetCharacterActionState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAutoReload(bool bAutoReload); // Function /Script/Game.CharacterStateMachineComponent.SetAutoReload // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_SetPlayerMoveState(enum class EGamePlayerMoveState NewMoveState); // Function /Script/Game.CharacterStateMachineComponent.Server_SetPlayerMoveState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_SetPlayerActionFlag(enum class EPlayerAction PlayerAction); // Function /Script/Game.CharacterStateMachineComponent.Server_SetPlayerActionFlag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_ResetPlayerActionFlag(); // Function /Script/Game.CharacterStateMachineComponent.Server_ResetPlayerActionFlag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_ClearPlayerActionFlag(enum class EPlayerAction PlayerAction); // Function /Script/Game.CharacterStateMachineComponent.Server_ClearPlayerActionFlag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void ResetPlayerActionFlag(); // Function /Script/Game.CharacterStateMachineComponent.ResetPlayerActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool ReceiveStopSkill(char StateMachineIdx, __int32 SkillID); // Function /Script/Game.CharacterStateMachineComponent.ReceiveStopSkill // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveStopRush(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveStopRush // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveStopFire(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveStopFire // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveStopAim(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveStopAim // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveStartSkill(char StateMachineIdx, __int32 SkillID); // Function /Script/Game.CharacterStateMachineComponent.ReceiveStartSkill // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveStartRush(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveStartRush // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveStartFire(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveStartFire // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveStartAim(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveStartAim // (Event|Public|BlueprintEvent) // @ game+0
	void ReceiveRevive(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveRevive // (Native|Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveRetractWeapon(bool bHoldWeapon); // Function /Script/Game.CharacterStateMachineComponent.ReceiveRetractWeapon // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveReload(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveReload // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveJump(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveJump // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveForceIdle(bool bIsUpperBody); // Function /Script/Game.CharacterStateMachineComponent.ReceiveForceIdle // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveDodge(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveDodge // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveDeath(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveDeath // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveDamage(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveDamage // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveCross(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveCross // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveCheckAllowRush(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveCheckAllowRush // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	bool ReceiveCastSkill(enum class ECastSkillType CastSkillType); // Function /Script/Game.CharacterStateMachineComponent.ReceiveCastSkill // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveBunkerInteract(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveBunkerInteract // (Event|Public|BlueprintEvent) // @ game+0
	bool ReceiveBulletLoad(); // Function /Script/Game.CharacterStateMachineComponent.ReceiveBulletLoad // (Event|Public|BlueprintEvent) // @ game+0
	void OnStopMontage(struct UAnimMontage* lpAnimMontage); // Function /Script/Game.CharacterStateMachineComponent.OnStopMontage // (Event|Public|BlueprintEvent) // @ game+0
	void OnAnimationCrossfade(struct FName StateMachineName, struct FName CurrentStateName); // Function /Script/Game.CharacterStateMachineComponent.OnAnimationCrossfade // (Event|Public|BlueprintEvent) // @ game+0
	bool IsShootForced(); // Function /Script/Game.CharacterStateMachineComponent.IsShootForced // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsLocallyControlled(); // Function /Script/Game.CharacterStateMachineComponent.IsLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAdvancedAction(); // Function /Script/Game.CharacterStateMachineComponent.IsAdvancedAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetRetainWeaponRaising(); // Function /Script/Game.CharacterStateMachineComponent.GetRetainWeaponRaising // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetRetainBunkerLeaned(); // Function /Script/Game.CharacterStateMachineComponent.GetRetainBunkerLeaned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class EGamePlayerMoveState GetPlayerMoveState(); // Function /Script/Game.CharacterStateMachineComponent.GetPlayerMoveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetCharacterActionState(); // Function /Script/Game.CharacterStateMachineComponent.GetCharacterActionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void FinishReload(); // Function /Script/Game.CharacterStateMachineComponent.FinishReload // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearPlayerActionFlag(enum class EPlayerAction PlayerAction); // Function /Script/Game.CharacterStateMachineComponent.ClearPlayerActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearCharacterActionState(enum class ECharacterActionState CharacterStateFlag); // Function /Script/Game.CharacterStateMachineComponent.ClearCharacterActionState // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckPlayerActionFlag(enum class EPlayerAction PlayerAction); // Function /Script/Game.CharacterStateMachineComponent.CheckPlayerActionFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckCharacterActionState(enum class ECharacterActionState CharacterStateFlag); // Function /Script/Game.CharacterStateMachineComponent.CheckCharacterActionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckAdvancedActionEnableRunning(); // Function /Script/Game.CharacterStateMachineComponent.CheckAdvancedActionEnableRunning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char CalcDodgeInfo(); // Function /Script/Game.CharacterStateMachineComponent.CalcDodgeInfo // (Final|Native|Private|BlueprintCallable) // @ game+0
	__int32 CalcCrossInfo(); // Function /Script/Game.CharacterStateMachineComponent.CalcCrossInfo // (Final|Native|Private|BlueprintCallable) // @ game+0
	__int32 CalcBunkerInfo_WithBlindage(); // Function /Script/Game.CharacterStateMachineComponent.CalcBunkerInfo_WithBlindage // (Final|Native|Private|BlueprintCallable) // @ game+0
	__int32 CalcBunkerInfo(); // Function /Script/Game.CharacterStateMachineComponent.CalcBunkerInfo // (Final|Native|Private|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CheckBoxGroup
// Size: 0x0 (Inherited: 0x0)
struct UCheckBoxGroup : UUserWidget {
	struct UWrapBox* Content; // 0x0(0x0)
	struct FMulticastInlineDelegate OnStateChangedEvent; // 0x0(0x0)
	struct TArray<struct UCheckBox*> CheckBoxs; // 0x0(0x0)
	struct UCheckBox* LastCheckBox; // 0x0(0x0)
	char pad_2A8[0x8]; // 0x0(0x0)

	void Select(__int32 InIndex); // Function /Script/Game.CheckBoxGroup.Select // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnStateChange(bool bIsChecked); // Function /Script/Game.CheckBoxGroup.OnStateChange // (Final|Native|Public) // @ game+0
	void OnDisableChange(bool InDisable); // Function /Script/Game.CheckBoxGroup.OnDisableChange // (Event|Public|BlueprintEvent) // @ game+0
	void OnCheckBoxGroupStateChangedEvent__DelegateSignature(__int32 Index); // DelegateFunction /Script/Game.CheckBoxGroup.OnCheckBoxGroupStateChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void Disable(bool InDisable); // Function /Script/Game.CheckBoxGroup.Disable // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SkillCheckerComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillCheckerComponent : UActorComponent {

	bool ReceiveCheckSkill(struct UGameAbilityComponent* AbilityComp, __int32 SkillID); // Function /Script/Game.SkillCheckerComponent.ReceiveCheckSkill // (Native|Event|Public|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.CheckCastConditionComponent
// Size: 0x0 (Inherited: 0x0)
struct UCheckCastConditionComponent : USkillCheckerComponent {
};

 // Class /Script/Game.CheckDerivedSkillCastable
// Size: 0x0 (Inherited: 0x0)
struct UCheckDerivedSkillCastable : USkillCheckerComponent {
};

 // Class /Script/Game.CheckGameplayTagComponent
// Size: 0x0 (Inherited: 0x0)
struct UCheckGameplayTagComponent : USkillCheckerComponent {
	struct FGameplayTagContainer ExcludeGameplayTag; // 0x0(0x0)
	bool bHasAny; // 0x0(0x0)
	char pad_D1[0x7]; // 0x0(0x0)
	struct FGameplayTagContainer NecessaryGameplayTag; // 0x0(0x0)
};

 // Class /Script/Game.CheckSkillCooldownComponent
// Size: 0x0 (Inherited: 0x0)
struct UCheckSkillCooldownComponent : USkillCheckerComponent {
};

 // Class /Script/Game.CheckSkillPriorityComponent
// Size: 0x0 (Inherited: 0x0)
struct UCheckSkillPriorityComponent : USkillCheckerComponent {
};

 // Class /Script/Game.CheckTeamSkillCDCondition
// Size: 0x0 (Inherited: 0x0)
struct UCheckTeamSkillCDCondition : UCastConditionCheck {
};

 // Class /Script/Game.ChessActor
// Size: 0x0 (Inherited: 0x0)
struct AChessActor : AActor {
	__int32 PosX; // 0x0(0x0)
	__int32 PosY; // 0x0(0x0)
	struct AChessRegionActor* RegionActor; // 0x0(0x0)
	__int32 ShowState; // 0x0(0x0)
	bool IsGround; // 0x0(0x0)
	bool IsPlacementByArt; // 0x0(0x0)
	bool OnlyFrontInteraction; // 0x0(0x0)
	bool ForbidBackInteraction; // 0x0(0x0)
	bool OnlyFrontWalkable; // 0x0(0x0)
	char pad_239[0x7]; // 0x0(0x0)
	struct UFXSystemComponent* AttachParticleEffect; // 0x0(0x0)
	bool ForceWalkable; // 0x0(0x0)
	char pad_249[0x7]; // 0x0(0x0)
	struct AChessNpc* BindingNpc; // 0x0(0x0)
	struct TArray<struct UMaterialInstanceDynamic*> DynamicMaterial; // 0x0(0x0)
	struct UMeshComponent* MeshComponent; // 0x0(0x0)
	char pad_270[0x68]; // 0x0(0x0)

	void SetObjectRotate(float InRotate); // Function /Script/Game.ChessActor.SetObjectRotate // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetObjectPosition(__int32 InPosX, __int32 InPosY); // Function /Script/Game.ChessActor.SetObjectPosition // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetMaterialParam(__int32 MatIndex, struct FName InKey, float FromValue, float ToValue, float Duration, float Delay); // Function /Script/Game.ChessActor.SetMaterialParam // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetMaterialColorParam(__int32 MatIndex, struct FName InKey, struct FLinearColor FromValue, struct FLinearColor ToValue, float Duration, float Delay); // Function /Script/Game.ChessActor.SetMaterialColorParam // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetActiveState(bool InValue); // Function /Script/Game.ChessActor.SetActiveState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnReset(); // Function /Script/Game.ChessActor.OnReset // (Native|Public|BlueprintCallable) // @ game+0
	bool IsWalkable(struct AChessActor* InParent); // Function /Script/Game.ChessActor.IsWalkable // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsSelfWalkable(); // Function /Script/Game.ChessActor.IsSelfWalkable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsPositionEquil(struct AChessActor* Other); // Function /Script/Game.ChessActor.IsPositionEquil // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsCustomInteraction(); // Function /Script/Game.ChessActor.IsCustomInteraction // (Native|Public|BlueprintCallable) // @ game+0
	bool IsArtActor(); // Function /Script/Game.ChessActor.IsArtActor // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool HasTag(struct FName InTagName); // Function /Script/Game.ChessActor.HasTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetUid(); // Function /Script/Game.ChessActor.GetUid // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetRegionId(); // Function /Script/Game.ChessActor.GetRegionId // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetMeshHeight(); // Function /Script/Game.ChessActor.GetMeshHeight // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class EChessLandType GetLandType(); // Function /Script/Game.ChessActor.GetLandType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetHeight(); // Function /Script/Game.ChessActor.GetHeight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearMaterialParams(); // Function /Script/Game.ChessActor.ClearMaterialParams // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanInteraction(); // Function /Script/Game.ChessActor.CanInteraction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void AttachEffect(struct FString InPath, struct FVector InLocation, struct FRotator InRotate); // Function /Script/Game.ChessActor.AttachEffect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessActorPool
// Size: 0x0 (Inherited: 0x0)
struct AChessActorPool : AActor {
	struct TMap<struct UObject*, struct FChessPoolData> ChessActorPool; // 0x0(0x0)
};

 // Class /Script/Game.ChessAnimInstance
// Size: 0x0 (Inherited: 0x0)
struct UChessAnimInstance : UAnimInstance {
	bool IsPush; // 0x0(0x0)
	bool IsRun; // 0x0(0x0)
	bool IsWalk; // 0x0(0x0)
	bool bIsFaceToMoveDir; // 0x0(0x0)
	float Speed; // 0x0(0x0)
	float MoveToControllerAngle; // 0x0(0x0)
	float ScaleHorizontalSpeed; // 0x0(0x0)
	float HorizontalSpeed; // 0x0(0x0)
	float MaxSpeed; // 0x0(0x0)
};

 // Class /Script/Game.ChessArtActor
// Size: 0x0 (Inherited: 0x0)
struct AChessArtActor : AChessActor {

	struct FString GetResPath(); // Function /Script/Game.ChessArtActor.GetResPath // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessCameraFollow
// Size: 0x0 (Inherited: 0x0)
struct AChessCameraFollow : AActor {
	struct AActor* Target; // 0x0(0x0)
	struct AChessGameMode* ChessGameMode; // 0x0(0x0)
	struct AChessPlayerController* PlayerController; // 0x0(0x0)
	struct AActor* ShowTarget; // 0x0(0x0)
	enum class ECameraFollowType FollowType; // 0x0(0x0)
	char pad_241[0x3]; // 0x0(0x0)
	float MaxViewSize; // 0x0(0x0)
	float MinViewSize; // 0x0(0x0)
	float LightShowDistance; // 0x0(0x0)
	float PerformSpeed; // 0x0(0x0)
	struct FVector CameraCenter; // 0x0(0x0)
	struct TArray<struct APointLight*> AllPointLight; // 0x0(0x0)
	char pad_270[0x30]; // 0x0(0x0)

	void SetLockControl(bool InLockControl); // Function /Script/Game.ChessCameraFollow.SetLockControl // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCameraShowTarget(struct AActor* InTarget); // Function /Script/Game.ChessCameraFollow.SetCameraShowTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCameraFollowType(enum class ECameraFollowType InType); // Function /Script/Game.ChessCameraFollow.SetCameraFollowType // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetCamera(); // Function /Script/Game.ChessCameraFollow.ResetCamera // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RefreshCameraRange(); // Function /Script/Game.ChessCameraFollow.RefreshCameraRange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnZoomChange(float InZoom); // Function /Script/Game.ChessCameraFollow.OnZoomChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnMouseMove(struct FVector2D DeltaPos); // Function /Script/Game.ChessCameraFollow.OnMouseMove // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	bool GetLockControl(); // Function /Script/Game.ChessCameraFollow.GetLockControl // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class ECameraFollowType GetCameraFollowType(); // Function /Script/Game.ChessCameraFollow.GetCameraFollowType // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessCharacter
// Size: 0x0 (Inherited: 0x0)
struct AChessCharacter : ACharacter {
	struct FMulticastInlineDelegate NotifyFogViewData; // 0x0(0x0)
	__int32 RegionId; // 0x0(0x0)
	struct AChessPlayerController* PlayerController; // 0x0(0x0)
	struct AChessActor* CurrentGroundActor; // 0x0(0x0)
	bool IsRun; // 0x0(0x0)
	bool IsWalk; // 0x0(0x0)
	char pad_4E6[0xA]; // 0x0(0x0)

	void SetGroundActor(struct AChessActor* InGroundActor); // Function /Script/Game.ChessCharacter.SetGroundActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool MoveTo(struct AChessRegionActor* InRegion, __int32 InPosX, __int32 InPosY, bool InUpdate3DPos); // Function /Script/Game.ChessCharacter.MoveTo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InitFog(struct AChessRegionActor* InRegion); // Function /Script/Game.ChessCharacter.InitFog // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetRegionId(); // Function /Script/Game.ChessCharacter.GetRegionId // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FIntVector GetPosition(); // Function /Script/Game.ChessCharacter.GetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	bool CheckInteraction(); // Function /Script/Game.ChessCharacter.CheckInteraction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.ChessFogEffect
// Size: 0x0 (Inherited: 0x0)
struct AChessFogEffect : AActor {
	bool PlayPlaneStart; // 0x0(0x0)
	char pad_221[0x7]; // 0x0(0x0)
	struct AChessFogManager* FogManager; // 0x0(0x0)

	void StartLastEffect(); // Function /Script/Game.ChessFogEffect.StartLastEffect // (Event|Public|BlueprintEvent) // @ game+0
	void StartFirstEffect(); // Function /Script/Game.ChessFogEffect.StartFirstEffect // (Event|Public|BlueprintEvent) // @ game+0
	void ResetNiagara(); // Function /Script/Game.ChessFogEffect.ResetNiagara // (Event|Public|BlueprintEvent) // @ game+0
	void OnReset(); // Function /Script/Game.ChessFogEffect.OnReset // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessFogManager
// Size: 0x0 (Inherited: 0x0)
struct AChessFogManager : AActor {
	struct AChessGameMode* ChessGameMode; // 0x0(0x0)
	char pad_228[0x50]; // 0x0(0x0)
	struct TMap<__int32, struct AChessFogEffect*> AllGridFogEfeect; // 0x0(0x0)
	struct TArray<struct UHierarchicalInstancedStaticMeshComponent*> GridFogHISMs; // 0x0(0x0)
	struct TArray<struct UHierarchicalInstancedStaticMeshComponent*> BorderHISMs; // 0x0(0x0)
	struct UHierarchicalInstancedStaticMeshComponent* SpecialBorderHISM; // 0x0(0x0)
	struct FSoftClassPath EffectPath; // 0x0(0x0)
	__int32 FogDistance; // 0x0(0x0)
	__int32 ViewSize; // 0x0(0x0)
	struct AChessPlayerController* PlayerController; // 0x0(0x0)
	struct TArray<struct AChessFogEffect*> GridEffectPool; // 0x0(0x0)
	char pad_328[0x70]; // 0x0(0x0)
	struct UNiagaraSystem* NiagaraSystem; // 0x0(0x0)
	char pad_3A0[0x28]; // 0x0(0x0)

	__int32 WorldPositionToGridID(struct FVector WorldPosition); // Function /Script/Game.ChessFogManager.WorldPositionToGridID // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void RefreshFog(struct FVector ViewCenter, bool bInit); // Function /Script/Game.ChessFogManager.RefreshFog // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct AChessFogEffect* ObtainFogEffectActor(); // Function /Script/Game.ChessFogManager.ObtainFogEffectActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InitFog(); // Function /Script/Game.ChessFogManager.InitFog // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CreateFog(__int32 GridId, struct FTransform Transform); // Function /Script/Game.ChessFogManager.CreateFog // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void CreateEffect(__int32 GridId, struct FVector Location); // Function /Script/Game.ChessFogManager.CreateEffect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ClearOneFog(__int32 GridId, bool bIntoView, bool bForce); // Function /Script/Game.ChessFogManager.ClearOneFog // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearOneEffect(__int32 GridId); // Function /Script/Game.ChessFogManager.ClearOneEffect // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearAll(); // Function /Script/Game.ChessFogManager.ClearAll // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 CheckFogBorder(__int32 GridId); // Function /Script/Game.ChessFogManager.CheckFogBorder // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessGameMode
// Size: 0x0 (Inherited: 0x0)
struct AChessGameMode : AGameMode {
	struct AChessMapBuilder* MapBuilder; // 0x0(0x0)
	struct AChessActorPool* ChessActorPool; // 0x0(0x0)
	struct AChessPlayerController* PlayerController; // 0x0(0x0)
	struct AChessCameraFollow* CameraFollow; // 0x0(0x0)
	struct AChessFogManager* FogManager; // 0x0(0x0)
	enum class EChessPathFindingType PathFindingType; // 0x0(0x0)
	char pad_331[0x7]; // 0x0(0x0)
	struct FMulticastInlineDelegate EventThroughGrid; // 0x0(0x0)
	struct FMulticastInlineDelegate EventReachGrid; // 0x0(0x0)
	struct FMulticastInlineDelegate EventUnlockGrid; // 0x0(0x0)
	struct FMulticastInlineDelegate EventUpdateGridEvent; // 0x0(0x0)
	struct FMulticastInlineDelegate EventClickActor; // 0x0(0x0)
	bool HasEvent; // 0x0(0x0)
	bool ChessDataDirty; // 0x0(0x0)
	char pad_38A[0x6]; // 0x0(0x0)
	struct TMap<__int32, struct UFXSystemComponent*> AllEffects; // 0x0(0x0)
	char pad_3E0[0x50]; // 0x0(0x0)

	void SetChessType(enum class EChessType InType); // Function /Script/Game.ChessGameMode.SetChessType // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetMap(struct FName InModuleName); // Function /Script/Game.ChessGameMode.ResetMap // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 PlayEffect(struct FString InPath, struct FVector InLocation, struct FRotator InRotate, bool IsPersistent); // Function /Script/Game.ChessGameMode.PlayEffect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void PlayCustomAnim(struct FString InPath, struct AActor* TargetActor, bool bLooping); // Function /Script/Game.ChessGameMode.PlayCustomAnim // (Event|Public|BlueprintEvent) // @ game+0
	void OnChessDataDirty(); // Function /Script/Game.ChessGameMode.OnChessDataDirty // (Event|Public|BlueprintEvent) // @ game+0
	void GetAllChessActor(struct TArray<struct AChessActor*>& inArray); // Function /Script/Game.ChessGameMode.GetAllChessActor // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void DestroyEffect(__int32 InEffectId); // Function /Script/Game.ChessGameMode.DestroyEffect // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessGroundActor
// Size: 0x0 (Inherited: 0x0)
struct AChessGroundActor : AChessActor {
	char pad_2D8[0x20]; // 0x0(0x0)
	struct AChessGroundActor* Parent; // 0x0(0x0)
	struct AChessActor* InteractionActor; // 0x0(0x0)
	struct AChessNpc* InteractionNpc; // 0x0(0x0)
	struct TArray<struct AChessActor*> Objects; // 0x0(0x0)

	float TryGetBoxRecieverHeight(); // Function /Script/Game.ChessGroundActor.TryGetBoxRecieverHeight // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetHasBlockObject(); // Function /Script/Game.ChessGroundActor.GetHasBlockObject // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AChessActor* FindObjectByTag(struct FName InName); // Function /Script/Game.ChessGroundActor.FindObjectByTag // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessInteractionActor
// Size: 0x0 (Inherited: 0x0)
struct AChessInteractionActor : AChessActor {
	bool bInPreActon; // 0x0(0x0)
	char pad_2D9[0x3]; // 0x0(0x0)
	float CharacterMoveDistance; // 0x0(0x0)

	void SetPlayerStartPos(struct FVector StartPos); // Function /Script/Game.ChessInteractionActor.SetPlayerStartPos // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void PreInteration(float InDeltaTime); // Function /Script/Game.ChessInteractionActor.PreInteration // (Event|Public|BlueprintEvent) // @ game+0
	void EndInteraction(); // Function /Script/Game.ChessInteractionActor.EndInteraction // (Event|Public|BlueprintEvent) // @ game+0
	void DOInteraction(float InDeltaTime); // Function /Script/Game.ChessInteractionActor.DOInteraction // (Event|Public|BlueprintEvent) // @ game+0
	bool BeginInteraction(); // Function /Script/Game.ChessInteractionActor.BeginInteraction // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.ChessLibrary
// Size: 0x0 (Inherited: 0x0)
struct UChessLibrary : UBlueprintFunctionLibrary {

	void SetChessMainVisible(bool InVisible); // Function /Script/Game.ChessLibrary.SetChessMainVisible // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetRelativeAngle(struct AChessActor* InActor, struct AActor* InOther); // Function /Script/Game.ChessLibrary.GetRelativeAngle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AChessGroundActor* GetNearestInteractionGround(struct AChessGameMode* InGameMode, struct AChessActor* InActor); // Function /Script/Game.ChessLibrary.GetNearestInteractionGround // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetAllInteractionGround(struct AChessGameMode* InGameMode, struct AChessActor* InActor, struct TArray<struct AChessGroundActor*>& inArray); // Function /Script/Game.ChessLibrary.GetAllInteractionGround // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool CheckCanInteraction(struct AChessGameMode* InGameMode, struct AChessActor* InActor); // Function /Script/Game.ChessLibrary.CheckCanInteraction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessMapBuilder
// Size: 0x0 (Inherited: 0x0)
struct AChessMapBuilder : AActor {
	struct AChessGameMode* ChessGameMode; // 0x0(0x0)
	struct TMap<__int32, struct AChessRegionActor*> AllRegions; // 0x0(0x0)
	struct TArray<struct AChessArtActor*> AllArtActors; // 0x0(0x0)
	char pad_288[0x50]; // 0x0(0x0)

	struct AChessArtActor* SpawnArtActor(struct FString ModelPath, struct FVector InPosition, struct FVector InRotation, struct FVector InScale); // Function /Script/Game.ChessMapBuilder.SpawnArtActor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ResetMap(); // Function /Script/Game.ChessMapBuilder.ResetMap // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AChessRegionActor* FindRegion(__int32 InRegionId); // Function /Script/Game.ChessMapBuilder.FindRegion // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AChessRegionActor* CreateRegion(__int32 InRegionId, struct FVector InLocation, float InRotation); // Function /Script/Game.ChessMapBuilder.CreateRegion // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessNpc
// Size: 0x0 (Inherited: 0x0)
struct AChessNpc : ACharacter {
	bool IsInteract; // 0x0(0x0)
	struct AChessActor* BindingObject; // 0x0(0x0)
	bool IsActive; // 0x0(0x0)
	char pad_4CA[0x6]; // 0x0(0x0)
	struct UFXSystemComponent* AttachParticleEffect; // 0x0(0x0)
	struct UMeshComponent* MeshComponent; // 0x0(0x0)

	void SetActiveState(bool InValue); // Function /Script/Game.ChessNpc.SetActiveState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LookAtPlayer(struct AChessCharacter* Character); // Function /Script/Game.ChessNpc.LookAtPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AttachEffect(struct FString InPath, struct FVector InLocation, struct FRotator InRotate); // Function /Script/Game.ChessNpc.AttachEffect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessNpcAnimInstance
// Size: 0x0 (Inherited: 0x0)
struct UChessNpcAnimInstance : UAnimInstance {
	bool IsInteract; // 0x0(0x0)
};

 // Class /Script/Game.ChessPlayerController
// Size: 0x0 (Inherited: 0x0)
struct AChessPlayerController : APlayerController {
	struct AChessInteractionActor* InteractionActor; // 0x0(0x0)
	char pad_578[0x28]; // 0x0(0x0)
	bool IsUIMode; // 0x0(0x0)
	bool ShowTipsAfterMoveTo; // 0x0(0x0)
	char pad_5A2[0x6]; // 0x0(0x0)
	struct AChessGameMode* GameMode; // 0x0(0x0)
	struct AChessCharacter* CurrentChar; // 0x0(0x0)
	struct TArray<struct AChessGroundActor*> PathActors; // 0x0(0x0)
	struct UFXSystemComponent* HintEffect; // 0x0(0x0)
	struct UFXSystemComponent* ForbiddenHintEffect; // 0x0(0x0)
	__int32 RunGridCount; // 0x0(0x0)
	float MaxRunSpeed; // 0x0(0x0)
	float MaxWalkSpeed; // 0x0(0x0)
	float HintDisappearTime; // 0x0(0x0)

	void UpdateWalkState(bool IsRun, bool IsWalk); // Function /Script/Game.ChessPlayerController.UpdateWalkState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TrySetMoveDestination(); // Function /Script/Game.ChessPlayerController.TrySetMoveDestination // (Final|Native|Private|BlueprintCallable) // @ game+0
	void StopMovementImmediately(); // Function /Script/Game.ChessPlayerController.StopMovementImmediately // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetScale(float InValue); // Function /Script/Game.ChessPlayerController.SetScale // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetChessState(); // Function /Script/Game.ChessPlayerController.ResetChessState // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool MoveToGround(struct AChessGroundActor* Ground, struct FDelegate InMoveEnd); // Function /Script/Game.ChessPlayerController.MoveToGround // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LookAtTarget(struct AChessActor* InActor); // Function /Script/Game.ChessPlayerController.LookAtTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AChessCharacter* GetCurrentChar(); // Function /Script/Game.ChessPlayerController.GetCurrentChar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void ExhaleMouse(bool bShow); // Function /Script/Game.ChessPlayerController.ExhaleMouse // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessPlayerMovementComponent
// Size: 0x0 (Inherited: 0x0)
struct UChessPlayerMovementComponent : UCharacterMovementComponent {
	char pad_B00[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.ChessRegionActor
// Size: 0x0 (Inherited: 0x0)
struct AChessRegionActor : AActor {
	struct AChessGameMode* ChessGameMode; // 0x0(0x0)
	struct TMap<__int32, struct AChessGroundActor*> AllGrounds; // 0x0(0x0)
	struct TMap<__int32, struct AChessActor*> AllObjects; // 0x0(0x0)
	struct TMap<__int32, struct AChessNpc*> AllNpcs; // 0x0(0x0)
	__int32 RegionId; // 0x0(0x0)
	char pad_31C[0x4C]; // 0x0(0x0)
	struct TMap<__int32, struct AChessActor*> AllFogActor; // 0x0(0x0)
	struct AChessFogManager* FogManager; // 0x0(0x0)
	char pad_3C0[0x8]; // 0x0(0x0)

	struct FIntVector WorldPositionToGrid(struct FVector WorldPosition); // Function /Script/Game.ChessRegionActor.WorldPositionToGrid // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void UpdatePathFinding(); // Function /Script/Game.ChessRegionActor.UpdatePathFinding // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SpawnNpc(struct AChessActor* ChessActor, struct FString ModelPath); // Function /Script/Game.ChessRegionActor.SpawnNpc // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetRegionSize(__int32 InRegionMinX, __int32 InRegionMinY, __int32 InRegionMaxX, __int32 InRegionMaxY); // Function /Script/Game.ChessRegionActor.SetRegionSize // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AChessActor* SetRegionObject(__int32 InUID, __int32 InX, __int32 InY, __int32 InResId, __int32 InRotate, float InOffset, __int32 InState); // Function /Script/Game.ChessRegionActor.SetRegionObject // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AChessGroundActor* SetRegionGround(__int32 InUID, __int32 InX, __int32 InY, __int32 InResId, float InOffset, __int32 InState); // Function /Script/Game.ChessRegionActor.SetRegionGround // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RefreshFog(); // Function /Script/Game.ChessRegionActor.RefreshFog // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetViewData(bool InForce, bool InUseSquare, struct TArray<__int64>& inList); // Function /Script/Game.ChessRegionActor.GetViewData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FVector GetGridWorldPosition(__int32 InGridX, __int32 InGridY); // Function /Script/Game.ChessRegionActor.GetGridWorldPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void GetActorAllGround(struct AChessActor* InActor, struct TArray<struct AChessGroundActor*>& Ground); // Function /Script/Game.ChessRegionActor.GetActorAllGround // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AChessGroundActor* FindGroundActor(__int32 InX, __int32 InY); // Function /Script/Game.ChessRegionActor.FindGroundActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct AActor*> FindAllActorsByConfigTag(struct FName InName); // Function /Script/Game.ChessRegionActor.FindAllActorsByConfigTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckObjectUnderFog(struct AChessActor* InActor); // Function /Script/Game.ChessRegionActor.CheckObjectUnderFog // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddViewRegion(__int32 InRegionMinX, __int32 InRegionMinY, __int32 InRegionMaxX, __int32 InRegionMaxY); // Function /Script/Game.ChessRegionActor.AddViewRegion // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddPlayer(struct AChessCharacter* InCharacter, struct AChessActor* InTarget); // Function /Script/Game.ChessRegionActor.AddPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ChessSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UChessSubsystem : UGameInstanceSubsystem {
	char pad_30[0x50]; // 0x0(0x0)
};

 // Class /Script/Game.ClickEffectWidget
// Size: 0x0 (Inherited: 0x0)
struct UClickEffectWidget : UUserWidget {
	struct UNiagaraSystemWidget* Click; // 0x0(0x0)
	struct UNiagaraSystemWidget* Move; // 0x0(0x0)
	char pad_288[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.CollisionLibrary
// Size: 0x0 (Inherited: 0x0)
struct UCollisionLibrary : UBlueprintFunctionLibrary {

	struct USkeletalMeshComponent* GetMeshComponentWithBoneCollision(struct AActor* InActor, struct FName InBoneName); // Function /Script/Game.CollisionLibrary.GetMeshComponentWithBoneCollision // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class EPhysicalSurface GetHitPhysicalSurface(struct FHitResult& Hit); // Function /Script/Game.CollisionLibrary.GetHitPhysicalSurface // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ColorMathLibrary
// Size: 0x0 (Inherited: 0x0)
struct UColorMathLibrary : UBlueprintFunctionLibrary {

	struct FLinearColor ComputeColorFromTemperature(float Temp); // Function /Script/Game.ColorMathLibrary.ComputeColorFromTemperature // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ConsoleCommandObj
// Size: 0x0 (Inherited: 0x0)
struct UConsoleCommandObj : UObject {

	void TestStreamSync(struct FString Path); // Function /Script/Game.ConsoleCommandObj.TestStreamSync // (Final|Exec|Native|Protected) // @ game+0
	void TestStreamAsync(struct FString Path); // Function /Script/Game.ConsoleCommandObj.TestStreamAsync // (Final|Exec|Native|Protected) // @ game+0
	void TestRuntimeAsset(); // Function /Script/Game.ConsoleCommandObj.TestRuntimeAsset // (Final|Exec|Native|Protected|Const) // @ game+0
	void TestMountPak(struct FString PakPath, struct FString MountPoint); // Function /Script/Game.ConsoleCommandObj.TestMountPak // (Final|Exec|Native|Protected|Const) // @ game+0
	void TestLoadPackageSync(struct FString Path); // Function /Script/Game.ConsoleCommandObj.TestLoadPackageSync // (Final|Exec|Native|Protected) // @ game+0
	void TestLoadPackageAsync(struct FString Path); // Function /Script/Game.ConsoleCommandObj.TestLoadPackageAsync // (Final|Exec|Native|Protected) // @ game+0
	void SetMontageSlot(struct FString PathMontage, struct FString SlotName, struct FString PathSequence); // Function /Script/Game.ConsoleCommandObj.SetMontageSlot // (Final|Exec|Native|Protected) // @ game+0
	void LoadPackageObject(struct FString ObjPath); // Function /Script/Game.ConsoleCommandObj.LoadPackageObject // (Final|Exec|Native|Protected|Const) // @ game+0
	void GetObjectReference(struct FString Object); // Function /Script/Game.ConsoleCommandObj.GetObjectReference // (Final|Exec|Native|Protected) // @ game+0
	void GameShowTag(struct FString ObjPath, struct FString Tag); // Function /Script/Game.ConsoleCommandObj.GameShowTag // (Final|Exec|Native|Protected|Const) // @ game+0
	void GameShowMeta(struct FString Obj, struct FString Tag); // Function /Script/Game.ConsoleCommandObj.GameShowMeta // (Final|Exec|Native|Protected|Const) // @ game+0
	void GameSetMeta(struct FString Obj, struct FString Tag, struct FString TagContent); // Function /Script/Game.ConsoleCommandObj.GameSetMeta // (Final|Exec|Native|Protected|Const) // @ game+0
	void FindObjectX(struct FString Path); // Function /Script/Game.ConsoleCommandObj.FindObjectX // (Final|Exec|Native|Protected|Const) // @ game+0
	void ExtractPackage(struct FString PkgDir); // Function /Script/Game.ConsoleCommandObj.ExtractPackage // (Final|Exec|Native|Protected|Const) // @ game+0
	void ExtractObj(struct FString ObjPath); // Function /Script/Game.ConsoleCommandObj.ExtractObj // (Final|Exec|Native|Protected|Const) // @ game+0
	void ExtractClass(struct FString ClassPath); // Function /Script/Game.ConsoleCommandObj.ExtractClass // (Final|Exec|Native|Protected|Const) // @ game+0
	void DumpAssetDependencies(struct FString Path); // Function /Script/Game.ConsoleCommandObj.DumpAssetDependencies // (Final|Exec|Native|Protected) // @ game+0
	void DumpAllAssetDependencies(); // Function /Script/Game.ConsoleCommandObj.DumpAllAssetDependencies // (Final|Exec|Native|Protected) // @ game+0
	void AssetRegistryInfo(); // Function /Script/Game.ConsoleCommandObj.AssetRegistryInfo // (Final|Exec|Native|Protected|Const) // @ game+0
};

 // Class /Script/Game.UserWidgetAnimation
// Size: 0x0 (Inherited: 0x0)
struct UUserWidgetAnimation : UUserWidget {
	char pad_278[0x18]; // 0x0(0x0)
	struct UComstomWidgetAnimtion* ComstomWidgetAnimtion; // 0x0(0x0)
	struct TArray<struct FString> PlayingAnims; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCustomUmgAnimFinishedDelegate; // 0x0(0x0)
	bool bHidden; // 0x0(0x0)
	enum class ESlateVisibility OriginVisibility; // 0x0(0x0)
	char pad_2BA[0x6]; // 0x0(0x0)

	void StopAnimFromName(struct FString AnimName); // Function /Script/Game.UserWidgetAnimation.StopAnimFromName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAnimFromAnimation(struct UWidgetAnimation* InAnimation); // Function /Script/Game.UserWidgetAnimation.StopAnimFromAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAllAnim(); // Function /Script/Game.UserWidgetAnimation.StopAllAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWidgetHidden(bool bHide); // Function /Script/Game.UserWidgetAnimation.SetWidgetHidden // (Native|Public|BlueprintCallable) // @ game+0
	void PlayAnimFromName(struct FString AnimName, float StartAtTime, __int32 NumLoopsToPlay, enum class EUMGSequencePlayMode InPlayMode, bool InRestoreState); // Function /Script/Game.UserWidgetAnimation.PlayAnimFromName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayAnimFromAnimation(struct UWidgetAnimation* InAnimation, float StartAtTime, __int32 NumLoopsToPlay, enum class EUMGSequencePlayMode InPlayMode); // Function /Script/Game.UserWidgetAnimation.PlayAnimFromAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void K2_OnUpdate(float InDeltaTime); // Function /Script/Game.UserWidgetAnimation.K2_OnUpdate // (Event|Public|BlueprintEvent) // @ game+0
	void K2_OnCustomUmgAnimFinished(struct FString AnimName); // Function /Script/Game.UserWidgetAnimation.K2_OnCustomUmgAnimFinished // (Event|Public|BlueprintEvent) // @ game+0
	bool IsAnimPlayingFromName(struct FString AnimName); // Function /Script/Game.UserWidgetAnimation.IsAnimPlayingFromName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsAnimPlayingFromAnimation(struct UWidgetAnimation* InAnimation); // Function /Script/Game.UserWidgetAnimation.IsAnimPlayingFromAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetWidgetHidden(); // Function /Script/Game.UserWidgetAnimation.GetWidgetHidden // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetAnimationNamme(struct UWidgetAnimation* InAnimation); // Function /Script/Game.UserWidgetAnimation.GetAnimationNamme // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.CrossHairStrong
// Size: 0x0 (Inherited: 0x0)
struct UCrossHairStrong : UUserWidgetAnimation {
	struct TWeakObjectPtr<struct AGameCharacter> Pawn; // 0x0(0x0)

	void OnFireStrengthening(bool bStart, bool bSmall); // Function /Script/Game.CrossHairStrong.OnFireStrengthening // (Event|Public|BlueprintEvent) // @ game+0
	void OnAppliedModifierChange(__int32 ModifierID, bool IsApply); // Function /Script/Game.CrossHairStrong.OnAppliedModifierChange // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CrossHairBase
// Size: 0x0 (Inherited: 0x0)
struct UCrossHairBase : UUserWidgetAnimation {
	struct FVector2D ScreenSize; // 0x0(0x0)
	struct AGameCharacter* CurCharacter; // 0x0(0x0)
	char pad_2D0[0x40]; // 0x0(0x0)
	struct UUserWidget* AmmunitionWidget; // 0x0(0x0)
	struct TMap<struct FString, struct UUserWidget*> tbAmmunitionWidgets; // 0x0(0x0)
	struct AGamePlayerController* OwnerPlayer; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> Pawn; // 0x0(0x0)
	bool bWeaponReloading; // 0x0(0x0)
	bool bCalcRealPos; // 0x0(0x0)
	char pad_37A[0x2]; // 0x0(0x0)
	struct FLinearColor NormalColor; // 0x0(0x0)
	struct FLinearColor AimColor; // 0x0(0x0)
	struct FLinearColor CurColor; // 0x0(0x0)
	char pad_3AC[0x4]; // 0x0(0x0)
	struct UCanvasPanel* TmpGroupAmmunition; // 0x0(0x0)
	struct UCanvasPanel* TmpRoot; // 0x0(0x0)
	struct UWidget* TmpRealPos; // 0x0(0x0)
	struct UWidget* TmpCenter; // 0x0(0x0)

	void OnReloading(bool bIsReload, float TotalTime, bool bInterrupt); // Function /Script/Game.CrossHairBase.OnReloading // (Final|Native|Public) // @ game+0
	void K2_OnReloading(bool bIsReload, enum class EWeaponType Type, bool bInterrupt, float AnimTime); // Function /Script/Game.CrossHairBase.K2_OnReloading // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.CrossHair_FightCross
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightCross : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct USizeBox* LU; // 0x0(0x0)
	struct USizeBox* LD; // 0x0(0x0)
	struct USizeBox* RU; // 0x0(0x0)
	struct USizeBox* RD; // 0x0(0x0)
	char pad_3F8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightCross2
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightCross2 : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct USizeBox* LU; // 0x0(0x0)
	struct USizeBox* RU; // 0x0(0x0)
	struct USizeBox* RD; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightCross3
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightCross3 : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct USizeBox* LD; // 0x0(0x0)
	struct USizeBox* RD; // 0x0(0x0)
	char pad_3E8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightCross4
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightCross4 : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct USizeBox* LU; // 0x0(0x0)
	struct USizeBox* LD; // 0x0(0x0)
	struct USizeBox* RU; // 0x0(0x0)
	struct USizeBox* RD; // 0x0(0x0)
	struct FVector2D Offset; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightCross5
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightCross5 : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct USizeBox* LU; // 0x0(0x0)
	struct USizeBox* RU; // 0x0(0x0)
	char pad_3E8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightLdFarme
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightLdFarme : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct USizeBox* LU; // 0x0(0x0)
	struct USizeBox* LD; // 0x0(0x0)
	struct USizeBox* RU; // 0x0(0x0)
	struct USizeBox* RD; // 0x0(0x0)
	char pad_3F8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightMlaFarme
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightMlaFarme : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct URedirectImage* LU; // 0x0(0x0)
	struct URedirectImage* RU; // 0x0(0x0)
	char pad_3E8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightPlmFarme
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightPlmFarme : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct UWidget* TmpBg1; // 0x0(0x0)
	struct UWidget* TmpBg2; // 0x0(0x0)
	struct UWidgetAnimation* TmpAnimation_Rotate; // 0x0(0x0)
	struct UWidgetAnimation* TmpOverheated; // 0x0(0x0)
	char pad_3F8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightCrossRole01
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightCrossRole01 : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct USizeBox* LU; // 0x0(0x0)
	struct USizeBox* RU; // 0x0(0x0)
	char pad_3E8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.CrossHair_FightCrossRole010a
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightCrossRole010a : UCrossHairBase {
	struct UWidgetAnimation* transparency; // 0x0(0x0)
	struct UWidget* Group_zoom; // 0x0(0x0)
	struct UWidget* Group_FireStarter_zoom; // 0x0(0x0)
	struct UWidget* D; // 0x0(0x0)
	struct UWidget* R; // 0x0(0x0)
	struct UWidget* L; // 0x0(0x0)

	void OnWeaponChanged(struct APlayerWeapon* lpWeapon); // Function /Script/Game.CrossHair_FightCrossRole010a.OnWeaponChanged // (Final|Native|Public) // @ game+0
	void OnClientShoot(); // Function /Script/Game.CrossHair_FightCrossRole010a.OnClientShoot // (Final|Native|Public) // @ game+0
	void OnClientPreheat(); // Function /Script/Game.CrossHair_FightCrossRole010a.OnClientPreheat // (Final|Native|Public) // @ game+0
	void OnClientFireForceStop(); // Function /Script/Game.CrossHair_FightCrossRole010a.OnClientFireForceStop // (Final|Native|Public) // @ game+0
	void B2_OnClientShoot(); // Function /Script/Game.CrossHair_FightCrossRole010a.B2_OnClientShoot // (Event|Public|BlueprintEvent) // @ game+0
	void B2_OnClientPreheat(); // Function /Script/Game.CrossHair_FightCrossRole010a.B2_OnClientPreheat // (Event|Public|BlueprintEvent) // @ game+0
	void B2_OnClientFireForceStop(); // Function /Script/Game.CrossHair_FightCrossRole010a.B2_OnClientFireForceStop // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.CrossHair_FightCrossRoleAim010a
// Size: 0x0 (Inherited: 0x0)
struct UCrossHair_FightCrossRoleAim010a : UCrossHairBase {
	struct UWidget* LU; // 0x0(0x0)
	struct UWidget* LD; // 0x0(0x0)
	struct UWidget* RU; // 0x0(0x0)
	struct UWidget* RD; // 0x0(0x0)

	void OnWeaponChanged(struct APlayerWeapon* lpWeapon); // Function /Script/Game.CrossHair_FightCrossRoleAim010a.OnWeaponChanged // (Final|Native|Public) // @ game+0
	void OnClientShoot(); // Function /Script/Game.CrossHair_FightCrossRoleAim010a.OnClientShoot // (Final|Native|Public) // @ game+0
	void OnClientPreheat(); // Function /Script/Game.CrossHair_FightCrossRoleAim010a.OnClientPreheat // (Final|Native|Public) // @ game+0
	void OnClientFireForceStop(); // Function /Script/Game.CrossHair_FightCrossRoleAim010a.OnClientFireForceStop // (Final|Native|Public) // @ game+0
	void B2_OnClientShoot(); // Function /Script/Game.CrossHair_FightCrossRoleAim010a.B2_OnClientShoot // (Event|Public|BlueprintEvent) // @ game+0
	void B2_OnClientPreheat(); // Function /Script/Game.CrossHair_FightCrossRoleAim010a.B2_OnClientPreheat // (Event|Public|BlueprintEvent) // @ game+0
	void B2_OnClientFireForceStop(); // Function /Script/Game.CrossHair_FightCrossRoleAim010a.B2_OnClientFireForceStop // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.CrossAmmunition
// Size: 0x0 (Inherited: 0x0)
struct UCrossAmmunition : UUserWidgetAnimation {
	struct TWeakObjectPtr<struct AGameCharacter> CurCharacter; // 0x0(0x0)
	struct TArray<__int32> ModifierUIEffects; // 0x0(0x0)
	__int32 MaxBullet; // 0x0(0x0)
	__int32 LastMaxBullet; // 0x0(0x0)
	__int32 CurBullet; // 0x0(0x0)
	__int32 LastCurBullet; // 0x0(0x0)
	float OverloadValue; // 0x0(0x0)
	bool WeaponActive; // 0x0(0x0)
	bool bModifierChange; // 0x0(0x0)
	char pad_2EE[0x2]; // 0x0(0x0)

	void SetBulletTimeEffect(bool bShow); // Function /Script/Game.CrossAmmunition.SetBulletTimeEffect // (Event|Public|BlueprintEvent) // @ game+0
	void SetBulletEffect(bool bShow); // Function /Script/Game.CrossAmmunition.SetBulletEffect // (Event|Public|BlueprintEvent) // @ game+0
	void SetBulletCountEffect(float StartPercent, float EndPercent, float Start, float End); // Function /Script/Game.CrossAmmunition.SetBulletCountEffect // (Event|Public|BlueprintEvent) // @ game+0
	void OnBulletChange(__int32 InCurBullet, __int32 InMaxBullet, float InPercent); // Function /Script/Game.CrossAmmunition.OnBulletChange // (Event|Public|BlueprintEvent) // @ game+0
	void OnAppliedModifierChange(__int32 ModifierID, bool IsApply); // Function /Script/Game.CrossAmmunition.OnAppliedModifierChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void K2_SkillCastBulletFail(); // Function /Script/Game.CrossAmmunition.K2_SkillCastBulletFail // (Event|Public|BlueprintEvent) // @ game+0
	bool IsAim(); // Function /Script/Game.CrossAmmunition.IsAim // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetNextLeftCount(struct UModifier* InModifier); // Function /Script/Game.CrossAmmunition.GetNextLeftCount // (Native|Event|Public|BlueprintEvent) // @ game+0
	__int32 GetMaxBulletCount(); // Function /Script/Game.CrossAmmunition.GetMaxBulletCount // (Native|Event|Public|BlueprintEvent) // @ game+0
	__int32 GetCurBulletCount(); // Function /Script/Game.CrossAmmunition.GetCurBulletCount // (Native|Event|Public|BlueprintEvent) // @ game+0
	float GetBulletPer(); // Function /Script/Game.CrossAmmunition.GetBulletPer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void DealEffect(bool bFouse); // Function /Script/Game.CrossAmmunition.DealEffect // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearBulletEffect(); // Function /Script/Game.CrossAmmunition.ClearBulletEffect // (Event|Public|BlueprintEvent) // @ game+0
	void ChangeType(bool bActive); // Function /Script/Game.CrossAmmunition.ChangeType // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FightReload
// Size: 0x0 (Inherited: 0x0)
struct UFightReload : UUserWidgetAnimation {
	struct UWidgetAnimation* Break; // 0x0(0x0)
	char pad_2C8[0x10]; // 0x0(0x0)
	struct UWidget* TmpGroup_Reload; // 0x0(0x0)
	struct URedirectImage* TmpImage_Reload; // 0x0(0x0)
	struct AGamePlayerController* lpPlayer; // 0x0(0x0)
	struct FString BreakAnimName; // 0x0(0x0)
	struct FString ResetAnimName; // 0x0(0x0)

	void OnReload(bool bIsReload, float Processing, bool bInterrupt); // Function /Script/Game.FightReload.OnReload // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.UserListAppearAnimEntry
// Size: 0x0 (Inherited: 0x0)
struct UUserListAppearAnimEntry : UInterface {

	void CustListQuickPlayAnim(); // Function /Script/Game.UserListAppearAnimEntry.CustListQuickPlayAnim // (Event|Public|BlueprintEvent) // @ game+0
	void CustListPlayAnim(); // Function /Script/Game.UserListAppearAnimEntry.CustListPlayAnim // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.CustListView
// Size: 0x0 (Inherited: 0x0)
struct UCustListView : UListView {
	float TimeInterval; // 0x0(0x0)
	char pad_384[0x4]; // 0x0(0x0)
	struct FString AnimName; // 0x0(0x0)
	bool bDefaultShow; // 0x0(0x0)
	bool bAutoPlay; // 0x0(0x0)
	char pad_39A[0x6]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCustListViewScrolled; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPlayAppearAnimFinish; // 0x0(0x0)
	char pad_3C0[0x28]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct UUserWidget>> PlayWidgets; // 0x0(0x0)

	void SetScrollable(bool bScrollable); // Function /Script/Game.CustListView.SetScrollable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayAnimation(__int32 InStartIndex); // Function /Script/Game.CustListView.PlayAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsPlayAppearAnim(); // Function /Script/Game.CustListView.IsPlayAppearAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsCanMove(); // Function /Script/Game.CustListView.IsCanMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ForceAppearAnimEnd(); // Function /Script/Game.CustListView.ForceAppearAnimEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.Custom4Point
// Size: 0x0 (Inherited: 0x0)
struct UCustom4Point : UWidget {
	struct FSlateBrush Brush; // 0x0(0x0)
	struct FDelegate BrushDelegate; // 0x0(0x0)
	struct FMargin Margin; // 0x0(0x0)
	struct FVector2D Location0; // 0x0(0x0)
	struct FColor Color0; // 0x0(0x0)
	struct FVector2D UV0; // 0x0(0x0)
	struct FVector2D Location1; // 0x0(0x0)
	struct FColor Color1; // 0x0(0x0)
	struct FVector2D UV1; // 0x0(0x0)
	struct FVector2D Location2; // 0x0(0x0)
	struct FColor Color2; // 0x0(0x0)
	struct FVector2D UV2; // 0x0(0x0)
	struct FVector2D Location3; // 0x0(0x0)
	struct FColor Color3; // 0x0(0x0)
	struct FVector2D UV3; // 0x0(0x0)
	char pad_218[0x10]; // 0x0(0x0)

	void SetUV3(struct FVector2D& Value); // Function /Script/Game.Custom4Point.SetUV3 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetUV2(struct FVector2D& Value); // Function /Script/Game.Custom4Point.SetUV2 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetUV1(struct FVector2D& Value); // Function /Script/Game.Custom4Point.SetUV1 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetUV0(struct FVector2D& Value); // Function /Script/Game.Custom4Point.SetUV0 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetMargin(struct FMargin& Value); // Function /Script/Game.Custom4Point.SetMargin // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetLocation3(struct FVector2D& Value); // Function /Script/Game.Custom4Point.SetLocation3 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetLocation2(struct FVector2D& Value); // Function /Script/Game.Custom4Point.SetLocation2 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetLocation1(struct FVector2D& Value); // Function /Script/Game.Custom4Point.SetLocation1 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetLocation0(struct FVector2D& Value); // Function /Script/Game.Custom4Point.SetLocation0 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetColor3(struct FColor& Value); // Function /Script/Game.Custom4Point.SetColor3 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetColor2(struct FColor& Value); // Function /Script/Game.Custom4Point.SetColor2 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetColor1(struct FColor& Value); // Function /Script/Game.Custom4Point.SetColor1 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetColor0(struct FColor& Value); // Function /Script/Game.Custom4Point.SetColor0 // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CustomButton
// Size: 0x0 (Inherited: 0x0)
struct UCustomButton : UButton {
	char pad_440[0x8]; // 0x0(0x0)
	bool bLong; // 0x0(0x0)
	char pad_449[0x3]; // 0x0(0x0)
	float LongTime; // 0x0(0x0)
	struct TMap<float, float> IncreaseMap; // 0x0(0x0)
	__int32 PressSoundsID; // 0x0(0x0)
	__int32 ReleaseSoundsID; // 0x0(0x0)
	struct FMargin Offset; // 0x0(0x0)
	struct FString ClickAnim; // 0x0(0x0)
	float IntervalTime; // 0x0(0x0)
	char pad_4CC[0x4]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnLongPressed; // 0x0(0x0)
	char pad_4E0[0x20]; // 0x0(0x0)

	void StopLongPress(); // Function /Script/Game.CustomButton.StopLongPress // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetHovered(char bVal); // Function /Script/Game.CustomButton.SetHovered // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnButtonLongPressedEvent__DelegateSignature(float Time, __int32 Num); // DelegateFunction /Script/Game.CustomButton.OnButtonLongPressedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void ForceClick(); // Function /Script/Game.CustomButton.ForceClick // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CustomGameViewportClient
// Size: 0x0 (Inherited: 0x0)
struct UCustomGameViewportClient : UGameViewportClient {
	char pad_360[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.DragWidget
// Size: 0x0 (Inherited: 0x0)
struct UDragWidget : UUserWidgetAnimation {
	char pad_2C0[0x18]; // 0x0(0x0)

	void SetParentWidget(struct UUserWidget* InParent); // Function /Script/Game.DragWidget.SetParentWidget // (Native|Public|BlueprintCallable) // @ game+0
	void SetModifyState(bool bModify); // Function /Script/Game.DragWidget.SetModifyState // (Native|Public|BlueprintCallable) // @ game+0
	void OnModifyStateChange(bool bModify); // Function /Script/Game.DragWidget.OnModifyStateChange // (Event|Public|BlueprintEvent) // @ game+0
	void EventOnSelect(); // Function /Script/Game.DragWidget.EventOnSelect // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.CustomizeWidget
// Size: 0x0 (Inherited: 0x0)
struct UCustomizeWidget : UDragWidget {
	__int32 Index; // 0x0(0x0)
	bool OnlyVerticalDrag; // 0x0(0x0)
	bool OnlyHorizontalDrag; // 0x0(0x0)
	bool CanDrag; // 0x0(0x0)
	char pad_2DF[0x1]; // 0x0(0x0)
	float Space; // 0x0(0x0)
	char pad_2E4[0x4]; // 0x0(0x0)
	struct UWidget* TempSelected; // 0x0(0x0)
	struct UCustomizeWidget* ContactWidget; // 0x0(0x0)
	struct UCustomizeWidget* BeContactWidget; // 0x0(0x0)
	struct UCanvasPanelSlot* PanelSlot; // 0x0(0x0)
	char pad_308[0x8]; // 0x0(0x0)

	void SetSelected(bool bSelected); // Function /Script/Game.CustomizeWidget.SetSelected // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetScaleAndUpdatePosition(struct FVector2D Scale); // Function /Script/Game.CustomizeWidget.SetScaleAndUpdatePosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetContactWidget(struct UCustomizeWidget* Widget); // Function /Script/Game.CustomizeWidget.SetContactWidget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetBeContactWidget(struct UCustomizeWidget* Widget); // Function /Script/Game.CustomizeWidget.SetBeContactWidget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Move(struct FVector2D& InDir); // Function /Script/Game.CustomizeWidget.Move // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool IsOverlap(struct FVector2D Position); // Function /Script/Game.CustomizeWidget.IsOverlap // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void InitConfigData(bool bSetVertical, bool bSetHorizontal); // Function /Script/Game.CustomizeWidget.InitConfigData // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetNormalHeiget(); // Function /Script/Game.CustomizeWidget.GetNormalHeiget // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CustomPostProcess
// Size: 0x0 (Inherited: 0x0)
struct UCustomPostProcess : UContentWidget {
	struct FMargin Padding; // 0x0(0x0)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x0(0x0)
	enum class EVerticalAlignment VerticalAlignment; // 0x0(0x0)
	bool bOverrideAutoRadiusCalculation; // 0x0(0x0)
	char pad_14B[0x5]; // 0x0(0x0)
	struct FSlateBrush PostProcessBrush; // 0x0(0x0)
	char pad_1D8[0x10]; // 0x0(0x0)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function /Script/Game.CustomPostProcess.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPadding(struct FMargin InPadding); // Function /Script/Game.CustomPostProcess.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function /Script/Game.CustomPostProcess.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UMaterialInstanceDynamic* GetDynamicMaterial(); // Function /Script/Game.CustomPostProcess.GetDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CustomPostProcessSlot
// Size: 0x0 (Inherited: 0x0)
struct UCustomPostProcessSlot : UPanelSlot {
	struct FMargin Padding; // 0x0(0x0)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x0(0x0)
	enum class EVerticalAlignment VerticalAlignment; // 0x0(0x0)
	char pad_4A[0x16]; // 0x0(0x0)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function /Script/Game.CustomPostProcessSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPadding(struct FMargin InPadding); // Function /Script/Game.CustomPostProcessSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function /Script/Game.CustomPostProcessSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CustomSafeZone
// Size: 0x0 (Inherited: 0x0)
struct UCustomSafeZone : UContentWidget {
	char pad_138[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.CustomSafeZoneSlot
// Size: 0x0 (Inherited: 0x0)
struct UCustomSafeZoneSlot : UPanelSlot {
	enum class EHorizontalAlignment HAlign; // 0x0(0x0)
	enum class EVerticalAlignment VAlign; // 0x0(0x0)
	char pad_3A[0x6]; // 0x0(0x0)
};

 // Class /Script/Game.CustomScrollBoxBase
// Size: 0x0 (Inherited: 0x0)
struct UCustomScrollBoxBase : UScrollBox {
	char pad_898[0x20]; // 0x0(0x0)
	struct TMap<struct FString, float> AdaptiveLangHeights; // 0x0(0x0)
	float TweenDefaultSpeed; // 0x0(0x0)
	char pad_90C[0x4]; // 0x0(0x0)

	void UpdateAdaptiveLangHeight(); // Function /Script/Game.CustomScrollBoxBase.UpdateAdaptiveLangHeight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetEnableWheel(bool InValue); // Function /Script/Game.CustomScrollBoxBase.SetEnableWheel // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool NeedScroll(); // Function /Script/Game.CustomScrollBoxBase.NeedScroll // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveToEndBySpeed(float InSpeed, enum class EMoveInterpType InInterpType); // Function /Script/Game.CustomScrollBoxBase.MoveToEndBySpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveToEnd(float InDuration, enum class EMoveInterpType InInterpType); // Function /Script/Game.CustomScrollBoxBase.MoveToEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveToBySpeed(float InEndValue, float InSpeed, enum class EMoveInterpType InInterpType); // Function /Script/Game.CustomScrollBoxBase.MoveToBySpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveTo(float InEndValue, float InDuration, enum class EMoveInterpType InInterpType); // Function /Script/Game.CustomScrollBoxBase.MoveTo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveStop(); // Function /Script/Game.CustomScrollBoxBase.MoveStop // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MovePause(bool bInPause); // Function /Script/Game.CustomScrollBoxBase.MovePause // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ScrollPageBox
// Size: 0x0 (Inherited: 0x0)
struct UScrollPageBox : UCustomScrollBoxBase {
	bool bLoop; // 0x0(0x0)
	char pad_911[0x3]; // 0x0(0x0)
	float DragDis; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCenterIndexChange; // 0x0(0x0)
	bool bUserScrolledKillAnim; // 0x0(0x0)
	char pad_929[0x27]; // 0x0(0x0)

	void StopScrollAnim(__int32 InState); // Function /Script/Game.ScrollPageBox.StopScrollAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetDelayStart(float InDelay); // Function /Script/Game.ScrollPageBox.SetDelayStart // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCurrentIndex(__int32 InIndex); // Function /Script/Game.ScrollPageBox.SetCurrentIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetContentFillComplete(bool InContentFillComplete); // Function /Script/Game.ScrollPageBox.SetContentFillComplete // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCompleteDelegate(struct FDelegate InComplete); // Function /Script/Game.ScrollPageBox.SetCompleteDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayScrollAnim(float InSpeed, float InDelayStart, float InDelayEnd, bool InLoop, struct FDelegate InComplete); // Function /Script/Game.ScrollPageBox.PlayScrollAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayAnim_AlwaysToEnd(float InSpeed); // Function /Script/Game.ScrollPageBox.PlayAnim_AlwaysToEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnUserScrolledInPageBox(float CurrentOffset); // Function /Script/Game.ScrollPageBox.OnUserScrolledInPageBox // (Final|Native|Public) // @ game+0
	void OnScrollEnd(); // Function /Script/Game.ScrollPageBox.OnScrollEnd // (Final|Native|Public) // @ game+0
	__int32 GetCenterIndex(); // Function /Script/Game.ScrollPageBox.GetCenterIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.ScrollCenterChildBox
// Size: 0x0 (Inherited: 0x0)
struct UScrollCenterChildBox : UCustomScrollBoxBase {
};

 // Class /Script/Game.CustomText
// Size: 0x0 (Inherited: 0x0)
struct UCustomText : URetainerBox {
	struct FDelegate bParamDelegate; // 0x0(0x0)
	bool bParam; // 0x0(0x0)
	char pad_179[0x3]; // 0x0(0x0)
	float InitParam; // 0x0(0x0)
	struct FLinearColor Param1; // 0x0(0x0)
	struct FLinearColor Param2; // 0x0(0x0)
	char pad_1A0[0x8]; // 0x0(0x0)

	void SetParam2(struct FLinearColor& Value); // Function /Script/Game.CustomText.SetParam2 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetParam1(struct FLinearColor& Value); // Function /Script/Game.CustomText.SetParam1 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetInitParam(float InParam); // Function /Script/Game.CustomText.SetInitParam // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetDynamicMatParam(float InValue); // Function /Script/Game.CustomText.SetDynamicMatParam // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayUIEffect(bool IsPlay); // Function /Script/Game.CustomText.PlayUIEffect // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Play(bool IsPlay); // Function /Script/Game.CustomText.Play // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsPlay(); // Function /Script/Game.CustomText.IsPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.RedirectTextBlock
// Size: 0x0 (Inherited: 0x0)
struct URedirectTextBlock : UTextBlock {
	struct UCommonTextScrollStyle* ScrollStyle; // 0x0(0x0)
	bool bAutoStretch; // 0x0(0x0)
	char pad_2C9[0x3]; // 0x0(0x0)
	__int32 MinFontSize; // 0x0(0x0)
	__int32 StretchMinSize; // 0x0(0x0)
	float StartTime; // 0x0(0x0)
	float AnimTime; // 0x0(0x0)
	float TimeInterval; // 0x0(0x0)
	char pad_2E0[0x80]; // 0x0(0x0)

	void SwapFontAsset(); // Function /Script/Game.RedirectTextBlock.SwapFontAsset // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetNumAnimation(float InNow, float InNew, struct FText InText, struct FString InFormat, float InNowMax, float InNewMax); // Function /Script/Game.RedirectTextBlock.SetNumAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetScrollState(); // Function /Script/Game.RedirectTextBlock.ResetScrollState // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CustomTextBlock
// Size: 0x0 (Inherited: 0x0)
struct UCustomTextBlock : URedirectTextBlock {
	struct FText ConvertText; // 0x0(0x0)
	struct FDelegate ConvertTextDelegate; // 0x0(0x0)

	struct FText Convert(struct FText& InText); // Function /Script/Game.CustomTextBlock.Convert // (Final|Native|Public|HasOutParms|Const) // @ game+0
};

 // Class /Script/Game.CustTileView
// Size: 0x0 (Inherited: 0x0)
struct UCustTileView : UTileView {
	float TimeInterval; // 0x0(0x0)
	char pad_3A4[0x4]; // 0x0(0x0)
	struct FString AnimName; // 0x0(0x0)
	bool bDefaultShow; // 0x0(0x0)
	bool bAutoPlay; // 0x0(0x0)
	char pad_3BA[0x6]; // 0x0(0x0)
	struct FScrollBarStyle InStyle; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPlayAppearAnimFinish; // 0x0(0x0)
	char pad_8A0[0x28]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct UUserWidget>> PlayWidgets; // 0x0(0x0)

	void PlayAnimation(__int32 InStartIndex); // Function /Script/Game.CustTileView.PlayAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsPlayAppearAnim(); // Function /Script/Game.CustTileView.IsPlayAppearAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsCanMove(); // Function /Script/Game.CustTileView.IsCanMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ForceAppearAnimEnd(); // Function /Script/Game.CustTileView.ForceAppearAnimEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DamageFloat
// Size: 0x0 (Inherited: 0x0)
struct UDamageFloat : UUserWidgetAnimation {
	struct FSoftClassPath ModifyUMG; // 0x0(0x0)
	float SpeedRatio; // 0x0(0x0)
	__int32 MaxNum; // 0x0(0x0)
	struct FVector2D Offset; // 0x0(0x0)
	char pad_2E8[0x8]; // 0x0(0x0)
	struct UCurveFloat* DistanceToScaleCurve; // 0x0(0x0)
	struct UCurveVector* DistanceToTranslationCurve; // 0x0(0x0)
	struct UCurveFloat* FovToScaleCurve; // 0x0(0x0)
	struct UCurveVector* FovToTranslationCurve; // 0x0(0x0)
	struct TMap<struct FSoftClassPath, struct FMyWidgetInfo> CacheWidget; // 0x0(0x0)
	struct UPanelWidget* RootWidget; // 0x0(0x0)
	char pad_368[0xC0]; // 0x0(0x0)
	struct TMap<struct AActor*, struct FDamageFloatRecord> DamageFloatRecord; // 0x0(0x0)

	void OnSettingChange(__int32 InSID, __int32 InType, __int32 InValue); // Function /Script/Game.DamageFloat.OnSettingChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void FightUIClose(bool bClose, bool bIgnoreStandalone); // Function /Script/Game.DamageFloat.FightUIClose // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DamageFloat_Num
// Size: 0x0 (Inherited: 0x0)
struct UDamageFloat_Num : UUserWidgetAnimation {
};

 // Class /Script/Game.DamageFloat_Base
// Size: 0x0 (Inherited: 0x0)
struct UDamageFloat_Base : UUserWidgetAnimation {
	bool bUse; // 0x0(0x0)
	char pad_2C1[0x17]; // 0x0(0x0)
	struct UDamageFloat* Root; // 0x0(0x0)
	enum class EModifyHPResult ModifyHPResult; // 0x0(0x0)
	char pad_2E1[0x7]; // 0x0(0x0)
	struct TWeakObjectPtr<struct UAbilityComponentBase> Target; // 0x0(0x0)
	char pad_2F0[0x4]; // 0x0(0x0)
	struct FVector WorldPosition; // 0x0(0x0)
	struct FVector2D ScreenPosition; // 0x0(0x0)
	struct FVector2D TempPos; // 0x0(0x0)
	struct TWeakObjectPtr<struct UPanelWidget> RootWidget; // 0x0(0x0)
	char pad_318[0x8]; // 0x0(0x0)
	struct FString CurrentAnimationName; // 0x0(0x0)
	struct UDamageFloat_Num* RealFloatEffect; // 0x0(0x0)
	struct UWidget* TmpOverlay; // 0x0(0x0)

	void Show(struct FDamageInfo& InDamageInfo, __int32 InResult, struct UPanelWidget* InRootWidget, struct FVector2D& InOffset, struct FString InSpecialType); // Function /Script/Game.DamageFloat_Base.Show // (Native|Public|HasOutParms|HasDefaults) // @ game+0
	void End(); // Function /Script/Game.DamageFloat_Base.End // (Native|Public) // @ game+0
};

 // Class /Script/Game.DamageNumberTextBlock
// Size: 0x0 (Inherited: 0x0)
struct UDamageNumberTextBlock : UTextBlock {
	char pad_2C0[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.DamagePointComponent
// Size: 0x0 (Inherited: 0x0)
struct UDamagePointComponent : USphereComponent {
};

 // Class /Script/Game.DarkArchiveBlockActor
// Size: 0x0 (Inherited: 0x0)
struct ADarkArchiveBlockActor : ABlockActor {
	char pad_220[0x8]; // 0x0(0x0)

	void SetState(__int32 InVlaue); // Function /Script/Game.DarkArchiveBlockActor.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetState(); // Function /Script/Game.DarkArchiveBlockActor.GetState // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DarkArchiveDoorActor
// Size: 0x0 (Inherited: 0x0)
struct ADarkArchiveDoorActor : ADarkArchiveBlockActor {

	void SaveState(bool IsOn); // Function /Script/Game.DarkArchiveDoorActor.SaveState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OpenOrClose(); // Function /Script/Game.DarkArchiveDoorActor.OpenOrClose // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyPlayOpenOrClose(); // Function /Script/Game.DarkArchiveDoorActor.NotifyPlayOpenOrClose // (Event|Public|BlueprintEvent) // @ game+0
	void NotifyInitDoor(bool IsOn); // Function /Script/Game.DarkArchiveDoorActor.NotifyInitDoor // (Event|Public|BlueprintEvent) // @ game+0
	void ChangeStateTo(__int32 InNewState); // Function /Script/Game.DarkArchiveDoorActor.ChangeStateTo // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DarkArchiveActor
// Size: 0x0 (Inherited: 0x0)
struct ADarkArchiveActor : AActor {
	char pad_220[0x8]; // 0x0(0x0)

	void SetState(__int32 InVlaue); // Function /Script/Game.DarkArchiveActor.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetState(); // Function /Script/Game.DarkArchiveActor.GetState // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DarkArchiveElevatorActor
// Size: 0x0 (Inherited: 0x0)
struct ADarkArchiveElevatorActor : ADarkArchiveActor {

	void SaveState(bool IsOnTarget); // Function /Script/Game.DarkArchiveElevatorActor.SaveState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OpenOrClose(); // Function /Script/Game.DarkArchiveElevatorActor.OpenOrClose // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyPlayOpenOrClose(); // Function /Script/Game.DarkArchiveElevatorActor.NotifyPlayOpenOrClose // (Event|Public|BlueprintEvent) // @ game+0
	void NotifyInitState(__int32 InValue); // Function /Script/Game.DarkArchiveElevatorActor.NotifyInitState // (Event|Public|BlueprintEvent) // @ game+0
	void NotifyChangeStateTo(__int32 InNewState); // Function /Script/Game.DarkArchiveElevatorActor.NotifyChangeStateTo // (Event|Public|BlueprintEvent) // @ game+0
	void ChangeStateTo(__int32 InNewState); // Function /Script/Game.DarkArchiveElevatorActor.ChangeStateTo // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DarkZoneDropSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UDarkZoneDropSubsystem : UGameWorldSubsystem {
	char pad_48[0x50]; // 0x0(0x0)
	struct TArray<struct ALevelDropBase*> DropPool; // 0x0(0x0)
	char pad_A8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.DarkZoneDynamicPreLoadMgr
// Size: 0x0 (Inherited: 0x0)
struct UDarkZoneDynamicPreLoadMgr : UObject {
	struct TWeakObjectPtr<struct ADarkZoneGameMode> DarkZoneGameMode; // 0x0(0x0)
	struct TWeakObjectPtr<struct AController> PlayerController; // 0x0(0x0)
	char pad_38[0x1E0]; // 0x0(0x0)

	void UpdateHandle(); // Function /Script/Game.DarkZoneDynamicPreLoadMgr.UpdateHandle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RegisterByTask(struct FSoftClassPath& TaskPath, __int32 AreaId, struct FVector CenterPos, bool IsRegister); // Function /Script/Game.DarkZoneDynamicPreLoadMgr.RegisterByTask // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void RegisterByPatrol(__int32 MonsUId, __int32 MonsId, struct FVector CenterPos, bool IsRegister); // Function /Script/Game.DarkZoneDynamicPreLoadMgr.RegisterByPatrol // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameBaseMode
// Size: 0x0 (Inherited: 0x0)
struct AGameBaseMode : AGameMode {
	struct FMulticastInlineDelegate OnCharacterDie; // 0x0(0x0)
	float AIPerceptionScale; // 0x0(0x0)
	char pad_31C[0x10]; // 0x0(0x0)
	char bHealthScale : 1; // 0x0(0x0)
	char pad_32C_1 : 7; // 0x0(0x0)
	char pad_32D[0x3]; // 0x0(0x0)
	struct TArray<float> HealthScaleSettings; // 0x0(0x0)
	char bShieldScale : 1; // 0x0(0x0)
	char pad_340_1 : 7; // 0x0(0x0)
	char pad_341[0x7]; // 0x0(0x0)
	struct TArray<float> ShieldScaleSettings; // 0x0(0x0)

	void TrySetNearestPointOnNav(); // Function /Script/Game.GameBaseMode.TrySetNearestPointOnNav // (Native|Public|BlueprintCallable) // @ game+0
	void OnCharacterDie__DelegateSignature(struct AGameCharacter* Character); // DelegateFunction /Script/Game.GameBaseMode.OnCharacterDie__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	__int32 GetCurrentLevelId(); // Function /Script/Game.GameBaseMode.GetCurrentLevelId // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DarkZoneGameMode
// Size: 0x0 (Inherited: 0x0)
struct ADarkZoneGameMode : AGameBaseMode {
	char pad_358[0x8]; // 0x0(0x0)
	enum class EDarkZoneType GameType; // 0x0(0x0)
	char pad_361[0x3]; // 0x0(0x0)
	float NavEndFightDis; // 0x0(0x0)
	float CheckNotAttackedEndFightDis; // 0x0(0x0)
	float EndFightDis; // 0x0(0x0)
	float EndFightTime_OutNavRangeAndCantAttack; // 0x0(0x0)
	float EndFightTime_InNavRangeAndCantAttack; // 0x0(0x0)
	float EndFightTime_OutFightRangeAndPlayerNotAttack; // 0x0(0x0)
	char pad_37C[0x4]; // 0x0(0x0)
	struct TSoftObjectPtr<UFXSystemAsset> EndFightEffect; // 0x0(0x0)
	float PreLoadRange; // 0x0(0x0)
	float UnPreLoadRange; // 0x0(0x0)
	__int32 MaxPatrolNum; // 0x0(0x0)
	char pad_3B4[0x4]; // 0x0(0x0)
	struct TMap<__int32, float> PatrolActiveRangeExtraControlMap; // 0x0(0x0)
	float ReleaseRangeRate; // 0x0(0x0)
	char pad_40C[0x4]; // 0x0(0x0)
	struct TSoftObjectPtr<UFXSystemAsset> ReleaseEffect; // 0x0(0x0)
	__int32 HunterMonsterId1; // 0x0(0x0)
	__int32 HunterMonsterId2; // 0x0(0x0)
	float HunterBaseRate; // 0x0(0x0)
	char pad_444[0x4]; // 0x0(0x0)
	struct UCurveFloat* HunterRateMultiplierCurve; // 0x0(0x0)
	struct UDarkZoneSystem* System; // 0x0(0x0)
	struct UDarkZoneDynamicPreLoadMgr* PreLoadMgr; // 0x0(0x0)
	char pad_460[0xE8]; // 0x0(0x0)

	void SpawnHunterMonster(struct TArray<__int32> MonsterIds, bool bIsSpawnFromSaveData); // Function /Script/Game.DarkZoneGameMode.SpawnHunterMonster // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LuaStartPlay(); // Function /Script/Game.DarkZoneGameMode.LuaStartPlay // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.GameTriggerBase
// Size: 0x0 (Inherited: 0x0)
struct AGameTriggerBase : AActor {
	char pad_220[0x8]; // 0x0(0x0)
	enum class EGameTriggerMode TriggerMode; // 0x0(0x0)
	enum class EGameTriggerType TriggerType; // 0x0(0x0)
	bool bAutoActive; // 0x0(0x0)
	bool bUpdateOverlapWhenActive; // 0x0(0x0)
	char bHasFilter : 1; // 0x0(0x0)
	char pad_22C_1 : 7; // 0x0(0x0)
	char pad_22D[0x3]; // 0x0(0x0)
	struct TArray<struct APawn*> AllowPawnTypes; // 0x0(0x0)
	bool bActive; // 0x0(0x0)
	bool bCustom; // 0x0(0x0)
	char pad_242[0x5E]; // 0x0(0x0)
	struct TWeakObjectPtr<struct AActor> TriggerActor; // 0x0(0x0)

	void SetAreaTag(struct FName InName); // Function /Script/Game.GameTriggerBase.SetAreaTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetActive(bool bInActive); // Function /Script/Game.GameTriggerBase.SetActive // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnTrigger_Server(bool bIsBeginOverlap, struct AActor* OtherActor); // Function /Script/Game.GameTriggerBase.OnTrigger_Server // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void OnTrigger_Client(bool bIsBeginOverlap, struct AActor* OtherActor); // Function /Script/Game.GameTriggerBase.OnTrigger_Client // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void OnRep_Active(); // Function /Script/Game.GameTriggerBase.OnRep_Active // (Final|Native|Protected) // @ game+0
	void OnActive_Client(); // Function /Script/Game.GameTriggerBase.OnActive_Client // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void NetMulticast_OnTrigger(bool bIsBeginOverlap, struct AActor* OtherActor); // Function /Script/Game.GameTriggerBase.NetMulticast_OnTrigger // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	void DoTrigger(bool bIsBeginOverlap, struct AActor* OtherActor); // Function /Script/Game.GameTriggerBase.DoTrigger // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckTriggerCondition(); // Function /Script/Game.GameTriggerBase.CheckTriggerCondition // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.GameInteractorBase
// Size: 0x0 (Inherited: 0x0)
struct AGameInteractorBase : AGameTriggerBase {
	bool bAutoInteractable; // 0x0(0x0)
	bool bAutoDestroy; // 0x0(0x0)
	char pad_2AA[0x2]; // 0x0(0x0)
	float Cfg_InteractTime; // 0x0(0x0)
	__int32 Cfg_InteractCount; // 0x0(0x0)
	char pad_2B4[0x4]; // 0x0(0x0)
	struct FGameInteractorData Data; // 0x0(0x0)
	bool bForceInteraction; // 0x0(0x0)
	bool bShowGuideIcon; // 0x0(0x0)
	bool bUseAngleCheck; // 0x0(0x0)
	char pad_2CB[0x1]; // 0x0(0x0)
	float AngleValue; // 0x0(0x0)
	__int32 InteractCount; // 0x0(0x0)
	float InteractTime; // 0x0(0x0)
	char pad_2D8[0x8]; // 0x0(0x0)

	bool TryInteract(struct AGamePlayerController* InWhoInteract); // Function /Script/Game.GameInteractorBase.TryInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopInteract(); // Function /Script/Game.GameInteractorBase.StopInteract // (Event|Public|BlueprintEvent) // @ game+0
	void SetInteractable(); // Function /Script/Game.GameInteractorBase.SetInteractable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetDisable(); // Function /Script/Game.GameInteractorBase.SetDisable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_SetInterruptOnDamage(); // Function /Script/Game.GameInteractorBase.Server_SetInterruptOnDamage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_OnInteracting(); // Function /Script/Game.GameInteractorBase.Server_OnInteracting // (Event|Protected|BlueprintEvent) // @ game+0
	void Server_OnInteractable(); // Function /Script/Game.GameInteractorBase.Server_OnInteractable // (Event|Protected|BlueprintEvent) // @ game+0
	void Server_OnFinish(); // Function /Script/Game.GameInteractorBase.Server_OnFinish // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void Server_OnEnd(); // Function /Script/Game.GameInteractorBase.Server_OnEnd // (Event|Protected|BlueprintEvent) // @ game+0
	void Server_OnDisable(); // Function /Script/Game.GameInteractorBase.Server_OnDisable // (Event|Protected|BlueprintEvent) // @ game+0
	void ResetInteractableState(); // Function /Script/Game.GameInteractorBase.ResetInteractableState // (Final|Native|Protected|BlueprintCallable) // @ game+0
	void OnRep_Data(); // Function /Script/Game.GameInteractorBase.OnRep_Data // (Final|Native|Private) // @ game+0
	void NetMulticast_StopInteracted(struct ACharacter* Character); // Function /Script/Game.GameInteractorBase.NetMulticast_StopInteracted // (Net|Native|Event|NetMulticast|Protected) // @ game+0
	void Client_OnInteracting(); // Function /Script/Game.GameInteractorBase.Client_OnInteracting // (Event|Protected|BlueprintEvent) // @ game+0
	void Client_OnInteractable(); // Function /Script/Game.GameInteractorBase.Client_OnInteractable // (Event|Protected|BlueprintEvent) // @ game+0
	void Client_OnFinish(); // Function /Script/Game.GameInteractorBase.Client_OnFinish // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void Client_OnEnd(); // Function /Script/Game.GameInteractorBase.Client_OnEnd // (Event|Protected|BlueprintEvent) // @ game+0
	void Client_OnDisable(); // Function /Script/Game.GameInteractorBase.Client_OnDisable // (Event|Protected|BlueprintEvent) // @ game+0
	bool CheckInteractCondition(); // Function /Script/Game.GameInteractorBase.CheckInteractCondition // (Native|Event|Protected|BlueprintEvent) // @ game+0
	bool CheckCharHasAnyInput(); // Function /Script/Game.GameInteractorBase.CheckCharHasAnyInput // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanInteractRaw(); // Function /Script/Game.GameInteractorBase.CanInteractRaw // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CanInteract(); // Function /Script/Game.GameInteractorBase.CanInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BreakInteractOnSwitch(struct AGameCharacter* Pre, struct AGameCharacter* Next); // Function /Script/Game.GameInteractorBase.BreakInteractOnSwitch // (Final|Native|Public) // @ game+0
	void BreakInteractOnCharacterDead(struct AGameCharacter* Character, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.GameInteractorBase.BreakInteractOnCharacterDead // (Final|Native|Public|HasOutParms) // @ game+0
	void BreakInteract(); // Function /Script/Game.GameInteractorBase.BreakInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DarkZoneInteractorActor
// Size: 0x0 (Inherited: 0x0)
struct ADarkZoneInteractorActor : AGameInteractorBase {
	char pad_2E0[0x18]; // 0x0(0x0)
	__int32 DropTemplateID; // 0x0(0x0)
	char pad_2FC[0x4]; // 0x0(0x0)

	void OnEndInteract(); // Function /Script/Game.DarkZoneInteractorActor.OnEndInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DeadLogicComponent
// Size: 0x0 (Inherited: 0x0)
struct UDeadLogicComponent : UActorComponent {
};

 // Class /Script/Game.DeadLogicComponent_Dissolve
// Size: 0x0 (Inherited: 0x0)
struct UDeadLogicComponent_Dissolve : UDeadLogicComponent {
	struct UCurveFloat* Curve; // 0x0(0x0)
	char bAutoDestoy : 1; // 0x0(0x0)
	char pad_B8_1 : 7; // 0x0(0x0)
	char pad_B9[0xF]; // 0x0(0x0)
	struct UCharacterRenderComponent* RenderComponent; // 0x0(0x0)
	char pad_D0[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.DeadLogicComponent_CharacterEffect
// Size: 0x0 (Inherited: 0x0)
struct UDeadLogicComponent_CharacterEffect : UDeadLogicComponent {
	char pad_B0[0x8]; // 0x0(0x0)
	struct UCharacterRenderComponent* RenderComponent; // 0x0(0x0)
	struct FCharacterEffectParameters Parameters; // 0x0(0x0)
};

 // Class /Script/Game.DeadLogicComponent_Normal
// Size: 0x0 (Inherited: 0x0)
struct UDeadLogicComponent_Normal : UDeadLogicComponent {
};

 // Class /Script/Game.DeadLogicComponent_Ragdoll
// Size: 0x0 (Inherited: 0x0)
struct UDeadLogicComponent_Ragdoll : UDeadLogicComponent {
};

 // Class /Script/Game.DeadLogicComponent_Slomo
// Size: 0x0 (Inherited: 0x0)
struct UDeadLogicComponent_Slomo : UDeadLogicComponent {
	struct UCurveFloat* SlomoCurve; // 0x0(0x0)
	char pad_B8[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.DeadPerformanceComponent
// Size: 0x0 (Inherited: 0x0)
struct UDeadPerformanceComponent : UActorComponent {
	struct FSoftObjectPath DeadPerformAsset; // 0x0(0x0)
	struct AGameCharacter* KillerCharacter; // 0x0(0x0)
	struct UDeadPerformanceBase* ApplyDeadPerformance; // 0x0(0x0)
	struct FGameplayTag DeadTag; // 0x0(0x0)
	bool bTickDeadPerformanceByWorldDelta; // 0x0(0x0)
	char pad_E1[0x3]; // 0x0(0x0)
	float DeadPerformanceKeepTime; // 0x0(0x0)
	struct FHealthChangeValue HealthChangeValue; // 0x0(0x0)
};

 // Class /Script/Game.DeadPerformanceBase
// Size: 0x0 (Inherited: 0x0)
struct UDeadPerformanceBase : UObject {

	void Slomo(struct AGameCharacter* DeadCharacter, struct UCurveFloat* SlomoCurve, bool OnlySlomoAnim, bool EffectTickDeltaTime); // Function /Script/Game.DeadPerformanceBase.Slomo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnTick(struct AGameCharacter* DeadCharacter, struct AGameCharacter* Killer, struct UDeadPerformanceComponent* DeadComponent, struct FHealthChangeValue& HealthChangeValue, float DeltaTime, float TimeFromBegin); // Function /Script/Game.DeadPerformanceBase.OnTick // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void DeadPerformanceLogic(struct AGameCharacter* DeadCharacter, struct AGameCharacter* Killer, struct UDeadPerformanceComponent* DeadComponent, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.DeadPerformanceBase.DeadPerformanceLogic // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void DeadDissolve(struct AGameCharacter* DeadCharacter, struct UCurveFloat* Curve, bool bAutoDestroy); // Function /Script/Game.DeadPerformanceBase.DeadDissolve // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CharacterEffect(struct AGameCharacter* DeadCharacter, struct FCharacterEffectParameters& Parameters); // Function /Script/Game.DeadPerformanceBase.CharacterEffect // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void CameraShake(struct AGameCharacter* DeadCharacter, struct AGameCharacter* Killer, struct UMatineeCameraShake* CameraShakeClass, bool bShakeEffectsKillerOnly, bool bUseShakeAttenuation, float ShakeMaxValidDistance); // Function /Script/Game.DeadPerformanceBase.CameraShake // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddImpulseAtLocation(struct USkeletalMeshComponent* InComponent, struct FVector InImpulse, struct FVector InPos, struct FName InBoneName); // Function /Script/Game.DeadPerformanceBase.AddImpulseAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DeadPerformanceConfigAsset
// Size: 0x0 (Inherited: 0x0)
struct UDeadPerformanceConfigAsset : UDataAsset {
	struct UDeadPerformanceBase* DefaultDeadPerformance; // 0x0(0x0)
	struct TMap<struct FGameplayTag, struct UDeadPerformanceBase*> DeadPerformanceMap; // 0x0(0x0)

	struct UDeadPerformanceBase* GetMaxPriorityPerformance(struct FGameplayTagContainer DeadStateTags, struct FGameplayTag& DeadTag); // Function /Script/Game.DeadPerformanceConfigAsset.GetMaxPriorityPerformance // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameDecalActor
// Size: 0x0 (Inherited: 0x0)
struct AGameDecalActor : ADecalActor {
	char pad_228[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.DecalManager
// Size: 0x0 (Inherited: 0x0)
struct UDecalManager : UWorldSubsystem {
	char pad_30[0x8]; // 0x0(0x0)
	struct TMap<unsigned __int64, struct FDecalManagerInfo> DecalSpawned; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct AGameDecalActor>> FreeActorCache; // 0x0(0x0)

	void OnDecalActorDestroyed(struct AActor* Actor); // Function /Script/Game.DecalManager.OnDecalActorDestroyed // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.DedicatedServerHandlerComponentFactory
// Size: 0x0 (Inherited: 0x0)
struct UDedicatedServerHandlerComponentFactory : UHandlerComponentFactory {
};

 // Class /Script/Game.DedicatedServer
// Size: 0x0 (Inherited: 0x0)
struct ADedicatedServer : AGameMode {
};

 // Class /Script/Game.DefendTargetBase
// Size: 0x0 (Inherited: 0x0)
struct ADefendTargetBase : ACanInteractActor {
	char pad_C70[0x10]; // 0x0(0x0)

	void UpdateUIItem(float HealthPercent); // Function /Script/Game.DefendTargetBase.UpdateUIItem // (Event|Public|BlueprintEvent) // @ game+0
	void UpdateHealthByRate(); // Function /Script/Game.DefendTargetBase.UpdateHealthByRate // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetActive(bool bInAcitve); // Function /Script/Game.DefendTargetBase.SetActive // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnDeactive(); // Function /Script/Game.DefendTargetBase.OnDeactive // (Event|Public|BlueprintEvent) // @ game+0
	void OnActive(); // Function /Script/Game.DefendTargetBase.OnActive // (Event|Public|BlueprintEvent) // @ game+0
	bool IsActive(); // Function /Script/Game.DefendTargetBase.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.DestroyTargetBase
// Size: 0x0 (Inherited: 0x0)
struct ADestroyTargetBase : ACanInteractActor {
	struct FString Tag; // 0x0(0x0)
	struct UFightMonsterTipsItem* RedPoint; // 0x0(0x0)
	__int32 CollisionEnabledType; // 0x0(0x0)
	char pad_C8C[0x4]; // 0x0(0x0)

	void SetTag(struct FString InTag); // Function /Script/Game.DestroyTargetBase.SetTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCoreCollision(enum class ECollisionEnabled enable); // Function /Script/Game.DestroyTargetBase.SetCoreCollision // (Event|Public|BlueprintEvent) // @ game+0
	void REP_CollisionEnabledType(); // Function /Script/Game.DestroyTargetBase.REP_CollisionEnabledType // (Final|Native|Public) // @ game+0
	void OnTargetDestroy(); // Function /Script/Game.DestroyTargetBase.OnTargetDestroy // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnClient_Init(); // Function /Script/Game.DestroyTargetBase.OnClient_Init // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void OnClient_Destroy(); // Function /Script/Game.DestroyTargetBase.OnClient_Destroy // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	float GetMaxHp(); // Function /Script/Game.DestroyTargetBase.GetMaxHp // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetCurrentHp(); // Function /Script/Game.DestroyTargetBase.GetCurrentHp // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DeviceProfileLibrary
// Size: 0x0 (Inherited: 0x0)
struct UDeviceProfileLibrary : UBlueprintFunctionLibrary {

	bool IsBelowStandardDevice(); // Function /Script/Game.DeviceProfileLibrary.IsBelowStandardDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetDeviceProfileName(); // Function /Script/Game.DeviceProfileLibrary.GetDeviceProfileName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetDeviceProfileLevel(); // Function /Script/Game.DeviceProfileLibrary.GetDeviceProfileLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PathPoint
// Size: 0x0 (Inherited: 0x0)
struct APathPoint : AActor {
	char pad_220[0x8]; // 0x0(0x0)
	struct TArray<struct APathPoint*> LinkPoints; // 0x0(0x0)
	struct TArray<struct APathPoint*> HasSplitArr; // 0x0(0x0)
	char pad_248[0x8]; // 0x0(0x0)

	void SetDistance(__int32 Dis); // Function /Script/Game.PathPoint.SetDistance // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.PathLine
// Size: 0x0 (Inherited: 0x0)
struct APathLine : AActor {

	void Show(struct FVector& S, struct FVector& E, bool bTip); // Function /Script/Game.PathLine.Show // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
	void Hide(); // Function /Script/Game.PathLine.Hide // (Event|Public|BlueprintEvent) // @ game+0
	void DoShow(struct FVector& S, struct FVector& E, bool bTip); // Function /Script/Game.PathLine.DoShow // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void DoHide(); // Function /Script/Game.PathLine.DoHide // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DrawPathActor
// Size: 0x0 (Inherited: 0x0)
struct ADrawPathActor : AActor {
	struct APathLine* BPLineActorClass; // 0x0(0x0)
	struct APathLine* BPArrowActorClass; // 0x0(0x0)
	char pad_230[0xA0]; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> Player; // 0x0(0x0)
	struct APathPoint* TargetPoint; // 0x0(0x0)
	struct TArray<struct APathPoint*> Points; // 0x0(0x0)
	struct TArray<struct APathLine*> LinesArray; // 0x0(0x0)
	struct APathPoint* LastPoint; // 0x0(0x0)
	struct TArray<struct APathPoint*> FindPath; // 0x0(0x0)

	void Near(); // Function /Script/Game.DrawPathActor.Near // (Final|Native|Private) // @ game+0
	struct APathPoint* GetNearPoint(struct APathPoint* InPoint); // Function /Script/Game.DrawPathActor.GetNearPoint // (Final|Native|Private) // @ game+0
	struct APathLine* GetLine(__int32 Index); // Function /Script/Game.DrawPathActor.GetLine // (Final|Native|Private) // @ game+0
	void Far(); // Function /Script/Game.DrawPathActor.Far // (Final|Native|Private) // @ game+0
	void DrawPath(struct APathPoint* InPathPoint); // Function /Script/Game.DrawPathActor.DrawPath // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DrawLine(__int32 Index, struct FVector& S, struct FVector& E); // Function /Script/Game.DrawPathActor.DrawLine // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0
	void DrawArrow(struct FVector& S, struct FVector& E, bool bTip); // Function /Script/Game.DrawPathActor.DrawArrow // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0
	void DisablePath(); // Function /Script/Game.DrawPathActor.DisablePath // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CheckInit(); // Function /Script/Game.DrawPathActor.CheckInit // (Final|Native|Private) // @ game+0
};

 // Class /Script/Game.DrawPathLibrary
// Size: 0x0 (Inherited: 0x0)
struct UDrawPathLibrary : UBlueprintFunctionLibrary {

	struct ADrawPathActor* GetPathActor(struct UObject* WorldContextObject); // Function /Script/Game.DrawPathLibrary.GetPathActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FVector GetFootOfPerpendicular(struct FVector& Pt, struct FVector& Begin, struct FVector& End); // Function /Script/Game.DrawPathLibrary.GetFootOfPerpendicular // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void DrawPath(struct UObject* WorldContextObject, struct APathPoint* InPathPoint); // Function /Script/Game.DrawPathLibrary.DrawPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void DisablePath(struct UObject* WorldContextObject); // Function /Script/Game.DrawPathLibrary.DisablePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.EffectAgent
// Size: 0x0 (Inherited: 0x0)
struct AEffectAgent : AActor {
	struct TMap<__int64, struct FEmitterEffect> EmitterEffects; // 0x0(0x0)
	struct TMap<__int64, struct FEmitterEffect> BulletScreenEditorEffects; // 0x0(0x0)
	struct TMap<__int64, struct FEmitterEffect> ModifierEffects; // 0x0(0x0)
	struct TMap<__int64, float> InValidHashIDs; // 0x0(0x0)
	struct TMap<__int64, struct FEmitterEffect> BufferEffects; // 0x0(0x0)
	struct TArray<struct FChainEffectInfo> AllChainEffect; // 0x0(0x0)
	char pad_3C0[0x50]; // 0x0(0x0)

	void SpawnParticleAttach(struct UObject* InWorldContext, struct AActor* Caster, struct UObject* InParticle, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate); // Function /Script/Game.EffectAgent.SpawnParticleAttach // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SpawnParticleAtLocationAndSetParam(struct UObject* InWorldContext, struct AActor* Caster, struct UObject* InParticle, struct FVector& InPosition, struct FRotator& InRotate, struct FVector& InScale, struct FString InParamName, float InParamValue); // Function /Script/Game.EffectAgent.SpawnParticleAtLocationAndSetParam // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SpawnParticleAtLocation(struct UObject* InWorldContext, struct AActor* Caster, struct UObject* InParticle, struct FVector& InPosition, struct FRotator& InRotation, struct FVector& InScale); // Function /Script/Game.EffectAgent.SpawnParticleAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SpawnEmitterAttach(struct AActor* Caster, struct UObject* InParticle, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate); // Function /Script/Game.EffectAgent.SpawnEmitterAttach // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SpawnEmitterAndSetParam_Reliable(struct AActor* Caster, struct UObject* InParticle, struct FVector InPosition, struct FRotator InRotate, struct FVector InScale, struct FString InParamName, float InParamValue); // Function /Script/Game.EffectAgent.SpawnEmitterAndSetParam_Reliable // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SpawnEmitterAndSetParam(struct AActor* Caster, struct UObject* InParticle, struct FVector InPosition, struct FRotator InRotate, struct FVector InScale, struct FString InParamName, float InParamValue); // Function /Script/Game.EffectAgent.SpawnEmitterAndSetParam // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SpawnEmitter(struct AActor* Caster, struct UObject* InParticle, struct FVector InPosition, struct FRotator InRotate, struct FVector InScale); // Function /Script/Game.EffectAgent.SpawnEmitter // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetSoundSwitchForHitEffect(struct FString InSwitchName, struct FVector InPosition, struct FRotator InRotator); // Function /Script/Game.EffectAgent.SetSoundSwitchForHitEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void RemoveChainBuff(struct AActor* InStart, struct AActor* InEnd); // Function /Script/Game.EffectAgent.RemoveChainBuff // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void RefreshLineBuff(struct AActor* Caster, struct AActor* Start, struct AActor* End, struct FSoftObjectPath RayPath, struct FTransform StartOffset, struct FTransform EndOffset, struct FVector Offset); // Function /Script/Game.EffectAgent.RefreshLineBuff // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void RefreshChainBuff(struct AActor* Caster, struct AActor* Start, struct AActor* End, struct FName InSocket, struct FSoftObjectPath RayPath); // Function /Script/Game.EffectAgent.RefreshChainBuff // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void PlayWwizeAtLocaiton(struct UObject* InWorldContext, struct FString SoundEvent, struct FVector& InPosition, struct FRotator& InRotate); // Function /Script/Game.EffectAgent.PlayWwizeAtLocaiton // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void PlayWiseSound(struct FString SoundEvent, struct FVector InPosition, struct FRotator InRotator); // Function /Script/Game.EffectAgent.PlayWiseSound // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void PlaySound(struct USoundBase* InSound, struct FVector InPosition, float InVolume); // Function /Script/Game.EffectAgent.PlaySound // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void PlayRayEffect(struct AActor* Caster, struct FSoftObjectPath RayPath, struct FVector StartPos, struct FVector EndPos); // Function /Script/Game.EffectAgent.PlayRayEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ModifierStopEffect(__int64 ModifierHashID, struct UAbilityComponentBase* InLuancher, __int32 InModifierID, struct UAbilityComponentBase* InTargetAbility); // Function /Script/Game.EffectAgent.ModifierStopEffect // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void ModifierEndPostProcess(__int64 ModifierHashID, struct AGameCharacter* InLuancher, __int32 InModifierID); // Function /Script/Game.EffectAgent.ModifierEndPostProcess // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void ModifierEndAbnormalEffect(__int64 ModifierHashID, struct AGameCharacter* InTarget); // Function /Script/Game.EffectAgent.ModifierEndAbnormalEffect // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void ModifierChangeEffectCharacter(__int64 ModifierHashID, struct AActor* ControlledActor, struct UAbilityComponentBase* InLuancher, __int32 InModifierID, struct UAbilityComponentBase* InTargetAbility); // Function /Script/Game.EffectAgent.ModifierChangeEffectCharacter // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void ModifierApplyPostProcess(__int64 ModifierHashID, struct AGameCharacter* InLuancher, __int32 InModifierID); // Function /Script/Game.EffectAgent.ModifierApplyPostProcess // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void ModifierApplyEffect(__int64 ModifierHashID, struct UAbilityComponentBase* InLuancher, __int32 InModifierID, enum class EModifierEffectType InType, struct FVector ApplyLocation, struct FVector OriginLocation, struct FBoneResult BoneResult, struct UAbilityComponentBase* InTargetAbility); // Function /Script/Game.EffectAgent.ModifierApplyEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ModifierApplyAbnormalEffect(__int64 ModifierHashID, struct AGameCharacter* InTarget, struct FSoftClassPath EffectSoftPath); // Function /Script/Game.EffectAgent.ModifierApplyAbnormalEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct AEffectAgent* Get(struct UObject* InWorldContext); // Function /Script/Game.EffectAgent.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EmitterFreshAnchorEffect(__int64 EmitterInstanceID, struct FVector Center, struct FRotator Rotation); // Function /Script/Game.EffectAgent.EmitterFreshAnchorEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterDrawRay(struct AActor* InLuancher, __int64 EmitterInstanceID, struct FVector StartPos, struct FVector EndPos, __int32 InBulletID, bool bLineTrace); // Function /Script/Game.EffectAgent.EmitterDrawRay // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterDrawMultiRay(struct AActor* InLuancher, __int64 EmitterInstanceID, struct FVector StartPos, struct FVector EndPos, __int32 InBulletID); // Function /Script/Game.EffectAgent.EmitterDrawMultiRay // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterCreateRayParticle(struct AActor* InLuancher, __int64 EmitterInstanceID, struct FSoftObjectPath BulletRayPath, bool bDestroyImmediately); // Function /Script/Game.EffectAgent.EmitterCreateRayParticle // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterApplyHitEffect(struct UAbilityComponentBase* InLuancherAbility, __int32 EmitterID, struct AActor* Target, struct AActor* Launcher, struct UObject* HitEffect, struct FQueryResult EmitterHitResult, struct FVector HitLocation); // Function /Script/Game.EffectAgent.EmitterApplyHitEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterApplyBaseEffect(struct UAbilityComponentBase* InLuancherAbility, __int32 EmitterID, struct AActor* Target, struct AActor* Launcher, struct UObject* HitEffect, struct FQueryResult EmitterHitResult, struct FVector HitLocation); // Function /Script/Game.EffectAgent.EmitterApplyBaseEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterAnchorEffectPlay_QueryResults(__int32 EmitterID, struct AActor* Launcher, __int64 EmitterInstanceID, struct FVector Center, struct FRotator Rotation, struct TArray<struct FQueryResult> QueryResults); // Function /Script/Game.EffectAgent.EmitterAnchorEffectPlay_QueryResults // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterAnchorEffectPlay(__int32 EmitterID, struct AActor* Launcher, __int64 EmitterInstanceID, struct FVector Center, struct FRotator Rotation); // Function /Script/Game.EffectAgent.EmitterAnchorEffectPlay // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterAnchorEffectEnd(struct AActor* InLuancher, __int64 EmitterInstanceID, struct FSoftObjectPath StopFireParticlePath); // Function /Script/Game.EffectAgent.EmitterAnchorEffectEnd // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void BulletSceenEditorTickRay(struct AActor* InLuancher, __int64 InstanceId, struct FVector StartPos, struct FVector EndPos, __int32 InBulletID); // Function /Script/Game.EffectAgent.BulletSceenEditorTickRay // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void BulletSceenEditorEndRay(struct AActor* InLuancher, __int64 InstanceId, struct FSoftObjectPath StopFireParticlePath); // Function /Script/Game.EffectAgent.BulletSceenEditorEndRay // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void BulletSceenEditorCreateRay(struct AActor* InLuancher, __int64 InstanceId, struct FVector StartPos, struct FVector EndPos, __int32 InBulletID, bool bDestroyImmediately); // Function /Script/Game.EffectAgent.BulletSceenEditorCreateRay // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void BulletHitEffect(struct AActor* Caster, struct AActor* HitActor, struct FName BoneName, __int32 InBulletID, __int32 InGroup, enum class EPhysicalSurface Surface, bool bHitWeakness, struct FVector_NetQuantize Loc, struct FRotator Rot, struct FVector_NetQuantizeNormal HitNormal, bool bHasSilencer); // Function /Script/Game.EffectAgent.BulletHitEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
	void Bullet_PlayHitEffectByPath(struct AActor* Caster, __int32 InBulletID, struct FString SoundPath, struct FSoftObjectPath ParticlePath, struct FVector_NetQuantize Loc, struct FRotator Rot); // Function /Script/Game.EffectAgent.Bullet_PlayHitEffectByPath // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void Bullet_PlayHitEffectById(__int32 InBulletID, struct FVector_NetQuantize Loc, struct FRotator Rot, struct AActor* Launcher); // Function /Script/Game.EffectAgent.Bullet_PlayHitEffectById // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void BufferRemoveEffect(__int64 BufferHashID, bool bImmediately); // Function /Script/Game.EffectAgent.BufferRemoveEffect // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void BufferApplyEffect(struct AActor* Caster, __int64 BufferHashID, struct UObject* Particle, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate); // Function /Script/Game.EffectAgent.BufferApplyEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.EffectMaterialBackup
// Size: 0x0 (Inherited: 0x0)
struct UEffectMaterialBackup : UDataAsset {
	struct TMap<struct FName, float> ScalarParameters; // 0x0(0x0)
	struct TMap<struct FName, struct FLinearColor> VectorParameters; // 0x0(0x0)
	struct FSoftObjectPath ReferenceObject; // 0x0(0x0)

	void SetReference(struct FSoftObjectPath Obj); // Function /Script/Game.EffectMaterialBackup.SetReference // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FSoftObjectPath GetReferenceObject(); // Function /Script/Game.EffectMaterialBackup.GetReferenceObject // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	void GetEffectVectorParameters(struct TMap<struct FName, struct FLinearColor>& Parameter); // Function /Script/Game.EffectMaterialBackup.GetEffectVectorParameters // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	void GetEffectScalarParameters(struct TMap<struct FName, float>& Parameter); // Function /Script/Game.EffectMaterialBackup.GetEffectScalarParameters // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	void AddEffectVectorParameter(struct FName ParameterName, struct FLinearColor VectorParameter); // Function /Script/Game.EffectMaterialBackup.AddEffectVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void AddEffectScalarParameter(struct FName ParameterName, float ScalarParameter); // Function /Script/Game.EffectMaterialBackup.AddEffectScalarParameter // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.EmitterAnchorPointRuleBase
// Size: 0x0 (Inherited: 0x0)
struct UEmitterAnchorPointRuleBase : UObject {
	bool bNeedLauncherSocketInfo; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)

	void InitEmitterAnchorRule(struct USkillEmitter* EmitterRef, struct AGameCharacter* Launcher, struct AActor* CastActor); // Function /Script/Game.EmitterAnchorPointRuleBase.InitEmitterAnchorRule // (Event|Public|BlueprintEvent) // @ game+0
	struct FTransform GetEmitterAnchorTransformConst(struct UAbilityComponentBase* EmitterLauncher); // Function /Script/Game.EmitterAnchorPointRuleBase.GetEmitterAnchorTransformConst // (Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0
	struct FTransform GetEmitterAnchorTransform(struct USkillEmitter* EmitterRef, struct AGameCharacter* Launcher, struct AActor* CastActor); // Function /Script/Game.EmitterAnchorPointRuleBase.GetEmitterAnchorTransform // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.SkillSkeletalMeshAgent
// Size: 0x0 (Inherited: 0x0)
struct ASkillSkeletalMeshAgent : AActor {
	struct USkeletalMeshComponent* Mesh; // 0x0(0x0)
	struct UCharacterRenderComponent* RenderComponent; // 0x0(0x0)
	float SequenceLength; // 0x0(0x0)
	char pad_234[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.EmitterSearcherFilter
// Size: 0x0 (Inherited: 0x0)
struct UEmitterSearcherFilter : UObject {

	bool CheckTargetValid(struct AActor* Target, struct AActor* Checker); // Function /Script/Game.EmitterSearcherFilter.CheckTargetValid // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.EmitterTargetsSortRule
// Size: 0x0 (Inherited: 0x0)
struct UEmitterTargetsSortRule : UObject {

	struct TArray<struct FTargetSortResult> SortTargets(struct TArray<struct FTargetSortResult>& Targets, struct UAbilityComponentBase* Querier, struct TArray<struct FParamInfo>& Infos, struct AActor* CastActor); // Function /Script/Game.EmitterTargetsSortRule.SortTargets // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.EmitterTargetsSortRule_Random
// Size: 0x0 (Inherited: 0x0)
struct UEmitterTargetsSortRule_Random : UEmitterTargetsSortRule {
};

 // Class /Script/Game.EmitterTargetsSortRule_Distance
// Size: 0x0 (Inherited: 0x0)
struct UEmitterTargetsSortRule_Distance : UEmitterTargetsSortRule {
};

 // Class /Script/Game.EmitterTargetsSortRule_Attribute
// Size: 0x0 (Inherited: 0x0)
struct UEmitterTargetsSortRule_Attribute : UEmitterTargetsSortRule {
};

 // Class /Script/Game.EnergyStorageSkillComponent
// Size: 0x0 (Inherited: 0x0)
struct UEnergyStorageSkillComponent : UCastSkillComponent {

	void OnCastEnergyStorage(__int32 ID, enum class ESkillCastType Type); // Function /Script/Game.EnergyStorageSkillComponent.OnCastEnergyStorage // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.EnmityReplaceActor
// Size: 0x0 (Inherited: 0x0)
struct AEnmityReplaceActor : AActor {
	struct USceneComponent* SceneComp; // 0x0(0x0)
	struct AGameCharacter* ReplaceChar; // 0x0(0x0)
};

 // Class /Script/Game.EnvironmentLibrary
// Size: 0x0 (Inherited: 0x0)
struct UEnvironmentLibrary : UBlueprintFunctionLibrary {

	void SetLightmapResolution(struct UStaticMeshComponent* InTarget, bool bOverriddenLightmapRes, __int32 OverriddenLightmapRes, __int32& OutNewLightmapRes); // Function /Script/Game.EnvironmentLibrary.SetLightmapResolution // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetLightmapCoordinateIndex(struct UStaticMesh* InTarget, __int32 LightMapCoordinateIndex); // Function /Script/Game.EnvironmentLibrary.SetLightmapCoordinateIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetLightmapCoordinateIndex(struct UStaticMesh* InTarget); // Function /Script/Game.EnvironmentLibrary.GetLightmapCoordinateIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.EnvMaterialWorldSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UEnvMaterialWorldSubsystem : UGameInstanceSubsystem {
	char pad_30[0xB0]; // 0x0(0x0)

	void ChangeMaterialTemplate(enum class EEnvMaterialLayerType LayerType); // Function /Script/Game.EnvMaterialWorldSubsystem.ChangeMaterialTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.EnvQueryContext_SelfFollowSocketLocation
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_SelfFollowSocketLocation : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_SelfInnerSafeR
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_SelfInnerSafeR : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryContext_SelfOuterSafeR
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_SelfOuterSafeR : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryContext_SelfEyeHeight
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_SelfEyeHeight : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_NumberOfRingsByRadius
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_NumberOfRingsByRadius : UAIDataProvider {
	__int32 IntValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_PointsPerRingByRadius
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_PointsPerRingByRadius : UAIDataProvider {
	__int32 IntValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryContext_Target
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_Target : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_SceneTarget
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_SceneTarget : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_OccupyTargetTag
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_OccupyTargetTag : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_SummonedOwner
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_SummonedOwner : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_Player
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_Player : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_TeamCaptain
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_TeamCaptain : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_TeamMembersTargetLocation_NotSelfAndCaptain
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_TeamMembersTargetLocation_NotSelfAndCaptain : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_TeamMembersTarget_NotSelfAndCaptain
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_TeamMembersTarget_NotSelfAndCaptain : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_TeamMembersTargetLocation
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_TeamMembersTargetLocation : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_TeamMembersTarget
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_TeamMembersTarget : UEnvQueryContext {
};

 // Class /Script/Game.AIDataProvider_ComfortableR_SelfAndCaptain
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_ComfortableR_SelfAndCaptain : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_RationalR_Captain
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_RationalR_Captain : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_FireAreaHalfAngle_Captain
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_FireAreaHalfAngle_Captain : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_BackAreaHalfAngle_Captain
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_BackAreaHalfAngle_Captain : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_RationalR_Self
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_RationalR_Self : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_EnjoyArea_Range_Min
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_EnjoyArea_Range_Min : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_EnjoyArea_Range_Max
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_EnjoyArea_Range_Max : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.AIDataProvider_EnjoyArea_Angle
// Size: 0x0 (Inherited: 0x0)
struct UAIDataProvider_EnjoyArea_Angle : UAIDataProvider {
	float FloatValue; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryContext_EnjoyArea_AngleRotation_L
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_EnjoyArea_AngleRotation_L : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryContext_EnjoyArea_AngleRotation_R
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_EnjoyArea_AngleRotation_R : UEnvQueryContext {
};

 // Class /Script/Game.EnvQueryGenerator_Targets
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryGenerator_Targets : UEnvQueryGenerator {
	struct UEnvQueryContext* Context; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryGenerator_TeamSafeArea
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryGenerator_TeamSafeArea : UEnvQueryGenerator_ProjectedPoints {
	struct FAIDataProviderFloatValue GridSize; // 0x0(0x0)
	struct FAIDataProviderFloatValue SpaceBetween; // 0x0(0x0)
	struct UEnvQueryContext* GenerateAround; // 0x0(0x0)
	struct UEnvQueryContext* TraceAround; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTarget_Class
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTarget_Class : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
	struct TArray<struct UObject*> TargetClasses; // 0x0(0x0)
	bool Invert; // 0x0(0x0)
	char pad_211[0x3]; // 0x0(0x0)
	float Score; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_CaptainFireTarget
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_CaptainFireTarget : UEnvQueryTest {
};

 // Class /Script/Game.EnvQueryTest_CollapseTeam
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_CollapseTeam : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_DamageIn5Seconds
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_DamageIn5Seconds : UEnvQueryTest {
	struct UEnvQueryContext* DPSQuerier; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_DPS
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_DPS : UEnvQueryTest {
	struct UEnvQueryContext* DPSQuerier; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_EnjoyArea
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_EnjoyArea : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_InForwardArc
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_InForwardArc : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
	struct FAIDataProviderBoolValue InverseForward; // 0x0(0x0)
	struct FAIDataProviderBoolValue UseVelocityAsForward; // 0x0(0x0)
	struct FAIDataProviderFloatValue MaxAngle; // 0x0(0x0)
	struct FAIDataProviderBoolValue BothSide; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_ControlForwardArc
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_ControlForwardArc : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
	struct FAIDataProviderBoolValue InverseForward; // 0x0(0x0)
	struct FAIDataProviderFloatValue MaxAngle; // 0x0(0x0)
	struct FAIDataProviderBoolValue BothSide; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_InModifier
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_InModifier : UEnvQueryTest {
	struct TArray<__int32> ModifierIDs; // 0x0(0x0)
	__int32 RequireSelfModifierID; // 0x0(0x0)
	char pad_20C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_InSkillRange
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_InSkillRange : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
	bool bin; // 0x0(0x0)
	char pad_201[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_InViewPort
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_InViewPort : UEnvQueryTest {
	float ScreenX_LimitRatio; // 0x0(0x0)
	char pad_1FC[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_IsCurrentTarget
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_IsCurrentTarget : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_IsFightWithSpecify
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_IsFightWithSpecify : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_IsInCampPriority
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_IsInCampPriority : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_ModifyScore
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_ModifyScore : UEnvQueryTest {
};

 // Class /Script/Game.EnvQueryTest_ModifyScoreOccupy
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_ModifyScoreOccupy : UEnvQueryTest {
};

 // Class /Script/Game.EnvQueryTest_NewTrace
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_NewTrace : UEnvQueryTest {
	struct FEnvTraceData TraceData; // 0x0(0x0)
	struct FAIDataProviderBoolValue TraceFromContext; // 0x0(0x0)
	struct FAIDataProviderFloatValue ItemHeightOffset; // 0x0(0x0)
	struct FAIDataProviderFloatValue ContextHeightOffset; // 0x0(0x0)
	struct UEnvQueryContext* Context; // 0x0(0x0)
	struct UEnvQueryContext* IgnoredContext; // 0x0(0x0)
};

 // Class /Script/Game.EnvQueryTest_TargetNum
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryTest_TargetNum : UEnvQueryTest {
	__int32 MaxNum; // 0x0(0x0)
	char pad_1FC[0x4]; // 0x0(0x0)
	struct UEnvQueryContext* QueryTargetContext; // 0x0(0x0)
};

 // Class /Script/Game.EQSScoreModifyActor
// Size: 0x0 (Inherited: 0x0)
struct AEQSScoreModifyActor : AActor {
	__int32 Score; // 0x0(0x0)
	char pad_224[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.ExplosiveAbilityComponent
// Size: 0x0 (Inherited: 0x0)
struct UExplosiveAbilityComponent : UCanInteractAbilityComponent {
};

 // Class /Script/Game.ExplosiveActorBase
// Size: 0x0 (Inherited: 0x0)
struct AExplosiveActorBase : ACanInteractActor {

	void OnSwitchWarn(bool InWarn); // Function /Script/Game.ExplosiveActorBase.OnSwitchWarn // (Event|Public|BlueprintEvent) // @ game+0
	void OnReset(); // Function /Script/Game.ExplosiveActorBase.OnReset // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InitAbilityComponent(); // Function /Script/Game.ExplosiveActorBase.InitAbilityComponent // (Native|Public|BlueprintCallable) // @ game+0
	__int32 GetDieSkillId(); // Function /Script/Game.ExplosiveActorBase.GetDieSkillId // (Event|Public|BlueprintEvent) // @ game+0
	bool CheckDistanceCull(float InCullDistance); // Function /Script/Game.ExplosiveActorBase.CheckDistanceCull // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.FakeBullet
// Size: 0x0 (Inherited: 0x0)
struct AFakeBullet : AActor {
	char pad_220[0x10]; // 0x0(0x0)
	unsigned __int32 BulletRuntimeID; // 0x0(0x0)
	float FiringRangeUltimateLimit; // 0x0(0x0)
	float LifeTime; // 0x0(0x0)
	__int32 CurrentBulletID; // 0x0(0x0)
	struct FBulletInfo BulletInfo; // 0x0(0x0)
	struct FVector SpawnedLocation; // 0x0(0x0)
	struct FVector Velocity; // 0x0(0x0)
	float Acceleration; // 0x0(0x0)
	float GravityScale; // 0x0(0x0)
	struct UFXSystemComponent* TailParticleComp; // 0x0(0x0)
	struct UFXSystemComponent* TailBeamParticleComp; // 0x0(0x0)
	char pad_600[0x10]; // 0x0(0x0)

	struct AFakeBullet* SpawnDeferred(struct APlayerWeapon* lpWeapon, struct UAbilityComponentBase* InAbility, struct FVector& nStartPosition, struct FVector& nShootDirection, __int32 BulletID); // Function /Script/Game.FakeBullet.SpawnDeferred // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FightAzimuthBar
// Size: 0x0 (Inherited: 0x0)
struct UFightAzimuthBar : UUserWidget {
	struct TMap<enum class EFightMonsterTipsType, struct UImage*> Items; // 0x0(0x0)
	struct TArray<struct FAzimuthItem> AllAzimuthItem; // 0x0(0x0)
	struct UCanvasPanel* MyContainer; // 0x0(0x0)
	struct UWidget* BarWidget; // 0x0(0x0)
};

 // Class /Script/Game.FightBarGirl002a
// Size: 0x0 (Inherited: 0x0)
struct UFightBarGirl002a : UUserWidgetAnimation {
	struct UWidget* TmpRootPanel; // 0x0(0x0)
	struct UWidget* TmpPanelAim; // 0x0(0x0)
	struct UCustListView* TmpListPower1; // 0x0(0x0)
	struct UCustListView* TmpListPower2; // 0x0(0x0)
	struct AGameCharacter* CurCharacter; // 0x0(0x0)
	struct TArray<struct UFightBarGirl002aDataItem*> DataItems; // 0x0(0x0)
	char pad_2F8[0x18]; // 0x0(0x0)
	struct UAbilityAttribute* Attribute; // 0x0(0x0)
	float ItemCount; // 0x0(0x0)
	float ItemUpCount; // 0x0(0x0)
	float UseDownItemCount; // 0x0(0x0)
	float UseDownItemUpCount; // 0x0(0x0)
	__int32 SkillUpFixID; // 0x0(0x0)
	__int32 SkillUseDownFixID; // 0x0(0x0)
	__int32 StateModifierID; // 0x0(0x0)
	float LerpTime; // 0x0(0x0)

	void PlayAnim(bool StateType); // Function /Script/Game.FightBarGirl002a.PlayAnim // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightBarGirl002aDataItem
// Size: 0x0 (Inherited: 0x0)
struct UFightBarGirl002aDataItem : UObject {
	float Percent; // 0x0(0x0)
	bool bStartState; // 0x0(0x0)
	char pad_2D[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.FightBarGirl002aItem
// Size: 0x0 (Inherited: 0x0)
struct UFightBarGirl002aItem : UUserWidgetAnimation {
	char pad_2C0[0x8]; // 0x0(0x0)
	float PowerAlpha; // 0x0(0x0)
	float PowerFullAlpha; // 0x0(0x0)
	struct UWidget* TmpImgLight; // 0x0(0x0)
	struct UProgressBar* TmpPower; // 0x0(0x0)
	struct UFightBarGirl002aDataItem* lpDataItem; // 0x0(0x0)
	char pad_2E8[0x8]; // 0x0(0x0)

	void PlayStartStateAnim(bool bPlay); // Function /Script/Game.FightBarGirl002aItem.PlayStartStateAnim // (Event|Protected|BlueprintEvent) // @ game+0
	void PlayFullAnim(__int32 Index); // Function /Script/Game.FightBarGirl002aItem.PlayFullAnim // (Event|Protected|BlueprintEvent) // @ game+0
	void PlayDepleteAnim(__int32 Index); // Function /Script/Game.FightBarGirl002aItem.PlayDepleteAnim // (Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightBarGirl002aItem2
// Size: 0x0 (Inherited: 0x0)
struct UFightBarGirl002aItem2 : UFightBarGirl002aItem {
	struct UProgressBar* TmpPower1; // 0x0(0x0)
	struct UProgressBar* TmpPower2; // 0x0(0x0)
	char pad_300[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.FightSpecialBase
// Size: 0x0 (Inherited: 0x0)
struct UFightSpecialBase : UUserWidgetAnimation {
	char pad_2C0[0x8]; // 0x0(0x0)

	void SetModifierID(__int32 InModifierID); // Function /Script/Game.FightSpecialBase.SetModifierID // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.FightBarGirl008a
// Size: 0x0 (Inherited: 0x0)
struct UFightBarGirl008a : UFightSpecialBase {
	struct UWidget* Root; // 0x0(0x0)
	struct UWidget* ImgRight; // 0x0(0x0)
	struct UWidget* PanelRightLimit; // 0x0(0x0)
	struct UWidget* ImgRightLimitBG; // 0x0(0x0)
	struct UWidget* ImgRightLimit; // 0x0(0x0)
	struct UWidget* ImgRightMaxLimit; // 0x0(0x0)
	struct UWidget* ImgLeft; // 0x0(0x0)
	struct UWidget* PanelLeftLimit; // 0x0(0x0)
	struct UWidget* ImgLeftLimitBG; // 0x0(0x0)
	struct UWidget* ImgLeftLimit; // 0x0(0x0)
	struct UWidget* ImgLeftMaxLimit; // 0x0(0x0)
	struct UWidget* RoleBreak5; // 0x0(0x0)
	struct FVector2D ImgRange; // 0x0(0x0)
	struct UCurveFloat* ImgLimitBGRange; // 0x0(0x0)
	struct UCurveFloat* ImgLimitRange; // 0x0(0x0)
	float ImgLimitBGRecoverSpeed; // 0x0(0x0)
	char pad_344[0x4]; // 0x0(0x0)
	struct UAbilityAttribute* Attribute; // 0x0(0x0)
	float NoramlMax; // 0x0(0x0)
	float BreakLimitMax; // 0x0(0x0)
	float InterpSpeed; // 0x0(0x0)
	char pad_35C[0x14]; // 0x0(0x0)

	void VisibilityChanged(enum class ESlateVisibility VisibilityType); // Function /Script/Game.FightBarGirl008a.VisibilityChanged // (Final|Native|Public) // @ game+0
	void OnVisibility(); // Function /Script/Game.FightBarGirl008a.OnVisibility // (Event|Public|BlueprintEvent) // @ game+0
	void OnBreakLimit(bool bBreak); // Function /Script/Game.FightBarGirl008a.OnBreakLimit // (Event|Public|BlueprintEvent) // @ game+0
	void OnBreakChange(__int32 BreakCount); // Function /Script/Game.FightBarGirl008a.OnBreakChange // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightBarGirl008a2
// Size: 0x0 (Inherited: 0x0)
struct UFightBarGirl008a2 : UFightSpecialBase {
	struct URedirectTextBlock* TxtTime; // 0x0(0x0)
	struct UWidget* TxtInfinite; // 0x0(0x0)
	struct UWidget* PanelNormal; // 0x0(0x0)
	struct UImage* Audio; // 0x0(0x0)
	struct UWidget* PanelLimit; // 0x0(0x0)
	struct UWidget* ImgLimit; // 0x0(0x0)
	struct UImage* audio_Pro; // 0x0(0x0)
	struct UImage* audio_panel; // 0x0(0x0)
	struct UWidgetAnimation* Open; // 0x0(0x0)
	struct UWidgetAnimation* Limit; // 0x0(0x0)
	struct UWidgetAnimation* Reset; // 0x0(0x0)
	struct UWidgetAnimation* LimitClose; // 0x0(0x0)
	struct UWidgetAnimation* arrow_loop; // 0x0(0x0)
	float PercentRange; // 0x0(0x0)
	float LimitMaxSize; // 0x0(0x0)
	struct UAbilityAttribute* Attribute; // 0x0(0x0)
	float NormalMax; // 0x0(0x0)
	float BreakLimitMax; // 0x0(0x0)
	float InterpSpeed; // 0x0(0x0)
	char pad_34C[0x4]; // 0x0(0x0)
	struct AGameCharacter* CurCharacter; // 0x0(0x0)
	char pad_358[0x20]; // 0x0(0x0)

	void VisibilityChanged(enum class ESlateVisibility VisibilityType); // Function /Script/Game.FightBarGirl008a2.VisibilityChanged // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.FightBossHp
// Size: 0x0 (Inherited: 0x0)
struct UFightBossHp : UUserWidgetAnimation {
	char pad_2C0[0x10]; // 0x0(0x0)
	bool bSpecialized; // 0x0(0x0)
	char pad_2D1[0x3]; // 0x0(0x0)
	__int32 CurNameID; // 0x0(0x0)
	struct UUMGDataComponent* UmgData; // 0x0(0x0)
	struct TArray<struct AGameCharacter*> BossOrSpecializedMon; // 0x0(0x0)
	struct AGameCharacter* BindBoss; // 0x0(0x0)
	struct FSoftClassPath AnimPath; // 0x0(0x0)
	struct TMap<__int32, struct UBuffIconItem*> ListSkillIcon; // 0x0(0x0)
	struct TMap<enum class EModifyHPType, struct UElemExplDataItem*> MapElemExplBar; // 0x0(0x0)
	char pad_3B0[0x38]; // 0x0(0x0)
	float WaitRecover; // 0x0(0x0)
	char pad_3EC[0x4]; // 0x0(0x0)
	struct UTextBlock* Boss_Name; // 0x0(0x0)
	struct UProgressBar* HP; // 0x0(0x0)
	struct UProgressBar* BarControlFree; // 0x0(0x0)
	struct UProgressBar* Shield; // 0x0(0x0)
	struct UListView* ListBuff; // 0x0(0x0)
	struct UListView* List_Skill; // 0x0(0x0)
	struct UHorizontalBox* EffectList; // 0x0(0x0)
	struct UOverlay* Node; // 0x0(0x0)
	struct UCanvasPanel* PanelHpHeal; // 0x0(0x0)
	struct UCanvasPanel* PanelPanelControlFree; // 0x0(0x0)
	struct UImage* ImgBounce1; // 0x0(0x0)
	struct UImage* ImgBounce2; // 0x0(0x0)
	struct UImage* ImgBounce3; // 0x0(0x0)
	struct UWidget* TmpInvalidationBox; // 0x0(0x0)
	struct UCanvasPanel* TmpPanelSkill; // 0x0(0x0)
	struct UTextBlock* TmpTxtSkillName; // 0x0(0x0)
	struct UProgressBar* SkillCDBar; // 0x0(0x0)
	struct UImage* TmpImgSkill; // 0x0(0x0)
	struct UCanvasPanel* TmpPanelHpMark; // 0x0(0x0)
	struct UWidget* TmpStateReplyAdd; // 0x0(0x0)
	struct UWidget* TmpStateInvincible; // 0x0(0x0)
	struct UWidget* TmpStateReduceTreat; // 0x0(0x0)
	struct UWidgetAnimation* HpHealAnim; // 0x0(0x0)
	struct UWidgetAnimation* HpInviAnim; // 0x0(0x0)
	struct FString InterruptAnimName; // 0x0(0x0)
	struct FString SilentAnimName; // 0x0(0x0)
	struct FString ResetAnimName; // 0x0(0x0)
	struct FString ControlFreeOpenAnimName; // 0x0(0x0)
	struct UWidget* TmpPanelSpecial; // 0x0(0x0)
	struct UTextBlock* TmpPanelSpecialName; // 0x0(0x0)
	struct UProgressBar* TmpBarSpecial; // 0x0(0x0)
	struct UListView* ListElement; // 0x0(0x0)
	struct UImage* ImgSklllBG2; // 0x0(0x0)
	struct FSoftClassPath HpMarkPath; // 0x0(0x0)

	void StageBreakProgressPlayAnim(float Precent, bool bBreak); // Function /Script/Game.FightBossHp.StageBreakProgressPlayAnim // (Event|Protected|BlueprintEvent) // @ game+0
	void OnStageBreakProgress(float ProgressTime, struct FString Tips); // Function /Script/Game.FightBossHp.OnStageBreakProgress // (Final|Native|Private|BlueprintCallable) // @ game+0
	void OnSkillCancle(__int32 InSkillId, enum class ESkillInterruptedType InType); // Function /Script/Game.FightBossHp.OnSkillCancle // (Final|Native|Private|BlueprintCallable) // @ game+0
	void OnSkillBlockup(__int32 InSkillId, float RemainingTime); // Function /Script/Game.FightBossHp.OnSkillBlockup // (Final|Native|Private|BlueprintCallable) // @ game+0
	void OnChangeElemExplosion(struct TArray<struct FElemItemData>& ArrElemExplosion); // Function /Script/Game.FightBossHp.OnChangeElemExplosion // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0
	void OnAppliedModifierChange(__int32 ModifierID, bool IsApply); // Function /Script/Game.FightBossHp.OnAppliedModifierChange // (Final|Native|Private|BlueprintCallable) // @ game+0
	void OnAbnormalControlEnd(float RemainProtectionSecond); // Function /Script/Game.FightBossHp.OnAbnormalControlEnd // (Final|Native|Private|BlueprintCallable) // @ game+0
	void OnAbnormalControlBegin(); // Function /Script/Game.FightBossHp.OnAbnormalControlBegin // (Final|Native|Private|BlueprintCallable) // @ game+0
	void FOnAppliedModifierRemainingTimeChange(float RemainingTime); // Function /Script/Game.FightBossHp.FOnAppliedModifierRemainingTimeChange // (Final|Native|Private|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FightBossBuff
// Size: 0x0 (Inherited: 0x0)
struct UFightBossBuff : UUserWidgetAnimation {
	char pad_2C0[0x8]; // 0x0(0x0)
	struct TWeakObjectPtr<struct UModifier> BuffModifier; // 0x0(0x0)
	struct UWidget* Group_Skill; // 0x0(0x0)
	struct UImage* ImgSklll; // 0x0(0x0)
	struct UImage* ImgCD; // 0x0(0x0)
	struct UWidget* Group_Buff; // 0x0(0x0)
	struct UImage* Img_buff; // 0x0(0x0)
	struct UCanvasPanel* BuffNum; // 0x0(0x0)
	struct UTextBlock* TxtBUffNum; // 0x0(0x0)
	struct UWidget* ImgSkillBG; // 0x0(0x0)
	bool bFinish; // 0x0(0x0)
	char pad_311[0xF]; // 0x0(0x0)

	void K2_PlayFinish(bool bReset); // Function /Script/Game.FightBossBuff.K2_PlayFinish // (Event|Protected|BlueprintEvent) // @ game+0
	void K2_OnSkillBlockup(bool bBlockup); // Function /Script/Game.FightBossBuff.K2_OnSkillBlockup // (Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightBossHpAnim
// Size: 0x0 (Inherited: 0x0)
struct UFightBossHpAnim : UUserWidgetAnimation {

	void K2_Play(float InDelayTime); // Function /Script/Game.FightBossHpAnim.K2_Play // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightCross
// Size: 0x0 (Inherited: 0x0)
struct UFightCross : UUserWidgetAnimation {
	struct UWidget* Root_Hit; // 0x0(0x0)
	struct UWidget* Root_Inefficiency; // 0x0(0x0)
	struct UWidget* Root_Die; // 0x0(0x0)
	struct UWidget* Root_Destructible; // 0x0(0x0)
	struct UWidget* Root_Weakness; // 0x0(0x0)
	struct UWidget* CloseWidget; // 0x0(0x0)
	struct AGameCharacter* Pawn; // 0x0(0x0)
	__int32 AnimCount; // 0x0(0x0)
	float LastHurtTime; // 0x0(0x0)
	__int32 CurAnimType; // 0x0(0x0)
	char pad_304[0x4]; // 0x0(0x0)

	void OnType(struct UWidget* Node, struct FString InAnimName); // Function /Script/Game.FightCross.OnType // (Final|Native|Public) // @ game+0
	void OnCustomUmgAnimFinished(struct FString AnimName); // Function /Script/Game.FightCross.OnCustomUmgAnimFinished // (Native|Public) // @ game+0
	void GetModifiers(__int32 InModifierID, bool IsApply); // Function /Script/Game.FightCross.GetModifiers // (Final|Native|Public) // @ game+0
	void Clear(); // Function /Script/Game.FightCross.Clear // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.FightHitTip
// Size: 0x0 (Inherited: 0x0)
struct UFightHitTip : UUserWidget {
	char pad_278[0x10]; // 0x0(0x0)

	void OnHit(float Angle, float Shield, bool IsBigHit); // Function /Script/Game.FightHitTip.OnHit // (Event|Public|BlueprintEvent) // @ game+0
	void Hit(struct FApplyDamageResultData& InHitData); // Function /Script/Game.FightHitTip.Hit // (Final|Native|Public|HasOutParms) // @ game+0
};

 // Class /Script/Game.FightLogicComponent
// Size: 0x0 (Inherited: 0x0)
struct UFightLogicComponent : UAILogicComponent {
	char pad_B0[0x8]; // 0x0(0x0)
	struct TMap<__int32, float> SkillGroupEmitTime; // 0x0(0x0)
	char pad_108[0x178]; // 0x0(0x0)

	void ReturnToken(__int32 SkillID); // Function /Script/Game.FightLogicComponent.ReturnToken // (Final|Native|Public) // @ game+0
	void ReturnAllToken(); // Function /Script/Game.FightLogicComponent.ReturnAllToken // (Final|Native|Public) // @ game+0
	void OnSkillEnd(__int32 SkillID); // Function /Script/Game.FightLogicComponent.OnSkillEnd // (Final|Native|Public) // @ game+0
	void OnSkillCancel(__int32 SkillID, enum class ESkillInterruptedType InType); // Function /Script/Game.FightLogicComponent.OnSkillCancel // (Final|Native|Public) // @ game+0
	void OnSkillBegin(__int32 SkillID); // Function /Script/Game.FightLogicComponent.OnSkillBegin // (Final|Native|Public) // @ game+0
	struct UAIMove* NowAIMove(); // Function /Script/Game.FightLogicComponent.NowAIMove // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsRunningAIMove(); // Function /Script/Game.FightLogicComponent.IsRunningAIMove // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsCastingSkill(__int32 SkillID); // Function /Script/Game.FightLogicComponent.IsCastingSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsCastingAnySkills(); // Function /Script/Game.FightLogicComponent.IsCastingAnySkills // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void FinishAIMove(); // Function /Script/Game.FightLogicComponent.FinishAIMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool DOSkillCasterEndChecker(); // Function /Script/Game.FightLogicComponent.DOSkillCasterEndChecker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool DoSkillCastChecker(); // Function /Script/Game.FightLogicComponent.DoSkillCastChecker // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.LuaWidget
// Size: 0x0 (Inherited: 0x0)
struct ULuaWidget : UGameCoreWidget {
};

 // Class /Script/Game.FightMemberTitle
// Size: 0x0 (Inherited: 0x0)
struct UFightMemberTitle : ULuaWidget {
	char pad_2B0[0x58]; // 0x0(0x0)

	void SetReviveBarShow(struct UWidget* InWidget, bool InShow); // Function /Script/Game.FightMemberTitle.SetReviveBarShow // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void SetPlayerName(struct UWidget* InWidget, struct FString InName); // Function /Script/Game.FightMemberTitle.SetPlayerName // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void SetNameShow(struct UWidget* InWidget, bool InShow); // Function /Script/Game.FightMemberTitle.SetNameShow // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void PlayOtherReviveAnim(struct UWidget* InWidget, bool bPlay); // Function /Script/Game.FightMemberTitle.PlayOtherReviveAnim // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void InitPlayers(); // Function /Script/Game.FightMemberTitle.InitPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UProgressBar* GetReviveBar(struct UWidget* InWidget); // Function /Script/Game.FightMemberTitle.GetReviveBar // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	struct UGameCanvasPanel* GetPanelTeamBar(struct UWidget* InWidget); // Function /Script/Game.FightMemberTitle.GetPanelTeamBar // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	struct UProgressBar* GetOtherReviveBar(struct UWidget* InWidget); // Function /Script/Game.FightMemberTitle.GetOtherReviveBar // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	struct UWidget* AllocNewWidget(); // Function /Script/Game.FightMemberTitle.AllocNewWidget // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightMonsterTips
// Size: 0x0 (Inherited: 0x0)
struct UFightMonsterTips : UUserWidgetAnimation {
	struct FSoftClassPath ItemWidgetPath; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct FSoftClassPath> SingleItemMap; // 0x0(0x0)
	float HeightLimitValue; // 0x0(0x0)
	__int32 AngleLimitValue; // 0x0(0x0)
	__int32 MonsterItemCountLimit; // 0x0(0x0)
	char pad_334[0x4]; // 0x0(0x0)
	struct UCanvasPanel* MonsterContainer; // 0x0(0x0)
	struct UCanvasPanel* TaskContainer; // 0x0(0x0)
	struct UCanvasPanel* SceneContainer; // 0x0(0x0)
	struct TArray<struct UFightMonsterTipsItem*> MonsterItems; // 0x0(0x0)
	struct TArray<struct UFightMonsterTipsItem*> EliteItems; // 0x0(0x0)
	struct TArray<struct UFightMonsterTipsItem*> BossItems; // 0x0(0x0)
	struct TArray<struct UFightMonsterTipsItem*> TipsItems; // 0x0(0x0)
	struct TArray<struct UFightMonsterTipsItem*> DialogueItems; // 0x0(0x0)
	struct TArray<struct UFightMonsterTipsItem*> DelayShowItems; // 0x0(0x0)
	char pad_3B0[0x8]; // 0x0(0x0)

	void Update(struct UCanvasPanel* Container, float DeltaTime); // Function /Script/Game.FightMonsterTips.Update // (Final|Native|Public) // @ game+0
	struct UFightMonsterTipsItem* GetUnUse(struct UCanvasPanel* Container); // Function /Script/Game.FightMonsterTips.GetUnUse // (Final|Native|Public|Const) // @ game+0
	struct UFightMonsterTipsItem* GetOneTipsItem(struct AActor* InActor, struct UCanvasPanel* Container, enum class EFightMonsterTipsType InType); // Function /Script/Game.FightMonsterTips.GetOneTipsItem // (Final|Native|Public) // @ game+0
	struct UFightMonsterTipsItem* FindUsedItem(struct AActor* InBindActor, enum class EFightMonsterTipsType InType); // Function /Script/Game.FightMonsterTips.FindUsedItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UFightMonsterTipsItem* CreateTaskItem(struct AActor* InActor, enum class EFightMonsterTipsType InType, struct FString InSocketName); // Function /Script/Game.FightMonsterTips.CreateTaskItem // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UFightMonsterTipsItem* CreateItem(struct AActor* InActor, enum class EFightMonsterTipsType InType, struct FString InSocketName); // Function /Script/Game.FightMonsterTips.CreateItem // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UFightMonsterTipsItem* CreateInteractionItem(struct AActor* Target); // Function /Script/Game.FightMonsterTips.CreateInteractionItem // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UFightMonsterTipsItem* Add(struct UCanvasPanel* Container); // Function /Script/Game.FightMonsterTips.Add // (Final|Native|Public|Const) // @ game+0
};

 // Class /Script/Game.FightMonsterTipsItem
// Size: 0x0 (Inherited: 0x0)
struct UFightMonsterTipsItem : UUserWidgetAnimation {
	struct UFightMonsterTips* RootItem; // 0x0(0x0)
	struct FVector2D DistanceRange; // 0x0(0x0)
	struct FVector2D ScaleRange; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct FVector2D> DistanceRanges; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct FVector2D> ScaleRanges; // 0x0(0x0)
	char pad_378[0x20]; // 0x0(0x0)
	struct UCanvasPanelSlot* PanelSlot; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct UWidget*> Items; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct UWidget*> ItemArrows; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct UWidget*> ItemHeightArrows; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct UWidget*> ItemDownArrows; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct UWidget*> ItemChargeArrows; // 0x0(0x0)
	struct TMap<enum class EFightMonsterTipsType, struct UProgressBar*> ItemChargeBars; // 0x0(0x0)
	struct AActor* BindActor; // 0x0(0x0)
	struct UUMGDataComponent* UMGDataComponent; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)
	struct UWidget* ViewPanelWidget; // 0x0(0x0)
	struct UWidget* ParentPanelWidget; // 0x0(0x0)
	struct UTextBlock* TmpTxtTipsNum; // 0x0(0x0)
	struct FString TxtDisUnit; // 0x0(0x0)
	enum class EFightMonsterTipsType TipsType; // 0x0(0x0)
	bool bCanShow; // 0x0(0x0)
	bool bDelay; // 0x0(0x0)
	bool bInAnim; // 0x0(0x0)
	enum class ESlateVisibility LastVisibility; // 0x0(0x0)
	char pad_5C5[0xB]; // 0x0(0x0)

	void VisibilityChanged(enum class ESlateVisibility InVisibility); // Function /Script/Game.FightMonsterTipsItem.VisibilityChanged // (Final|Native|Public) // @ game+0
	void SetShow(bool bShow, bool bImmediately); // Function /Script/Game.FightMonsterTipsItem.SetShow // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Reset(); // Function /Script/Game.FightMonsterTipsItem.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayTypeAnim(); // Function /Script/Game.FightMonsterTipsItem.PlayTypeAnim // (Native|Event|Public|BlueprintEvent) // @ game+0
	void PlayReleaseAnim(); // Function /Script/Game.FightMonsterTipsItem.PlayReleaseAnim // (Native|Event|Public|BlueprintEvent) // @ game+0
	void PlayHitAnim(struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.FightMonsterTipsItem.PlayHitAnim // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void PlayDieAnim(); // Function /Script/Game.FightMonsterTipsItem.PlayDieAnim // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnAppliedModifierChange(__int32 ModifierID, bool bAdd); // Function /Script/Game.FightMonsterTipsItem.OnAppliedModifierChange // (Final|Native|Public) // @ game+0
	float GetDistance(); // Function /Script/Game.FightMonsterTipsItem.GetDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void BreakLimits(); // Function /Script/Game.FightMonsterTipsItem.BreakLimits // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FightOnlineShopWidget
// Size: 0x0 (Inherited: 0x0)
struct UFightOnlineShopWidget : ULuaWidget {
	struct UFightTime* TimeWidget; // 0x0(0x0)

	struct FRandomBufferInfo GetShopBufferInfo(__int32 Index); // Function /Script/Game.FightOnlineShopWidget.GetShopBufferInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct APlayerController* GetPlayerController(); // Function /Script/Game.FightOnlineShopWidget.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetPlayerBuffCount(__int32 BuffId); // Function /Script/Game.FightOnlineShopWidget.GetPlayerBuffCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct ABufferShop* GetBufferShop(); // Function /Script/Game.FightOnlineShopWidget.GetBufferShop // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<__int32> GetActivedBuffers(); // Function /Script/Game.FightOnlineShopWidget.GetActivedBuffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetAbilityBufferLevel(__int32 BufferId); // Function /Script/Game.FightOnlineShopWidget.GetAbilityBufferLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FAbilityBufferPrice GetAbilityBuffer(__int32 BufferId); // Function /Script/Game.FightOnlineShopWidget.GetAbilityBuffer // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanUpgradeAbilityBufferLevel(__int32 BufferId); // Function /Script/Game.FightOnlineShopWidget.CanUpgradeAbilityBufferLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CanBuyShopBuffer(__int32 BufferId); // Function /Script/Game.FightOnlineShopWidget.CanBuyShopBuffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool BuyShopBuffer(__int32 Index); // Function /Script/Game.FightOnlineShopWidget.BuyShopBuffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.FightPlayerWidget
// Size: 0x0 (Inherited: 0x0)
struct UFightPlayerWidget : UUserWidgetAnimation {
	struct UWrapBox* PlayerList; // 0x0(0x0)
	struct UWidgetAnimation* NotEnough; // 0x0(0x0)
	struct UWidgetAnimation* GetEnergy; // 0x0(0x0)
	struct UWidget* ImgEnergyObtain; // 0x0(0x0)
	float ImgEnergyObtainLength; // 0x0(0x0)
	float DefaultImgEnergyTranslation; // 0x0(0x0)
	float ZeroImgEnergyTranslation; // 0x0(0x0)
	char pad_2EC[0x4]; // 0x0(0x0)
	struct UProgressBar* TmpBarEnergy; // 0x0(0x0)
	struct UHorizontalBox* TmpPanelPowerMark; // 0x0(0x0)
	struct UTextBlock* TmpCurrentEnergy; // 0x0(0x0)
	struct UTextBlock* TmpMaxEnergy; // 0x0(0x0)
	struct FSoftClassPath PowerMarkPath; // 0x0(0x0)
	float PowerEachMarkCount; // 0x0(0x0)
	char pad_32C[0x4]; // 0x0(0x0)
	struct TArray<struct UFightPlayer_Item*> PlayerItems; // 0x0(0x0)
	struct UFightPlayer_Item* CurPlayerItem; // 0x0(0x0)
	struct AGamePlayerController* lpPlayerController; // 0x0(0x0)
	struct AGameCharacter* CurrentCharacter; // 0x0(0x0)
	char pad_358[0x10]; // 0x0(0x0)

	void ResetChracter(); // Function /Script/Game.FightPlayerWidget.ResetChracter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayPowerAnim(bool bFull); // Function /Script/Game.FightPlayerWidget.PlayPowerAnim // (Event|Public|BlueprintEvent) // @ game+0
	void DoSwitch(); // Function /Script/Game.FightPlayerWidget.DoSwitch // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.FightPlayer_Item
// Size: 0x0 (Inherited: 0x0)
struct UFightPlayer_Item : UUserWidgetAnimation {
	struct UButton* Btn; // 0x0(0x0)
	struct UImage* Role; // 0x0(0x0)
	struct UProgressBar* BarHp; // 0x0(0x0)
	struct UWidget* PanelSwitchCD; // 0x0(0x0)
	struct UImage* ImgSwitchCD; // 0x0(0x0)
	struct UTextBlock* TxtCD; // 0x0(0x0)
	struct UTextBlock* TxtReviveCD; // 0x0(0x0)
	struct UTextBlock* TxtPlayerKeyboard; // 0x0(0x0)
	struct UTextBlock* TxtSkillKeyboard; // 0x0(0x0)
	struct UWidget* Silence; // 0x0(0x0)
	struct UButton* BtnSkill; // 0x0(0x0)
	struct UImage* ImgSkillIcon; // 0x0(0x0)
	struct UImage* ImgSkillIcon2; // 0x0(0x0)
	struct UWidget* PanelCD; // 0x0(0x0)
	struct UImage* ImgCD; // 0x0(0x0)
	struct UTextBlock* TxtCD_1; // 0x0(0x0)
	struct UWidget* PanelStrong; // 0x0(0x0)
	struct UWidget* PanelTier; // 0x0(0x0)
	struct UImage* BarTier; // 0x0(0x0)
	struct UTextBlock* TxtTier; // 0x0(0x0)
	struct UWidget* PanelDie; // 0x0(0x0)
	float LowestHpPercent; // 0x0(0x0)
	char pad_36C[0x4]; // 0x0(0x0)
	struct UBackSuperSkillButton* TmpSuperSkill; // 0x0(0x0)
	struct UWidget* TmpPanelBasicSkill; // 0x0(0x0)
	struct UWidget* TmpPanelLowHp; // 0x0(0x0)
	struct UProgressBar* TmpBarPower; // 0x0(0x0)
	struct UWidget* TempPanelTier; // 0x0(0x0)
	struct UTextBlock* TempTxtTier; // 0x0(0x0)
	struct UImage* TempBarTier; // 0x0(0x0)
	struct UWidget* TempNumberPanel; // 0x0(0x0)
	struct TArray<struct UWidget*> TempNumberNodes; // 0x0(0x0)
	struct TArray<struct UImage*> TempNumberNodesWhite; // 0x0(0x0)
	char pad_3D0[0x4]; // 0x0(0x0)
	struct TWeakObjectPtr<struct UFightPlayerWidget> ParentWidget; // 0x0(0x0)
	char pad_3DC[0x4]; // 0x0(0x0)
	struct TMap<enum class ETriangleAttributeType, struct UObject*> TriangleImage; // 0x0(0x0)
	struct TArray<struct FString> ModifierEffectNames; // 0x0(0x0)
	enum class ESlateVisibility SuperSkillType; // 0x0(0x0)
	char pad_441[0x7]; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> CacheCharacter; // 0x0(0x0)
	char pad_450[0x90]; // 0x0(0x0)

	void UpdateKeyboard(__int32 InIndex); // Function /Script/Game.FightPlayer_Item.UpdateKeyboard // (Event|Public|BlueprintEvent) // @ game+0
	void StopEffect(enum class EPlayerItemEffectType InEffectType); // Function /Script/Game.FightPlayer_Item.StopEffect // (Event|Public|BlueprintEvent) // @ game+0
	void ShowQTECastSkillFailUMG(); // Function /Script/Game.FightPlayer_Item.ShowQTECastSkillFailUMG // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Set(struct AGameCharacter* InCharacter, bool bCurCharacter); // Function /Script/Game.FightPlayer_Item.Set // (Final|Native|Public|BlueprintCallable) // @ game+0
	void QTESkillChange(__int32 QTEID, enum class EQTESkillCastableType QTECastable); // Function /Script/Game.FightPlayer_Item.QTESkillChange // (Final|Native|Public) // @ game+0
	void PlayPresentAnim(bool bPresent); // Function /Script/Game.FightPlayer_Item.PlayPresentAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayEffect(enum class EPlayerItemEffectType InEffectType, bool bQTEEndSwitchBack); // Function /Script/Game.FightPlayer_Item.PlayEffect // (Event|Public|BlueprintEvent) // @ game+0
	void OnReleasedSkill(); // Function /Script/Game.FightPlayer_Item.OnReleasedSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnReduceCD(); // Function /Script/Game.FightPlayer_Item.OnReduceCD // (Event|Public|BlueprintEvent) // @ game+0
	void OnPressedSkill(); // Function /Script/Game.FightPlayer_Item.OnPressedSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnNotNormalSwitch(bool bNotNormalSwitch); // Function /Script/Game.FightPlayer_Item.OnNotNormalSwitch // (Event|Public|BlueprintEvent) // @ game+0
	void OnHPChange(float Current, float Max, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.FightPlayer_Item.OnHPChange // (Final|Native|Public) // @ game+0
	void OnClickPlayer(); // Function /Script/Game.FightPlayer_Item.OnClickPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnChargeTimesChange(__int32 InCurrentTimes, __int32 InMaxTimes); // Function /Script/Game.FightPlayer_Item.OnChargeTimesChange // (Event|Public|BlueprintEvent) // @ game+0
	void OnCastableTypeChange(__int32 InIndex, __int32 InID, enum class ESkillCastableType InType, bool bAutoCastCheck, __int32 DelegateCastIndex); // Function /Script/Game.FightPlayer_Item.OnCastableTypeChange // (Final|Native|Public) // @ game+0
	void OnBackSkillPress(bool bPress); // Function /Script/Game.FightPlayer_Item.OnBackSkillPress // (Event|Public|BlueprintEvent) // @ game+0
	void OnAppliedModifierChange(__int32 InModifierID, bool IsApply); // Function /Script/Game.FightPlayer_Item.OnAppliedModifierChange // (Final|Native|Public) // @ game+0
	void NotifyUpdateUseReviveCD(bool InShow); // Function /Script/Game.FightPlayer_Item.NotifyUpdateUseReviveCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyReviveCdOK(); // Function /Script/Game.FightPlayer_Item.NotifyReviveCdOK // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void NotifyRefreshCharacter(); // Function /Script/Game.FightPlayer_Item.NotifyRefreshCharacter // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void NotifyDataChange(); // Function /Script/Game.FightPlayer_Item.NotifyDataChange // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void NotifyClick(enum class EPlayerBtnType BtnType); // Function /Script/Game.FightPlayer_Item.NotifyClick // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void K2_PlaySwitchCDAnim(bool bPlay); // Function /Script/Game.FightPlayer_Item.K2_PlaySwitchCDAnim // (Event|Public|BlueprintEvent) // @ game+0
	void K2_PlaySustainAnim(bool bPlayAnim); // Function /Script/Game.FightPlayer_Item.K2_PlaySustainAnim // (Event|Public|BlueprintEvent) // @ game+0
	void K2_NormalEnergyChange(bool bFull); // Function /Script/Game.FightPlayer_Item.K2_NormalEnergyChange // (Event|Public|BlueprintEvent) // @ game+0
	__int32 GetIndex(); // Function /Script/Game.FightPlayer_Item.GetIndex // (Final|Native|Public|Const) // @ game+0
	struct AGameCharacter* GetCacheCharacter(); // Function /Script/Game.FightPlayer_Item.GetCacheCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.FightSkillAim
// Size: 0x0 (Inherited: 0x0)
struct UFightSkillAim : UUserWidget {
	float Padding_f; // 0x0(0x0)
	char pad_27C[0x14]; // 0x0(0x0)
	struct UWidget* RD; // 0x0(0x0)
	struct UWidget* LD; // 0x0(0x0)
	struct UWidget* RU; // 0x0(0x0)
	struct UWidget* LU; // 0x0(0x0)
	char pad_2B0[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.FightModifierSpecialSignaItem
// Size: 0x0 (Inherited: 0x0)
struct UFightModifierSpecialSignaItem : UUserWidget {
	char pad_278[0x8]; // 0x0(0x0)
	struct AGameCharacter* TargetCharacter; // 0x0(0x0)
	struct UAbilityComponentBase* Target; // 0x0(0x0)
	__int32 ModifierID; // 0x0(0x0)
	char pad_294[0x4]; // 0x0(0x0)
	struct FBoneResult ApplyBoneInfo; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)

	void TriggerEvent(struct FName EventName); // Function /Script/Game.FightModifierSpecialSignaItem.TriggerEvent // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void SetTarget(struct AGameCharacter* InCharacter, struct FBoneResult& InApplyBoneInfo, bool bImmediately); // Function /Script/Game.FightModifierSpecialSignaItem.SetTarget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool CanEndPlay(); // Function /Script/Game.FightModifierSpecialSignaItem.CanEndPlay // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightModifierSpecialSigna
// Size: 0x0 (Inherited: 0x0)
struct UFightModifierSpecialSigna : UUserWidget {
	struct TMap<struct FName, struct FFightModifierSpecialSignaData> AllSpecialSigna; // 0x0(0x0)
	struct UCanvasPanel* TmpRoot; // 0x0(0x0)

	void TriggerSpecialWidgetEvent(struct AGameCharacter* InCharacter, struct FSoftClassPath InWidget, struct FBoneResult& InBoneInfo, struct FName EventName); // Function /Script/Game.FightModifierSpecialSigna.TriggerSpecialWidgetEvent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UFightModifierSpecialSignaItem* ShowSpecialWidget(struct AGameCharacter* InCharacter, struct FSoftClassPath InWidget, struct FBoneResult& InBoneInfo); // Function /Script/Game.FightModifierSpecialSigna.ShowSpecialWidget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void HideSpecialWidget(struct AGameCharacter* InCharacter, struct FSoftClassPath InWidget, struct FBoneResult& InBoneInfo, bool bImmediately); // Function /Script/Game.FightModifierSpecialSigna.HideSpecialWidget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UFightModifierSpecialSigna* GetSpecialSigna(struct UObject* WorldContextObject); // Function /Script/Game.FightModifierSpecialSigna.GetSpecialSigna // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.FightStorageSkillTips
// Size: 0x0 (Inherited: 0x0)
struct UFightStorageSkillTips : UUserWidget {
	struct FSoftClassPath ItemWidgetPath; // 0x0(0x0)
	struct UPanelWidget* MyContainer; // 0x0(0x0)
};

 // Class /Script/Game.FightStorageSkillTipsItem
// Size: 0x0 (Inherited: 0x0)
struct UFightStorageSkillTipsItem : UUserWidget {
	struct UWidget* WidgetSkillPanel; // 0x0(0x0)
	struct TWeakObjectPtr<struct AActor> BindActor; // 0x0(0x0)
	bool bStartWarning; // 0x0(0x0)
	char pad_289[0x3]; // 0x0(0x0)
	float TotalTime; // 0x0(0x0)
	bool bEnding; // 0x0(0x0)
	bool bUse; // 0x0(0x0)
	char pad_292[0x6]; // 0x0(0x0)

	void ReceiveDirectionWarning(bool IsWarning, float InTotalTime, bool bStart); // Function /Script/Game.FightStorageSkillTipsItem.ReceiveDirectionWarning // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightTeammateWidget
// Size: 0x0 (Inherited: 0x0)
struct UFightTeammateWidget : ULuaWidget {
	__int64 PlayerRoleId; // 0x0(0x0)
	struct AGameCharacter* MyCharacter; // 0x0(0x0)
	float MaxInterval; // 0x0(0x0)
	float LowHPLimit; // 0x0(0x0)
	struct UImage* HpImg; // 0x0(0x0)
	struct UProgressBar* BarHp; // 0x0(0x0)
	struct UProgressBar* BarOnline; // 0x0(0x0)
	char pad_2E0[0x10]; // 0x0(0x0)
	struct AGamePlayerState* MyPlayerState; // 0x0(0x0)

	void SetPlayerRoleId(__int64 InID); // Function /Script/Game.FightTeammateWidget.SetPlayerRoleId // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyPingValueChange(__int32 InPing); // Function /Script/Game.FightTeammateWidget.NotifyPingValueChange // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void NotifyOnlineStateChange(bool InIsOnline); // Function /Script/Game.FightTeammateWidget.NotifyOnlineStateChange // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void NotifyLowHpStateChanged(bool InIsLowHP); // Function /Script/Game.FightTeammateWidget.NotifyLowHpStateChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void NotifyCharacterChange(struct AGameCharacter* InCharacter); // Function /Script/Game.FightTeammateWidget.NotifyCharacterChange // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void NotifyAliveStateChange(bool InIsAlive); // Function /Script/Game.FightTeammateWidget.NotifyAliveStateChange // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	struct AGamePlayerState* GetPlayerState(); // Function /Script/Game.FightTeammateWidget.GetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FightTickWidgetInterface
// Size: 0x0 (Inherited: 0x0)
struct UFightTickWidgetInterface : UInterface {
};

 // Class /Script/Game.FightUMGSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UFightUMGSubsystem : UWorldSubsystem {
	struct FFightPopUIMgr PopUIMgr; // 0x0(0x0)
	char pad_290[0x10]; // 0x0(0x0)

	void SetUIData(enum class EUIDialogueType InType, struct UUserWidget* InUserWidget, struct UCanvasPanel* InPanel); // Function /Script/Game.FightUMGSubsystem.SetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnUserWidgetDestroyDelegate(struct UUserWidget* InUserWidget); // Function /Script/Game.FightUMGSubsystem.OnUserWidgetDestroyDelegate // (Final|Native|Private) // @ game+0
	void OnUserWidgetCreateDelegate(struct UUserWidget* InUserWidget); // Function /Script/Game.FightUMGSubsystem.OnUserWidgetCreateDelegate // (Final|Native|Private) // @ game+0
	void NotifyCloseUI(struct UObject* WorldContextObject, enum class EUIDialogueType InType); // Function /Script/Game.FightUMGSubsystem.NotifyCloseUI // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ApplyOpenHandler(struct UObject* WorldContextObject, enum class EUIDialogueType InType, __int32 InID, struct FDelegate OnPlotEndHandler); // Function /Script/Game.FightUMGSubsystem.ApplyOpenHandler // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ApplyOpen(enum class EUIDialogueType InType, struct FString InID, struct FString InParam); // Function /Script/Game.FightUMGSubsystem.ApplyOpen // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FightWidget
// Size: 0x0 (Inherited: 0x0)
struct UFightWidget : ULuaWidget {
	struct TMap<enum class EAimAssistLevel, float> AimAssistLevelMap; // 0x0(0x0)
	struct TMap<enum class EAimAssistLevel, float> NormalAssistLevelMap; // 0x0(0x0)
	float Factor; // 0x0(0x0)
	struct FVector2D BaseSpeed; // 0x0(0x0)
	struct FVector2D NormalRot_A; // 0x0(0x0)
	struct FVector2D NormalRot_B; // 0x0(0x0)
	struct FVector2D NormalRot_C; // 0x0(0x0)
	struct FVector2D AimRot_A; // 0x0(0x0)
	struct FVector2D AimRot_B; // 0x0(0x0)
	struct FVector2D AimRot_C; // 0x0(0x0)
	float SpeedThreshold; // 0x0(0x0)
	float SpeedThresholdAim; // 0x0(0x0)
	float SlideThreshold; // 0x0(0x0)
	float DisThreshold; // 0x0(0x0)
	float TimeThreshold; // 0x0(0x0)
	struct UButton* BtnGM; // 0x0(0x0)
	bool bHideUI; // 0x0(0x0)
	char pad_3A9[0x7]; // 0x0(0x0)
	struct UPlayerHp* HP; // 0x0(0x0)
	struct UProgressBar* TempShieldProgress; // 0x0(0x0)
	struct UWidget* Temp_hp_low; // 0x0(0x0)
	struct UFightCross* CrossWidget; // 0x0(0x0)
	struct USkillPanel* TempSkillPanel; // 0x0(0x0)
	struct UFightPower* TmpPower; // 0x0(0x0)
	struct UFightTime* TmpTime; // 0x0(0x0)
	struct UFightMonsterTips* TmpTips; // 0x0(0x0)
	struct TMap<enum class ESensitivityType, float> SensitivityMap; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, bool> CharacterBurstType; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, bool> CharacterLowHPType; // 0x0(0x0)
	struct UWidget* TmpDisarm; // 0x0(0x0)
	struct UWidget* TmpCross; // 0x0(0x0)
	char pad_4F0[0x28]; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameTaskActor> TaskActor; // 0x0(0x0)
	char pad_520[0x8]; // 0x0(0x0)
	struct UProgressBar* SuddenProgressBar; // 0x0(0x0)
	struct ULuaWidget* TempSudden; // 0x0(0x0)
	char pad_538[0x8]; // 0x0(0x0)

	void UpdateControl(); // Function /Script/Game.FightWidget.UpdateControl // (Native|Event|Public|BlueprintEvent) // @ game+0
	void ToggleModifyState(); // Function /Script/Game.FightWidget.ToggleModifyState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SuddenUpdate(float InDeltaTime); // Function /Script/Game.FightWidget.SuddenUpdate // (Final|Native|Public) // @ game+0
	void ShowSkillSelector(__int32 SkillIndex); // Function /Script/Game.FightWidget.ShowSkillSelector // (Native|Event|Public|BlueprintEvent) // @ game+0
	void ShowOrHideCross(bool bShow); // Function /Script/Game.FightWidget.ShowOrHideCross // (Event|Public|BlueprintEvent) // @ game+0
	void SetSuddenBarParam(__int32 CurValue, __int32 SuperiorValue, bool InForce); // Function /Script/Game.FightWidget.SetSuddenBarParam // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetFireCanDrag(__int32 InValue); // Function /Script/Game.FightWidget.SetFireCanDrag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetAimCanDrag(__int32 InValue); // Function /Script/Game.FightWidget.SetAimCanDrag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void OnSettingChange(__int32 InSID, __int32 InType, __int32 InValue); // Function /Script/Game.FightWidget.OnSettingChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnPlayHpLowAnim(bool bPlay); // Function /Script/Game.FightWidget.OnPlayHpLowAnim // (Event|Public|BlueprintEvent) // @ game+0
	void OnCrossAndDotAnim(bool bMode); // Function /Script/Game.FightWidget.OnCrossAndDotAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void HideSkillSelector(__int32 SkillIndex); // Function /Script/Game.FightWidget.HideSkillSelector // (Native|Event|Public|BlueprintEvent) // @ game+0
	struct UFightMonsterTips* GetTipsInstance(struct UWorld* InWorld); // Function /Script/Game.FightWidget.GetTipsInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AGameTaskActor* GetTaskActor(); // Function /Script/Game.FightWidget.GetTaskActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UFightWidget* GetInstance(struct UWorld* InWorld); // Function /Script/Game.FightWidget.GetInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetFightPartShow(enum class EFightWidgetPart InPart); // Function /Script/Game.FightWidget.GetFightPartShow // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FightTime
// Size: 0x0 (Inherited: 0x0)
struct UFightTime : UUserWidgetAnimation {
	struct UTextBlock* TxtTime; // 0x0(0x0)
	struct FSlateColor TxtOldColor; // 0x0(0x0)
	__int32 RedTime; // 0x0(0x0)
	struct FLinearColor TxtColor; // 0x0(0x0)
	char pad_304[0xC]; // 0x0(0x0)
	struct AGameTaskActor* CurrentTaskActor; // 0x0(0x0)

	void SetTaskActor(struct AActor* TaskActor); // Function /Script/Game.FightTime.SetTaskActor // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FightPower
// Size: 0x0 (Inherited: 0x0)
struct UFightPower : UUserWidgetAnimation {
	struct UWidgetAnimation* NotEnough; // 0x0(0x0)
	struct UProgressBar* TmpBarPower; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> Pawn; // 0x0(0x0)
	struct UHorizontalBox* TmpPanelPowerMark; // 0x0(0x0)
	struct FSoftClassPath PowerMarkPath; // 0x0(0x0)
	float PowerEachMarkCount; // 0x0(0x0)
	char pad_2FC[0x14]; // 0x0(0x0)

	void OnPowerTimeStrengthening(bool bStart); // Function /Script/Game.FightPower.OnPowerTimeStrengthening // (Event|Public|BlueprintEvent) // @ game+0
	void OnPowerStrengthening(bool bStart, float Start, float End); // Function /Script/Game.FightPower.OnPowerStrengthening // (Event|Public|BlueprintEvent) // @ game+0
	void OnAppliedModifierChange(__int32 ModifierID, bool IsApply); // Function /Script/Game.FightPower.OnAppliedModifierChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void K2_PlayAnim(float InValue); // Function /Script/Game.FightPower.K2_PlayAnim // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FireBullet
// Size: 0x0 (Inherited: 0x0)
struct AFireBullet : ABullet {
	float ShakeMaxValidDistance; // 0x0(0x0)
	bool bAttenuation; // 0x0(0x0)
	char pad_875[0x1B]; // 0x0(0x0)

	struct AFireBullet* FireSpawnDeferred(struct AActor* lpOwner, struct UWeaponAbiliityComponent* AccessoryAbility, struct FVector& nStartPosition, struct FVector& nShootDirection, __int32 BulletID, struct FString InBulletPath); // Function /Script/Game.FireBullet.FireSpawnDeferred // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FishingComponent
// Size: 0x0 (Inherited: 0x0)
struct UFishingComponent : UActorComponent {
	struct UAnimInstance* AnimLinkLayerClass; // 0x0(0x0)
	struct FSoftClassPath FishingRodClass; // 0x0(0x0)
	struct FSoftClassPath BuoysClass; // 0x0(0x0)
	struct FName FishingRodTipBoneName; // 0x0(0x0)
	float BuoysSpawnDelay; // 0x0(0x0)
	float PreBattleDelay; // 0x0(0x0)
	float BuoysFlyingDuration; // 0x0(0x0)
	float FishBattleRadius_Horizontal; // 0x0(0x0)
	float FishBattleRadius_Vertical; // 0x0(0x0)
	float PreFishBattleRadius_Vertical; // 0x0(0x0)
	struct FName FishingThrowSectionName; // 0x0(0x0)
	struct FName FishingPullStartSectionName; // 0x0(0x0)
	struct FName FishingPullEndSectionName; // 0x0(0x0)
	struct UParticleSystem* EmitterTemplate_EnterWater; // 0x0(0x0)
	struct UParticleSystem* EmitterTemplate_Wait; // 0x0(0x0)
	struct UParticleSystem* EmitterTemplate_PreBattle; // 0x0(0x0)
	struct UParticleSystem* EmitterTemplate_Battle; // 0x0(0x0)
	struct UParticleSystem* EmitterTemplate_Pull; // 0x0(0x0)
	float WaitBattleEmitterCoolDown; // 0x0(0x0)
	float PreBattleEmitterCoolDown; // 0x0(0x0)
	float BattleEmitterCoolDown; // 0x0(0x0)
	float BuoysFlyControlHeight; // 0x0(0x0)
	struct ACharacterAccessory* FishingRodActor; // 0x0(0x0)
	struct AActor* BuoysActor; // 0x0(0x0)
	struct AGameCharacter* Owner; // 0x0(0x0)
	struct UCurveSequenceControllerAnimInstance* MainAnimInstance; // 0x0(0x0)
	struct UAnimInstance_Fishing* FishingAnimInstance; // 0x0(0x0)
	bool FishingSpotOnGround; // 0x0(0x0)
	char pad_181[0x3]; // 0x0(0x0)
	struct FVector BuoysFlyStartPos; // 0x0(0x0)
	struct FVector BuoysFlyControlPos; // 0x0(0x0)
	struct FVector BuoysGroundSpot; // 0x0(0x0)
	struct FVector ThrowControlPos; // 0x0(0x0)
	struct FVector ThrowStartPos; // 0x0(0x0)
	struct FVector CurBattlePos; // 0x0(0x0)
	struct FVector TargetBattlePos; // 0x0(0x0)
	float BuoysFlyingElpsedTime; // 0x0(0x0)
	float BuoysEmitterSpawnElpsedTime; // 0x0(0x0)
	bool bBuoysFlyingUpdating; // 0x0(0x0)
	bool bBuoysLineUpdating; // 0x0(0x0)
	bool bFishBattling; // 0x0(0x0)
	bool bPreFishBattling; // 0x0(0x0)
	char pad_1E4[0x4]; // 0x0(0x0)
	struct FTimerHandle BuoysSpawnHandle; // 0x0(0x0)
	struct FTimerHandle FishingPreBattleHandle; // 0x0(0x0)
	enum class EFishingEvent CurEvent; // 0x0(0x0)
	char pad_1F9[0x7]; // 0x0(0x0)
	struct UParticleSystemComponent* WaitEmitterHandle; // 0x0(0x0)

	void SetFishingSpot(struct FVector InFishingSpot); // Function /Script/Game.FishingComponent.SetFishingSpot // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void OnFishingEvent(enum class EFishingEvent NewEvent); // Function /Script/Game.FishingComponent.OnFishingEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FlyBird
// Size: 0x0 (Inherited: 0x0)
struct AFlyBird : AActor {
	struct FFlyBirdConfig MoveConfig; // 0x0(0x0)
	struct UCapsuleComponent* Capsule; // 0x0(0x0)
	struct USkeletalMeshComponent* MeshCom; // 0x0(0x0)
	char pad_250[0x4]; // 0x0(0x0)
	float DecryptAnimTime; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGamePlayerController> Target; // 0x0(0x0)
	bool InDecrypt; // 0x0(0x0)
	char pad_261[0x1B]; // 0x0(0x0)
	struct FVector Velocity; // 0x0(0x0)
	char pad_288[0x8]; // 0x0(0x0)

	void SetFollowTarget(struct AGamePlayerController* InTarget); // Function /Script/Game.FlyBird.SetFollowTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayerDecryptAnim(); // Function /Script/Game.FlyBird.PlayerDecryptAnim // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void OnDecrypt(struct FVector WorldPos); // Function /Script/Game.FlyBird.OnDecrypt // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0
	void OnAttachTarget(); // Function /Script/Game.FlyBird.OnAttachTarget // (Event|Public|BlueprintEvent) // @ game+0
	void AttachTarget(); // Function /Script/Game.FlyBird.AttachTarget // (Final|Native|Protected|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FogActor
// Size: 0x0 (Inherited: 0x0)
struct AFogActor : AActor {
	struct UMaterialParameterCollection* sceneParameter; // 0x0(0x0)
	struct UMaterialParameterCollection* FxParameter; // 0x0(0x0)
	float FogDensity; // 0x0(0x0)
	float FogHeightFalloff; // 0x0(0x0)
	struct FLinearColor FogInscatteringColor; // 0x0(0x0)
	float FogMaxOpacity; // 0x0(0x0)
	float StartDistance; // 0x0(0x0)
	float FogCutoffDistance; // 0x0(0x0)
	float DirectionalInscatteringExponent; // 0x0(0x0)
	float DirectionalInscatteringStartDistance; // 0x0(0x0)
	struct FLinearColor DirectionalInscatteringColor; // 0x0(0x0)
	struct FVector InscatteringLightDirection; // 0x0(0x0)
	float ViewOriginZ; // 0x0(0x0)
	char pad_27C[0x4]; // 0x0(0x0)

	bool UpdateFogParameter(struct UMaterialInstanceDynamic* mat); // Function /Script/Game.FogActor.UpdateFogParameter // (Final|Native|Protected|BlueprintCallable) // @ game+0
	void SetPPEnable(bool Value); // Function /Script/Game.FogActor.SetPPEnable // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FollowSocketComponent
// Size: 0x0 (Inherited: 0x0)
struct UFollowSocketComponent : USceneComponent {
};

 // Class /Script/Game.FollowLeaderComponent
// Size: 0x0 (Inherited: 0x0)
struct UFollowLeaderComponent : UActorComponent {
	char pad_B0[0x18]; // 0x0(0x0)
	struct TArray<struct UFollowSocketComponent*> Sockets; // 0x0(0x0)
};

 // Class /Script/Game.FormationActor
// Size: 0x0 (Inherited: 0x0)
struct AFormationActor : AActor {
	struct USceneComponent* P_1; // 0x0(0x0)
	struct USceneComponent* P_2; // 0x0(0x0)
	struct USceneComponent* P_3; // 0x0(0x0)
	struct TMap<__int32, struct TWeakObjectPtr<struct APreviewActor>> CacheModel; // 0x0(0x0)

	void Update(__int32 InIndex, __int64 InID); // Function /Script/Game.FormationActor.Update // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetData(__int64 InID1, __int64 InID2, __int64 InID3); // Function /Script/Game.FormationActor.SetData // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LoadComplete(__int64 InID); // Function /Script/Game.FormationActor.LoadComplete // (Final|Native|Private) // @ game+0
	void ChangePos(__int32 Idx1, __int32 Idx2); // Function /Script/Game.FormationActor.ChangePos // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.FurnitureInteractPos
// Size: 0x0 (Inherited: 0x0)
struct AFurnitureInteractPos : AActor {
	struct UCapsuleComponent* Capsule; // 0x0(0x0)
	struct AHouseFurnitureSpawner* spawner; // 0x0(0x0)
	struct AHouseAIController* AIController; // 0x0(0x0)
};

 // Class /Script/Game.HouseFurnitureSpawner
// Size: 0x0 (Inherited: 0x0)
struct AHouseFurnitureSpawner : AActor {
	struct UCapsuleComponent* Capsule; // 0x0(0x0)
	__int32 AreaId; // 0x0(0x0)
	__int32 GroupId; // 0x0(0x0)
	__int32 FurnitureTmpId; // 0x0(0x0)
	bool bDefaultHad; // 0x0(0x0)
	char pad_235[0x3]; // 0x0(0x0)
	struct AFurnitureInteractPos* InteractPos; // 0x0(0x0)
	struct AHouseFurnitureBase* SpawnedFurniture; // 0x0(0x0)

	void CheckNeedSpawn(bool FromGift); // Function /Script/Game.HouseFurnitureSpawner.CheckNeedSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckNeedPlayCameraAnim(); // Function /Script/Game.HouseFurnitureSpawner.CheckNeedPlayCameraAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckHasFurniture(); // Function /Script/Game.HouseFurnitureSpawner.CheckHasFurniture // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GachaActor
// Size: 0x0 (Inherited: 0x0)
struct AGachaActor : AActor {
};

 // Class /Script/Game.AbilityAttribute
// Size: 0x0 (Inherited: 0x0)
struct UAbilityAttribute : UPrimaryDataAsset {
	char pad_30[0x4]; // 0x0(0x0)
	enum class EAttributeValueType ValueType; // 0x0(0x0)
	enum class EAttributeAttachType AttachType; // 0x0(0x0)
	char bUseMinValue : 1; // 0x0(0x0)
	char pad_36_1 : 7; // 0x0(0x0)
	char pad_37[0x1]; // 0x0(0x0)
	float MinValue; // 0x0(0x0)
	char bUseMaxValue : 1; // 0x0(0x0)
	char pad_3C_1 : 7; // 0x0(0x0)
	char pad_3D[0x3]; // 0x0(0x0)
	float MaxValue; // 0x0(0x0)
	float defaultvalue; // 0x0(0x0)
	char bExistCurrentAndMax : 1; // 0x0(0x0)
	char bIsVirtualAttribute : 1; // 0x0(0x0)
	char bIsReplicated : 1; // 0x0(0x0)
	char pad_48_3 : 5; // 0x0(0x0)
	char Level; // 0x0(0x0)
	char pad_4A[0x2]; // 0x0(0x0)
	float MaxTime; // 0x0(0x0)
	bool bKeepUpdatingNetUpdateInterval; // 0x0(0x0)
	char pad_51[0x3]; // 0x0(0x0)
	float NetUpdateInterval; // 0x0(0x0)

	float K2_GetTempAttributeValue(struct UGameAbilityComponent* GameAbility); // Function /Script/Game.AbilityAttribute.K2_GetTempAttributeValue // (Event|Protected|BlueprintEvent|Const) // @ game+0
	float K2_GetMaxAttributeValue(struct UGameAbilityComponent* GameAbility); // Function /Script/Game.AbilityAttribute.K2_GetMaxAttributeValue // (Event|Protected|BlueprintEvent|Const) // @ game+0
	float K2_GetCurrentValue(struct UGameAbilityComponent* GameAbility); // Function /Script/Game.AbilityAttribute.K2_GetCurrentValue // (Event|Protected|BlueprintEvent|Const) // @ game+0
	float K2_GetBaseValue(struct UGameAbilityComponent* GameAbility); // Function /Script/Game.AbilityAttribute.K2_GetBaseValue // (Event|Protected|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.VirtualAttribute
// Size: 0x0 (Inherited: 0x0)
struct UVirtualAttribute : UAbilityAttribute {
	struct TArray<struct FSourceAbilityAttribute> SourceAbilityAttribute; // 0x0(0x0)
	char pad_68[0x20]; // 0x0(0x0)

	struct AGameCharacter* GetGameCharacter(); // Function /Script/Game.VirtualAttribute.GetGameCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetAttributeValue(struct FSourceAbilityAttribute& AbilityAttribute); // Function /Script/Game.VirtualAttribute.GetAttributeValue // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetAttributeTempValue(struct FSourceAbilityAttribute& AbilityAttribute); // Function /Script/Game.VirtualAttribute.GetAttributeTempValue // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetAttributeMaxValue(struct FSourceAbilityAttribute& AbilityAttribute); // Function /Script/Game.VirtualAttribute.GetAttributeMaxValue // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetAttributeBaseValue(struct FSourceAbilityAttribute& AbilityAttribute); // Function /Script/Game.VirtualAttribute.GetAttributeBaseValue // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.VirtualAttribute_TrapOwner
// Size: 0x0 (Inherited: 0x0)
struct UVirtualAttribute_TrapOwner : UVirtualAttribute {
};

 // Class /Script/Game.MaxAttribute
// Size: 0x0 (Inherited: 0x0)
struct UMaxAttribute : UAbilityAttribute {
	struct UAbilityAttribute* SourceAbilityAttribute; // 0x0(0x0)
};

 // Class /Script/Game.AbilityAttributeSettings
// Size: 0x0 (Inherited: 0x0)
struct UAbilityAttributeSettings : UObject {
	struct TArray<struct FSoftObjectPath> DefaultAbilityAttributeSetting; // 0x0(0x0)
	struct TArray<struct UAbilityAttribute*> DefaultAbilityAttributes; // 0x0(0x0)
	struct TMap<struct FString, struct UAbilityAttribute*> AllSettingAbilityAttributes; // 0x0(0x0)
};

 // Class /Script/Game.RecordSkillCostBuffer
// Size: 0x0 (Inherited: 0x0)
struct URecordSkillCostBuffer : UGameAbilityBuffer {
	char pad_D0[0x50]; // 0x0(0x0)

	void GetAllRecordSkillCostInfo(struct TArray<struct FRecordSkillCostStruct>& OutRecordInfo); // Function /Script/Game.RecordSkillCostBuffer.GetAllRecordSkillCostInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.OverrideEmitterBuffer
// Size: 0x0 (Inherited: 0x0)
struct UOverrideEmitterBuffer : UGameAbilityBuffer {
	struct FMulticastInlineDelegate OnOverrideSttingsAdd; // 0x0(0x0)
	struct FMulticastInlineDelegate OnOverrideSttingsRemove; // 0x0(0x0)
	char pad_F0[0x10]; // 0x0(0x0)

	void RemoveOverrideSetting(__int32 TargetEmitterID, __int32 OverrideEmitterID); // Function /Script/Game.OverrideEmitterBuffer.RemoveOverrideSetting // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnOverrideSettingUpdate__DelegateSignature(__int32 TargetId, __int32 OverrideID); // DelegateFunction /Script/Game.OverrideEmitterBuffer.OnOverrideSettingUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void AddOverrideSetting(__int32 TargetEmitterID, __int32 OverrideEmitterID); // Function /Script/Game.OverrideEmitterBuffer.AddOverrideSetting // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameChainBuffer
// Size: 0x0 (Inherited: 0x0)
struct UGameChainBuffer : UCustomGameAbilityBuffer {
	struct FVector2D DistanceRange; // 0x0(0x0)
	float DelayEffect; // 0x0(0x0)
	char pad_E4[0x4]; // 0x0(0x0)
	struct TArray<__int32> ModiferId; // 0x0(0x0)
	struct TArray<__int32> ContinuousModiferId; // 0x0(0x0)
	struct FName LineSocketName; // 0x0(0x0)
	struct FVector2D PressureValue; // 0x0(0x0)
	struct FVector2D DelayTime; // 0x0(0x0)
	float BreakDistance; // 0x0(0x0)
	float InjuryInfectionDeleyTime; // 0x0(0x0)
	struct FString AddNextBufferSound; // 0x0(0x0)
	__int32 LimitMaxCount; // 0x0(0x0)
	char pad_13C[0x4]; // 0x0(0x0)
	struct TArray<__int32> ContinuousModiferRuntimeId; // 0x0(0x0)
	struct UGameChainBuffer* PreChainBuffer; // 0x0(0x0)
	struct UGameChainBuffer* NextChainBuffer; // 0x0(0x0)
	char pad_160[0x8]; // 0x0(0x0)
	struct TArray<struct FParamInfo> BufferInfo; // 0x0(0x0)
	char pad_178[0x8]; // 0x0(0x0)

	void SpawnLineRayEffect(struct FSoftObjectPath& RayPath); // Function /Script/Game.GameChainBuffer.SpawnLineRayEffect // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void RefreshInfectTime(); // Function /Script/Game.GameChainBuffer.RefreshInfectTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RefreshActiveTime(); // Function /Script/Game.GameChainBuffer.RefreshActiveTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnReceiveDamage(struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.GameChainBuffer.OnReceiveDamage // (Final|Native|Public|HasOutParms) // @ game+0
	void OnDead(bool bDead, struct UAbilityComponentBase* InLauncher, struct FHealthChangeValue& nChangeValueData); // Function /Script/Game.GameChainBuffer.OnDead // (Final|Native|Public|HasOutParms) // @ game+0
	void OnByBulletHit(struct ABullet* InBullet, struct FHitResult& HitResult); // Function /Script/Game.GameChainBuffer.OnByBulletHit // (Final|Native|Public|HasOutParms) // @ game+0
	struct FVector GetBuffetLocation(struct UGameChainBuffer* InBuffer, struct FName InSocket); // Function /Script/Game.GameChainBuffer.GetBuffetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<struct UGameChainBuffer*> GetAllChainBuffer(); // Function /Script/Game.GameChainBuffer.GetAllChainBuffer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void BP_SpawnLineEffect(); // Function /Script/Game.GameChainBuffer.BP_SpawnLineEffect // (Event|Public|BlueprintEvent) // @ game+0
	void BP_OnReceiveDamage(struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.GameChainBuffer.BP_OnReceiveDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void BP_OnInfectBulletHit(__int32 InBulletID); // Function /Script/Game.GameChainBuffer.BP_OnInfectBulletHit // (Event|Public|BlueprintEvent) // @ game+0
	void BP_OnDead(); // Function /Script/Game.GameChainBuffer.BP_OnDead // (Event|Public|BlueprintEvent) // @ game+0
	void BP_OnByBulletHit(__int32 InBulletID); // Function /Script/Game.GameChainBuffer.BP_OnByBulletHit // (Event|Public|BlueprintEvent) // @ game+0
	void BP_InfectOnReceiveDamage(struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.GameChainBuffer.BP_InfectOnReceiveDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void BP_DestoryLineEffect(struct FVector InStart, struct FVector InEnd); // Function /Script/Game.GameChainBuffer.BP_DestoryLineEffect // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void BP_ActiveEffect(bool bAddNew); // Function /Script/Game.GameChainBuffer.BP_ActiveEffect // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.ReplaceAssetBuffer
// Size: 0x0 (Inherited: 0x0)
struct UReplaceAssetBuffer : UGameAbilityBuffer {
	struct FString ReplaceType; // 0x0(0x0)
	struct FSoftObjectPath AssetPath; // 0x0(0x0)
	struct FString AssetPathStr; // 0x0(0x0)
};

 // Class /Script/Game.RageValueUpdateBuffer
// Size: 0x0 (Inherited: 0x0)
struct URageValueUpdateBuffer : UCustomGameAbilityBuffer {
	struct UCurveFloat* ValueCurve; // 0x0(0x0)
	struct AGameCharacter* LockTarget; // 0x0(0x0)
	bool bInAim; // 0x0(0x0)
	char pad_E9[0x3]; // 0x0(0x0)
	float MaxStorageTime; // 0x0(0x0)
	float CurrentStorageTime; // 0x0(0x0)
	char pad_F4[0x4]; // 0x0(0x0)

	void K2_OnLockTargetChange(struct AActor* NewLockActor); // Function /Script/Game.RageValueUpdateBuffer.K2_OnLockTargetChange // (Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.DamageModifyBuffer
// Size: 0x0 (Inherited: 0x0)
struct UDamageModifyBuffer : UGameAbilityBuffer {
	char pad_D0[0x8]; // 0x0(0x0)

	float K2_ModifyDamageScalerToOthers(struct FHealthChangeValue& ChangeValueData); // Function /Script/Game.DamageModifyBuffer.K2_ModifyDamageScalerToOthers // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.AvoidFromBullet
// Size: 0x0 (Inherited: 0x0)
struct UAvoidFromBullet : UGameAbilityBuffer {
	float AvoidChance; // 0x0(0x0)
	char pad_D4[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.ImmuneInjuryBuffer
// Size: 0x0 (Inherited: 0x0)
struct UImmuneInjuryBuffer : UCustomGameAbilityBuffer {
	float ImmuneDamageValue; // 0x0(0x0)
	char pad_DC[0x4]; // 0x0(0x0)

	void SetImmuneDamageType(enum class EModifyHPType InType); // Function /Script/Game.ImmuneInjuryBuffer.SetImmuneDamageType // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsImmuneInjury(enum class EModifyHPType InDamegType, float DamageValue); // Function /Script/Game.ImmuneInjuryBuffer.IsImmuneInjury // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearImmuneDamageType(enum class EModifyHPType InType); // Function /Script/Game.ImmuneInjuryBuffer.ClearImmuneDamageType // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MarkEffectBuffer
// Size: 0x0 (Inherited: 0x0)
struct UMarkEffectBuffer : UCustomGameAbilityBuffer {
	__int32 MarkEffectBufferType; // 0x0(0x0)
	char pad_DC[0x4]; // 0x0(0x0)
	struct TArray<struct FConditionSetting> CastCondition; // 0x0(0x0)
	bool bReceiveDamageSourceIsSelfCauser; // 0x0(0x0)
	char pad_F1[0x3]; // 0x0(0x0)
	__int32 ModifierID; // 0x0(0x0)
	bool bAbilityCauserApply; // 0x0(0x0)
	char pad_F9[0x3]; // 0x0(0x0)
	__int32 MaxApplyCount; // 0x0(0x0)
	__int32 CurApplyCount; // 0x0(0x0)
	char pad_104[0x4]; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> SkillCastConditionMap; // 0x0(0x0)
	bool bDamageSourceIsSelfCauser; // 0x0(0x0)
	bool bReciveDamage; // 0x0(0x0)
	char pad_15A[0x2]; // 0x0(0x0)
	__int32 ReceiveDelegateCastIndex; // 0x0(0x0)
	__int32 ApplyDelegateCastIndex; // 0x0(0x0)
	char pad_164[0x4]; // 0x0(0x0)
	struct UAbilityComponentBase* DamageTarget; // 0x0(0x0)
	__int32 CurSkillRuntimeID; // 0x0(0x0)
	char pad_174[0x4]; // 0x0(0x0)

	void OnReceiveDamage(struct FApplyDamageResultData& DamageResult); // Function /Script/Game.MarkEffectBuffer.OnReceiveDamage // (Final|Native|Public|HasOutParms) // @ game+0
	void OnApplyDamage(struct FApplyDamageResultData& DamageResult); // Function /Script/Game.MarkEffectBuffer.OnApplyDamage // (Final|Native|Public|HasOutParms) // @ game+0
};

 // Class /Script/Game.InjuryAccumulationBuffer
// Size: 0x0 (Inherited: 0x0)
struct UInjuryAccumulationBuffer : UCustomGameAbilityBuffer {
	bool bApplyDamage; // 0x0(0x0)
	char pad_D9[0x7]; // 0x0(0x0)
	struct UAbilityAttribute* Attribute; // 0x0(0x0)
	bool bOnlyBufferCauser; // 0x0(0x0)
	enum class EModifyHPType ModifyHPType; // 0x0(0x0)
	char pad_EA[0x6]; // 0x0(0x0)
	struct TArray<struct FConditionSetting> AccumulationCondition; // 0x0(0x0)
	float MultiInjuryRecord; // 0x0(0x0)
	bool bRemoveOnUpperLimit; // 0x0(0x0)
	bool bReleaseOnlyLimit; // 0x0(0x0)
	bool bReleaseOnlyRemove; // 0x0(0x0)
	bool bReleaseOnlyTimeout; // 0x0(0x0)
	__int32 ModifierToOwner; // 0x0(0x0)
	__int32 ModifierToCauser; // 0x0(0x0)
	__int32 EndModifierToOwner; // 0x0(0x0)
	__int32 EndModifierToCauser; // 0x0(0x0)
	float InjuryAccumulation; // 0x0(0x0)
	float InjuryUpperLimit; // 0x0(0x0)
	__int32 LimitModifyType; // 0x0(0x0)
	bool bUpperLimit; // 0x0(0x0)
	char pad_125[0xB]; // 0x0(0x0)
	__int32 ReceiveDelegateCastIndex; // 0x0(0x0)
	__int32 ApplyDelegateCastIndex; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> InjuryCastConditionMap; // 0x0(0x0)
	char pad_188[0x8]; // 0x0(0x0)

	void OnDamage(struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.InjuryAccumulationBuffer.OnDamage // (Final|Native|Protected|HasOutParms) // @ game+0
	void ModifyDamage(); // Function /Script/Game.InjuryAccumulationBuffer.ModifyDamage // (Final|Native|Protected|BlueprintCallable) // @ game+0
	void K2_ModifierDamage(bool InUpperLimit); // Function /Script/Game.InjuryAccumulationBuffer.K2_ModifierDamage // (Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.InVisibleBuffer
// Size: 0x0 (Inherited: 0x0)
struct UInVisibleBuffer : UCustomGameAbilityBuffer {
	float DamageScaler; // 0x0(0x0)
	__int32 BreakAppluModifierID; // 0x0(0x0)

	void OnNotifyPlayerAction(struct AGameCharacter* CurCharacter, enum class ECharacterActionState InType, bool bSet); // Function /Script/Game.InVisibleBuffer.OnNotifyPlayerAction // (Final|Native|Public) // @ game+0
	void OnBreak(); // Function /Script/Game.InVisibleBuffer.OnBreak // (Final|Native|Public) // @ game+0
	void OnAbilityCastSkill(__int32 SkillID, struct TArray<__int32>& OriginIDs, struct UGameAbilityComponent* AbilityRef); // Function /Script/Game.InVisibleBuffer.OnAbilityCastSkill // (Final|Native|Public|HasOutParms) // @ game+0
	void BreakInvisible(enum class ECharacterActionState Type, __int32 InID); // Function /Script/Game.InVisibleBuffer.BreakInvisible // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.CriticalBaseBuffer
// Size: 0x0 (Inherited: 0x0)
struct UCriticalBaseBuffer : UCustomGameAbilityBuffer {
	char pad_D8[0x1]; // 0x0(0x0)
	bool bOnlyBufferCauser; // 0x0(0x0)
	bool bOnlyBufferTeam; // 0x0(0x0)
	char pad_DB[0x5]; // 0x0(0x0)
	struct TArray<struct FConditionSetting> Conditions; // 0x0(0x0)
	float AdditionalCritical; // 0x0(0x0)
	char pad_F4[0x4]; // 0x0(0x0)

	float K2_AdditionalCritical(); // Function /Script/Game.CriticalBaseBuffer.K2_AdditionalCritical // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.WeaponFireModifierEffect
// Size: 0x0 (Inherited: 0x0)
struct UWeaponFireModifierEffect : UCustomGameAbilityBuffer {
	bool bActiveEffect; // 0x0(0x0)
	char pad_D9[0x3]; // 0x0(0x0)
	float RandActiveRate; // 0x0(0x0)
	char pad_E0[0x4]; // 0x0(0x0)
	struct TWeakObjectPtr<struct APlayerWeapon> PlayerWeapon; // 0x0(0x0)
	char pad_EC[0x4]; // 0x0(0x0)
	struct TArray<struct UModifierSpecialEffectObject*> ModifierSpecialEffects; // 0x0(0x0)

	void SetRandomActive(float InRand); // Function /Script/Game.WeaponFireModifierEffect.SetRandomActive // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetActiveEffect(bool bActive); // Function /Script/Game.WeaponFireModifierEffect.SetActiveEffect // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnNotifyWeaponChanged(struct APlayerWeapon* InWeapon); // Function /Script/Game.WeaponFireModifierEffect.OnNotifyWeaponChanged // (Native|Public) // @ game+0
	bool IsActiveEffect(); // Function /Script/Game.WeaponFireModifierEffect.IsActiveEffect // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct APlayerWeapon* GetWeapon(); // Function /Script/Game.WeaponFireModifierEffect.GetWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckRandomActive(); // Function /Script/Game.WeaponFireModifierEffect.CheckRandomActive // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.WeaponBulletEffectBase
// Size: 0x0 (Inherited: 0x0)
struct UWeaponBulletEffectBase : UWeaponFireModifierEffect {

	void ReceiveOnWeaponFire(__int32 ForceShootCount); // Function /Script/Game.WeaponBulletEffectBase.ReceiveOnWeaponFire // (Event|Protected|BlueprintEvent) // @ game+0
	void ReceiveOnSpawnFireBullet(struct ABullet* InBullet); // Function /Script/Game.WeaponBulletEffectBase.ReceiveOnSpawnFireBullet // (Event|Protected|BlueprintEvent) // @ game+0
	void OnWeaponShootRay(__int32 FireTimeId, __int32 BulletCount); // Function /Script/Game.WeaponBulletEffectBase.OnWeaponShootRay // (Final|Native|Public) // @ game+0
	void OnWeaponFire(char ForceShootCount); // Function /Script/Game.WeaponBulletEffectBase.OnWeaponFire // (Final|Native|Public) // @ game+0
	void OnSpawnFireBullet(struct ABullet* InBullet); // Function /Script/Game.WeaponBulletEffectBase.OnSpawnFireBullet // (Final|Native|Public) // @ game+0
	void OnSpawnBullet(struct ABullet* InBullet); // Function /Script/Game.WeaponBulletEffectBase.OnSpawnBullet // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.BulletRefractionBuffer
// Size: 0x0 (Inherited: 0x0)
struct UBulletRefractionBuffer : UCustomGameAbilityBuffer {
	float RefractionProbability; // 0x0(0x0)
	struct FVector2D AngleRange; // 0x0(0x0)
	char pad_E4[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.InjuryTransmissionBase
// Size: 0x0 (Inherited: 0x0)
struct UInjuryTransmissionBase : UCustomGameAbilityBuffer {
	struct TMap<unsigned __int32, struct UCastConditionCheck*> CastConditionMap; // 0x0(0x0)

	void OnNotifyReceiveDamage(struct FPreDamageResultData& PreResultData, struct FApplyDamageResultData& Info); // Function /Script/Game.InjuryTransmissionBase.OnNotifyReceiveDamage // (Native|Public|HasOutParms) // @ game+0
	void K2_InjuryTransmission(struct UAbilityComponentBase* lpTarget, struct FPreDamageResultData& PreResultData, struct FApplyDamageResultData& Info); // Function /Script/Game.InjuryTransmissionBase.K2_InjuryTransmission // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.InjuryTransmissionSimilar
// Size: 0x0 (Inherited: 0x0)
struct UInjuryTransmissionSimilar : UCustomGameAbilityBuffer {
	struct TMap<unsigned __int32, struct UCastConditionCheck*> CastConditionMap; // 0x0(0x0)
	bool bTransmissionSelf; // 0x0(0x0)
	char pad_129[0x3]; // 0x0(0x0)
	__int32 TargetCount; // 0x0(0x0)

	void StartApplyEfffect(); // Function /Script/Game.InjuryTransmissionSimilar.StartApplyEfffect // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnNotifyReceiveDamage(struct FPreDamageResultData& PreResultData, struct FApplyDamageResultData& Info); // Function /Script/Game.InjuryTransmissionSimilar.OnNotifyReceiveDamage // (Native|Public|HasOutParms) // @ game+0
	void K2_InjuryTransmission(struct UAbilityComponentBase* lpTarget, struct FPreDamageResultData& PreResultData, struct FApplyDamageResultData& Info); // Function /Script/Game.InjuryTransmissionSimilar.K2_InjuryTransmission // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	struct TArray<struct UAbilityComponentBase*> FindTransmissionTarget(); // Function /Script/Game.InjuryTransmissionSimilar.FindTransmissionTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void ApplyEmitter(__int32 EmitterID, struct UAbilityComponentBase* lpTarget, float Scale, struct FPreDamageResultData& PreResultData, float DelayTime); // Function /Script/Game.InjuryTransmissionSimilar.ApplyEmitter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.DrawAttributeBase
// Size: 0x0 (Inherited: 0x0)
struct UDrawAttributeBase : UCustomGameAbilityBuffer {
	struct TArray<struct FAttributeChangeValue> CacheChangeValue; // 0x0(0x0)
	struct TArray<struct UAbilityAttribute*> DrawAttributes; // 0x0(0x0)
	float DrawScale; // 0x0(0x0)
	bool bRealDraw; // 0x0(0x0)
	char pad_FD[0x3]; // 0x0(0x0)
	float CauserScale; // 0x0(0x0)
	bool bKeep; // 0x0(0x0)
	char pad_105[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.Girl014aQTEEffectBase
// Size: 0x0 (Inherited: 0x0)
struct UGirl014aQTEEffectBase : UCustomGameAbilityBuffer {
	struct UGirl014aQTEEffectBase* PreBuff; // 0x0(0x0)
	struct UGirl014aQTEEffectBase* NextBuff; // 0x0(0x0)
	struct TArray<struct FName> SocketNames; // 0x0(0x0)
	struct FVector RelativeLocation; // 0x0(0x0)
	struct FRotator RelativeRotator; // 0x0(0x0)

	void K2_KillLine(struct UGirl014aQTEEffectBase* NextBuffer); // Function /Script/Game.Girl014aQTEEffectBase.K2_KillLine // (Event|Public|BlueprintEvent) // @ game+0
	void K2_DrawLine(struct UGirl014aQTEEffectBase* NextBuffer); // Function /Script/Game.Girl014aQTEEffectBase.K2_DrawLine // (Event|Public|BlueprintEvent) // @ game+0
	struct FRotator GetWorldRotation(); // Function /Script/Game.Girl014aQTEEffectBase.GetWorldRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector GetWorldLocation(); // Function /Script/Game.Girl014aQTEEffectBase.GetWorldLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.ResonanceRateChangeBuffer
// Size: 0x0 (Inherited: 0x0)
struct UResonanceRateChangeBuffer : UCustomGameAbilityBuffer {

	void K2_ResonanceRateChangeNotify(float ResonanceRate, struct UGameAbilityComponent* Pawn); // Function /Script/Game.ResonanceRateChangeBuffer.K2_ResonanceRateChangeNotify // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.DamageStatsBufferBase
// Size: 0x0 (Inherited: 0x0)
struct UDamageStatsBufferBase : UCustomGameAbilityBuffer {
	struct TMap<unsigned __int32, struct UCastConditionCheck*> CastConditionMap; // 0x0(0x0)
	bool bApply; // 0x0(0x0)
	bool bDamage; // 0x0(0x0)
	char pad_12A[0x2]; // 0x0(0x0)
	float TotalValue; // 0x0(0x0)

	void OnNotifyDamage(struct FPreDamageResultData& PreResultData, struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.DamageStatsBufferBase.OnNotifyDamage // (Native|Public|HasOutParms) // @ game+0
	void K2_DamageStats(struct FPreDamageResultData& PreResultData, struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.DamageStatsBufferBase.K2_DamageStats // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.SkillSlotSettings
// Size: 0x0 (Inherited: 0x0)
struct USkillSlotSettings : UObject {
	struct TArray<struct FGameplayTag> DefaultGameplayTagSetting; // 0x0(0x0)
};

 // Class /Script/Game.AvailableSkill
// Size: 0x0 (Inherited: 0x0)
struct UAvailableSkill : UObject {
	struct TArray<struct FGameplayTag> SkillTags; // 0x0(0x0)
	__int32 SkillIndex; // 0x0(0x0)
	bool bQTESkill; // 0x0(0x0)
	bool bWeaponSkill; // 0x0(0x0)
	char pad_3E[0x2]; // 0x0(0x0)
	__int32 SkillID; // 0x0(0x0)
	__int32 SkillLevel; // 0x0(0x0)
	float CDRemain; // 0x0(0x0)
	float CurrentCD; // 0x0(0x0)
	bool bTeamSharedCD; // 0x0(0x0)
	char pad_51[0x3]; // 0x0(0x0)
	float SharedCD; // 0x0(0x0)
	__int32 CurrentChargeTimes; // 0x0(0x0)
	float TempCD; // 0x0(0x0)
	float PublicCDRemain; // 0x0(0x0)
	bool bProhibit; // 0x0(0x0)
	enum class ESkillCastableType CastableType; // 0x0(0x0)
	enum class ESkillCastableType AutoCastableType; // 0x0(0x0)
	enum class ESkillCastFailType CastFailType; // 0x0(0x0)
	float KeepCastableTime; // 0x0(0x0)
	float KeepFailTime; // 0x0(0x0)
	float SkillRunningTime; // 0x0(0x0)
	char pad_74[0xC]; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> SkillCastConditionMap; // 0x0(0x0)
	struct TArray<struct AGameSkill*> ActiveGameSkill; // 0x0(0x0)
	struct AGameSkill* WaitSkillRef; // 0x0(0x0)
	char pad_E8[0x38]; // 0x0(0x0)
	struct TMap<__int32, struct FSkillConditionTarget> ConditionTriggerTargets; // 0x0(0x0)
	char pad_170[0x4]; // 0x0(0x0)
	bool bActive; // 0x0(0x0)
	char pad_175[0x3]; // 0x0(0x0)
	float StopTime; // 0x0(0x0)
	__int32 CurrentCastableConditionActiveTimes; // 0x0(0x0)
	bool bWaitRemove; // 0x0(0x0)
	char pad_181[0x7]; // 0x0(0x0)

	void OnRepCastableType(); // Function /Script/Game.AvailableSkill.OnRepCastableType // (Final|Native|Public) // @ game+0
	float GetCDTime(); // Function /Script/Game.AvailableSkill.GetCDTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.GameAbilityModifier
// Size: 0x0 (Inherited: 0x0)
struct UGameAbilityModifier : UObject {
	char pad_28[0x8]; // 0x0(0x0)
	struct APawn* Instigator; // 0x0(0x0)
	struct AActor* Owner; // 0x0(0x0)

	void SetOwner(struct AActor* NewOwner); // Function /Script/Game.GameAbilityModifier.SetOwner // (Native|Public|BlueprintCallable) // @ game+0
	void SetInstigator(struct APawn* InInstigator); // Function /Script/Game.GameAbilityModifier.SetInstigator // (Native|Public|BlueprintCallable) // @ game+0
	void K2_ReceiveTick(float DeltaSeconds); // Function /Script/Game.GameAbilityModifier.K2_ReceiveTick // (Event|Protected|BlueprintEvent) // @ game+0
	void K2_ReceiveDeActive(bool bIsClient); // Function /Script/Game.GameAbilityModifier.K2_ReceiveDeActive // (Event|Protected|BlueprintEvent) // @ game+0
	void K2_ReceiveActive(bool bIsClient); // Function /Script/Game.GameAbilityModifier.K2_ReceiveActive // (Event|Protected|BlueprintEvent) // @ game+0
	struct AActor* GetOwner(); // Function /Script/Game.GameAbilityModifier.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct APawn* GetInstigator(); // Function /Script/Game.GameAbilityModifier.GetInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GameAIControllerPool
// Size: 0x0 (Inherited: 0x0)
struct AGameAIControllerPool : AActor {
	struct TArray<struct AGameAIController*> PoolInternal; // 0x0(0x0)
};

 // Class /Script/Game.GameAnimMetaData
// Size: 0x0 (Inherited: 0x0)
struct UGameAnimMetaData : UAnimMetaData {
	struct UCurveBase* CurveData; // 0x0(0x0)
	struct UCurveBase* CurveData_Rot; // 0x0(0x0)
	enum class EMotionCurveType MotionCurveType; // 0x0(0x0)
	enum class EMotionCurveMoveType MotionCurveMoveType; // 0x0(0x0)
	char SlotIndex; // 0x0(0x0)
	char pad_3B[0x1]; // 0x0(0x0)
	struct FName SlotName; // 0x0(0x0)
	bool bInBunkerApply; // 0x0(0x0)
	char pad_45[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.AnimCurveMetaData
// Size: 0x0 (Inherited: 0x0)
struct UAnimCurveMetaData : UAnimMetaData {
	struct UCurveBase* CurveData; // 0x0(0x0)
	struct FName CurveName; // 0x0(0x0)
};

 // Class /Script/Game.AnimDistanceMappingCurveData
// Size: 0x0 (Inherited: 0x0)
struct UAnimDistanceMappingCurveData : UDataAsset {
	struct TMap<struct FName, struct FAnimDistanceMappingCurveInfo> CurveDatas; // 0x0(0x0)
};

 // Class /Script/Game.CustomSplineInterface
// Size: 0x0 (Inherited: 0x0)
struct UCustomSplineInterface : UInterface {

	void DrawSplineWithTwoPoints(struct FVector StartPos, struct FVector EndPos, bool bTense); // Function /Script/Game.CustomSplineInterface.DrawSplineWithTwoPoints // (Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void ClearSplinePoints(); // Function /Script/Game.CustomSplineInterface.ClearSplinePoints // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.GameApplication
// Size: 0x0 (Inherited: 0x0)
struct UGameApplication : UPlatformGameInstance {
	struct UStartupSubsystem* StartupSubsystem; // 0x0(0x0)
	char pad_280[0x20]; // 0x0(0x0)

	void UpdatePCMinimizedStats(); // Function /Script/Game.GameApplication.UpdatePCMinimizedStats // (Final|Native|Public) // @ game+0
	void PostPatchGame(); // Function /Script/Game.GameApplication.PostPatchGame // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnApplicationWillDeactivate(); // Function /Script/Game.GameApplication.OnApplicationWillDeactivate // (Final|Native|Public) // @ game+0
	void OnApplicationHasReactivated(); // Function /Script/Game.GameApplication.OnApplicationHasReactivated // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.GameAssetManager
// Size: 0x0 (Inherited: 0x0)
struct UGameAssetManager : USeasunAssetManager {
	char pad_458[0x140]; // 0x0(0x0)

	void GameLoadAssets(struct TArray<struct FSoftObjectPath> AssetsToLoad, struct TArray<struct UObject*>& LoadedAssets); // Function /Script/Game.GameAssetManager.GameLoadAssets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GameLoadAssetFormPath(struct FString AssetToLoadPath, struct UObject*& LoadedAsset); // Function /Script/Game.GameAssetManager.GameLoadAssetFormPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GameLoadAsset(struct FSoftObjectPath& AssetToLoad, struct UObject*& LoadedAsset); // Function /Script/Game.GameAssetManager.GameLoadAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void GameAsyncLoadAssets(struct TArray<struct FSoftObjectPath>& AssetsToLoad, struct FDelegate DelegateToCall); // Function /Script/Game.GameAssetManager.GameAsyncLoadAssets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GameAsyncLoadAsset(struct FSoftObjectPath& AssetToLoad, struct FDelegate DelegateToCall); // Function /Script/Game.GameAssetManager.GameAsyncLoadAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameAttributeModifier
// Size: 0x0 (Inherited: 0x0)
struct UGameAttributeModifier : UGameAbilityModifier {
};

 // Class /Script/Game.GameBaseState
// Size: 0x0 (Inherited: 0x0)
struct AGameBaseState : AGameState {
	__int32 ReviveCount; // 0x0(0x0)
	float AutoReviveTime; // 0x0(0x0)
	float AutoReviveHealthScale; // 0x0(0x0)
	__int32 CurrentLevelId; // 0x0(0x0)
	__int32 FightId; // 0x0(0x0)
	__int32 StrategyId; // 0x0(0x0)
	struct FMultiSpawnerArray ArrPreLoadRandomMonters; // 0x0(0x0)
	__int32 BufferRandomSeed; // 0x0(0x0)
	char pad_3C4[0x4]; // 0x0(0x0)

	void ShowFightTip(__int32 Type, struct FString Message, bool bShowUIAnim); // Function /Script/Game.GameBaseState.ShowFightTip // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnGameTaskPreLoad(__int32 AreaId); // Function /Script/Game.GameBaseState.OnGameTaskPreLoad // (Final|Native|Public) // @ game+0
	struct TArray<struct UCharacterCard*> GetTeamCards(); // Function /Script/Game.GameBaseState.GetTeamCards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct APlayerState* GetPlayerState(__int32 Index); // Function /Script/Game.GameBaseState.GetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct APlayerController* GetPlayerController(__int32 Index); // Function /Script/Game.GameBaseState.GetPlayerController // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct APawn* GetPlayer(__int32 Index); // Function /Script/Game.GameBaseState.GetPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AGameBaseState* GetGameState(); // Function /Script/Game.GameBaseState.GetGameState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct APawn*> GetAllPlayerCharacter(); // Function /Script/Game.GameBaseState.GetAllPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void Client_ShowFightTip(__int32 Type, struct FString Message, bool bShowUIAnim); // Function /Script/Game.GameBaseState.Client_ShowFightTip // (Net|Native|Event|NetMulticast|Public) // @ game+0
	void BroadcastSpawnAtLocationByPath(struct FSoftObjectPath InTemplatePath, struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function /Script/Game.GameBaseState.BroadcastSpawnAtLocationByPath // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void BroadcastSpawnAtLocationByID(__int32 InSpawnEffectID, struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function /Script/Game.GameBaseState.BroadcastSpawnAtLocationByID // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void BroadcastSpawnAtLocation(struct UFXSystemAsset* Template, struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function /Script/Game.GameBaseState.BroadcastSpawnAtLocation // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0
};

 // Class /Script/Game.GameCableComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameCableComponent : UMeshComponent {
	bool bAttachStart; // 0x0(0x0)
	bool bAttachEnd; // 0x0(0x0)
	struct FComponentReference AttachEndTo; // 0x0(0x0)
	struct FName AttachEndToSocketName; // 0x0(0x0)
	struct FVector EndLocation; // 0x0(0x0)
	float CableLength; // 0x0(0x0)
	__int32 NumSegments; // 0x0(0x0)
	float SubstepTime; // 0x0(0x0)
	__int32 SolverIterations; // 0x0(0x0)
	bool bEnableStiffness; // 0x0(0x0)
	bool bUseSubstepping; // 0x0(0x0)
	bool bSkipCableUpdateWhenNotVisible; // 0x0(0x0)
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered; // 0x0(0x0)
	bool bEnableCollision; // 0x0(0x0)
	char pad_4F3[0x1]; // 0x0(0x0)
	float CollisionFriction; // 0x0(0x0)
	struct FVector CableForce; // 0x0(0x0)
	float CableGravityScale; // 0x0(0x0)
	float CableWidth; // 0x0(0x0)
	__int32 NumSides; // 0x0(0x0)
	float TileMaterial; // 0x0(0x0)
	char pad_514[0x1C]; // 0x0(0x0)

	void SetAttachEndToComponent(struct USceneComponent* Component, struct FName SocketName); // Function /Script/Game.GameCableComponent.SetAttachEndToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAttachEndTo(struct AActor* Actor, struct FName ComponentProperty, struct FName SocketName); // Function /Script/Game.GameCableComponent.SetAttachEndTo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetCableParticleLocations(struct TArray<struct FVector>& Locations); // Function /Script/Game.GameCableComponent.GetCableParticleLocations // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct USceneComponent* GetAttachedComponent(); // Function /Script/Game.GameCableComponent.GetAttachedComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AActor* GetAttachedActor(); // Function /Script/Game.GameCableComponent.GetAttachedActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GameCameraShake
// Size: 0x0 (Inherited: 0x0)
struct UGameCameraShake : UCameraShakeBase {
	struct TArray<struct FCameraShakeGroup> ShakeGroups; // 0x0(0x0)
	char pad_B0[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.GameCanvasPanel
// Size: 0x0 (Inherited: 0x0)
struct UGameCanvasPanel : UCanvasPanel {
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0x0(0x0)
};

 // Class /Script/Game.GameCharacterAnimInstance
// Size: 0x0 (Inherited: 0x0)
struct UGameCharacterAnimInstance : UAnimInstanceBase {
	char pad_510[0xA8]; // 0x0(0x0)
	struct FString CurrentGirlName; // 0x0(0x0)
	struct FString CurrentWeaponName; // 0x0(0x0)
	char pad_5D8[0x8]; // 0x0(0x0)
	bool bIsInRootMotionSkill; // 0x0(0x0)
	bool bUseTempAnim; // 0x0(0x0)
	bool bEnableIdleAnimHeadRotReturn; // 0x0(0x0)
	char pad_5E3[0x5]; // 0x0(0x0)
	struct FString DeafaultWeaponResName; // 0x0(0x0)
	struct FString DeafaultGirlName; // 0x0(0x0)
	struct FString GirlAnimNameSuffix; // 0x0(0x0)
	bool bHeadRotCurveValid; // 0x0(0x0)
	char pad_619[0x3]; // 0x0(0x0)
	float HeadRot; // 0x0(0x0)
	struct FRotator HeadRotRotator; // 0x0(0x0)
	float HeadRotSpeed_Viewing; // 0x0(0x0)
	float HeadRotSpeed_BlendingOut_IdleAnim; // 0x0(0x0)
	float HeadRotSpeed_BlendingOut; // 0x0(0x0)
	float HeadRotRangeScale; // 0x0(0x0)
	float HeadRotMapRange; // 0x0(0x0)
	float HeadRotLimitRange; // 0x0(0x0)
	char pad_644[0x4]; // 0x0(0x0)
	enum class EAbnormalState AbnormalState; // 0x0(0x0)
	char pad_649[0x7]; // 0x0(0x0)
	struct FAbnormalInfo AbnormalInfo; // 0x0(0x0)
	struct UAnimMontage* AbnormalMontage; // 0x0(0x0)
	struct UAnimMontage* SubAbnormalMontage; // 0x0(0x0)
	bool HitOver; // 0x0(0x0)
	char pad_6B9[0x3]; // 0x0(0x0)
	float HitStrength; // 0x0(0x0)
	bool bHitStrengthValid; // 0x0(0x0)
	char pad_6C1[0x3]; // 0x0(0x0)
	float HitReactElapsedTime; // 0x0(0x0)
	float HitReactCoolDownElapsedTime; // 0x0(0x0)
	float HitReactAlpha; // 0x0(0x0)
	bool bCurrentAbnormalReset; // 0x0(0x0)
	bool bIsDeath; // 0x0(0x0)
	char pad_6D2[0x2]; // 0x0(0x0)
	float ParalysisMontageStartTime; // 0x0(0x0)
	bool bInParalysisReaction; // 0x0(0x0)
	char pad_6D9[0x3]; // 0x0(0x0)
	struct FVector2D LeanXY; // 0x0(0x0)
	char pad_6E4[0x4]; // 0x0(0x0)
	struct TArray<struct FVector2D> PlayerMoveDirectionCaches; // 0x0(0x0)
	struct TArray<struct FVector2D> PlayerBunkerMoveDirectionCaches; // 0x0(0x0)
	struct TArray<struct FVector> PlayerInputDirectionCaches; // 0x0(0x0)
	__int32 PlayerMoveDirectionCacheNum; // 0x0(0x0)
	struct FVector2D MoveDirection; // 0x0(0x0)
	struct FVector2D BunkerMoveDirection; // 0x0(0x0)
	struct FVector2D DodgeDirection; // 0x0(0x0)
	enum class ESimpleMoveType PlayerMoveType; // 0x0(0x0)
	char pad_735[0x3]; // 0x0(0x0)
	float HorizontalSpeed; // 0x0(0x0)
	float HorizontalSpeedScale; // 0x0(0x0)
	float HorizontalSpeedRatio; // 0x0(0x0)
	float SpeedWarpingValue; // 0x0(0x0)
	bool SpeedWarpingEnable; // 0x0(0x0)
	enum class EGamePlayerMoveState CurMoveAnimState; // 0x0(0x0)
	bool bIsWalking; // 0x0(0x0)
	bool bIsMoveOrWalk; // 0x0(0x0)
	bool bIsRushing; // 0x0(0x0)
	bool bIsBunkering; // 0x0(0x0)
	bool bIsBunkerCrouching; // 0x0(0x0)
	bool bIsLeftSideBunker; // 0x0(0x0)
	bool bIsBunkerLeaned; // 0x0(0x0)
	bool bIsBunkerShootingUnLeaned; // 0x0(0x0)
	bool bIsBunker; // 0x0(0x0)
	bool bRetainBunkerLeaned; // 0x0(0x0)
	bool bBunkerMoveBack; // 0x0(0x0)
	char pad_755[0x3]; // 0x0(0x0)
	struct TMap<struct FName, struct FRotator> BunkerSkillingOffsetContainer; // 0x0(0x0)
	bool bBunkerSkillingOffsetBlendOut; // 0x0(0x0)
	char pad_7A9[0x3]; // 0x0(0x0)
	float fBunkerSkillingOffsetBlendOutSpd; // 0x0(0x0)
	float fBunkerSkillingOffsetBlendInSpd; // 0x0(0x0)
	float fBunkerSkillingOffsetCurrentAlpha; // 0x0(0x0)
	float fBunkerSkillingOffsetTargetAlpha; // 0x0(0x0)
	bool bIsRunningState; // 0x0(0x0)
	bool bIsIdleState; // 0x0(0x0)
	bool bIsStopState; // 0x0(0x0)
	bool bIsRushStopState; // 0x0(0x0)
	bool bIsLastFrameWalking; // 0x0(0x0)
	bool bHasSpeed; // 0x0(0x0)
	bool bIsPivoting; // 0x0(0x0)
	char pad_7C3[0x1]; // 0x0(0x0)
	struct FRotator PivotingPitchOffset_Spine01; // 0x0(0x0)
	struct FRotator PivotingPitchOffset_Spine02; // 0x0(0x0)
	struct FRotator PivotingPitchOffset_Spine03; // 0x0(0x0)
	char pad_7E8[0xC]; // 0x0(0x0)
	struct FVector WeaponRelativeLocation; // 0x0(0x0)
	struct FRotator WeaponRelativeRotation; // 0x0(0x0)
	struct FVector RecoilGunPivotOffset; // 0x0(0x0)
	struct UAnimSequence* WeaponStandPose; // 0x0(0x0)
	struct UAnimSequence* WeaponShootPose; // 0x0(0x0)
	struct UAnimSequence* WeaponAimPose; // 0x0(0x0)
	struct UAnimSequence* WeaponAimRecoilAnim; // 0x0(0x0)
	struct UAnimSequenceBase* HitReactAnim; // 0x0(0x0)
	struct FVector WeaponCorrectionHandPosition; // 0x0(0x0)
	char pad_84C[0x4]; // 0x0(0x0)
	struct FTransform HandSpaceWeaponCorrectionTrans; // 0x0(0x0)
	enum class EWeaponHoldMode HoldWeaponType; // 0x0(0x0)
	char pad_881[0x3]; // 0x0(0x0)
	struct FVector HoldGunHandPosCorrection; // 0x0(0x0)
	char pad_890[0x4]; // 0x0(0x0)
	struct FVector AimAtLocation; // 0x0(0x0)
	float MatchWallDistance; // 0x0(0x0)
	bool bMatchWallEnable; // 0x0(0x0)
	char pad_8A5[0x3]; // 0x0(0x0)
	struct FVector2D AimOffsetXY; // 0x0(0x0)
	struct FVector2D PreviousDesiredAimOffsetXY; // 0x0(0x0)
	struct FVector PreviousDesiredAimLoc; // 0x0(0x0)
	float AimOffsetSpeed; // 0x0(0x0)
	float AimOffsetMovementStep; // 0x0(0x0)
	bool bEnableAimOffsetLag; // 0x0(0x0)
	char pad_8CD[0x3]; // 0x0(0x0)
	struct FString AimBoneName; // 0x0(0x0)
	char pad_8E0[0x8]; // 0x0(0x0)
	struct FRuntimeFloatCurve RecoilWeightCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve ShootingPoseCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve ShootingPoseCurve_Move; // 0x0(0x0)
	float LowerBodyStandToShootValue; // 0x0(0x0)
	float LowerBodyShootToStandValue; // 0x0(0x0)
	bool bIsAimRotation; // 0x0(0x0)
	char pad_A89[0x3]; // 0x0(0x0)
	float LowerBodyBSBlendSpd; // 0x0(0x0)
	float LowerBodyBSBlendNormalSpd; // 0x0(0x0)
	float LowerBodyBSBlendAimSpd; // 0x0(0x0)
	float TurnThreshold; // 0x0(0x0)
	float BunkerTurnThreshold; // 0x0(0x0)
	float RootYawOffset; // 0x0(0x0)
	bool bIsRotTransition; // 0x0(0x0)
	char pad_AA5[0x3]; // 0x0(0x0)
	float StanceRotSpeed; // 0x0(0x0)
	float TransitionBlendAlpha; // 0x0(0x0)
	float AccumulatedBlendAlpha; // 0x0(0x0)
	float RotTransitionCounter; // 0x0(0x0)
	char pad_AB8[0x4]; // 0x0(0x0)
	float HandPoseCorrectionValue; // 0x0(0x0)
	struct FSkillAimOffsetData ExternalSkillAimCorrectionInfo; // 0x0(0x0)
	struct FQueryResult SkillAimTargetLocData; // 0x0(0x0)
	struct FQueryResultBlendOut SkillAimTargetLocBlendOut; // 0x0(0x0)
	struct FVector SkillAimTargetLoc; // 0x0(0x0)
	bool bUseRightHandIKCorrection; // 0x0(0x0)
	char pad_CB1[0x7]; // 0x0(0x0)
	struct FHandIKCorrectionBoneIno LeftHandIKCorrectionBoneInfo; // 0x0(0x0)
	struct FHandIKCorrectionBoneIno RightHandIKCorrectionBoneInfo; // 0x0(0x0)
	enum class EWieldWeaponType WieldWeaponType; // 0x0(0x0)
	bool bHandIKCorrectionBlendIn; // 0x0(0x0)
	char pad_F2A[0x2]; // 0x0(0x0)
	float BlendInHandIKCorrectionCurrentElpasedTime; // 0x0(0x0)
	float ShootingPoseValue; // 0x0(0x0)
	float AimOffsetX; // 0x0(0x0)
	float AimOffsetY; // 0x0(0x0)
	bool bIsAdvanceAction; // 0x0(0x0)
	bool bIsFalling; // 0x0(0x0)
	bool bIsPrepareRunningOnLanding; // 0x0(0x0)
	bool bIsAiming; // 0x0(0x0)
	bool bIsShooting; // 0x0(0x0)
	bool bIsBulletLoading; // 0x0(0x0)
	bool bIsShootingAction; // 0x0(0x0)
	bool bIsShootingTransition; // 0x0(0x0)
	bool bIsAimingOrShooting; // 0x0(0x0)
	bool bShootBlendUseRefPose; // 0x0(0x0)
	char pad_F46[0x2]; // 0x0(0x0)
	float ShootingPoseSwitchTime; // 0x0(0x0)
	float ShootingPoseSwitchOffTime; // 0x0(0x0)
	bool bIsWeaponRaised; // 0x0(0x0)
	bool bLastWeaponRaised; // 0x0(0x0)
	bool bKeepWeaponRaisedOnSkillCancel; // 0x0(0x0)
	char pad_F53[0x1]; // 0x0(0x0)
	float RecoilAnimationEvaluateTime; // 0x0(0x0)
	struct TArray<struct FString> RecoilAnimationNotifiedEventContainer; // 0x0(0x0)
	bool bRecoilAnimationEnable; // 0x0(0x0)
	bool bRecoilMontageEnable; // 0x0(0x0)
	bool bRecoilUpperBodyMontageReplay; // 0x0(0x0)
	char pad_F6B[0x1]; // 0x0(0x0)
	float RecoilWeight; // 0x0(0x0)
	struct FCurveDataCoolDownRuntimeData RecoilCurveRuntimeData; // 0x0(0x0)
	char pad_F84[0x4]; // 0x0(0x0)
	struct FAnimRecoilSystem RecoilSystem; // 0x0(0x0)
	char pad_1048[0x8]; // 0x0(0x0)
	float RecoilAnimPlayRate; // 0x0(0x0)
	float RecoilBlendOutTime; // 0x0(0x0)
	bool bIsShootingActionEnabled; // 0x0(0x0)
	bool bIsAimingActionEnabled; // 0x0(0x0)
	char pad_105A[0x6]; // 0x0(0x0)
	enum class EAnimBlendState CurSkillAnimState; // 0x0(0x0)
	bool bIsHalfSkillState; // 0x0(0x0)
	bool bIsCastingSkill; // 0x0(0x0)
	bool bIsFullSkill; // 0x0(0x0)
	bool bEnableBreastPhy; // 0x0(0x0)
	char pad_1065[0x3]; // 0x0(0x0)
	struct FRuntimeFloatCurve JumpMoveInAir; // 0x0(0x0)
	struct FRuntimeFloatCurve JumpStandInAir; // 0x0(0x0)
	struct FRuntimeFloatCurve JumpMoveInLand; // 0x0(0x0)
	struct FRuntimeFloatCurve JumpStandInLand; // 0x0(0x0)
	struct FRuntimeFloatCurve FallStandInLand; // 0x0(0x0)
	struct FRuntimeFloatCurve FallMoveInLand; // 0x0(0x0)
	float FallCurveTimeCondition; // 0x0(0x0)
	float AirPitch; // 0x0(0x0)
	struct TArray<struct FCurveDataSpinePitchRuntimeData> SpinePitchRuntimeDataContainer; // 0x0(0x0)
	enum class EAnimForceState ForceAnimState; // 0x0(0x0)
	char pad_13B1[0x27]; // 0x0(0x0)
	struct UAnimSequence* Base_Act; // 0x0(0x0)
	struct UAnimSequence* Base_Born; // 0x0(0x0)
	struct UAnimSequence* Base_Fall_Start; // 0x0(0x0)
	struct UAnimSequence* Base_Fall_Loop; // 0x0(0x0)
	struct UAnimSequence* Base_Fall_End; // 0x0(0x0)
	struct UAnimSequence* Base_Bunker_CrouchIdle_L; // 0x0(0x0)
	struct UAnimSequence* Base_Bunker_CrouchIdle_R; // 0x0(0x0)
	struct UAnimSequence* Base_Bunker_CrouchMove_L; // 0x0(0x0)
	struct UAnimSequence* Base_Bunker_CrouchMove_R; // 0x0(0x0)
	struct UAnimSequence* Shoot_Bunker_CrouchStand_L; // 0x0(0x0)
	struct UAnimSequence* Shoot_Bunker_CrouchStand_R; // 0x0(0x0)
	struct UAnimSequence* Base_Bunker_Idle_L; // 0x0(0x0)
	struct UAnimSequence* Base_Bunker_Idle_R; // 0x0(0x0)
	struct UAnimSequence* Base_Bunker_Move_L; // 0x0(0x0)
	struct UAnimSequence* Base_Bunker_Move_R; // 0x0(0x0)
	struct UAnimSequence* Shoot_Bunker_Stand_R; // 0x0(0x0)
	struct UAnimSequence* Shoot_Bunker_Stand_L; // 0x0(0x0)
	struct UAnimSequence* Base_Stand; // 0x0(0x0)
	struct UAnimSequence* Shoot_Stand; // 0x0(0x0)
	struct UAnimSequence* TransitionPose_Shoot_Base; // 0x0(0x0)
	struct UAnimSequence* Aim_Stand; // 0x0(0x0)
	struct UAnimSequence* BulletLoad_Stand; // 0x0(0x0)
	struct UAnimSequence* Base_Idle01; // 0x0(0x0)
	struct UAnimSequence* Base_Idle02; // 0x0(0x0)
	struct UAnimSequence* Shoot; // 0x0(0x0)
	struct UAnimSequence* Aim_Shoot; // 0x0(0x0)
	struct UAnimSequence* Shoot_Stand_Turn_L; // 0x0(0x0)
	struct UAnimSequence* Shoot_Stand_Turn_R; // 0x0(0x0)
	struct UAnimSequence* Base_ReloadStand; // 0x0(0x0)
	struct UAnimSequence* Base_ReloadRun; // 0x0(0x0)
	struct UAnimSequence* Base_ReloadRush; // 0x0(0x0)
	struct UAnimSequence* Base_ReloadStand_001; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_F; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_B; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_R; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_L; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_FR; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_FL; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_BR; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_BL; // 0x0(0x0)
	struct UAnimSequence* Shoot_Walk_End; // 0x0(0x0)
	struct UAnimSequence* Base_Walk_Loop; // 0x0(0x0)
	struct UAnimSequence* Hit_F; // 0x0(0x0)
	struct UAnimSequence* Hit_B; // 0x0(0x0)
	struct UAnimSequence* Hit_Add; // 0x0(0x0)
	struct UAnimSequence* HitHover_01; // 0x0(0x0)
	struct UAnimSequence* HitHover_02; // 0x0(0x0)
	struct UAnimSequence* HitHOver_03; // 0x0(0x0)
	struct UAnimSequence* Base_Die; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Start_F; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Start_L; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Start_R; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Loop; // 0x0(0x0)
	struct UAnimSequence* Base_Run_End; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Turnback_L; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Turnback_R; // 0x0(0x0)
	struct UAnimSequence* Base_Rush_Start; // 0x0(0x0)
	struct UAnimSequence* Base_Rush_Loop; // 0x0(0x0)
	struct UAnimSequence* Base_Rush_End; // 0x0(0x0)
	struct UAnimSequence* Base_Rush_Turnback_L; // 0x0(0x0)
	struct UAnimSequence* Base_Rush_Turnback_R; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Pose; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Pose_B; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Pose_F; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Pose_L; // 0x0(0x0)
	struct UAnimSequence* Base_Run_Pose_R; // 0x0(0x0)
	struct UAnimSequence* Recoil_AnimSeq; // 0x0(0x0)
	struct UBlendSpace* LeanBlendSpace; // 0x0(0x0)
	struct UBlendSpace* AdvanceMoveBlendSpace; // 0x0(0x0)
	struct UBlendSpace* ShootMoveBlendSpace; // 0x0(0x0)
	struct UBlendSpace* AimMoveBlendSpace; // 0x0(0x0)
	struct UBlendSpace1D* RunWalkBlendSpace; // 0x0(0x0)
	struct UAnimMontage* BaseRushStart_Montage; // 0x0(0x0)
	struct UAnimMontage* BaseRushLoop_Montage; // 0x0(0x0)
	struct UAnimMontage* BaseIdle01_Montage; // 0x0(0x0)
	struct UAnimMontage* BaseIdle02_Montage; // 0x0(0x0)
	struct UAnimMontage* Stop_Montage; // 0x0(0x0)
	struct UAnimMontage* RushStop_Montage; // 0x0(0x0)
	struct UAnimMontage* WalkStop_Montage; // 0x0(0x0)
	struct UAnimMontage* Launch_Montage; // 0x0(0x0)
	struct UAnimMontage* Pivot_Montage; // 0x0(0x0)
	struct UAnimMontage* RushPivot_Montage; // 0x0(0x0)
	struct UAnimMontage* TurnLeftL_Montage; // 0x0(0x0)
	struct UAnimMontage* TurnRightR_Montage; // 0x0(0x0)
	struct UAnimMontage* RepelFront_Montage; // 0x0(0x0)
	struct UAnimMontage* RepelBack_Montage; // 0x0(0x0)
	struct UAnimMontage* Floating_Montage; // 0x0(0x0)
	struct UAnimMontage* Falling_Montage; // 0x0(0x0)
	struct UAnimMontage* FallingEnd_Montage; // 0x0(0x0)
	struct UAnimMontage* JumpFallingEnd_Montage; // 0x0(0x0)
	struct UAnimMontage* LieDown_Montage; // 0x0(0x0)
	struct UAnimMontage* StandUp_Montage; // 0x0(0x0)
	struct UAnimMontage* Breathless_Montage; // 0x0(0x0)
	struct UAnimMontage* Stun_Montage; // 0x0(0x0)
	struct UAnimMontage* StunHit_Montage; // 0x0(0x0)
	struct UAnimMontage* Paralysis_Montage; // 0x0(0x0)
	struct UAnimMontage* ParalysisHit_Montage; // 0x0(0x0)
	struct UAnimMontage* Born_Montage; // 0x0(0x0)
	struct UAnimMontage* Die_Montage; // 0x0(0x0)
	struct UAnimMontage* Celebrate_Montage; // 0x0(0x0)
	struct UAnimMontage* Act_Montage; // 0x0(0x0)
	struct UAnimMontage* JumpToLoc_Montage; // 0x0(0x0)
	struct UAnimMontage* Jump_Montage; // 0x0(0x0)
	struct UAnimMontage* PreFire_Montage; // 0x0(0x0)
	struct UAnimMontage* Storage_Montage; // 0x0(0x0)
	struct UAnimMontage* Shoot_Montage; // 0x0(0x0)
	struct UAnimMontage* UpperBodyShoot_Montage; // 0x0(0x0)
	struct UAnimMontage* UpperBodyLoad_Montage; // 0x0(0x0)
	struct TMap<enum class EHitReactPerformance, struct FHitReactPerformanceData> HitReactPerformanceContainer; // 0x0(0x0)
	struct FHitReactPerformanceData CurHitReactPerformanceData; // 0x0(0x0)
	struct TMap<struct FString, struct UAnimSequence*> AnimSequnceMap; // 0x0(0x0)
	struct TMap<struct FString, struct UBlendSpace1D*> BlendSpace1DMap; // 0x0(0x0)
	struct TMap<struct FString, struct UBlendSpace*> BlendSpaceMap; // 0x0(0x0)
	struct TMap<struct FString, struct UAnimMontage*> MontageMap; // 0x0(0x0)
	struct TMap<struct UAnimMontage*, char> MontageIndexMap; // 0x0(0x0)
	char pad_19A8[0x68]; // 0x0(0x0)

	bool WeaponWillShoot(float TimeRemaining); // Function /Script/Game.GameCharacterAnimInstance.WeaponWillShoot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void UpdateWeaponCorrectionHandPos(float DeltaSeconds); // Function /Script/Game.GameCharacterAnimInstance.UpdateWeaponCorrectionHandPos // (Final|Native|Protected) // @ game+0
	void UpdateSkillAimOffset(float DeltaSeconds); // Function /Script/Game.GameCharacterAnimInstance.UpdateSkillAimOffset // (Final|Native|Protected) // @ game+0
	void UpdateMoveDirection(float DeltaSeconds); // Function /Script/Game.GameCharacterAnimInstance.UpdateMoveDirection // (Final|Native|Protected) // @ game+0
	void UpdateMathchWallHandPos(float DeltaSeconds); // Function /Script/Game.GameCharacterAnimInstance.UpdateMathchWallHandPos // (Final|Native|Protected) // @ game+0
	void UpdateGroundFootInfo(); // Function /Script/Game.GameCharacterAnimInstance.UpdateGroundFootInfo // (Final|Native|Protected) // @ game+0
	void TrySkillAimTargetLocBlendOut(float fBlendOutTime); // Function /Script/Game.GameCharacterAnimInstance.TrySkillAimTargetLocBlendOut // (Final|Native|Public) // @ game+0
	void StopBaseAct(); // Function /Script/Game.GameCharacterAnimInstance.StopBaseAct // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWeaponCorrectionDataExternal(struct FHandIKCorrectionBoneIno& Boneinfo, bool bCorrectionEnd); // Function /Script/Game.GameCharacterAnimInstance.SetWeaponCorrectionDataExternal // (Final|Native|Public|HasOutParms) // @ game+0
	void SetSpeedWarpingValue(float InValue); // Function /Script/Game.GameCharacterAnimInstance.SetSpeedWarpingValue // (Final|Native|Public) // @ game+0
	void SetSpeedWarpingEnable(bool InValue); // Function /Script/Game.GameCharacterAnimInstance.SetSpeedWarpingEnable // (Final|Native|Public) // @ game+0
	void SetSkillAimTargetLocData(struct FQueryResult& InData); // Function /Script/Game.GameCharacterAnimInstance.SetSkillAimTargetLocData // (Final|Native|Public|HasOutParms) // @ game+0
	void SetSkillAimCorrectionDataExternal(struct FSkillAimOffsetData& OffsetData); // Function /Script/Game.GameCharacterAnimInstance.SetSkillAimCorrectionDataExternal // (Final|Native|Public|HasOutParms) // @ game+0
	void SetForceAnimState(enum class EAnimForceState InAnimForceState); // Function /Script/Game.GameCharacterAnimInstance.SetForceAnimState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetForbiddenTriggerTurnInPlace(bool bForbiddenTurnInPlace); // Function /Script/Game.GameCharacterAnimInstance.SetForbiddenTriggerTurnInPlace // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCharacterActionState(enum class ECharacterActionState CharacterStateFlag); // Function /Script/Game.GameCharacterAnimInstance.SetCharacterActionState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ReSetSkillAimCorrectionDataExternal(float InBlendOutTime, bool bUseSkillBlendOut); // Function /Script/Game.GameCharacterAnimInstance.ReSetSkillAimCorrectionDataExternal // (Final|Native|Public) // @ game+0
	struct UAnimMontage* PlayTransitionAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, __int32 LoopCount, float BlendOutTriggerTime); // Function /Script/Game.GameCharacterAnimInstance.PlayTransitionAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayRecoilForce(); // Function /Script/Game.GameCharacterAnimInstance.PlayRecoilForce // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayJumpToTargetAnim(struct FName& TargetName, struct FVector& TargetLoc); // Function /Script/Game.GameCharacterAnimInstance.PlayJumpToTargetAnim // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void PlayJumpAnim(); // Function /Script/Game.GameCharacterAnimInstance.PlayJumpAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayFinishAnim(); // Function /Script/Game.GameCharacterAnimInstance.PlayFinishAnim // (Final|Native|Public) // @ game+0
	void PlayFacialAnim(struct FString InAnimName, bool bUseWeaponName, struct FName& InSlotName, float InBlendTime); // Function /Script/Game.GameCharacterAnimInstance.PlayFacialAnim // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void OnWeaponChanged(struct APlayerWeapon* Weapon); // Function /Script/Game.GameCharacterAnimInstance.OnWeaponChanged // (Final|Native|Protected) // @ game+0
	void OnOwenerDoHitReaction(struct FApplyHitPhysicalResultData& HitDamage); // Function /Script/Game.GameCharacterAnimInstance.OnOwenerDoHitReaction // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnLoadDefaultWeapon(); // Function /Script/Game.GameCharacterAnimInstance.OnLoadDefaultWeapon // (Final|Native|Protected) // @ game+0
	void OnAsyncLoadFacialAnim(struct UObject* LoadedObject); // Function /Script/Game.GameCharacterAnimInstance.OnAsyncLoadFacialAnim // (Final|Native|Protected) // @ game+0
	void OnAbnormalUpdate(struct FAbnormalInfo& AbnormalInfo, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.GameCharacterAnimInstance.OnAbnormalUpdate // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnAbnormalStateReset(); // Function /Script/Game.GameCharacterAnimInstance.OnAbnormalStateReset // (Final|Native|Protected) // @ game+0
	bool IsShooting(); // Function /Script/Game.GameCharacterAnimInstance.IsShooting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsShootForced(); // Function /Script/Game.GameCharacterAnimInstance.IsShootForced // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsRushing(); // Function /Script/Game.GameCharacterAnimInstance.IsRushing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsRush(); // Function /Script/Game.GameCharacterAnimInstance.IsRush // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsPlayBoltAnimation(); // Function /Script/Game.GameCharacterAnimInstance.IsPlayBoltAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsMontagePlaying(struct FName SlotName); // Function /Script/Game.GameCharacterAnimInstance.IsMontagePlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsLocallyControlled(); // Function /Script/Game.GameCharacterAnimInstance.IsLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInHalfSkillMontage(); // Function /Script/Game.GameCharacterAnimInstance.IsInHalfSkillMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsInBunker(); // Function /Script/Game.GameCharacterAnimInstance.IsInBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsFalling(); // Function /Script/Game.GameCharacterAnimInstance.IsFalling // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsBunkering(); // Function /Script/Game.GameCharacterAnimInstance.IsBunkering // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAiming(); // Function /Script/Game.GameCharacterAnimInstance.IsAiming // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAdvancedAction(); // Function /Script/Game.GameCharacterAnimInstance.IsAdvancedAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void HandleWeaponFireState(bool bIsFire); // Function /Script/Game.GameCharacterAnimInstance.HandleWeaponFireState // (Final|Native|Public) // @ game+0
	void HandleSkillMontageStart(); // Function /Script/Game.GameCharacterAnimInstance.HandleSkillMontageStart // (Final|Native|Public) // @ game+0
	void HandleSkillCancel(__int32 SkillID, enum class ESkillInterruptedType InType); // Function /Script/Game.GameCharacterAnimInstance.HandleSkillCancel // (Final|Native|Public) // @ game+0
	enum class EWeaponState GetWeaponState(); // Function /Script/Game.GameCharacterAnimInstance.GetWeaponState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAnimMontage* GetStorageMontage(); // Function /Script/Game.GameCharacterAnimInstance.GetStorageMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAnimMontage* GetStandUpMontage(); // Function /Script/Game.GameCharacterAnimInstance.GetStandUpMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAnimMontage* GetStandTurnRightMontage(); // Function /Script/Game.GameCharacterAnimInstance.GetStandTurnRightMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAnimMontage* GetStandTurnLeftMontage(); // Function /Script/Game.GameCharacterAnimInstance.GetStandTurnLeftMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAnimMontage* GetRushStartMontage(); // Function /Script/Game.GameCharacterAnimInstance.GetRushStartMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetRetainWeaponRaising(); // Function /Script/Game.GameCharacterAnimInstance.GetRetainWeaponRaising // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAnimMontage* GetRepelMontage(bool bBack); // Function /Script/Game.GameCharacterAnimInstance.GetRepelMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class ERangeAttackState GetRangeAttackState(); // Function /Script/Game.GameCharacterAnimInstance.GetRangeAttackState // (Final|Native|Public|Const) // @ game+0
	struct UAnimMontage* GetPreFireMontage(); // Function /Script/Game.GameCharacterAnimInstance.GetPreFireMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector2D GetMoveDirection(); // Function /Script/Game.GameCharacterAnimInstance.GetMoveDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetMontageIndexByMontage(struct UAnimMontage* Montage); // Function /Script/Game.GameCharacterAnimInstance.GetMontageIndexByMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAnimMontage* GetMontageByVariableName(struct FString VariableName); // Function /Script/Game.GameCharacterAnimInstance.GetMontageByVariableName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAnimMontage* GetMontageByMontageIndex(char MontageIndex); // Function /Script/Game.GameCharacterAnimInstance.GetMontageByMontageIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAnimSequence* GetLocomotionAnimSeq_Idle(); // Function /Script/Game.GameCharacterAnimInstance.GetLocomotionAnimSeq_Idle // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetLandLimitTime(); // Function /Script/Game.GameCharacterAnimInstance.GetLandLimitTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAnimMontage* GetFloatingMontage(); // Function /Script/Game.GameCharacterAnimInstance.GetFloatingMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetFireScale(); // Function /Script/Game.GameCharacterAnimInstance.GetFireScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	char GetDodgeAnimationId(); // Function /Script/Game.GameCharacterAnimInstance.GetDodgeAnimationId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetCurrentShootAdditive(); // Function /Script/Game.GameCharacterAnimInstance.GetCurrentShootAdditive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetCurrentPreFireTime(); // Function /Script/Game.GameCharacterAnimInstance.GetCurrentPreFireTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FRotator GetBunkerSkillSpineOffsetData(struct FName& InCurveName); // Function /Script/Game.GameCharacterAnimInstance.GetBunkerSkillSpineOffsetData // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector2D GetBunkerMoveDirection(); // Function /Script/Game.GameCharacterAnimInstance.GetBunkerMoveDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UBlendSpace* GetBlendSpaceByVariableName(struct FString VariableName); // Function /Script/Game.GameCharacterAnimInstance.GetBlendSpaceByVariableName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UBlendSpace1D* GetBlendSpace1DByVariableName(struct FString VariableName); // Function /Script/Game.GameCharacterAnimInstance.GetBlendSpace1DByVariableName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAnimSequence* GetAnimSequenceByVariableName(struct FString VariableName); // Function /Script/Game.GameCharacterAnimInstance.GetAnimSequenceByVariableName // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector2D GetAimOffset(); // Function /Script/Game.GameCharacterAnimInstance.GetAimOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class EAbnormalState GetAbnormalState(); // Function /Script/Game.GameCharacterAnimInstance.GetAbnormalState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAnimMontage* GetAbnormalMontage(); // Function /Script/Game.GameCharacterAnimInstance.GetAbnormalMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearCharacterActionState(enum class ECharacterActionState CharacterStateFlag); // Function /Script/Game.GameCharacterAnimInstance.ClearCharacterActionState // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckCharacterActionState(enum class ECharacterActionState CharacterStateFlag); // Function /Script/Game.GameCharacterAnimInstance.CheckCharacterActionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void AssignedCharacterFireStateDelegate(); // Function /Script/Game.GameCharacterAnimInstance.AssignedCharacterFireStateDelegate // (Final|Native|Public) // @ game+0
	void ApplyRecoilForce(struct AGamePlayer* Player); // Function /Script/Game.GameCharacterAnimInstance.ApplyRecoilForce // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AnimNotify_StopAdditive(); // Function /Script/Game.GameCharacterAnimInstance.AnimNotify_StopAdditive // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void AnimNotify_StartAdditive(); // Function /Script/Game.GameCharacterAnimInstance.AnimNotify_StartAdditive // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void AnimNotify_RetractWeapon(); // Function /Script/Game.GameCharacterAnimInstance.AnimNotify_RetractWeapon // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void AnimNotify_RaiseWeapon(); // Function /Script/Game.GameCharacterAnimInstance.AnimNotify_RaiseWeapon // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void AnimNotify_ForceSwitchEnd(); // Function /Script/Game.GameCharacterAnimInstance.AnimNotify_ForceSwitchEnd // (Native|Event|Protected|BlueprintEvent) // @ game+0
	void AnimNotify_AddHitStop(); // Function /Script/Game.GameCharacterAnimInstance.AnimNotify_AddHitStop // (Native|Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.GameCharacterPool
// Size: 0x0 (Inherited: 0x0)
struct AGameCharacterPool : AActor {
	struct TMap<struct UObject*, struct FCharacterPool> PoolInternal; // 0x0(0x0)
};

 // Class /Script/Game.GameComboBoxOption
// Size: 0x0 (Inherited: 0x0)
struct UGameComboBoxOption : UUserWidget {
	bool bSelected; // 0x0(0x0)
	char pad_279[0x7]; // 0x0(0x0)
	struct FString OptionName; // 0x0(0x0)
	struct TWeakObjectPtr<struct UGameComboBox> CacheOwner; // 0x0(0x0)
	__int32 Index; // 0x0(0x0)
	char pad_29C[0x4]; // 0x0(0x0)

	void SetSelected(bool bSelect); // Function /Script/Game.GameComboBoxOption.SetSelected // (Final|Native|Public|BlueprintCallable) // @ game+0
	void K2_OnStateChange(); // Function /Script/Game.GameComboBoxOption.K2_OnStateChange // (Event|Public|BlueprintEvent) // @ game+0
	void K2_OnInit(struct FString InOptionName, bool InSelect); // Function /Script/Game.GameComboBoxOption.K2_OnInit // (Event|Public|BlueprintEvent) // @ game+0
	bool IsSelected(); // Function /Script/Game.GameComboBoxOption.IsSelected // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Init(struct UGameComboBox* InOwner, __int32 InIndex, struct FString InOptionName, bool InSelect); // Function /Script/Game.GameComboBoxOption.Init // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetOptionName(); // Function /Script/Game.GameComboBoxOption.GetOptionName // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DoClick(); // Function /Script/Game.GameComboBoxOption.DoClick // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameComboBox
// Size: 0x0 (Inherited: 0x0)
struct UGameComboBox : UUserWidget {
	struct TArray<struct FString> Options; // 0x0(0x0)
	__int32 SelectIndex; // 0x0(0x0)
	char pad_28C[0x4]; // 0x0(0x0)
	struct UGameComboBoxOption* OptionWidgetClass; // 0x0(0x0)
	struct FVector2D InnerSlotPadding; // 0x0(0x0)
	struct FMulticastInlineDelegate OnOptionSelectChange; // 0x0(0x0)
	struct UWrapBox* OptionContent; // 0x0(0x0)
	struct TArray<struct UGameComboBoxOption*> CacheOptionWidgets; // 0x0(0x0)

	void SetOption(struct TArray<struct FString>& InOptions, __int32 InSelectIndex); // Function /Script/Game.GameComboBox.SetOption // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void Select(__int32 InIndex); // Function /Script/Game.GameComboBox.Select // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameDPICustomScalingRule
// Size: 0x0 (Inherited: 0x0)
struct UGameDPICustomScalingRule : UDPICustomScalingRule {
};

 // Class /Script/Game.GameEditableTextBox
// Size: 0x0 (Inherited: 0x0)
struct UGameEditableTextBox : UEditableTextBox {
	bool bCanInputSpace; // 0x0(0x0)
	char pad_A51[0x3]; // 0x0(0x0)
	__int32 MaxInputNum; // 0x0(0x0)
	char pad_A58[0x8]; // 0x0(0x0)

	void SwapFontAsset(); // Function /Script/Game.GameEditableTextBox.SwapFontAsset // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetMaxInputNum(__int32 InNum); // Function /Script/Game.GameEditableTextBox.SetMaxInputNum // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameHLODSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UGameHLODSubsystem : UEngineSubsystem {
	char pad_30[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.GameInputKeySelector
// Size: 0x0 (Inherited: 0x0)
struct UGameInputKeySelector : UWidget {
	struct FButtonStyle WidgetStyle; // 0x0(0x0)
	struct FTextBlockStyle TextStyle; // 0x0(0x0)
	struct FInputChord SelectedKey; // 0x0(0x0)
	struct FSlateFontInfo Font; // 0x0(0x0)
	struct FMargin Margin; // 0x0(0x0)
	struct FLinearColor ColorAndOpacity; // 0x0(0x0)
	struct FText KeySelectionText; // 0x0(0x0)
	struct FText NoKeySpecifiedText; // 0x0(0x0)
	bool bAllowModifierKeys; // 0x0(0x0)
	bool bAllowGamepadKeys; // 0x0(0x0)
	char pad_6D2[0x6]; // 0x0(0x0)
	struct TArray<struct FKey> EscapeKeys; // 0x0(0x0)
	struct FMulticastInlineDelegate OnKeySelected; // 0x0(0x0)
	struct FMulticastInlineDelegate OnIsSelectingKeyChanged; // 0x0(0x0)
	char pad_708[0x18]; // 0x0(0x0)

	void SetTextBlockVisibility(enum class ESlateVisibility InVisibility); // Function /Script/Game.GameInputKeySelector.SetTextBlockVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSelectedKey(struct FInputChord& InSelectedKey); // Function /Script/Game.GameInputKeySelector.SetSelectedKey // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetNoKeySpecifiedText(struct FText InNoKeySpecifiedText); // Function /Script/Game.GameInputKeySelector.SetNoKeySpecifiedText // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetKeySelectionText(struct FText InKeySelectionText); // Function /Script/Game.GameInputKeySelector.SetKeySelectionText // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetInputType(enum class EKeyboardInputType InType); // Function /Script/Game.GameInputKeySelector.SetInputType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetEscapeKeys(struct TArray<struct FKey>& InKeys); // Function /Script/Game.GameInputKeySelector.SetEscapeKeys // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetAllowModifierKeys(bool bInAllowModifierKeys); // Function /Script/Game.GameInputKeySelector.SetAllowModifierKeys // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys); // Function /Script/Game.GameInputKeySelector.SetAllowGamepadKeys // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnKeySelected__DelegateSignature(struct FInputChord SelectedKey); // DelegateFunction /Script/Game.GameInputKeySelector.OnKeySelected__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnIsSelectingKeyChanged__DelegateSignature(); // DelegateFunction /Script/Game.GameInputKeySelector.OnIsSelectingKeyChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	bool GetIsSelectingKey(); // Function /Script/Game.GameInputKeySelector.GetIsSelectingKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class EKeyboardInputType GetInputType(); // Function /Script/Game.GameInputKeySelector.GetInputType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.KeyboardWidgetItem
// Size: 0x0 (Inherited: 0x0)
struct UKeyboardWidgetItem : UUserWidget {
	struct UGameInputKeySelector* InputKeySelector; // 0x0(0x0)

	void ShowImgWarn(); // Function /Script/Game.KeyboardWidgetItem.ShowImgWarn // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetKeyName(); // Function /Script/Game.KeyboardWidgetItem.GetKeyName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GameKeyboardLibrary
// Size: 0x0 (Inherited: 0x0)
struct UGameKeyboardLibrary : UBlueprintFunctionLibrary {

	void SaveInputChord(struct FString InKey, struct FInputChord& InputChord, enum class EKeyboardInputType& InType); // Function /Script/Game.GameKeyboardLibrary.SaveInputChord // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void RebindMapping(struct FString InKey, struct FInputChord& InputChord, enum class EKeyboardInputType& InType); // Function /Script/Game.GameKeyboardLibrary.RebindMapping // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void RebindAllMapping(struct FString InKey); // Function /Script/Game.GameKeyboardLibrary.RebindAllMapping // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PrintSetting(); // Function /Script/Game.GameKeyboardLibrary.PrintSetting // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void LoadSetting(bool bReset); // Function /Script/Game.GameKeyboardLibrary.LoadSetting // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsValidKey(struct FKey& InKey); // Function /Script/Game.GameKeyboardLibrary.IsValidKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FInputChord GetSupportChordByName(struct FString InName, struct FString InActionName, enum class EKeyboardInputType& InType); // Function /Script/Game.GameKeyboardLibrary.GetSupportChordByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString GetKeyboardItemKeyName(struct FGameKeyboardItem& InKeyboardItem, enum class EKeyboardInputType& InType); // Function /Script/Game.GameKeyboardLibrary.GetKeyboardItemKeyName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FGameKeyboardItem GetKeyboardItem(struct FString InKey); // Function /Script/Game.GameKeyboardLibrary.GetKeyboardItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetKeyboardCfgRows(struct TArray<struct FString>& CfgRows); // Function /Script/Game.GameKeyboardLibrary.GetKeyboardCfgRows // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString GetInputChordShowName(struct FInputChord& InputChord); // Function /Script/Game.GameKeyboardLibrary.GetInputChordShowName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString GetInputChordName(struct FInputChord& InputChord); // Function /Script/Game.GameKeyboardLibrary.GetInputChordName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FInputChord GetInputChordByType(struct FString InKey, enum class EKeyboardInputType& InType); // Function /Script/Game.GameKeyboardLibrary.GetInputChordByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FInputChord GetInputChord(struct FString InKey); // Function /Script/Game.GameKeyboardLibrary.GetInputChord // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FInputChord GetDefaultInputChord(struct FString InKey, enum class EKeyboardInputType& InType); // Function /Script/Game.GameKeyboardLibrary.GetDefaultInputChord // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetConflictKeyAndSwap(struct FString InKey, struct FInputChord& InputChord, struct FString& OutKey, struct FString& KeyName); // Function /Script/Game.GameKeyboardLibrary.GetConflictKeyAndSwap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetConflictKey(struct FString InKey, struct FInputChord& InputChord, struct FString& OutKey, struct FString& KeyName); // Function /Script/Game.GameKeyboardLibrary.GetConflictKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	enum class EKeyboardInputType GetActiveInputType(); // Function /Script/Game.GameKeyboardLibrary.GetActiveInputType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString ConvertsToString(struct FInputChord& InputChord); // Function /Script/Game.GameKeyboardLibrary.ConvertsToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FInputChord ConvertJsonStrToStruct(struct FString InSaveStr); // Function /Script/Game.GameKeyboardLibrary.ConvertJsonStrToStruct // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool CheckItemAllowCombinedKey(struct FString InKey); // Function /Script/Game.GameKeyboardLibrary.CheckItemAllowCombinedKey // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool CheckIsCombinedKey(struct FInputChord& InputChord); // Function /Script/Game.GameKeyboardLibrary.CheckIsCombinedKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool CheckInSupportKeyList(struct FInputChord& InputChord); // Function /Script/Game.GameKeyboardLibrary.CheckInSupportKeyList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool CheckInputValid(struct FInputChord& InputChord); // Function /Script/Game.GameKeyboardLibrary.CheckInputValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameLevelActor
// Size: 0x0 (Inherited: 0x0)
struct AGameLevelActor : ALevelScriptActor {
	struct FMulticastInlineDelegate OnSwitchCharacter; // 0x0(0x0)
};

 // Class /Script/Game.GameLibrary
// Size: 0x0 (Inherited: 0x0)
struct UGameLibrary : UBlueprintFunctionLibrary {

	void WriteLogAndFlush(struct FString InLog); // Function /Script/Game.GameLibrary.WriteLogAndFlush // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void UnbindAccount(struct FString channelid); // Function /Script/Game.GameLibrary.UnbindAccount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ToggleOrientation(__int32 ActivityInfo); // Function /Script/Game.GameLibrary.ToggleOrientation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool ToggleEnableMonPhysicalAnim(); // Function /Script/Game.GameLibrary.ToggleEnableMonPhysicalAnim // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool ToggleEnableMonDeadPhysicalAnim(); // Function /Script/Game.GameLibrary.ToggleEnableMonDeadPhysicalAnim // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool ToggleEnableDeadImpulseLimit(); // Function /Script/Game.GameLibrary.ToggleEnableDeadImpulseLimit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool ToggleEnableCustomMovementIteration(); // Function /Script/Game.GameLibrary.ToggleEnableCustomMovementIteration // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool ToggleDisableSkillMove(); // Function /Script/Game.GameLibrary.ToggleDisableSkillMove // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SwitchLanguage(struct FString Language); // Function /Script/Game.GameLibrary.SwitchLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UParticleSystemComponent* SpawnEmitterAtLocation(struct UObject* WorldContextObject, struct UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function /Script/Game.GameLibrary.SpawnEmitterAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ShowQRCode(); // Function /Script/Game.GameLibrary.ShowQRCode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetPerformanceMode(bool bOpen); // Function /Script/Game.GameLibrary.SetPerformanceMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetOverseaFirst(); // Function /Script/Game.GameLibrary.SetOverseaFirst // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetGameIni_String(struct FString InSection, struct FString InKey, struct FString InValue); // Function /Script/Game.GameLibrary.SetGameIni_String // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetEnableFightMonBloodBar(bool bOpen); // Function /Script/Game.GameLibrary.SetEnableFightMonBloodBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetEnableCharBreastPhysical(bool bOpen); // Function /Script/Game.GameLibrary.SetEnableCharBreastPhysical // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetDefaultLanguage(); // Function /Script/Game.GameLibrary.SetDefaultLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetDebugPcOpenMobileController(bool bEnable); // Function /Script/Game.GameLibrary.SetDebugPcOpenMobileController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetCurrentVoiceLanguage(struct FString Voice); // Function /Script/Game.GameLibrary.SetCurrentVoiceLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetApmRoleName(struct FString InRoleName); // Function /Script/Game.GameLibrary.SetApmRoleName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetApmAccount(struct FString InAcount); // Function /Script/Game.GameLibrary.SetApmAccount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetAnimationOnlyTickMontagesEnableOnDS(struct AActor* InActor, bool bEnable); // Function /Script/Game.GameLibrary.SetAnimationOnlyTickMontagesEnableOnDS // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetAnimationAlwaysTickPoseEnableOnDS(struct AActor* InActor, bool bEnable); // Function /Script/Game.GameLibrary.SetAnimationAlwaysTickPoseEnableOnDS // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SDKRename(); // Function /Script/Game.GameLibrary.SDKRename // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ScanQRCode(struct FString Info); // Function /Script/Game.GameLibrary.ScanQRCode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SaveFile(struct FString InFilename, struct FString InContent); // Function /Script/Game.GameLibrary.SaveFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RequestOpenRemoteDebug(); // Function /Script/Game.GameLibrary.RequestOpenRemoteDebug // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RequestLogout(); // Function /Script/Game.GameLibrary.RequestLogout // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RequestExit(); // Function /Script/Game.GameLibrary.RequestExit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReportXGEvent(struct FString EventId, struct FString eventDesc, __int32 eventVal, struct FString eventBodyJson); // Function /Script/Game.GameLibrary.ReportXGEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReportToAdjust(struct FString InEventName); // Function /Script/Game.GameLibrary.ReportToAdjust // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReportSelectProduct(struct FString ProductID); // Function /Script/Game.GameLibrary.ReportSelectProduct // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReportLuaError(struct FString InMsg); // Function /Script/Game.GameLibrary.ReportLuaError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReportLevelUp(); // Function /Script/Game.GameLibrary.ReportLevelUp // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReportEnterGame(struct FString extInfo); // Function /Script/Game.GameLibrary.ReportEnterGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReportCreateOrder(struct FString ProductID, struct FString State, struct FString gameTradeNo, struct FString nOrderCreateCode, struct FString szOrderCreateMsg); // Function /Script/Game.GameLibrary.ReportCreateOrder // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveLogDevice(); // Function /Script/Game.GameLibrary.RemoveLogDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool RegexMatch(struct FString InStr, struct FString InPattern); // Function /Script/Game.GameLibrary.RegexMatch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void RefreshQuestionaire(struct FString InMissionID, struct FString InCustomParams); // Function /Script/Game.GameLibrary.RefreshQuestionaire // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void QuitGameWithLog(struct FString InReason); // Function /Script/Game.GameLibrary.QuitGameWithLog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void QuitGame(); // Function /Script/Game.GameLibrary.QuitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PreLoadGameAssetByConfig(struct FString PreLoadAssetConfig, struct FString DebugName); // Function /Script/Game.GameLibrary.PreLoadGameAssetByConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PlaySoundsAttachActor(__int32 InSoundsID, struct AActor* InActor); // Function /Script/Game.GameLibrary.PlaySoundsAttachActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PlaySounds(__int32 InSoundsID); // Function /Script/Game.GameLibrary.PlaySounds // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PlatformRequestExit(bool bForce); // Function /Script/Game.GameLibrary.PlatformRequestExit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Pay(struct FIbItemInfo& ibItem); // Function /Script/Game.GameLibrary.Pay // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void OpenUserCenter(); // Function /Script/Game.GameLibrary.OpenUserCenter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void OpenQuestionaire(struct FString InCustomParams); // Function /Script/Game.GameLibrary.OpenQuestionaire // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void OpenGameStore(struct FDelegate& cb); // Function /Script/Game.GameLibrary.OpenGameStore // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void OnPayFinish(struct FIbItemInfo& ibItem); // Function /Script/Game.GameLibrary.OnPayFinish // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString MD5String(struct FString InCont); // Function /Script/Game.GameLibrary.MD5String // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Logout(struct FString InAccountInfo); // Function /Script/Game.GameLibrary.Logout // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString Localization(struct FString InKey); // Function /Script/Game.GameLibrary.Localization // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsWindowsPlatform(); // Function /Script/Game.GameLibrary.IsWindowsPlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsStandalone(struct UObject* WorldContextObject); // Function /Script/Game.GameLibrary.IsStandalone // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsRunningCommandlet(); // Function /Script/Game.GameLibrary.IsRunningCommandlet // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsOnlineServer(struct AActor* InOwner); // Function /Script/Game.GameLibrary.IsOnlineServer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsOnlineClient(struct AActor* InOwner); // Function /Script/Game.GameLibrary.IsOnlineClient // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsNetworkAvailable(); // Function /Script/Game.GameLibrary.IsNetworkAvailable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsMobilePlatform(); // Function /Script/Game.GameLibrary.IsMobilePlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsLocalPlayerStateOK(struct AActor* InActor); // Function /Script/Game.GameLibrary.IsLocalPlayerStateOK // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsEnableMonPhysicalAnim(); // Function /Script/Game.GameLibrary.IsEnableMonPhysicalAnim // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsEnableMonDeadPhysicalAnim(); // Function /Script/Game.GameLibrary.IsEnableMonDeadPhysicalAnim // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsEnableDeadImpulseLimit(); // Function /Script/Game.GameLibrary.IsEnableDeadImpulseLimit // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsEnableCustomMovementIteration(); // Function /Script/Game.GameLibrary.IsEnableCustomMovementIteration // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsEnableCharBreastPhysical(); // Function /Script/Game.GameLibrary.IsEnableCharBreastPhysical // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsEditorMobile(); // Function /Script/Game.GameLibrary.IsEditorMobile // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsDebugPcOpenMobileController(); // Function /Script/Game.GameLibrary.IsDebugPcOpenMobileController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsCloud(); // Function /Script/Game.GameLibrary.IsCloud // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void InitSkd(struct FDelegate& wrapper); // Function /Script/Game.GameLibrary.InitSkd // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void InitLogDevice(bool InForce); // Function /Script/Game.GameLibrary.InitLogDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetXGSdkLanguage(); // Function /Script/Game.GameLibrary.GetXGSdkLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetWidgetClassName(struct UWidget* InObject); // Function /Script/Game.GameLibrary.GetWidgetClassName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetSystemLanguage(); // Function /Script/Game.GameLibrary.GetSystemLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetSubChannelId(); // Function /Script/Game.GameLibrary.GetSubChannelId // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetServerWorldTimeSeconds(struct UWorld* InWorld); // Function /Script/Game.GameLibrary.GetServerWorldTimeSeconds // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetSdkAccountInfo(); // Function /Script/Game.GameLibrary.GetSdkAccountInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AGamePlayerState* GetPlayerState(struct APlayerController* InPlayer); // Function /Script/Game.GameLibrary.GetPlayerState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetOSLanguageIdentify(); // Function /Script/Game.GameLibrary.GetOSLanguageIdentify // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetObjectArrayNumMinusAvailable(); // Function /Script/Game.GameLibrary.GetObjectArrayNumMinusAvailable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int64 GetNowMillisecond(); // Function /Script/Game.GameLibrary.GetNowMillisecond // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetNiagaraInt32Var(struct UNiagaraComponent* Niagara, struct FName& Name); // Function /Script/Game.GameLibrary.GetNiagaraInt32Var // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 GetMaxObjectsCount(); // Function /Script/Game.GameLibrary.GetMaxObjectsCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AGamePlayerController* GetLocalPlayerController(struct UWorld* InWorld); // Function /Script/Game.GameLibrary.GetLocalPlayerController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetIPRegion(struct FDelegate& cb); // Function /Script/Game.GameLibrary.GetIPRegion // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString GetGameLanguageIdentify(); // Function /Script/Game.GameLibrary.GetGameLanguageIdentify // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetGameIni_String(struct FString InSession, struct FString InKey, struct FString InDefault); // Function /Script/Game.GameLibrary.GetGameIni_String // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetGameIni_Int(struct FString InSession, struct FString InKey, __int32 InDefault); // Function /Script/Game.GameLibrary.GetGameIni_Int // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetGameIni_Bool(struct FString InSession, struct FString InKey, bool InDefault); // Function /Script/Game.GameLibrary.GetGameIni_Bool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetGameIni_ArrayString(struct FString InSession, struct FString InKey, struct FString InDefault, struct TArray<struct FString>& OutArray); // Function /Script/Game.GameLibrary.GetGameIni_ArrayString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int64 GetFileCRC(struct FString InFilename); // Function /Script/Game.GameLibrary.GetFileCRC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetEnablePhysicalCharacterNum(struct UObject* WorldContextObject); // Function /Script/Game.GameLibrary.GetEnablePhysicalCharacterNum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetChannelId(); // Function /Script/Game.GameLibrary.GetChannelId // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UAutoPSOSubsystem* GetAutoPSOSystem(struct UObject* WorldContextObject); // Function /Script/Game.GameLibrary.GetAutoPSOSystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class EVisibilityBasedAnimTickOption GetAnimationTickOptionsOnDS(struct UObject* WorldContext); // Function /Script/Game.GameLibrary.GetAnimationTickOptionsOnDS // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<__int32> GetAllCharacterCardID(); // Function /Script/Game.GameLibrary.GetAllCharacterCardID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UCharacterAbnormalRenderComponent* GetActorAbnormalRenderComponent(struct AActor* Actor); // Function /Script/Game.GameLibrary.GetActorAbnormalRenderComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FString> FindFunctionParamentersFromBlueprint(struct TArray<struct UEdGraph*>& InAllGraphs, struct TMap<struct FName, struct FName>& InFunctionParameters, struct FString InFilterEdName); // Function /Script/Game.GameLibrary.FindFunctionParamentersFromBlueprint // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void ExchangeGift(struct FString cdkey, struct FString playerInfoUrl, struct FString itemSendUrl); // Function /Script/Game.GameLibrary.ExchangeGift // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void DeleteAccount(); // Function /Script/Game.GameLibrary.DeleteAccount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 ConvertMonsTempExIdToMonsTempId(__int32 InExId); // Function /Script/Game.GameLibrary.ConvertMonsTempExIdToMonsTempId // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void CollectGarbage(); // Function /Script/Game.GameLibrary.CollectGarbage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void CleanUnusedResource(struct UObject* WorldContextObject, __int32 InType); // Function /Script/Game.GameLibrary.CleanUnusedResource // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool CheckVoiceLanguage(struct FString Voice); // Function /Script/Game.GameLibrary.CheckVoiceLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ChangeXGSdkLanguage(); // Function /Script/Game.GameLibrary.ChangeXGSdkLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ChangeVoiceLanguage(); // Function /Script/Game.GameLibrary.ChangeVoiceLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void CallLuaFunction_String(struct FString TableName, struct FString FuncName, struct FString& RetValue, struct FString Param1, struct FString Param2); // Function /Script/Game.GameLibrary.CallLuaFunction_String // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void CallLuaFunction_Int(struct FString TableName, struct FString FuncName, __int32& RetValue, struct FString Param1, struct FString Param2); // Function /Script/Game.GameLibrary.CallLuaFunction_Int // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void CallLuaFunction_Bool(struct FString TableName, struct FString FuncName, bool& RetValue, struct FString Param1, struct FString Param2); // Function /Script/Game.GameLibrary.CallLuaFunction_Bool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void CallLuaFunction(struct FString TableName, struct FString FuncName); // Function /Script/Game.GameLibrary.CallLuaFunction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void BP_StartActorCustomDepth(struct AActor* Actor, __int32 Value, enum class ERendererDepthStencilState State); // Function /Script/Game.GameLibrary.BP_StartActorCustomDepth // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void BP_EndActorCustomDepth(struct AActor* Actor, __int32 ID); // Function /Script/Game.GameLibrary.BP_EndActorCustomDepth // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void BindAccount(struct FString channelid); // Function /Script/Game.GameLibrary.BindAccount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ActorDelay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function /Script/Game.GameLibrary.ActorDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameLibraryGenKeyCommandlet
// Size: 0x0 (Inherited: 0x0)
struct UGameLibraryGenKeyCommandlet : UCommandlet {
};

 // Class /Script/Game.GameLocalPlayer
// Size: 0x0 (Inherited: 0x0)
struct UGameLocalPlayer : ULocalPlayer {

	void SetAutoAdapteToScreen(bool bValue); // Function /Script/Game.GameLocalPlayer.SetAutoAdapteToScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RefreshCamera(struct UObject* WorldContextObject); // Function /Script/Game.GameLocalPlayer.RefreshCamera // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FVector2D ComputeDesiredSize(struct FVector2D InDesignSize, struct FVector InTargetLocation, bool bOutputScale); // Function /Script/Game.GameLocalPlayer.ComputeDesiredSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameMediaWidget
// Size: 0x0 (Inherited: 0x0)
struct UGameMediaWidget : UWidget {
	struct FSlateBrush VideoBrush; // 0x0(0x0)
	struct UMediaPlayer* MediaPlayer; // 0x0(0x0)
	struct UMediaTexture* MediaTexture; // 0x0(0x0)
	struct UMaterial* VideoMaterial; // 0x0(0x0)
	char pad_1C0[0x10]; // 0x0(0x0)

	void SetDimensions(struct FVector2D InDimensions); // Function /Script/Game.GameMediaWidget.SetDimensions // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	bool Seek(float InTime); // Function /Script/Game.GameMediaWidget.Seek // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool PlayAndSeek(struct FString InFilePath, float InSeconds, bool AutoClear); // Function /Script/Game.GameMediaWidget.PlayAndSeek // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool Play(struct FString InFilePath, bool AutoClear, bool bLoop); // Function /Script/Game.GameMediaWidget.Play // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnEndReached(); // Function /Script/Game.GameMediaWidget.OnEndReached // (Final|Native|Private) // @ game+0
	struct UMediaPlayer* GetMediaPlayer(); // Function /Script/Game.GameMediaWidget.GetMediaPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetMediaDuration(); // Function /Script/Game.GameMediaWidget.GetMediaDuration // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Close(); // Function /Script/Game.GameMediaWidget.Close // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameMode_PlotLevel
// Size: 0x0 (Inherited: 0x0)
struct AGameMode_PlotLevel : AGameBaseMode {
};

 // Class /Script/Game.GameNiagaraPointLightComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameNiagaraPointLightComponent : UPointLightComponent {

	void SetLightRadius(float Value); // Function /Script/Game.GameNiagaraPointLightComponent.SetLightRadius // (Final|Native|Public) // @ game+0
	void SetLightIntensity(float Value); // Function /Script/Game.GameNiagaraPointLightComponent.SetLightIntensity // (Final|Native|Public) // @ game+0
	void SetColor(struct FLinearColor& Value); // Function /Script/Game.GameNiagaraPointLightComponent.SetColor // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0
};

 // Class /Script/Game.GameNiagaraComponentRendererComponentInterface
// Size: 0x0 (Inherited: 0x0)
struct UGameNiagaraComponentRendererComponentInterface : UInterface {
};

 // Class /Script/Game.GameNiagaraComponentRendererProperties
// Size: 0x0 (Inherited: 0x0)
struct UGameNiagaraComponentRendererProperties : UNiagaraComponentRendererProperties {
};

 // Class /Script/Game.GameNiagaraSkeletalMeshComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameNiagaraSkeletalMeshComponent : USkeletalMeshComponent {
	char pad_F00[0x8]; // 0x0(0x0)
	struct TArray<struct UMaterialInterface*> ReplaceMaterials; // 0x0(0x0)
	struct TMap<struct FName, __int32> LayerParameters; // 0x0(0x0)
	char pad_F68[0x8]; // 0x0(0x0)

	void SetMeshOrientation(struct FQuat& Value); // Function /Script/Game.GameNiagaraSkeletalMeshComponent.SetMeshOrientation // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0
	void SetDynamicMaterialParameter3(struct FVector4& Value); // Function /Script/Game.GameNiagaraSkeletalMeshComponent.SetDynamicMaterialParameter3 // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0
	void SetDynamicMaterialParameter2(struct FVector4& Value); // Function /Script/Game.GameNiagaraSkeletalMeshComponent.SetDynamicMaterialParameter2 // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0
	void SetDynamicMaterialParameter1(struct FVector4& Value); // Function /Script/Game.GameNiagaraSkeletalMeshComponent.SetDynamicMaterialParameter1 // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0
	void SetDynamicMaterialParameter(struct FVector4& Value); // Function /Script/Game.GameNiagaraSkeletalMeshComponent.SetDynamicMaterialParameter // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0
};

 // Class /Script/Game.GameNiagaraSystemWidget
// Size: 0x0 (Inherited: 0x0)
struct UGameNiagaraSystemWidget : UNiagaraSystemWidget {
	bool LowPerformanceDisable; // 0x0(0x0)
};

 // Class /Script/Game.GameNotifiersBP
// Size: 0x0 (Inherited: 0x0)
struct UGameNotifiersBP : UBlueprintFunctionLibrary {

	void ClearEnmity(struct AActor* InSelf, struct AActor* InTarget, enum class EEnmityClearType EnmityClearType); // Function /Script/Game.GameNotifiersBP.ClearEnmity // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddEnmity(struct AActor* BeAttacked, struct AActor* Attacker, float EnmityValue, enum class EEnmityType EnmityType); // Function /Script/Game.GameNotifiersBP.AddEnmity // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GamepadLibrary
// Size: 0x0 (Inherited: 0x0)
struct UGamepadLibrary : UBlueprintFunctionLibrary {

	void UseGamepadSetting(); // Function /Script/Game.GamepadLibrary.UseGamepadSetting // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SaveGamepadInputChord(struct FString InKey, struct FInputChord& InputChord, enum class EKeyboardInputType& InType); // Function /Script/Game.GamepadLibrary.SaveGamepadInputChord // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void RebindGamepadMapping(struct FString InKey); // Function /Script/Game.GamepadLibrary.RebindGamepadMapping // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ParseGamepadSettingValue(struct FString InSaveValue, bool& bCombine, struct FString& Left, struct FString& Right); // Function /Script/Game.GamepadLibrary.ParseGamepadSettingValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool IsAxis(struct FKey InKey); // Function /Script/Game.GamepadLibrary.IsAxis // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FName GetKeyName(struct FKey& InKey); // Function /Script/Game.GamepadLibrary.GetKeyName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetGampadConflictKey(struct FString InKey, enum class EKeyboardInputType& InType, struct FInputChord& InputChord, struct FString& OutKey, struct FString& KeyName); // Function /Script/Game.GamepadLibrary.GetGampadConflictKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FGameKeyboardItem GetGamepadShowItem(struct FString InKey); // Function /Script/Game.GamepadLibrary.GetGamepadShowItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FInputChord GetGamepadInputChordByType(struct FString InKey, enum class EKeyboardInputType& InType); // Function /Script/Game.GamepadLibrary.GetGamepadInputChordByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FInputChord GetGamepadDefaultInputChord(struct FString InKey, enum class EKeyboardInputType& InType); // Function /Script/Game.GamepadLibrary.GetGamepadDefaultInputChord // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString GetGamepadChordSaveName(struct FInputChord& InputChord); // Function /Script/Game.GamepadLibrary.GetGamepadChordSaveName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetGamepadCfgRows(struct TArray<struct FString>& CfgRows, bool bAllowGamepad); // Function /Script/Game.GamepadLibrary.GetGamepadCfgRows // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	enum class EKeyboardInputType GetGamepadActiveType(); // Function /Script/Game.GamepadLibrary.GetGamepadActiveType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FInputChord CreateInputChord(struct FString InKeyName); // Function /Script/Game.GamepadLibrary.CreateInputChord // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool CheckKeyIsSupport(struct FKey& InKey); // Function /Script/Game.GamepadLibrary.CheckKeyIsSupport // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameParticleAssetUserData
// Size: 0x0 (Inherited: 0x0)
struct UGameParticleAssetUserData : UAssetUserData {
	char pad_28[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.GameParticleBlueprintLibrary
// Size: 0x0 (Inherited: 0x0)
struct UGameParticleBlueprintLibrary : UBlueprintFunctionLibrary {

	struct UNiagaraComponent* SpawnGameNiagaraAttached(struct AActor* Caster, struct UNiagaraSystem* Template, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnGameNiagaraAttached // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct UNiagaraComponent* SpawnGameNiagaraAtLocation(struct UObject* WorldContextObject, struct AActor* Caster, struct UNiagaraSystem* Template, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnGameNiagaraAtLocation // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct UParticleSystemComponent* SpawnGameEmitterAttachedPath(struct AActor* Caster, struct FSoftObjectPath& InTemplatePath, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnGameEmitterAttachedPath // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UParticleSystemComponent* SpawnGameEmitterAttached(struct AActor* Caster, struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnGameEmitterAttached // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct UParticleSystemComponent* SpawnGameEmitterAtLocationPath(struct UObject* WorldContextObject, struct AActor* Caster, struct FSoftObjectPath& InTemplatePath, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnGameEmitterAtLocationPath // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UParticleSystemComponent* SpawnGameEmitterAtLocation(struct UObject* WorldContextObject, struct AActor* Caster, struct UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnGameEmitterAtLocation // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct UFXSystemComponent* SpawnAttachedPath(struct AActor* Caster, struct FSoftObjectPath& InTemplatePath, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnAttachedPath // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UFXSystemComponent* SpawnAttached(struct AActor* Caster, struct UFXSystemAsset* Template, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnAttached // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct UFXSystemComponent* SpawnAtLocationPath(struct UObject* WorldContextObject, struct AActor* Caster, struct FSoftObjectPath& InTemplatePath, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnAtLocationPath // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UFXSystemComponent* SpawnAtLocation(struct UObject* WorldContextObject, struct AActor* Caster, struct UFXSystemAsset* Template, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.SpawnAtLocation // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetParticleData(struct UFXSystemComponent* Comp, struct UObject* lpCaster, __int32 nUsedID, enum class EParticleEndPlayTriggerType EndType, enum class EParticleDisappearType DisappaerType); // Function /Script/Game.GameParticleBlueprintLibrary.SetParticleData // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsParticleLoop(struct UParticleSystem* Template); // Function /Script/Game.GameParticleBlueprintLibrary.IsParticleLoop // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsNiagaraLoop(struct UNiagaraSystem* Template); // Function /Script/Game.GameParticleBlueprintLibrary.IsNiagaraLoop // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GameParticleCasterType(struct AActor* Actor); // Function /Script/Game.GameParticleBlueprintLibrary.GameParticleCasterType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Destroy(struct UFXSystemComponent* Comp); // Function /Script/Game.GameParticleBlueprintLibrary.Destroy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UFXSystemComponent* BroadcastSpawnAtLocationPath(struct UObject* WorldContextObject, struct AActor* Caster, struct FSoftObjectPath& InTemplatePath, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.BroadcastSpawnAtLocationPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void BroadcastSpawnAtLocationByPath(struct UObject* WorldContextObject, struct FSoftObjectPath& InTemplatePath, struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function /Script/Game.GameParticleBlueprintLibrary.BroadcastSpawnAtLocationByPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void BroadcastSpawnAtLocationByID(struct UObject* WorldContextObject, __int32 InID, struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function /Script/Game.GameParticleBlueprintLibrary.BroadcastSpawnAtLocationByID // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct UFXSystemComponent* BroadcastSpawnAtLocation(struct UObject* WorldContextObject, struct AActor* Caster, struct UFXSystemAsset* Template, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EGPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bReplacePath); // Function /Script/Game.GameParticleBlueprintLibrary.BroadcastSpawnAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameParticleComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameParticleComponent : UParticleSystemComponent {
	char pad_6B0[0x30]; // 0x0(0x0)

	void OnSystemFinishedHandler(struct UParticleSystemComponent* InComponent); // Function /Script/Game.GameParticleComponent.OnSystemFinishedHandler // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.GameNiagaraComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameNiagaraComponent : UNiagaraComponent {
	char pad_600[0x30]; // 0x0(0x0)

	void OnSystemFinishedHandler(struct UNiagaraComponent* InComponent); // Function /Script/Game.GameNiagaraComponent.OnSystemFinishedHandler // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.ParticleSystemManager
// Size: 0x0 (Inherited: 0x0)
struct UParticleSystemManager : UEngineSubsystem {
	char pad_30[0x10]; // 0x0(0x0)
	struct TMap<__int32, struct FCompositeParticleInfo> CompositeParticles; // 0x0(0x0)
	char pad_90[0x1E8]; // 0x0(0x0)
	bool bForcePoolMethodNone; // 0x0(0x0)
	char pad_279[0x7]; // 0x0(0x0)

	void UpdateDataToNiagara(__int32 ID); // Function /Script/Game.ParticleSystemManager.UpdateDataToNiagara // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 SpawnCompositeAtLocation(struct AActor* Caster, struct UNiagaraSystem* Template, __int32 MaxParticleCount, struct FVector& Location, struct FRotator& Rotator); // Function /Script/Game.ParticleSystemManager.SpawnCompositeAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetBeamStartPoint(struct UFXSystemComponent* Comp, struct FVector Location); // Function /Script/Game.ParticleSystemManager.SetBeamStartPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetBeamEndPoint(struct UFXSystemComponent* Comp, struct FVector Location); // Function /Script/Game.ParticleSystemManager.SetBeamEndPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FSoftObjectPath ReplaceEffectPath(bool bReplace, struct FSoftObjectPath& InPath, struct UObject* WorldContextObject); // Function /Script/Game.ParticleSystemManager.ReplaceEffectPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void OnSystemFinished_PSC_UI(struct UParticleSystemComponent* PSC); // Function /Script/Game.ParticleSystemManager.OnSystemFinished_PSC_UI // (Final|Native|Private) // @ game+0
	void OnSystemFinished_PSC(struct UParticleSystemComponent* PSC); // Function /Script/Game.ParticleSystemManager.OnSystemFinished_PSC // (Final|Native|Private) // @ game+0
	void OnSystemFinished_NC_UI(struct UNiagaraComponent* NC); // Function /Script/Game.ParticleSystemManager.OnSystemFinished_NC_UI // (Final|Native|Private) // @ game+0
	void OnSystemFinished_NC(struct UNiagaraComponent* NC); // Function /Script/Game.ParticleSystemManager.OnSystemFinished_NC // (Final|Native|Private) // @ game+0
	void OnPCSystemFinished(struct UParticleSystemComponent* PC); // Function /Script/Game.ParticleSystemManager.OnPCSystemFinished // (Final|Native|Public) // @ game+0
	void OnNCSystemFinished(struct UNiagaraComponent* NC); // Function /Script/Game.ParticleSystemManager.OnNCSystemFinished // (Final|Native|Public) // @ game+0
	void OnFXComponentUnregister(struct UFXSystemComponent* Component); // Function /Script/Game.ParticleSystemManager.OnFXComponentUnregister // (Final|Native|Public) // @ game+0
	void OnFXComponentRegister(struct UFXSystemComponent* Component); // Function /Script/Game.ParticleSystemManager.OnFXComponentRegister // (Final|Native|Public) // @ game+0
	void OnEmitterEndDeleteParticleByID(__int32 ID, struct UAbilityComponentBase* OwnerAbility); // Function /Script/Game.ParticleSystemManager.OnEmitterEndDeleteParticleByID // (Final|Native|Private) // @ game+0
	void OnDeleteParticleByID(__int32 ID); // Function /Script/Game.ParticleSystemManager.OnDeleteParticleByID // (Final|Native|Private) // @ game+0
	void OnDeleteParticleByCancelID(__int32 ID, enum class ESkillInterruptedType InType); // Function /Script/Game.ParticleSystemManager.OnDeleteParticleByCancelID // (Final|Native|Private) // @ game+0
	void OnCharacterDeath(struct AGameCharacter* lpCharacter, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.ParticleSystemManager.OnCharacterDeath // (Final|Native|Private|HasOutParms) // @ game+0
	struct UObject* GetReplaceEffectByPath(struct UObject* WorldContextObject, struct FString InPath); // Function /Script/Game.ParticleSystemManager.GetReplaceEffectByPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UObject* GetReplaceEffect(struct UObject* WorldContextObject, struct UObject* Template); // Function /Script/Game.ParticleSystemManager.GetReplaceEffect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UParticleSystemManager* GetPtr(); // Function /Script/Game.ParticleSystemManager.GetPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int64 GetPiFuGDPLFromCard(struct UCharacterCard* InCard); // Function /Script/Game.ParticleSystemManager.GetPiFuGDPLFromCard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int64 GetPiFuGDPL(struct UObject* WorldContextObject); // Function /Script/Game.ParticleSystemManager.GetPiFuGDPL // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AActor* GameSpawnActorFromClassPath(struct UObject* WorldContextObject, struct FSoftClassPath& InClassPath, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner, bool bReplacePath, struct UObject* InReplaceObject); // Function /Script/Game.ParticleSystemManager.GameSpawnActorFromClassPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct AActor* GameSpawnActorFromClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner); // Function /Script/Game.ParticleSystemManager.GameSpawnActorFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool FindEffectReplaceSoftPath(struct FSoftObjectPath& InOutPath, __int64 InReplaceId); // Function /Script/Game.ParticleSystemManager.FindEffectReplaceSoftPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FString FindEffectReplacePathString(struct FString InPath, __int64 InReplaceId); // Function /Script/Game.ParticleSystemManager.FindEffectReplacePathString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool FindEffectReplacePath(struct FString& InOutPath, __int64 InReplaceId); // Function /Script/Game.ParticleSystemManager.FindEffectReplacePath // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void DestroyComposite(__int32 ID); // Function /Script/Game.ParticleSystemManager.DestroyComposite // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DestroyAll_UI(struct UObject* lpCaster, bool bForceDestroy); // Function /Script/Game.ParticleSystemManager.DestroyAll_UI // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CompositeAttach(__int32 ID, struct ABullet* Bullet); // Function /Script/Game.ParticleSystemManager.CompositeAttach // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CompositeAtLocation(__int32 ID, struct FVector& Location, struct FVector& Forward); // Function /Script/Game.ParticleSystemManager.CompositeAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GamePetCharacter
// Size: 0x0 (Inherited: 0x0)
struct AGamePetCharacter : AGameAICharacter {
	bool bIsSimpleMove; // 0x0(0x0)
	bool bUseMovementComp; // 0x0(0x0)
	float StuckTime; // 0x0(0x0)
	float CheckStuckDistance; // 0x0(0x0)
	float AcceptanceRadius; // 0x0(0x0)
	float StartChaseTime; // 0x0(0x0)
	float BackSpeed; // 0x0(0x0)
	float TestDistance; // 0x0(0x0)
	struct UCurveFloat* AccelerateCurve; // 0x0(0x0)
	struct UCurveFloat* ChaseAccelerateCurve; // 0x0(0x0)
	struct UCurveFloat* DecelerateCurve_PlayerWalkToStop; // 0x0(0x0)
	struct UCurveFloat* DecelerateCurve_PlayerRunToStop; // 0x0(0x0)
	struct TArray<struct UCurveFloat*> DecelerateCurve_SwingOffSets; // 0x0(0x0)
	struct UCurveFloat* AccelerateCurve_Shoot; // 0x0(0x0)
	struct UCurveFloat* AccelerateCurve_AVO; // 0x0(0x0)
	struct TSoftObjectPtr<UAnimMontage> DecelerateMontageSoft; // 0x0(0x0)
	struct FVector TargetOffset; // 0x0(0x0)
	struct FRotator TargetRotator; // 0x0(0x0)
	struct AActor* MyParent; // 0x0(0x0)
	float SwingCoolDownMin; // 0x0(0x0)
	float SwingCoolDownMax; // 0x0(0x0)
	char pad_CBA[0x2]; // 0x0(0x0)
	float SwingDuration; // 0x0(0x0)
	char pad_CC0[0x4]; // 0x0(0x0)
	float SwingStartDistance; // 0x0(0x0)
	char pad_CC8[0x8]; // 0x0(0x0)
	struct FTransform IdleTransform; // 0x0(0x0)
	struct FTransform MoveTransform; // 0x0(0x0)
	struct FTransform MoveAVOTransform; // 0x0(0x0)
	struct FTransform RotateTransform; // 0x0(0x0)
	struct FTransform ShootTransform; // 0x0(0x0)
	float ZAcceptValue; // 0x0(0x0)
	float SCENETARGET_HIGHSPEEDLIMIT; // 0x0(0x0)
	float SCENETARGET_SPRINTSPEEDLIMIT; // 0x0(0x0)
	bool bUsePlayerZ; // 0x0(0x0)
	char pad_DCD[0x3]; // 0x0(0x0)
	float AdjustForDownStairs; // 0x0(0x0)
	float DistanceForAccelerate; // 0x0(0x0)
	char pad_DD8[0x18]; // 0x0(0x0)
	float AccelerateTime; // 0x0(0x0)
	float SceneTargetSpeed; // 0x0(0x0)
	float MoveSpeed; // 0x0(0x0)
	char pad_DFC[0x4]; // 0x0(0x0)
	struct FString MoveType; // 0x0(0x0)
	struct FString TransformType; // 0x0(0x0)
	char pad_E20[0x60]; // 0x0(0x0)

	void RPC_SetActorLocation(struct FVector Location); // Function /Script/Game.GamePetCharacter.RPC_SetActorLocation // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0
};

 // Class /Script/Game.GamePhysicalAnimationComponent
// Size: 0x0 (Inherited: 0x0)
struct UGamePhysicalAnimationComponent : UPhysicalAnimationComponent {
	float MaxApplyStrength; // 0x0(0x0)
	float BlendSpeed; // 0x0(0x0)
	struct TWeakObjectPtr<struct USkeletalMeshComponent> OwnerMesh; // 0x0(0x0)
	struct TWeakObjectPtr<struct UHitReactPhysicalData> HitPhysData; // 0x0(0x0)
	char pad_108[0xA8]; // 0x0(0x0)

	void SetPhyAnimEnable(bool bEnable); // Function /Script/Game.GamePhysicalAnimationComponent.SetPhyAnimEnable // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SpecialSceneCamera
// Size: 0x0 (Inherited: 0x0)
struct USpecialSceneCamera : UPrimaryDataAsset {
	struct FCameraOffset NormalCameraOffset; // 0x0(0x0)
	struct FCameraOffset FireCameraOffset; // 0x0(0x0)
	struct FCameraOffset AimCameraOffset; // 0x0(0x0)
	struct FCameraOffset RushCameraOffset; // 0x0(0x0)
	float RushToNormalSpeed; // 0x0(0x0)
	char pad_A4[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.SkillSceneCamera
// Size: 0x0 (Inherited: 0x0)
struct USkillSceneCamera : USpecialSceneCamera {

	void SetRushCameraOffsetInfo(struct FCameraOffset& InRush); // Function /Script/Game.SkillSceneCamera.SetRushCameraOffsetInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetNormalCameraOffsetInfo(struct FCameraOffset& InNormal); // Function /Script/Game.SkillSceneCamera.SetNormalCameraOffsetInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetFireCameraOffsetInfo(struct FCameraOffset& InFire); // Function /Script/Game.SkillSceneCamera.SetFireCameraOffsetInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetAimCameraOffsetInfo(struct FCameraOffset& InAim); // Function /Script/Game.SkillSceneCamera.SetAimCameraOffsetInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GamePlayer
// Size: 0x0 (Inherited: 0x0)
struct AGamePlayer : AGameCharacter {
	struct UGameSpringArmComponent* CameraArm; // 0x0(0x0)
	struct UCameraComponent* Camera; // 0x0(0x0)
	struct UTargetWarpingComponent* TargetWarpingComponent; // 0x0(0x0)
	struct UCharacterMovementTrajectoryComponent* MovementTrajectoryComponent; // 0x0(0x0)
	struct FRotator BunkerRotatorForward; // 0x0(0x0)
	struct FRotator BunkerRotatorBackward; // 0x0(0x0)
	struct FRotator BunkerRotatorRight; // 0x0(0x0)
	struct FRotator BunkerRotatorLeft; // 0x0(0x0)
	bool bIsReachLeftPeak; // 0x0(0x0)
	bool bIsReachRightPeak; // 0x0(0x0)
	bool bIsKeepLeftRotArea; // 0x0(0x0)
	bool bIsKeepRightRotArea; // 0x0(0x0)
	bool bIsHalfBunker; // 0x0(0x0)
	bool bIsLeftSide; // 0x0(0x0)
	bool bIsBunkerShootingUnLeaned; // 0x0(0x0)
	bool bEnterBunkerComplete; // 0x0(0x0)
	bool bIsCurBunerMoving; // 0x0(0x0)
	bool bIsLastBunerMoving; // 0x0(0x0)
	char pad_B4A[0x2]; // 0x0(0x0)
	struct FName BunkerEnterPosName; // 0x0(0x0)
	float InputTryExitBunkerThrehold; // 0x0(0x0)
	float InputTryExitBunkerAttenuation; // 0x0(0x0)
	float MoveRotationUseBunkerInSideAngleThrehold; // 0x0(0x0)
	float BunkerLeanedFaceBunkerOutSideThrehold; // 0x0(0x0)
	float HalfBunkerShootingUnLeanedThrehold; // 0x0(0x0)
	float FullBunkerShootingUnLeanedThrehold; // 0x0(0x0)
	float FullBunkerUseCameraDirAtPeakThrehold; // 0x0(0x0)
	float FullBunkerUseCameraDirAtMiddleThrehold; // 0x0(0x0)
	char pad_B74[0xC]; // 0x0(0x0)
	float InputExitBunkerAngleThrehold; // 0x0(0x0)
	float MinInputExitBunkerTime; // 0x0(0x0)
	float GamepadMinInputExitBunkerTime; // 0x0(0x0)
	float MobileMinInputExitBunkerTime; // 0x0(0x0)
	float MaxInputExitBunkerTime; // 0x0(0x0)
	float GamepadMaxInputExitBunkerTime; // 0x0(0x0)
	float MobileMaxInputExitBunkerTime; // 0x0(0x0)
	char pad_B9C[0x34]; // 0x0(0x0)
	float BunkerEdgeOffset; // 0x0(0x0)
	float MinInputSideExitFullBunkerTime; // 0x0(0x0)
	float MaxInputSideExitFullBunkerTime; // 0x0(0x0)
	float MinInputSideExitHalfBunkerTime; // 0x0(0x0)
	float MaxInputSideExitHalfBunkerTime; // 0x0(0x0)
	float AimMinInputSideExitBunkerTime; // 0x0(0x0)
	float AimMaxInputSideExitBunkerTime; // 0x0(0x0)
	float InputSideExitBunkerAngleThrehold; // 0x0(0x0)
	struct FVector2D BunkerEdgeAboveFireAngleThrehold; // 0x0(0x0)
	float AimInputLeaveBunkerPeakTime; // 0x0(0x0)
	float AimInputLeaveBunkerPeakAngle; // 0x0(0x0)
	float BunkerEnterPositionMaxAngle; // 0x0(0x0)
	float EnterBunkerAccNormalAngleLimit; // 0x0(0x0)
	float BunkerMoveIgnoreAccNormalAngle; // 0x0(0x0)
	float CrossBunkerAccNormalAngleLimit; // 0x0(0x0)
	float CrossInBunkerAccNormalAngleLimit; // 0x0(0x0)
	float AutoEnterBunkerAccNormalAngleLimit; // 0x0(0x0)
	float GamepadAutoEnterBunkerAccNormalAngleLimit; // 0x0(0x0)
	float MobileAutoEnterBunkerAccNormalAngleLimit; // 0x0(0x0)
	float AutoCrossBunkerAccNormalAngleLimit; // 0x0(0x0)
	float GamepadAutoCrossBunkerAccNormalAngleLimit; // 0x0(0x0)
	float MobileAutoCrossBunkerAccNormalAngleLimit; // 0x0(0x0)
	float DodgeInBunkerAccAngleLimit; // 0x0(0x0)
	float GamepadExitBunkerInputScaleThreshold; // 0x0(0x0)
	float MobileExitBunkerInputScaleThreshold; // 0x0(0x0)
	char pad_C38[0x10]; // 0x0(0x0)
	struct FSoftClassPath RecordSkillCostBuffer; // 0x0(0x0)
	struct FCameraInfo PlayerCameraInfo; // 0x0(0x0)
	struct FCameraInfo CurrentCameraInfo; // 0x0(0x0)
	char bIsRushing : 1; // 0x0(0x0)
	char pad_E10_1 : 7; // 0x0(0x0)
	enum class EAbnormalState CurrentAbnormalState; // 0x0(0x0)
	char bIsInSkillAim : 1; // 0x0(0x0)
	char pad_E12_1 : 7; // 0x0(0x0)
	char pad_E13[0x5]; // 0x0(0x0)
	struct FCameraInfo TempNormalCameraInfo; // 0x0(0x0)
	struct FCameraInfo TempFireCameraInfo; // 0x0(0x0)
	struct FCameraInfo TempAimCameraInfo; // 0x0(0x0)
	struct FCameraInfo TempRushCameraInfo; // 0x0(0x0)
	float AimOffsetInterval; // 0x0(0x0)
	float BornMontageDelay; // 0x0(0x0)
	struct FVector2D AimOffset; // 0x0(0x0)
	float CurrentAimOffsetTimer; // 0x0(0x0)
	float ThresholdYawAngle; // 0x0(0x0)
	float CurrentYawAngle; // 0x0(0x0)
	char bShowSpawn : 1; // 0x0(0x0)
	char pad_1194_1 : 7; // 0x0(0x0)
	char pad_1195[0xB]; // 0x0(0x0)
	float EffectDelayTime; // 0x0(0x0)
	float PostProcessDelayTime; // 0x0(0x0)
	float PostProcessAliveTime; // 0x0(0x0)
	__int32 DeathPostProcessId; // 0x0(0x0)
	float MaterialDelayTime; // 0x0(0x0)
	float MaterialTime; // 0x0(0x0)
	struct FString DeathSound; // 0x0(0x0)
	__int32 MaterialInstanceId; // 0x0(0x0)
	char pad_11CC[0x4]; // 0x0(0x0)
	struct FAnimInfoNet AnimInfo; // 0x0(0x0)
	bool bIsDead; // 0x0(0x0)
	char pad_1221[0x7]; // 0x0(0x0)
	struct TArray<__int32> RandomBufferes; // 0x0(0x0)
	char pad_1238[0x98]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCharacterStartSwitch; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCharacterStartQTE; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCharacterRevive; // 0x0(0x0)
	char pad_1300[0x8]; // 0x0(0x0)
	struct TArray<struct FPlayerHpVoiceInfo> PlayerHpVoiceInfo; // 0x0(0x0)
	struct FString VoiceID_SwitchPlayer; // 0x0(0x0)
	struct FString VoiceID_BreakShield; // 0x0(0x0)
	struct FString VoiceID_Overhead; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPlayerFightStateChanged; // 0x0(0x0)
	char pad_1358[0x8]; // 0x0(0x0)
	struct FStepTriggerData StepTriggerData_L; // 0x0(0x0)
	struct FStepTriggerData StepTriggerData_R; // 0x0(0x0)
	struct FStepTriggerRunTimeData StepRuntimeData_L; // 0x0(0x0)
	struct FStepTriggerRunTimeData StepRuntimeData_R; // 0x0(0x0)
	char pad_1960[0x1C]; // 0x0(0x0)
	bool bInFight; // 0x0(0x0)
	char pad_197D[0xB]; // 0x0(0x0)
	struct UPlayerPerformanceComponent* PerformanceComp; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct ABlindage>> CurrentOverlapBlindage; // 0x0(0x0)
	struct TWeakObjectPtr<struct ABlindage> CurrentBlindage; // 0x0(0x0)
	char pad_19A8[0x88]; // 0x0(0x0)
	struct UCurveFloat* BunkerHintCurve; // 0x0(0x0)
	struct UFXSystemComponent* BunkerClimbHint; // 0x0(0x0)
	struct UFXSystemComponent* BunkerExitHint; // 0x0(0x0)
	char pad_1A48[0x18]; // 0x0(0x0)

	void TryEnterBlindage(); // Function /Script/Game.GamePlayer.TryEnterBlindage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TargetPlayerChange(struct AActor* InActor, bool bSetNewActor); // Function /Script/Game.GamePlayer.TargetPlayerChange // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void SetIsDead(bool bInIsDead); // Function /Script/Game.GamePlayer.SetIsDead // (Final|Native|Public) // @ game+0
	void SetInSpawn(bool bInSpawn); // Function /Script/Game.GamePlayer.SetInSpawn // (Final|Native|Protected|BlueprintCallable) // @ game+0
	void SetInSkillAim(bool bAim); // Function /Script/Game.GamePlayer.SetInSkillAim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetEnterBunkerComplete(bool bComplete); // Function /Script/Game.GamePlayer.SetEnterBunkerComplete // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAbnormalState(enum class EAbnormalState AbnormalState); // Function /Script/Game.GamePlayer.SetAbnormalState // (Net|Native|Event|NetMulticast|Protected) // @ game+0
	void ServerSetCurrentBlindage(struct ABlindage* Blindage); // Function /Script/Game.GamePlayer.ServerSetCurrentBlindage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void ServerSetAimOffset(struct FVector2D nAimOffset); // Function /Script/Game.GamePlayer.ServerSetAimOffset // (Final|Net|Native|Event|Private|NetServer|HasDefaults) // @ game+0
	void ServerSetAcceleration(float CurrentAcceleration); // Function /Script/Game.GamePlayer.ServerSetAcceleration // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0
	void ServerPrintActorChannel(); // Function /Script/Game.GamePlayer.ServerPrintActorChannel // (Net|NetReliableNative|Event|Protected|NetServer|Const) // @ game+0
	void RPC_ClientPlayEncouterEnemy(__int32 EnmeyNum); // Function /Script/Game.GamePlayer.RPC_ClientPlayEncouterEnemy // (Net|Native|Event|Protected|NetClient) // @ game+0
	void RPC_ClientPlayDrawInfo(struct FVector ActorLocation, struct FVector CollisionCylinderExtent); // Function /Script/Game.GamePlayer.RPC_ClientPlayDrawInfo // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient) // @ game+0
	bool Revive(float fScale, bool bUseScaleValue); // Function /Script/Game.GamePlayer.Revive // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetTempCameraInfo(); // Function /Script/Game.GamePlayer.ResetTempCameraInfo // (Final|Native|Private) // @ game+0
	bool ReceiveIsAiming(); // Function /Script/Game.GamePlayer.ReceiveIsAiming // (Event|Protected|BlueprintEvent|Const) // @ game+0
	void PrintServerActorChannel(); // Function /Script/Game.GamePlayer.PrintServerActorChannel // (Final|Exec|Native|Protected|Const) // @ game+0
	void PlayerFightStateStartChanged(struct AGamePlayer* Player, bool InFight); // Function /Script/Game.GamePlayer.PlayerFightStateStartChanged // (Final|Native|Protected) // @ game+0
	void OnShieldChange(float Current, float Max, float Old); // Function /Script/Game.GamePlayer.OnShieldChange // (Final|Native|Private) // @ game+0
	void OnRep_RefreshRandomBufferes(); // Function /Script/Game.GamePlayer.OnRep_RefreshRandomBufferes // (Final|Native|Private) // @ game+0
	void OnRep_IsDead(); // Function /Script/Game.GamePlayer.OnRep_IsDead // (Final|Native|Public) // @ game+0
	void OnRep_FightStateChanged(); // Function /Script/Game.GamePlayer.OnRep_FightStateChanged // (Final|Native|Protected) // @ game+0
	void OnRep_AnimInfo(); // Function /Script/Game.GamePlayer.OnRep_AnimInfo // (Final|Native|Public) // @ game+0
	void OnPlayerSwitch(bool bDeadSwitch); // Function /Script/Game.GamePlayer.OnPlayerSwitch // (Final|Native|Protected) // @ game+0
	void OnMontageComplete(struct UAnimMontage* Montage, bool bInterrupted); // Function /Script/Game.GamePlayer.OnMontageComplete // (Final|Native|Protected) // @ game+0
	void OnHPChange(float Current, float Max, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.GamePlayer.OnHPChange // (Final|Native|Private) // @ game+0
	void NetPreloadSkill(struct TArray<__int32> InSkillIds); // Function /Script/Game.GamePlayer.NetPreloadSkill // (Net|Native|Event|NetMulticast|Public) // @ game+0
	void LeaveBlindageOperate(); // Function /Script/Game.GamePlayer.LeaveBlindageOperate // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LeaveBlindage(); // Function /Script/Game.GamePlayer.LeaveBlindage // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInFight(); // Function /Script/Game.GamePlayer.IsInFight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsInBlindage(struct ABlindage* Blindage); // Function /Script/Game.GamePlayer.IsInBlindage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsHalfBunker(); // Function /Script/Game.GamePlayer.IsHalfBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsFullBunker(); // Function /Script/Game.GamePlayer.IsFullBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FRandomBufferInfo GetShopBufferInfo(__int32 Index); // Function /Script/Game.GamePlayer.GetShopBufferInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetIsReachRightPeak(); // Function /Script/Game.GamePlayer.GetIsReachRightPeak // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetIsReachLeftPeak(); // Function /Script/Game.GamePlayer.GetIsReachLeftPeak // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetIsKeepRightRotArea(); // Function /Script/Game.GamePlayer.GetIsKeepRightRotArea // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetIsKeepLeftRotArea(); // Function /Script/Game.GamePlayer.GetIsKeepLeftRotArea // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetIsHalfBunker(); // Function /Script/Game.GamePlayer.GetIsHalfBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetCanFireInBunker(); // Function /Script/Game.GamePlayer.GetCanFireInBunker // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetBufferCount(__int32 BufferId); // Function /Script/Game.GamePlayer.GetBufferCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<__int32> GetActivedBuffers(); // Function /Script/Game.GamePlayer.GetActivedBuffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetAbilityBufferLevel(__int32 BufferId); // Function /Script/Game.GamePlayer.GetAbilityBufferLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FAbilityBufferPrice GetAbilityBuffer(__int32 BufferId); // Function /Script/Game.GamePlayer.GetAbilityBuffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void FightStateChangedPlaySound(bool InFight); // Function /Script/Game.GamePlayer.FightStateChangedPlaySound // (Final|Native|Protected) // @ game+0
	void EnterBlindageOperate(); // Function /Script/Game.GamePlayer.EnterBlindageOperate // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AActor* CreateShowWeaponPart(struct USceneComponent* InComponent, __int64 WeaponPartId); // Function /Script/Game.GamePlayer.CreateShowWeaponPart // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AActor* CreateShowWeapon(struct USceneComponent* InComponent, __int64 WeaponID); // Function /Script/Game.GamePlayer.CreateShowWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AActor* CreateShowCharacter(struct AActor* ActorOwner, __int64 CharacterID); // Function /Script/Game.GamePlayer.CreateShowCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool CanUpgradeAbilityBufferLevel(__int32 BufferId); // Function /Script/Game.GamePlayer.CanUpgradeAbilityBufferLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CanBuyShopBuffer(__int32 BufferId); // Function /Script/Game.GamePlayer.CanBuyShopBuffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void CanAutoEnterBlindage(bool& OutbCanEnter, bool& OutbCanClimb); // Function /Script/Game.GamePlayer.CanAutoEnterBlindage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool BuyShopBuffer(__int32 Index); // Function /Script/Game.GamePlayer.BuyShopBuffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GamePlayerAIController
// Size: 0x0 (Inherited: 0x0)
struct AGamePlayerAIController : AGameAIController {
};

 // Class /Script/Game.GamePlayerController
// Size: 0x0 (Inherited: 0x0)
struct AGamePlayerController : APlayerController {
	struct FMulticastInlineDelegate OnOpenDecryptSwitch; // 0x0(0x0)
	struct FMulticastInlineDelegate OnChangeActionMode; // 0x0(0x0)
	struct FMulticastInlineDelegate OnChangeVerticalSlide; // 0x0(0x0)
	struct UCharacterStateMachineComponent* CharacterStateMachineComponent; // 0x0(0x0)
	struct UTeamAbilityComponent* TeamAbilityComponent; // 0x0(0x0)
	struct UObject* DefaultPawnClass; // 0x0(0x0)
	struct AActor* CurInteractActor; // 0x0(0x0)
	struct TArray<struct UCharacterCard*> PlayerCharInfos; // 0x0(0x0)
	char AccountLevel; // 0x0(0x0)
	char pad_5D1[0x17]; // 0x0(0x0)
	struct TArray<struct AGameCharacter*> PlayerChars; // 0x0(0x0)
	bool bIsOpenElemExplosion; // 0x0(0x0)
	char pad_5F9[0x7]; // 0x0(0x0)
	struct AGameCharacter* CurrentChar; // 0x0(0x0)
	struct AGameCharacter* QTEChar; // 0x0(0x0)
	struct AGameCharacter* NextChar; // 0x0(0x0)
	bool bIsInQTESwitch; // 0x0(0x0)
	char pad_619[0x2B]; // 0x0(0x0)
	struct FVector2D AimTargetPosition; // 0x0(0x0)
	char pad_64C[0x8]; // 0x0(0x0)
	char bAimTargetLocked : 1; // 0x0(0x0)
	char pad_654_1 : 7; // 0x0(0x0)
	char pad_655[0x3]; // 0x0(0x0)
	float AimTargetLockedThreshold; // 0x0(0x0)
	float FollowAimSpeed; // 0x0(0x0)
	float FollowAimSpeedLocked; // 0x0(0x0)
	float SelectPriorityScale; // 0x0(0x0)
	struct USceneComponent* ViewTargetComponent; // 0x0(0x0)
	struct FVector ViewTargetPosition; // 0x0(0x0)
	struct FVector ShootTargetPosition; // 0x0(0x0)
	char pad_688[0x18]; // 0x0(0x0)
	struct FVector RayStart; // 0x0(0x0)
	struct FVector ShootAimingTargetPosition; // 0x0(0x0)
	struct AActor* ShootTargetActor; // 0x0(0x0)
	struct FVector ShootAssistTargetPosition; // 0x0(0x0)
	float FixedGameCharacterTime; // 0x0(0x0)
	float CurrentFixedGameCharacterTime; // 0x0(0x0)
	char pad_6D4[0x4]; // 0x0(0x0)
	struct AGameCharacter* FixedGameCharacter; // 0x0(0x0)
	char bFrictionCoefficientCurve : 1; // 0x0(0x0)
	char pad_6E0_1 : 7; // 0x0(0x0)
	char pad_6E1[0x3]; // 0x0(0x0)
	float ScaleAimCenterFrictionCoefficient; // 0x0(0x0)
	float ScaleNormalCenterFrictionCoefficient; // 0x0(0x0)
	char pad_6EC[0x4]; // 0x0(0x0)
	struct FRuntimeFloatCurve FrictionCoefficientCurve; // 0x0(0x0)
	__int32 AimFrictionKey; // 0x0(0x0)
	__int32 TrapFrictionKey; // 0x0(0x0)
	__int32 WeakFrictionKey; // 0x0(0x0)
	float ScaleNormalFriction; // 0x0(0x0)
	__int32 NormalFrictionKey; // 0x0(0x0)
	char bIsEnableFriction : 1; // 0x0(0x0)
	char pad_78C_1 : 7; // 0x0(0x0)
	char pad_78D[0x3]; // 0x0(0x0)
	float FrictionSettingScale; // 0x0(0x0)
	float FrictionCoefficientTimer; // 0x0(0x0)
	float LastFrictionCoefficientTimer; // 0x0(0x0)
	float CurrentFrictionCoefficientTimer; // 0x0(0x0)
	__int32 CurrentFrictionKey; // 0x0(0x0)
	char bHitWeak : 1; // 0x0(0x0)
	char bHitProp : 1; // 0x0(0x0)
	char pad_7A4_2 : 6; // 0x0(0x0)
	char pad_7A5[0x3]; // 0x0(0x0)
	struct FRuntimeFloatCurve DistanceFrictionCoefficientCurve; // 0x0(0x0)
	float FrictionCoefficient; // 0x0(0x0)
	float FrictionCoefficientPercent; // 0x0(0x0)
	bool bInFriction; // 0x0(0x0)
	char pad_839[0x3]; // 0x0(0x0)
	char bIsLeisureFire : 1; // 0x0(0x0)
	char pad_83C_1 : 7; // 0x0(0x0)
	char pad_83D[0x3]; // 0x0(0x0)
	float DelayFireTime; // 0x0(0x0)
	float CurrentDelayFireTime; // 0x0(0x0)
	float TargetDistanceWeight; // 0x0(0x0)
	float TargetScreenDistanceWeight; // 0x0(0x0)
	bool bEnableAutoFire; // 0x0(0x0)
	enum class ESelectTargetMode SelectTargetMode; // 0x0(0x0)
	bool bSelectDamageLocation; // 0x0(0x0)
	bool bFixedAimTarget; // 0x0(0x0)
	float FixedAimTargetScale; // 0x0(0x0)
	bool bIsAimTarget; // 0x0(0x0)
	char pad_859[0x3]; // 0x0(0x0)
	struct FVector2D ScaleLeisureTargetRange; // 0x0(0x0)
	char pad_864[0x4]; // 0x0(0x0)
	struct TArray<struct FSoftObjectPath> ShareAttributePath; // 0x0(0x0)
	struct TArray<struct FSoftObjectPath> ShareAttributeLimitPath; // 0x0(0x0)
	struct TArray<struct FSoftClassPath> ShareBufferPath; // 0x0(0x0)
	struct FSoftObjectPath NiagaraSystemAsset; // 0x0(0x0)
	char bIsActiveSkillEffect : 1; // 0x0(0x0)
	char pad_8B0_1 : 7; // 0x0(0x0)
	char pad_8B1[0x7]; // 0x0(0x0)
	struct UNiagaraComponent* NiagaraSystem; // 0x0(0x0)
	char pad_8C0[0x8]; // 0x0(0x0)
	struct AActor* SkillTargetActor; // 0x0(0x0)
	struct AActor* InnerSkillTargetActor; // 0x0(0x0)
	struct FBoneResult SkillTargetPartResult; // 0x0(0x0)
	struct FBoneResult SkillTargetPartitionResult; // 0x0(0x0)
	struct FVector SkillEffectLocation; // 0x0(0x0)
	struct FVector2D SkillTargetRange; // 0x0(0x0)
	struct FVector2D InnerSkillTargetRange; // 0x0(0x0)
	float SkillTargetDistanceWeight; // 0x0(0x0)
	float SelectSkillPriorityScale; // 0x0(0x0)
	float SkillSelectRange; // 0x0(0x0)
	float AdsorbentRangePer; // 0x0(0x0)
	bool bAdsorbentLastAim; // 0x0(0x0)
	bool bStartAdsorbent; // 0x0(0x0)
	char pad_946[0x2]; // 0x0(0x0)
	float StartAdsorbentTime; // 0x0(0x0)
	char pad_94C[0x4]; // 0x0(0x0)
	struct FDamagePosition AdsorbentData; // 0x0(0x0)
	struct FRotator AdsorbentRot; // 0x0(0x0)
	bool bEnableOneFollow; // 0x0(0x0)
	bool bGamepadFollow; // 0x0(0x0)
	char pad_996[0x2]; // 0x0(0x0)
	struct TArray<struct FAssistRotationRate> AssistRotationRate; // 0x0(0x0)
	float TurnRotationRateThreshold; // 0x0(0x0)
	bool bAlwaysRotation; // 0x0(0x0)
	char pad_9AD[0x3]; // 0x0(0x0)
	float ScaleRotationSpeed; // 0x0(0x0)
	float ScaleNormalRotationSpeed; // 0x0(0x0)
	float ScaleLeisureRotationSpeed; // 0x0(0x0)
	char bIsEnableTurnControl : 1; // 0x0(0x0)
	char pad_9BC_1 : 7; // 0x0(0x0)
	char pad_9BD[0x3]; // 0x0(0x0)
	float TurnAngleThreshold; // 0x0(0x0)
	float TurnDurationTime; // 0x0(0x0)
	float CurrentTurnDurationTime; // 0x0(0x0)
	float TotalTurnAngle; // 0x0(0x0)
	char TouchCount; // 0x0(0x0)
	char pad_9D1[0x3]; // 0x0(0x0)
	float DisableRotationTime; // 0x0(0x0)
	float AutoLockTargetTime; // 0x0(0x0)
	float LeisureLockTargetTime; // 0x0(0x0)
	float AutoLockTargetAngleThreshold; // 0x0(0x0)
	char bShouldAutoAim : 1; // 0x0(0x0)
	char pad_9E4_1 : 7; // 0x0(0x0)
	char pad_9E5[0x3]; // 0x0(0x0)
	float CurrentAutoLockTargetTime; // 0x0(0x0)
	char pad_9EC[0x4]; // 0x0(0x0)
	struct FAutoLockTarget CurrentLockTarget; // 0x0(0x0)
	float AutoRushAngleLimit; // 0x0(0x0)
	char pad_A14[0x4]; // 0x0(0x0)
	struct UCurveFloat* CameraTurnCurve; // 0x0(0x0)
	struct UCurveFloat* ReStartCameraTurnCurve; // 0x0(0x0)
	float MoveScale; // 0x0(0x0)
	float TurnTime; // 0x0(0x0)
	bool bIsReStartTurn; // 0x0(0x0)
	char pad_A31[0x3]; // 0x0(0x0)
	float LagSpeed; // 0x0(0x0)
	float AutoTurnControleThreshold; // 0x0(0x0)
	float AimOffsetThreshold; // 0x0(0x0)
	float AimCameraShakeScale; // 0x0(0x0)
	float CurrentTurnSpeed; // 0x0(0x0)
	struct UCurveFloat* CameraShakeFOVCurve; // 0x0(0x0)
	struct UCurveFloat* CameraShakeDisCurve; // 0x0(0x0)
	struct UCurveFloat* CameraResetCurve; // 0x0(0x0)
	float AutoRotationTime; // 0x0(0x0)
	float CurrentRotationTime; // 0x0(0x0)
	struct FRotator AutoTargetRotation; // 0x0(0x0)
	struct FRotator AutoControlRotation; // 0x0(0x0)
	struct FRotator WeaponRecoil; // 0x0(0x0)
	struct FRotator TotalWeaponRecoil; // 0x0(0x0)
	char RecoilFlag; // 0x0(0x0)
	char pad_A99[0xB]; // 0x0(0x0)
	float ForwardMoveValInterpSpeed; // 0x0(0x0)
	float RightMoveValInterpSpeed; // 0x0(0x0)
	bool bLockCamera; // 0x0(0x0)
	bool bAltExhaleMouse; // 0x0(0x0)
	bool bExhaleMouse; // 0x0(0x0)
	bool bLevelExhaleMouse; // 0x0(0x0)
	bool bPressLeftAlt; // 0x0(0x0)
	bool bPressGamepadLB; // 0x0(0x0)
	bool bPressGamepadRB; // 0x0(0x0)
	char pad_AB3[0x1]; // 0x0(0x0)
	unsigned __int32 ExhaleCount; // 0x0(0x0)
	unsigned __int32 AltExhaleCount; // 0x0(0x0)
	char pad_ABC[0x4]; // 0x0(0x0)
	struct FTimerHandle GamepadDealyLBRBTimerHandle; // 0x0(0x0)
	float GamepadDealyLBRBTime; // 0x0(0x0)
	char pad_ACC[0x4]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnPlayerInitComplate; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReloadWeapon; // 0x0(0x0)
	struct FMulticastInlineDelegate OnSetAimTargetPosition; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReachAimTargetPosition; // 0x0(0x0)
	float AutoFireDelay; // 0x0(0x0)
	float CurrentAutoFireDelay; // 0x0(0x0)
	float AutoStopFireDelay; // 0x0(0x0)
	float CurrentAutoStopFireDelay; // 0x0(0x0)
	float ViewAngleThreshold; // 0x0(0x0)
	char bIsAutoFiring : 1; // 0x0(0x0)
	char bIsHandFiring : 1; // 0x0(0x0)
	char pad_B24_2 : 6; // 0x0(0x0)
	char pad_B25[0x3]; // 0x0(0x0)
	float ExhaleMouseDelayTime; // 0x0(0x0)
	char pad_B2C[0xC]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnQTESwitch; // 0x0(0x0)
	struct FMulticastInlineDelegate OnCharacterSwitch; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAutoFire; // 0x0(0x0)
	char pad_B68[0x28]; // 0x0(0x0)
	float CameraInputScale; // 0x0(0x0)
	char pad_B94[0x14]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnShowSkillAimMask; // 0x0(0x0)
	char pad_BB8[0x8]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnShowAimMask; // 0x0(0x0)
	struct FMulticastInlineDelegate OnAim; // 0x0(0x0)
	struct FMulticastInlineDelegate OnWeaponFireState; // 0x0(0x0)
	char pad_BF0[0x18]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnOpenBox; // 0x0(0x0)
	struct FMulticastInlineDelegate OnClickTask; // 0x0(0x0)
	char pad_C28[0x10]; // 0x0(0x0)
	bool bBlockAimAction; // 0x0(0x0)
	char pad_C39[0x3]; // 0x0(0x0)
	float SwitchCDRemaining; // 0x0(0x0)
	struct TMap<struct AGameCharacter*, float> CharacterSwitchCD; // 0x0(0x0)
	__int32 SwitchPostProcessId; // 0x0(0x0)
	__int32 HPLOWPostProcessId; // 0x0(0x0)
	__int32 HPLOWBurstId; // 0x0(0x0)
	float SlomoRemainingTime; // 0x0(0x0)
	float SlomoStartTime; // 0x0(0x0)
	bool bStartSlomo; // 0x0(0x0)
	bool bInitSlomo; // 0x0(0x0)
	char pad_CA6[0x2]; // 0x0(0x0)
	unsigned __int32 SlomoFrameDelay; // 0x0(0x0)
	float StartSlomoTimer; // 0x0(0x0)
	__int32 MaterialIndex; // 0x0(0x0)
	bool bMaterialChange_StartQTE; // 0x0(0x0)
	char pad_CB5[0x3]; // 0x0(0x0)
	float MaterialChangeTime; // 0x0(0x0)
	bool bMaterialChange_EndQTE; // 0x0(0x0)
	bool bInitialMaterialChange; // 0x0(0x0)
	char pad_CBE[0x2]; // 0x0(0x0)
	struct TArray<struct AActor*> SlomoEffectActors; // 0x0(0x0)
	float StartTurnTime; // 0x0(0x0)
	float AimStartTurnTime; // 0x0(0x0)
	float ExtraSpeedStartAddTime; // 0x0(0x0)
	float ExtraSpeedDelayAddTime; // 0x0(0x0)
	float MaxExtraSpeed; // 0x0(0x0)
	float GamepadInputBaseMultiple; // 0x0(0x0)
	float GamepadRecessiveThreshold; // 0x0(0x0)
	float GamepadInputMaxCriterion; // 0x0(0x0)
	__int32 GamepadInputFloatingWindowLength; // 0x0(0x0)
	__int32 CurInputMaxCriterion; // 0x0(0x0)
	struct TArray<float> FloatingWindow; // 0x0(0x0)
	bool InitExtraSpeedInfo; // 0x0(0x0)
	char pad_D09[0x3]; // 0x0(0x0)
	float PerspectiveX; // 0x0(0x0)
	float PerspectiveY; // 0x0(0x0)
	float MoveOffsetX; // 0x0(0x0)
	float MoveOffsetY; // 0x0(0x0)
	float JoyStickMoveOffsetX; // 0x0(0x0)
	float JoyStickMoveOffsetY; // 0x0(0x0)
	bool bActiveShow; // 0x0(0x0)
	char pad_D25[0x3]; // 0x0(0x0)
	float ScaleSpringArm; // 0x0(0x0)
	char pad_D2C[0x4]; // 0x0(0x0)
	struct UNiagaraSystem* EnterParticle; // 0x0(0x0)
	struct UNiagaraSystem* EndParticle; // 0x0(0x0)
	enum class EPostProcessType ProcessType; // 0x0(0x0)
	char pad_D41[0x7]; // 0x0(0x0)
	struct UPostProcessParams* Params; // 0x0(0x0)
	float QTEDisableSwitchCDTime; // 0x0(0x0)
	float SlomoRatio; // 0x0(0x0)
	float SlomoKeepTime; // 0x0(0x0)
	float SlomoDelayTime; // 0x0(0x0)
	__int32 Slot; // 0x0(0x0)
	float MaterialChangeKeepTime; // 0x0(0x0)
	struct FMaterialStateParameter QTEEffect; // 0x0(0x0)
	struct TArray<__int32> NormalSwitchModifiers; // 0x0(0x0)
	struct TArray<__int32> DeadSwitchModifiers; // 0x0(0x0)
	struct TArray<__int32> QTESwitchModifiers; // 0x0(0x0)
	struct FPlayerDeathEffectSettings PlayerDeathEffectSetting; // 0x0(0x0)
	float NormalSwitchCacheTime; // 0x0(0x0)
	char pad_E24[0x4]; // 0x0(0x0)
	struct UPostProcessParams* HP_LOW_Params; // 0x0(0x0)
	struct UPostProcessParams* HP_LOW_Burst_Params; // 0x0(0x0)
	struct UMaterialParameterCollection* EffectBurstMPC; // 0x0(0x0)
	float LowHPShowTime; // 0x0(0x0)
	float BurstKeepTime; // 0x0(0x0)
	struct UCurveFloat* HP_LOW_Curve; // 0x0(0x0)
	struct UCurveFloat* HP_LOW_Burst_Curve_1; // 0x0(0x0)
	struct UCurveFloat* HP_LOW_Burst_Curve_2; // 0x0(0x0)
	struct UCurveFloat* HP_LOW_Burst_Curve_3; // 0x0(0x0)
	struct UPostProcessParams* HitBlurParams; // 0x0(0x0)
	char bLastAimAction : 1; // 0x0(0x0)
	char pad_E70_1 : 7; // 0x0(0x0)
	char pad_E71[0x3]; // 0x0(0x0)
	float RotationThreshold; // 0x0(0x0)
	float RotationYawThreshold; // 0x0(0x0)
	char pad_E7C[0x4]; // 0x0(0x0)
	struct TArray<struct FActiveStateSetting> RushActionSettings; // 0x0(0x0)
	char pad_E90[0x10]; // 0x0(0x0)
	struct APawn* LeavedPlayer; // 0x0(0x0)
	char pad_EA8[0x48]; // 0x0(0x0)
	struct TArray<struct FTaskSyncData> TaskDataCacheArray; // 0x0(0x0)
	bool bIsReady; // 0x0(0x0)
	char pad_F01[0x7]; // 0x0(0x0)
	struct TArray<struct FRandomBufferInfo> ShoppingBufferes; // 0x0(0x0)
	struct TArray<struct FBoughtBufferInfo> BoughtBufferes; // 0x0(0x0)
	struct TArray<struct ABufferShop*> ActivedBufferShopes; // 0x0(0x0)
	struct TArray<struct ABufferShop*> OpenedBufferShops; // 0x0(0x0)
	__int32 ReviveCount; // 0x0(0x0)
	char pad_F4C[0x4]; // 0x0(0x0)
	struct TArray<__int32> CharacterReviveInfo; // 0x0(0x0)
	char pad_F60[0x8]; // 0x0(0x0)
	struct FSoftClassPath ReviveHelperClass; // 0x0(0x0)
	struct TMap<enum class ESensitivityType, float> SensitivityMap; // 0x0(0x0)
	struct TMap<enum class EHandleSettingType, __int32> HandleSettingMap; // 0x0(0x0)
	__int32 PcKeyboardType; // 0x0(0x0)
	__int32 KeyboardInputCache; // 0x0(0x0)
	bool bIgnoreEsc; // 0x0(0x0)
	char pad_1029[0x7F]; // 0x0(0x0)
	struct TArray<struct FMagicSpecialFightUIs> SpecialFightUIs; // 0x0(0x0)
	char bDisableDamageShow : 1; // 0x0(0x0)
	char pad_10B8_1 : 7; // 0x0(0x0)
	char pad_10B9[0x7]; // 0x0(0x0)
	struct TArray<struct FTargetShootItem> TargetShootScoreArray; // 0x0(0x0)
	__int32 TargetShootScoreScale; // 0x0(0x0)
	__int32 TargetShootTotalScore; // 0x0(0x0)
	char pad_10D8[0x18]; // 0x0(0x0)
	bool LastInputGamepad; // 0x0(0x0)
	char pad_10F1[0x1F]; // 0x0(0x0)
	float MaxLerpCameraScale; // 0x0(0x0)
	char pad_1114[0x1C]; // 0x0(0x0)

	void UseSkill(__int32 InIndex, enum class ESkillCastType InCastType, float PressTime); // Function /Script/Game.GamePlayerController.UseSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UseQTE(bool bPressed, float PressTime); // Function /Script/Game.GamePlayerController.UseQTE // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UseFire(enum class ESkillCastType InCastType, bool bAuto); // Function /Script/Game.GamePlayerController.UseFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UnLockControlAndUpdateUI(); // Function /Script/Game.GamePlayerController.UnLockControlAndUpdateUI // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void UnLockControl(); // Function /Script/Game.GamePlayerController.UnLockControl // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void TryFlushCachedSwitchPlayerData(float DeltaSeconds); // Function /Script/Game.GamePlayerController.TryFlushCachedSwitchPlayerData // (Final|Native|Public) // @ game+0
	void SwitchPrePlayerCharacter(bool bNormalSwitch, bool bBackSkill); // Function /Script/Game.GamePlayerController.SwitchPrePlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SwitchPlayerCharacter(__int32 Index, bool bPlaySuperSkill); // Function /Script/Game.GamePlayerController.SwitchPlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SwitchNextPlayerCharacter(bool bDeadSwitch, bool bNormalSwitch, bool bBackSkill); // Function /Script/Game.GamePlayerController.SwitchNextPlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAllInput(bool bCancelSkill); // Function /Script/Game.GamePlayerController.StopAllInput // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAllCameraShake(bool bStop, bool bImmediate); // Function /Script/Game.GamePlayerController.StopAllCameraShake // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAim(bool bClearAction, bool bPlaySound); // Function /Script/Game.GamePlayerController.StopAim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StartTestSwitch(); // Function /Script/Game.GamePlayerController.StartTestSwitch // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StartAim(); // Function /Script/Game.GamePlayerController.StartAim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StandardToggleAimAction(); // Function /Script/Game.GamePlayerController.StandardToggleAimAction // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StandardStopFireAction(); // Function /Script/Game.GamePlayerController.StandardStopFireAction // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StandardReleaseAimAction(); // Function /Script/Game.GamePlayerController.StandardReleaseAimAction // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FQueryResult SkillSelectFromResults(struct TArray<struct FQueryResult>& QueryResults); // Function /Script/Game.GamePlayerController.SkillSelectFromResults // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void ShowOrHideSpecialFightUI(__int32 InModifierID, struct FMagicParameter& ParamInfos, bool bShow); // Function /Script/Game.GamePlayerController.ShowOrHideSpecialFightUI // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void ShowAimMask(); // Function /Script/Game.GamePlayerController.ShowAimMask // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetUseSkillTipSelector(__int32 nVal); // Function /Script/Game.GamePlayerController.SetUseSkillTipSelector // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetTuringAcceletate(__int32 nVal); // Function /Script/Game.GamePlayerController.SetTuringAcceletate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetTouchState(bool bIsTouching); // Function /Script/Game.GamePlayerController.SetTouchState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetTempAutoAimData(bool bUseTempRange, struct FVector2D InTargetRange, struct FVector2D InTempExactRange, struct UCurveFloat* InTempAimSorptionIntensityCurve, float InTempAssistAimRotationRate, float InTempAssistTargetRotationRate); // Function /Script/Game.GamePlayerController.SetTempAutoAimData // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetSniperFireMode(__int32 nVal); // Function /Script/Game.GamePlayerController.SetSniperFireMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetSkillAutoFindTarget(bool InValue); // Function /Script/Game.GamePlayerController.SetSkillAutoFindTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetShotGunFireMode(__int32 nVal); // Function /Script/Game.GamePlayerController.SetShotGunFireMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetShotCallAutoFireState(bool ShotCallAutoFireState); // Function /Script/Game.GamePlayerController.SetShotCallAutoFireState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSelectTargetMode(enum class ESelectTargetMode Mode); // Function /Script/Game.GamePlayerController.SetSelectTargetMode // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetRushMode(__int32 nVal); // Function /Script/Game.GamePlayerController.SetRushMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetPlayerOperationState(enum class EPlayerAction OperationType, bool bInState); // Function /Script/Game.GamePlayerController.SetPlayerOperationState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPistolFireMode(__int32 nVal); // Function /Script/Game.GamePlayerController.SetPistolFireMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetMixFireMode(__int32 InValue); // Function /Script/Game.GamePlayerController.SetMixFireMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetLockCamera(bool bLock); // Function /Script/Game.GamePlayerController.SetLockCamera // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetKeyboardInputStateCache(enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.SetKeyboardInputStateCache // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetKeyboardInput(enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.SetKeyboardInput // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetJoyStickMoveInput(struct FVector2D Direction); // Function /Script/Game.GamePlayerController.SetJoyStickMoveInput // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetIsOpenElemExplosion(bool bOpen); // Function /Script/Game.GamePlayerController.SetIsOpenElemExplosion // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetFixedAimTarget(bool bFixed); // Function /Script/Game.GamePlayerController.SetFixedAimTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCurInteractActor(struct AActor* InActor); // Function /Script/Game.GamePlayerController.SetCurInteractActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCrossAnimMode(bool Mode); // Function /Script/Game.GamePlayerController.SetCrossAnimMode // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCharacterMovementAttatchMove(bool Flag); // Function /Script/Game.GamePlayerController.SetCharacterMovementAttatchMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCharacterAttributeTemplate(struct FChangeCameraSetting& ChangeCameraSetting); // Function /Script/Game.GamePlayerController.SetCharacterAttributeTemplate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetCameraInputScale(float Scale); // Function /Script/Game.GamePlayerController.SetCameraInputScale // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void SetAutoFire(bool bAuto); // Function /Script/Game.GamePlayerController.SetAutoFire // (Final|Native|Private|BlueprintCallable) // @ game+0
	void SetAimMode(__int32 InValue); // Function /Script/Game.GamePlayerController.SetAimMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool SetActorTimeDilation(struct AActor* Actor, char SlomPriority, float TimeDilation); // Function /Script/Game.GamePlayerController.SetActorTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetActiveSkillEffect(bool V); // Function /Script/Game.GamePlayerController.SetActiveSkillEffect // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetActiveShow(bool bIsActive); // Function /Script/Game.GamePlayerController.SetActiveShow // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_UpdateMultiLevelPoint(__int32 Num); // Function /Script/Game.GamePlayerController.Server_UpdateMultiLevelPoint // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_UpdateMultiLevelMoney(__int32 Num, unsigned __int32 OnlineMoneyGuid); // Function /Script/Game.GamePlayerController.Server_UpdateMultiLevelMoney // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0
	bool Server_TryInteractActor(struct AGameInteractorBase* Interactor); // Function /Script/Game.GamePlayerController.Server_TryInteractActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_SwitchPrePlayerCharacter(bool bNormalSwitch, bool bBackSkill); // Function /Script/Game.GamePlayerController.Server_SwitchPrePlayerCharacter // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_SwitchPlayerCharacter(__int32 Index, bool bPlaySuperSkill); // Function /Script/Game.GamePlayerController.Server_SwitchPlayerCharacter // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_SwitchNextPlayerCharacter(bool bDeadSwitch, bool bNormalSwitch, bool bBackSkill); // Function /Script/Game.GamePlayerController.Server_SwitchNextPlayerCharacter // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_SkillTargetActorDetail(struct FBoneResult PartReuslt, struct FBoneResult PartitionResult); // Function /Script/Game.GamePlayerController.Server_SkillTargetActorDetail // (Final|Net|Native|Event|Private|NetServer) // @ game+0
	void Server_SkillTargetActor(struct AActor* Target, struct AActor* InnerTarget); // Function /Script/Game.GamePlayerController.Server_SkillTargetActor // (Final|Net|Native|Event|Private|NetServer) // @ game+0
	void Server_ShootTargetPosition(struct FVector TargetPosition, struct FRotator InCameraRot); // Function /Script/Game.GamePlayerController.Server_ShootTargetPosition // (Final|Net|Native|Event|Private|NetServer|HasDefaults) // @ game+0
	void Server_ShootTargetActor(struct AActor* Target, struct FVector AimPosition); // Function /Script/Game.GamePlayerController.Server_ShootTargetActor // (Final|Net|Native|Event|Private|NetServer|HasDefaults) // @ game+0
	void Server_SetSkillAutoFindTarget(bool InValue); // Function /Script/Game.GamePlayerController.Server_SetSkillAutoFindTarget // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_SetReady(); // Function /Script/Game.GamePlayerController.Server_SetReady // (Net|NetReliableNative|Event|Protected|NetServer|BlueprintCallable) // @ game+0
	void Server_SetPerformanceMode(bool InIsOpen); // Function /Script/Game.GamePlayerController.Server_SetPerformanceMode // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_SetActorTimeDilation(struct AActor* Actor, char SlomPriority, float TimeDilation); // Function /Script/Game.GamePlayerController.Server_SetActorTimeDilation // (Net|Native|Event|Protected|NetServer|BlueprintCallable|Const) // @ game+0
	void Server_ScaleActorTimeDilation(struct AActor* Actor, char SlomPriority, float Scale); // Function /Script/Game.GamePlayerController.Server_ScaleActorTimeDilation // (Net|Native|Event|Protected|NetServer|BlueprintCallable|Const) // @ game+0
	void Server_ReviveCharacter(struct AActor* Reviver, struct TArray<struct AGamePlayer*> RevivedPlayers); // Function /Script/Game.GamePlayerController.Server_ReviveCharacter // (Net|NetReliableNative|Event|Protected|NetServer|BlueprintCallable) // @ game+0
	void Server_ReviveAllCharacter(float fScale); // Function /Script/Game.GamePlayerController.Server_ReviveAllCharacter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_RemoveOpenedBufferShop(struct ABufferShop* InShop); // Function /Script/Game.GamePlayerController.Server_RemoveOpenedBufferShop // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_QTESwitchPlayerCharacter(__int32 Index); // Function /Script/Game.GamePlayerController.Server_QTESwitchPlayerCharacter // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_InteractActor(struct AGameInteractorBase* Interactor); // Function /Script/Game.GamePlayerController.Server_InteractActor // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0
	void Server_GM_SpawnNpc(struct FSpawnNpcParams InSpawnNpcParams); // Function /Script/Game.GamePlayerController.Server_GM_SpawnNpc // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_GM_ExecuteConsoleCommand(struct FString CommandLine); // Function /Script/Game.GamePlayerController.Server_GM_ExecuteConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_GM_AddBuffById(__int32 BufferId); // Function /Script/Game.GamePlayerController.Server_GM_AddBuffById // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_DebugSetReviveCount(__int32 Count); // Function /Script/Game.GamePlayerController.Server_DebugSetReviveCount // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_DebugRemoveModifier(__int32 InID, struct AGameCharacter* InLauncher); // Function /Script/Game.GamePlayerController.Server_DebugRemoveModifier // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_DebugCastSkill(__int32 InID, struct AGameCharacter* InLauncher); // Function /Script/Game.GamePlayerController.Server_DebugCastSkill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_DebugAddModifier(__int32 InID, struct AGameCharacter* InLauncher, struct AGameCharacter* InTarget); // Function /Script/Game.GamePlayerController.Server_DebugAddModifier // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_ClearLevelCountDownTimer(); // Function /Script/Game.GamePlayerController.Server_ClearLevelCountDownTimer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_BuyRandomBuffer(struct ABufferShop* BufferShop, __int32 BufferId); // Function /Script/Game.GamePlayerController.Server_BuyRandomBuffer // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0
	void Server_ApplyUseReviveCoin(struct AGameCharacter* InCharacter); // Function /Script/Game.GamePlayerController.Server_ApplyUseReviveCoin // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_ApplyReviveImmediately(struct AGameCharacter* InCharacter); // Function /Script/Game.GamePlayerController.Server_ApplyReviveImmediately // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_AddOpenedBufferShop(struct ABufferShop* InShop); // Function /Script/Game.GamePlayerController.Server_AddOpenedBufferShop // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void Server_ActiveShop(struct ABufferShop* BufferShop); // Function /Script/Game.GamePlayerController.Server_ActiveShop // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	bool ScaleActorTimeDilation(struct AActor* Actor, char SlomPriority, float Scale); // Function /Script/Game.GamePlayerController.ScaleActorTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RushAction(enum class ESkillCastType SkillCastType); // Function /Script/Game.GamePlayerController.RushAction // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Rush(bool bPress, bool bKeyBorad); // Function /Script/Game.GamePlayerController.Rush // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Run(bool bEnded); // Function /Script/Game.GamePlayerController.Run // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool ReviveCharacter(struct AActor* Reviver, struct TArray<struct AGamePlayer*>& RevivedPlayers); // Function /Script/Game.GamePlayerController.ReviveCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool Revive(struct AActor* Reviver); // Function /Script/Game.GamePlayerController.Revive // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResumePlayerOperation(enum class EPlayerAction OperationType); // Function /Script/Game.GamePlayerController.ResumePlayerOperation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RestoreAllKeyboardInput(); // Function /Script/Game.GamePlayerController.RestoreAllKeyboardInput // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RestoreAllInput(); // Function /Script/Game.GamePlayerController.RestoreAllInput // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetCachedSwitchPlayerData(); // Function /Script/Game.GamePlayerController.ResetCachedSwitchPlayerData // (Final|Native|Public) // @ game+0
	void Reload(); // Function /Script/Game.GamePlayerController.Reload // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RefreshOnBeginTouch(); // Function /Script/Game.GamePlayerController.RefreshOnBeginTouch // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool ReceiveReloadBreakFire(); // Function /Script/Game.GamePlayerController.ReceiveReloadBreakFire // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void QTESwitchPlayerCharacter(__int32 Index); // Function /Script/Game.GamePlayerController.QTESwitchPlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ProcessLockOn(struct AActor* LockDestActor, float CameraSpeed); // Function /Script/Game.GamePlayerController.ProcessLockOn // (Final|Native|Private|BlueprintCallable) // @ game+0
	void PressFire(enum class EWeaponFireMode FireMode, bool bEnabled); // Function /Script/Game.GamePlayerController.PressFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayHPLowSound(); // Function /Script/Game.GamePlayerController.PlayHPLowSound // (Final|Native|Public) // @ game+0
	void OnWeaponFireStateSignature__DelegateSignature(bool bIsFire); // DelegateFunction /Script/Game.GamePlayerController.OnWeaponFireStateSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnShowSkillAimMaskSignature__DelegateSignature(struct UTexture2D* AimTexture, struct UMaterialInterface* Material); // DelegateFunction /Script/Game.GamePlayerController.OnShowSkillAimMaskSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnShowAimMaskSignature__DelegateSignature(bool bInAiming); // DelegateFunction /Script/Game.GamePlayerController.OnShowAimMaskSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnSettingChange(__int32 InSID, __int32 InType, __int32 InValue); // Function /Script/Game.GamePlayerController.OnSettingChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnRep_SpecialFightUIs(); // Function /Script/Game.GamePlayerController.OnRep_SpecialFightUIs // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnRep_ReviveCount(); // Function /Script/Game.GamePlayerController.OnRep_ReviveCount // (Final|Native|Protected) // @ game+0
	void OnRep_OpenedBufferShops(); // Function /Script/Game.GamePlayerController.OnRep_OpenedBufferShops // (Final|Native|Public) // @ game+0
	void OnOpenBox__DelegateSignature(struct APlayerController* PC); // DelegateFunction /Script/Game.GamePlayerController.OnOpenBox__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnNotifyPlayerAction(struct AGameCharacter* CurCharacter, enum class ECharacterActionState InType, bool bSet); // Function /Script/Game.GamePlayerController.OnNotifyPlayerAction // (Final|Native|Public) // @ game+0
	void OnFixedGameCharacterDie(struct AGameCharacter* Who, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.GamePlayerController.OnFixedGameCharacterDie // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnClickTask__DelegateSignature(); // DelegateFunction /Script/Game.GamePlayerController.OnClickTask__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnButtonUp(__int32 Index, __int32 PointIndex, enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.OnButtonUp // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnButtonDown(__int32 Index, __int32 PointIndex, enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.OnButtonDown // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnApplicationWillDeactivate(); // Function /Script/Game.GamePlayerController.OnApplicationWillDeactivate // (Final|Native|Protected) // @ game+0
	void OnApplicationWillActivate(); // Function /Script/Game.GamePlayerController.OnApplicationWillActivate // (Final|Native|Protected) // @ game+0
	void OnAbnormalUpdate(struct FAbnormalInfo& StateInfo, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.GamePlayerController.OnAbnormalUpdate // (Final|Native|Protected|HasOutParms) // @ game+0
	void NotifyPlayerInitComplate(struct AGameCharacter* InPlayer); // Function /Script/Game.GamePlayerController.NotifyPlayerInitComplate // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveRight(float fVal); // Function /Script/Game.GamePlayerController.MoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveForward(float fVal); // Function /Script/Game.GamePlayerController.MoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LookUp(float fVal); // Function /Script/Game.GamePlayerController.LookUp // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LookLockTarget(struct AActor* LockTarget, struct FVector LockPosition, float DeltaTime); // Function /Script/Game.GamePlayerController.LookLockTarget // (Final|Native|Private|HasDefaults|BlueprintCallable) // @ game+0
	void LookAround(float fVal); // Function /Script/Game.GamePlayerController.LookAround // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LockControlAndUpdateUI(bool InLockMove, bool InLockCamera, bool InLockSkill, bool InLockAim, bool InLockFire, bool InLockDodge, bool InLockSwitch, bool InLockQTE, bool bExceptHalfSkil, bool bCancelSkill, bool bInLockCross, bool bInBlockBunkerInteract); // Function /Script/Game.GamePlayerController.LockControlAndUpdateUI // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void LockControl(bool InLockMove, bool InLockCamera, bool InLockSkill, bool InLockAim, bool InLockFire, bool InLockDodge, bool InLockSwitch, bool InLockQTE, bool bExceptHalfSkil, bool bCancelSkill, bool bInLockCross, bool bInBlockBunkerInteract); // Function /Script/Game.GamePlayerController.LockControl // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void LoadSetting(); // Function /Script/Game.GamePlayerController.LoadSetting // (Final|Native|Static|Protected) // @ game+0
	void LevelShowMouseCursor(bool bShow, bool bPauseButton); // Function /Script/Game.GamePlayerController.LevelShowMouseCursor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LerpCameraRotationInner(struct FRotator StartRotator, struct FRotator EndRotator, float SpeedScale); // Function /Script/Game.GamePlayerController.LerpCameraRotationInner // (Final|Native|Public|HasDefaults) // @ game+0
	void LerpCameraRotation(struct FRotator EndRotator); // Function /Script/Game.GamePlayerController.LerpCameraRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void KeboardMoveRight(float fVal); // Function /Script/Game.GamePlayerController.KeboardMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void KeboardMoveForward(float fVal); // Function /Script/Game.GamePlayerController.KeboardMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0
	void KeboardLookUp(float fVal); // Function /Script/Game.GamePlayerController.KeboardLookUp // (Final|Native|Public|BlueprintCallable) // @ game+0
	void KeboardLookAround(float fVal); // Function /Script/Game.GamePlayerController.KeboardLookAround // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector K2_GetShootTargetPosition(); // Function /Script/Game.GamePlayerController.K2_GetShootTargetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector K2_GetShootAimTargetPosition(); // Function /Script/Game.GamePlayerController.K2_GetShootAimTargetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsUseSkillTipSelector(); // Function /Script/Game.GamePlayerController.IsUseSkillTipSelector // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsTuringAcceletate(); // Function /Script/Game.GamePlayerController.IsTuringAcceletate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsInSwitchPlayerCD(struct AGameCharacter* CharacterRef); // Function /Script/Game.GamePlayerController.IsInSwitchPlayerCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInQTESwitch(); // Function /Script/Game.GamePlayerController.IsInQTESwitch // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInAnimSkill(__int32 EndSkillID); // Function /Script/Game.GamePlayerController.IsInAnimSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsAlive(); // Function /Script/Game.GamePlayerController.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void Internal_SwitchCharacter(__int32 Index); // Function /Script/Game.GamePlayerController.Internal_SwitchCharacter // (Final|Native|Private|BlueprintCallable) // @ game+0
	void Internal_Switch_F(); // Function /Script/Game.GamePlayerController.Internal_Switch_F // (Final|Native|Private|BlueprintCallable) // @ game+0
	void Internal_Switch_C(); // Function /Script/Game.GamePlayerController.Internal_Switch_C // (Final|Native|Private|BlueprintCallable) // @ game+0
	void Internal_Switch_B(); // Function /Script/Game.GamePlayerController.Internal_Switch_B // (Final|Native|Private|BlueprintCallable) // @ game+0
	void Internal_BackSuperSkill(__int32 Index, enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.Internal_BackSuperSkill // (Final|Native|Private|BlueprintCallable) // @ game+0
	void Internal_BackSkill_Press(__int32 Index, enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.Internal_BackSkill_Press // (Final|Native|Private|BlueprintCallable) // @ game+0
	void Internal_BackSkill(__int32 Index, enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.Internal_BackSkill // (Final|Native|Private|BlueprintCallable) // @ game+0
	void GMServerCall(struct FString FuncName, struct FString InParam); // Function /Script/Game.GamePlayerController.GMServerCall // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void GM_ReplacePlayer(struct TArray<struct UCharacterCard*>& InCards); // Function /Script/Game.GamePlayerController.GM_ReplacePlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FVector4 GetWeaponScatter(); // Function /Script/Game.GamePlayerController.GetWeaponScatter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	__int32 GetUseSkillTipSelector(); // Function /Script/Game.GamePlayerController.GetUseSkillTipSelector // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetTuringAcceletate(); // Function /Script/Game.GamePlayerController.GetTuringAcceletate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UTeamAbilityComponent* GetTeamComponent(); // Function /Script/Game.GamePlayerController.GetTeamComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct FQueryResult> GetTargetWeakResults(struct AActor* Target); // Function /Script/Game.GamePlayerController.GetTargetWeakResults // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector2D GetTargetUIRange(); // Function /Script/Game.GamePlayerController.GetTargetUIRange // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector2D GetTargetRange(bool bScaleLeisure); // Function /Script/Game.GamePlayerController.GetTargetRange // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct FQueryResult GetTargetMainPartResult(struct AActor* Target); // Function /Script/Game.GamePlayerController.GetTargetMainPartResult // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetSwitchPlayerCDPercent(float& RemainTime); // Function /Script/Game.GamePlayerController.GetSwitchPlayerCDPercent // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetSkillTargetDetailResult(struct FBoneResult& PartResultValue, struct FBoneResult& PartitionResultValue); // Function /Script/Game.GamePlayerController.GetSkillTargetDetailResult // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AActor* GetSkillTarget(bool bInner); // Function /Script/Game.GamePlayerController.GetSkillTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetSkillIDByIndex(__int32 Index); // Function /Script/Game.GamePlayerController.GetSkillIDByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetSkillByIndex(__int32 Index); // Function /Script/Game.GamePlayerController.GetSkillByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct FSoftClassPath> GetShareBuffer(); // Function /Script/Game.GamePlayerController.GetShareBuffer // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FSoftObjectPath> GetShareAttributesLimit(); // Function /Script/Game.GamePlayerController.GetShareAttributesLimit // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FSoftObjectPath> GetShareAttributes(); // Function /Script/Game.GamePlayerController.GetShareAttributes // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetSensitivityByType(enum class ESensitivityType& InType, float defaultvalue); // Function /Script/Game.GamePlayerController.GetSensitivityByType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector GetSelectPosition(); // Function /Script/Game.GamePlayerController.GetSelectPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetRushMode(); // Function /Script/Game.GamePlayerController.GetRushMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetReviveCount(); // Function /Script/Game.GamePlayerController.GetReviveCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetReviveCoinConfigCD(); // Function /Script/Game.GamePlayerController.GetReviveCoinConfigCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetRealShootPoint2Screen(struct FVector2D& OutViewPos); // Function /Script/Game.GamePlayerController.GetRealShootPoint2Screen // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<__int32> GetRandomBufferByShop(__int32 ShopId); // Function /Script/Game.GamePlayerController.GetRandomBufferByShop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<__int32> GetRandomBufferByInteractiveMode(__int32 InteractiveMode); // Function /Script/Game.GamePlayerController.GetRandomBufferByInteractiveMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameCharacter* GetQTEChar(); // Function /Script/Game.GamePlayerController.GetQTEChar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameCharacter* GetPreCharacter(); // Function /Script/Game.GamePlayerController.GetPreCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetPlayerViewPointEX(struct FVector& Location, struct FRotator& Rotation); // Function /Script/Game.GamePlayerController.GetPlayerViewPointEX // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
	bool GetPlayerOperationState(enum class EPlayerAction OperationType); // Function /Script/Game.GamePlayerController.GetPlayerOperationState // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct UCharacterCard*> GetPlayerCharInfos(); // Function /Script/Game.GamePlayerController.GetPlayerCharInfos // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct AGameCharacter*> GetPlayerCharacters(); // Function /Script/Game.GamePlayerController.GetPlayerCharacters // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AGameCharacter* GetNextCharacter(bool bDeadSwitch); // Function /Script/Game.GamePlayerController.GetNextCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AGameCharacter* GetNextChar(); // Function /Script/Game.GamePlayerController.GetNextChar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetMoveRightDirection(struct FVector& Vector); // Function /Script/Game.GamePlayerController.GetMoveRightDirection // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
	float GetMoveOffsetPercent(bool bGamepad); // Function /Script/Game.GamePlayerController.GetMoveOffsetPercent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetMoveForwardDirection(struct FVector& Vector); // Function /Script/Game.GamePlayerController.GetMoveForwardDirection // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
	__int32 GetMixFireMode(); // Function /Script/Game.GamePlayerController.GetMixFireMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetIsOpenElemExplosion(); // Function /Script/Game.GamePlayerController.GetIsOpenElemExplosion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetHandleSettingValueByType(enum class EHandleSettingType& InType); // Function /Script/Game.GamePlayerController.GetHandleSettingValueByType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	float GetGYROSensitivityMultiplier(); // Function /Script/Game.GamePlayerController.GetGYROSensitivityMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetGamepadStandardValue(enum class EHandleSettingType InType, __int32 InLevel); // Function /Script/Game.GamePlayerController.GetGamepadStandardValue // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector2D GetExactRange(); // Function /Script/Game.GamePlayerController.GetExactRange // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameCharacter* GetCurrentChar(); // Function /Script/Game.GamePlayerController.GetCurrentChar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AActor* GetCurInteractActor(); // Function /Script/Game.GamePlayerController.GetCurInteractActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetCrossMode(); // Function /Script/Game.GamePlayerController.GetCrossMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetControlBlock(enum class EControlType InType); // Function /Script/Game.GamePlayerController.GetControlBlock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetCharacterIndex(struct AGameCharacter* InCharcter); // Function /Script/Game.GamePlayerController.GetCharacterIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameCharacter* GetCharacterByIndex(__int32 InIndex); // Function /Script/Game.GamePlayerController.GetCharacterByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FCharacterAtrributeTemplate GetCharacterAttributeTemplate(); // Function /Script/Game.GamePlayerController.GetCharacterAttributeTemplate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetCameraRotSpeed(); // Function /Script/Game.GamePlayerController.GetCameraRotSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetAutoAimTarget(); // Function /Script/Game.GamePlayerController.GetAutoAimTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<__int32> GetAllRandomBufferByShop(); // Function /Script/Game.GamePlayerController.GetAllRandomBufferByShop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector2D GetAimTargetPosition(); // Function /Script/Game.GamePlayerController.GetAimTargetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetAimMode(); // Function /Script/Game.GamePlayerController.GetAimMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetActivedBufferShopes(__int32 InteractiveMode); // Function /Script/Game.GamePlayerController.GetActivedBufferShopes // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GenerateGamepadInputValue(enum class EHandleRockerType RockerType, enum class ERockerTurnType TurnType, float& InVal); // Function /Script/Game.GamePlayerController.GenerateGamepadInputValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GamepadMoveRight(float fVal); // Function /Script/Game.GamePlayerController.GamepadMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GamepadMoveForward(float fVal); // Function /Script/Game.GamePlayerController.GamepadMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GamepadLookUp(float fVal); // Function /Script/Game.GamePlayerController.GamepadLookUp // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GamepadLookAround(float fVal); // Function /Script/Game.GamePlayerController.GamepadLookAround // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ForceReload(); // Function /Script/Game.GamePlayerController.ForceReload // (Final|Native|Public|BlueprintCallable) // @ game+0
	void FireAction(enum class ESkillCastType InCastType); // Function /Script/Game.GamePlayerController.FireAction // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Fire(bool bPressed); // Function /Script/Game.GamePlayerController.Fire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void FightAction(enum class ESkillCastType InCastType, __int32 BtnIndex); // Function /Script/Game.GamePlayerController.FightAction // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool ExhaleMouse(bool bShow); // Function /Script/Game.GamePlayerController.ExhaleMouse // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DoTaskDataValueSync(); // Function /Script/Game.GamePlayerController.DoTaskDataValueSync // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Dodge(bool bPress); // Function /Script/Game.GamePlayerController.Dodge // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool Cross(bool bPress); // Function /Script/Game.GamePlayerController.Cross // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CloseAimMask(); // Function /Script/Game.GamePlayerController.CloseAimMask // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClientShowDSDebugInfo(struct FDSDebugInfo DSDebugInfo); // Function /Script/Game.GamePlayerController.ClientShowDSDebugInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void ClientReSpawnMultiMoneyOnClient(struct FVector SpawnLoc, __int32 MoneyNum, unsigned __int32 OnlineMoneyGuid); // Function /Script/Game.GamePlayerController.ClientReSpawnMultiMoneyOnClient // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0
	void ClientReInitTaskData(struct TArray<struct FTaskSyncData> inArray); // Function /Script/Game.GamePlayerController.ClientReInitTaskData // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void ClientPlayCameraOffsetAnimation(float InCameraArmLength, struct FVector InCameraSocketOffset, struct FVector InCameraArmPosition, float InCameraFOV, float InBlendInSpeed, float InBlendOutSpeed, float InBlendOutTime, float ViewPitchMinAdditive, float ViewPitchMaxAdditive); // Function /Script/Game.GamePlayerController.ClientPlayCameraOffsetAnimation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0
	void ClientAimHitStartCameraShake(struct UCameraShakeBase* Shake, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function /Script/Game.GamePlayerController.ClientAimHitStartCameraShake // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0
	void Client_SwitchPlayer(struct AGameCharacter* CurrentCharRef); // Function /Script/Game.GamePlayerController.Client_SwitchPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_ShowMsg(struct FString InMsg); // Function /Script/Game.GamePlayerController.Client_ShowMsg // (Net|NetReliableNative|Event|Protected|NetClient|BlueprintCallable) // @ game+0
	void Client_SetSwitchCDRemaining(float InTime); // Function /Script/Game.GamePlayerController.Client_SetSwitchCDRemaining // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0
	void Client_SetSpecificCharacterSwitchCD(float InTime, struct AGameCharacter* CharacterRef); // Function /Script/Game.GamePlayerController.Client_SetSpecificCharacterSwitchCD // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_SetProcessState(struct AActor* Reviver); // Function /Script/Game.GamePlayerController.Client_SetProcessState // (Net|NetReliableNative|Event|Protected|NetClient|BlueprintCallable) // @ game+0
	void Client_QTESwitchShowExhibition(struct AGameCharacter* InCharacter); // Function /Script/Game.GamePlayerController.Client_QTESwitchShowExhibition // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_QTESwitchFinishShowExhibition(struct AGameCharacter* QTELauncher, bool bSwitchBack); // Function /Script/Game.GamePlayerController.Client_QTESwitchFinishShowExhibition // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_QTECastFail(struct AGameCharacter* InCharacter); // Function /Script/Game.GamePlayerController.Client_QTECastFail // (Net|Native|Event|Public|NetClient) // @ game+0
	void Client_NotifySwitchPlayerCharacterFinished(struct AGameCharacter* InCurChara); // Function /Script/Game.GamePlayerController.Client_NotifySwitchPlayerCharacterFinished // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void Client_HandleFlyHpOrShieldChange(struct FDamageInfo Info); // Function /Script/Game.GamePlayerController.Client_HandleFlyHpOrShieldChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void ClearKeyboardInputStateCache(enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.ClearKeyboardInputStateCache // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearKeyboardInput(enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.ClearKeyboardInput // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearCurInteractActor(); // Function /Script/Game.GamePlayerController.ClearCurInteractActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearCameraOffset(); // Function /Script/Game.GamePlayerController.ClearCameraOffset // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void ClearAllKeyboardInputStateCache(); // Function /Script/Game.GamePlayerController.ClearAllKeyboardInputStateCache // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearAllKeyboardInput(); // Function /Script/Game.GamePlayerController.ClearAllKeyboardInput // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckSkillCastableByIndex(__int32 Index); // Function /Script/Game.GamePlayerController.CheckSkillCastableByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckKeyboardInputStateCache(enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.CheckKeyboardInputStateCache // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckKeyboardInput(enum class EPCKeyboardType InType); // Function /Script/Game.GamePlayerController.CheckKeyboardInput // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void CancleAllInAnimSkill(); // Function /Script/Game.GamePlayerController.CancleAllInAnimSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CancelSemiAutomaticFire(); // Function /Script/Game.GamePlayerController.CancelSemiAutomaticFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CancelFire(); // Function /Script/Game.GamePlayerController.CancelFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CancelAllSkillMove(); // Function /Script/Game.GamePlayerController.CancelAllSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanBuyRandomBuffer(__int32 BufferId); // Function /Script/Game.GamePlayerController.CanBuyRandomBuffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void CalcGamepadInputValueBySensitivity(__int32 SeniorAngle, enum class ERockerTurnType TurnType, bool Aim, float StartTurnTime, float& InVal, bool bIsSniper); // Function /Script/Game.GamePlayerController.CalcGamepadInputValueBySensitivity // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void BuyRandomBuffer(struct ABufferShop* BufferShop, __int32 BufferId); // Function /Script/Game.GamePlayerController.BuyRandomBuffer // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BunkerInteract(bool bPress); // Function /Script/Game.GamePlayerController.BunkerInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FQueryResult AutoSkillSelectDetail(struct TArray<enum class EQueryTargetType>& Types, bool bUseInnerSkillTarget, struct AActor* InTarget); // Function /Script/Game.GamePlayerController.AutoSkillSelectDetail // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AutoCrossOrBunkerInteract(); // Function /Script/Game.GamePlayerController.AutoCrossOrBunkerInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ApplyClearLevelCountDownTimer(); // Function /Script/Game.GamePlayerController.ApplyClearLevelCountDownTimer // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool AllowRevive(); // Function /Script/Game.GamePlayerController.AllowRevive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void AimUI(struct FSoftClassPath& AimCrossHairUIWidget, bool bInAim); // Function /Script/Game.GamePlayerController.AimUI // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void Aim(bool bEnabled); // Function /Script/Game.GamePlayerController.Aim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddScaleSpringArm(float ScaleValue); // Function /Script/Game.GamePlayerController.AddScaleSpringArm // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GamePlayerInput
// Size: 0x0 (Inherited: 0x0)
struct UGamePlayerInput : UPlayerInput {
};

 // Class /Script/Game.GamePlayerState
// Size: 0x0 (Inherited: 0x0)
struct AGamePlayerState : APlayerState {
	__int64 RolePID; // 0x0(0x0)
	bool IsOnline; // 0x0(0x0)
	char pad_329[0x3]; // 0x0(0x0)
	float OfflineTimer; // 0x0(0x0)
	char AttackLevel; // 0x0(0x0)
	bool bIsEscaped; // 0x0(0x0)
	char pad_332[0x2]; // 0x0(0x0)
	float TotalOfflineTime; // 0x0(0x0)
	float OfflineStartTime; // 0x0(0x0)
	unsigned __int32 MultiLevelPoint; // 0x0(0x0)
	unsigned __int32 MultiLevelMoney; // 0x0(0x0)
	char pad_344[0x4]; // 0x0(0x0)
	__int32 Damage; // 0x0(0x0)
	unsigned __int32 MultiLevelDefendWave; // 0x0(0x0)
	unsigned __int32 ConsumeBufferMoney; // 0x0(0x0)
	char pad_354[0x14]; // 0x0(0x0)

	void UpdateMultiLevelMoney(__int32 Num); // Function /Script/Game.GamePlayerState.UpdateMultiLevelMoney // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateMultiLevelChallengeMoney(__int32 Num); // Function /Script/Game.GamePlayerState.UpdateMultiLevelChallengeMoney // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_DebugAddLevelMoney(__int32 Num); // Function /Script/Game.GamePlayerState.Server_DebugAddLevelMoney // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0
	void OnOpenBufferShop(); // Function /Script/Game.GamePlayerState.OnOpenBufferShop // (Final|Native|Public) // @ game+0
	void OnMultiLevelPointChangeFunc(); // Function /Script/Game.GamePlayerState.OnMultiLevelPointChangeFunc // (Final|Native|Public) // @ game+0
	void OnMultiLevelMoneyChangeFunc(); // Function /Script/Game.GamePlayerState.OnMultiLevelMoneyChangeFunc // (Final|Native|Public) // @ game+0
	__int32 GetMultiLevelPoint(); // Function /Script/Game.GamePlayerState.GetMultiLevelPoint // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetMultiLevelMoney(bool IsTotal); // Function /Script/Game.GamePlayerState.GetMultiLevelMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetMultiLevelDefendWave(); // Function /Script/Game.GamePlayerState.GetMultiLevelDefendWave // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetMultiLevelDefendTargetHPPercent(); // Function /Script/Game.GamePlayerState.GetMultiLevelDefendTargetHPPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetDamage(); // Function /Script/Game.GamePlayerState.GetDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetConsumeBufferMoney(); // Function /Script/Game.GamePlayerState.GetConsumeBufferMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void ApplyaAddLevelMoney(__int32 Num); // Function /Script/Game.GamePlayerState.ApplyaAddLevelMoney // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameReplicationGraph
// Size: 0x0 (Inherited: 0x0)
struct UGameReplicationGraph : UBasicReplicationGraph {
	struct TArray<struct FRepListSizeLevel> RepListSizeConfigs; // 0x0(0x0)
	float GridCellSize; // 0x0(0x0)
};

 // Class /Script/Game.GameSkillLibrary
// Size: 0x0 (Inherited: 0x0)
struct UGameSkillLibrary : UBlueprintFunctionLibrary {

	bool K2_CastSkill(struct AActor* SkillOwner, struct ACharacter* SkillInstigator, __int32 SkillID, __int32 InLevel, enum class ESkillCastType CastType); // Function /Script/Game.GameSkillLibrary.K2_CastSkill // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameSkill
// Size: 0x0 (Inherited: 0x0)
struct AGameSkill : AActor {
	char pad_220[0x18]; // 0x0(0x0)
	struct TMap<__int32, struct FEmitterEffect> EmitterEffects; // 0x0(0x0)
	bool bAsDerivedSkill; // 0x0(0x0)
	bool bSubSkill; // 0x0(0x0)
	bool bJumpTo; // 0x0(0x0)
	char pad_28B[0x1]; // 0x0(0x0)
	struct FGameplayTag SkillTag; // 0x0(0x0)
	char pad_294[0x4]; // 0x0(0x0)
	struct FGameplayTagContainer CooldownTags; // 0x0(0x0)
	struct TArray<struct USkillCheckerComponent*> SkillCheckers; // 0x0(0x0)
	struct TArray<struct USkillEffectComponent*> SkillEffects; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct USkillEffectComponent>> ActiveSkillEffects; // 0x0(0x0)
	__int32 CurrentSkillId; // 0x0(0x0)
	char pad_2EC[0xC]; // 0x0(0x0)
	__int32 CurrentSkillLevel; // 0x0(0x0)
	bool bIsInterrupted; // 0x0(0x0)
	bool bIsInterruptedAndWaitForCD; // 0x0(0x0)
	enum class ESkillCastType CastType; // 0x0(0x0)
	char pad_2FF[0x1]; // 0x0(0x0)
	struct FTransform SelectorTargetTransform; // 0x0(0x0)
	struct TArray<struct FQueryResult> SelectorQueryResults; // 0x0(0x0)
	bool bSkillTipsSelectorValid; // 0x0(0x0)
	bool bSkillSelectorValid; // 0x0(0x0)
	char pad_342[0xE]; // 0x0(0x0)
	struct FTransform SkillTips_SelectorTargetTransform; // 0x0(0x0)
	struct TArray<struct FQueryResult> SkillTips_SelectorQueryResults; // 0x0(0x0)
	struct AActor* Launcher; // 0x0(0x0)
	char pad_398[0x8]; // 0x0(0x0)
	struct TArray<struct FSkillEffectState> SkillEffectChangeStates; // 0x0(0x0)
	struct UAbilityComponentBase* OwnerAbility; // 0x0(0x0)
	char pad_3B8[0x18]; // 0x0(0x0)
	struct FBeakInvisibleData AsBreakInvisibleData; // 0x0(0x0)
	char pad_3DC[0x84]; // 0x0(0x0)
	struct TArray<struct UModifierSpecialEffectObject*> ModifierSpecialEffects; // 0x0(0x0)
	char pad_470[0x60]; // 0x0(0x0)
	struct FSkillConditionTarget SkillConditionTarget; // 0x0(0x0)
	char pad_4E8[0x20]; // 0x0(0x0)
	struct AActor* SkillTargetActor; // 0x0(0x0)
	struct AActor* InnerSkillTargetActor; // 0x0(0x0)
	struct FVector ShootTargetPosition; // 0x0(0x0)
	struct FRotator CameraRotation; // 0x0(0x0)

	void SetStorageTime(float Time); // Function /Script/Game.GameSkill.SetStorageTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_Interrupt(enum class ESkillInterruptedType InterruptedType); // Function /Script/Game.GameSkill.Server_Interrupt // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void RPC_ActiveSkill(bool InSubSkill, __int32 InSkillId, struct TArray<__int32> InOriginSkills, struct UAbilityComponentBase* AbilityRef); // Function /Script/Game.GameSkill.RPC_ActiveSkill // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	void NetMulticast_SetSkillJump(); // Function /Script/Game.GameSkill.NetMulticast_SetSkillJump // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	void K2_MarkRunningObject(struct TScriptInterface<IMarkSkillRunningInterface> Interface); // Function /Script/Game.GameSkill.K2_MarkRunningObject // (Final|Native|Public|BlueprintCallable) // @ game+0
	void K2_Interrupt(enum class ESkillInterruptedType InterruptedType); // Function /Script/Game.GameSkill.K2_Interrupt // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class ENetRole K2_GetSkillRole(); // Function /Script/Game.GameSkill.K2_GetSkillRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 K2_GetSkillLevel(); // Function /Script/Game.GameSkill.K2_GetSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 K2_GetSkillId(); // Function /Script/Game.GameSkill.K2_GetSkillId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsWaitForCD(); // Function /Script/Game.GameSkill.IsWaitForCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsMontageStopAndWaitForCD(); // Function /Script/Game.GameSkill.IsMontageStopAndWaitForCD // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsMontageStop(); // Function /Script/Game.GameSkill.IsMontageStop // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInJump(); // Function /Script/Game.GameSkill.IsInJump // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInBeginSelector(); // Function /Script/Game.GameSkill.IsInBeginSelector // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetStorageTime(); // Function /Script/Game.GameSkill.GetStorageTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FGameplayTag GetSkillTag(); // Function /Script/Game.GameSkill.GetSkillTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct FQueryResult> GetQueryResults(bool bSkillTips); // Function /Script/Game.GameSkill.GetQueryResults // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AActor* GetLauncher(); // Function /Script/Game.GameSkill.GetLauncher // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetEffectTargetNum_Relations(struct TArray<enum class ECampRelation> Relations); // Function /Script/Game.GameSkill.GetEffectTargetNum_Relations // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetEffectTargetNum(); // Function /Script/Game.GameSkill.GetEffectTargetNum // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct USkillEffectComponent*> GetAllActiveSkillEffects(); // Function /Script/Game.GameSkill.GetAllActiveSkillEffects // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void BroadcastSkillEffectState(struct TArray<struct FSkillEffectState> SkillEffectStates); // Function /Script/Game.GameSkill.BroadcastSkillEffectState // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameServerSkill
// Size: 0x0 (Inherited: 0x0)
struct AGameServerSkill : AGameSkill {
};

 // Class /Script/Game.GameSlomoSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UGameSlomoSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x0(0x0)

	void SetActorTimeDilation(struct AActor* Actor, enum class ESlomPriority SlomPriority, float TimeDilation); // Function /Script/Game.GameSlomoSubsystem.SetActorTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ScaleActorTimeDilation(struct AActor* Actor, enum class ESlomPriority SlomPriority, float Scale); // Function /Script/Game.GameSlomoSubsystem.ScaleActorTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveActorTimeDilation(struct AActor* Actor); // Function /Script/Game.GameSlomoSubsystem.RemoveActorTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float K2_GetActorPriorityTimeDilation(struct AActor* Actor, enum class ESlomPriority SlomPriority); // Function /Script/Game.GameSlomoSubsystem.K2_GetActorPriorityTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetActorTimeDilation(struct AActor* Actor); // Function /Script/Game.GameSlomoSubsystem.GetActorTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameSpringArmComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameSpringArmComponent : USpringArmComponent {
	float HitDistanceMultiplier; // 0x0(0x0)
	float BlendOutSpeed; // 0x0(0x0)
	float TargetOffsetBlendSpeed; // 0x0(0x0)
	float RoleBodyRadius; // 0x0(0x0)
	bool bCustomSocketOffset; // 0x0(0x0)
	char pad_291[0x3]; // 0x0(0x0)
	float OverlapBlendInSpeed; // 0x0(0x0)
	float CollisionSpringLength; // 0x0(0x0)
	float SpringCoefficient; // 0x0(0x0)
	struct FAlphaBlend BlendOutInfo; // 0x0(0x0)
	bool bUseCustomAnim; // 0x0(0x0)
	char pad_2D1[0x7]; // 0x0(0x0)
	struct UCurveFloat* CameraRotationLagSpeedCurve; // 0x0(0x0)
	float CameraRotationLagSpeedTime; // 0x0(0x0)
	bool bTemp; // 0x0(0x0)
	char pad_2E5[0x3]; // 0x0(0x0)
	float FadeAngle; // 0x0(0x0)
	float FadeRadiusPercent; // 0x0(0x0)
	float FadeZAlpha; // 0x0(0x0)
	struct FVector FadeRange; // 0x0(0x0)
	float FadeNormalPlayerDist; // 0x0(0x0)
	char pad_304[0x4]; // 0x0(0x0)
	struct UCurveFloat* FadePlayerCurve; // 0x0(0x0)
	float HideCharacterHitTestRadius; // 0x0(0x0)
	char pad_314[0x9C]; // 0x0(0x0)
};

 // Class /Script/Game.GameSummon
// Size: 0x0 (Inherited: 0x0)
struct AGameSummon : AGameAICharacter {
	bool bUseCustomSlotConfig; // 0x0(0x0)
	bool bUseSharedCustomSlotConfig; // 0x0(0x0)
	struct FString CustomSlotConfigName; // 0x0(0x0)
	bool bCanBeTarget; // 0x0(0x0)
	bool bSwitchWithPlayer; // 0x0(0x0)
	bool bStayWhenQTESwitch; // 0x0(0x0)
	bool bFollowOwnerWhenQTESwitchEnter; // 0x0(0x0)
	bool bDieWhenCaptainLeave; // 0x0(0x0)
	bool bStayWhenCaptainDie; // 0x0(0x0)
	bool bUseRollRotation; // 0x0(0x0)
	char pad_C29[0x3]; // 0x0(0x0)
	struct TWeakObjectPtr<struct UAITeamSlotConfigAsset> CustomTeamSlotConfigAsset; // 0x0(0x0)
	char pad_C34[0xC]; // 0x0(0x0)
	struct AAITeamSlotConfig* CustomTeamSlotConfig; // 0x0(0x0)
	struct AAITeamSlot* CustomTeamSlot; // 0x0(0x0)
	__int32 OverrideGrowAttributeID; // 0x0(0x0)
	bool bUseSharedCustomSlot; // 0x0(0x0)
	char pad_C55[0x3]; // 0x0(0x0)
	__int32 CustomSlotIndex; // 0x0(0x0)
	char pad_C5C[0x4]; // 0x0(0x0)

	bool UseRollRotation(); // Function /Script/Game.GameSummon.UseRollRotation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool SwitchWithCaptainWhenQTEEnter(); // Function /Script/Game.GameSummon.SwitchWithCaptainWhenQTEEnter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool SwitchWithCaptain(); // Function /Script/Game.GameSummon.SwitchWithCaptain // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void OnQTESwitch(struct FQTESwitchParam& QTEParam); // Function /Script/Game.GameSummon.OnQTESwitch // (Final|Native|Public|HasOutParms) // @ game+0
	bool NeedStayWhenQTESwitch(); // Function /Script/Game.GameSummon.NeedStayWhenQTESwitch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsUseCustomSlotConfig(); // Function /Script/Game.GameSummon.IsUseCustomSlotConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AAITeamSlot* GetCustomTeamSlot(); // Function /Script/Game.GameSummon.GetCustomTeamSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool DieWhenCaptainLeave(); // Function /Script/Game.GameSummon.DieWhenCaptainLeave // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GameSurvivorsGameMode
// Size: 0x0 (Inherited: 0x0)
struct AGameSurvivorsGameMode : AGameBaseMode {

	void LuaStartPlay(); // Function /Script/Game.GameSurvivorsGameMode.LuaStartPlay // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.GameTask_ActorsProvider
// Size: 0x0 (Inherited: 0x0)
struct UGameTask_ActorsProvider : UObject {

	struct TArray<struct AActor*> ProvideActors(); // Function /Script/Game.GameTask_ActorsProvider.ProvideActors // (Event|Public|BlueprintEvent) // @ game+0
	struct UWorld* GetWorld(); // Function /Script/Game.GameTask_ActorsProvider.GetWorld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GameTaskEvent_AIDirector
// Size: 0x0 (Inherited: 0x0)
struct UGameTaskEvent_AIDirector : UGameTaskEvent {
	struct TArray<struct UAIDirectorGlobalEvent*> AIDirectorEvents; // 0x0(0x0)
};

 // Class /Script/Game.GameTaskEvent_DoAction
// Size: 0x0 (Inherited: 0x0)
struct UGameTaskEvent_DoAction : UGameTaskEvent {
	struct FTaskActionInfo ActionInfo; // 0x0(0x0)
	char pad_16C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.GameTaskEvent_FlowFinish
// Size: 0x0 (Inherited: 0x0)
struct UGameTaskEvent_FlowFinish : UGameTaskEvent {
};

 // Class /Script/Game.GameTaskEvent_SetAIEvent
// Size: 0x0 (Inherited: 0x0)
struct UGameTaskEvent_SetAIEvent : UGameTaskEvent {
	struct UGameTask_ActorsProvider* ActorsProvider; // 0x0(0x0)
	bool bIsFightEvent; // 0x0(0x0)
	char pad_151[0x7]; // 0x0(0x0)
	struct UAIEvent* AIEvent; // 0x0(0x0)
	__int32 AIEventID; // 0x0(0x0)
	char pad_164[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.GameTaskEvent_SwitchTask
// Size: 0x0 (Inherited: 0x0)
struct UGameTaskEvent_SwitchTask : UGameTaskEvent {
	struct FSoftObjectPath LoadTask; // 0x0(0x0)
};

 // Class /Script/Game.GameWidgetComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameWidgetComponent : UMeshComponent {
	enum class EWidgetSpace Space; // 0x0(0x0)
	enum class EWidgetTimingPolicy TimingPolicy; // 0x0(0x0)
	struct UUserWidget* WidgetClass; // 0x0(0x0)
	struct FIntPoint DrawSize; // 0x0(0x0)
	bool bManuallyRedraw; // 0x0(0x0)
	bool bRedrawRequested; // 0x0(0x0)
	float RedrawTime; // 0x0(0x0)
	float DrawScale; // 0x0(0x0)
	float RTDrawScale; // 0x0(0x0)
	char pad_4C0[0x8]; // 0x0(0x0)
	struct FIntPoint CurrentDrawSize; // 0x0(0x0)
	bool bDrawAtDesiredSize; // 0x0(0x0)
	bool bScaleToFit; // 0x0(0x0)
	char pad_4D2[0x2]; // 0x0(0x0)
	struct FVector2D Pivot; // 0x0(0x0)
	bool bReceiveHardwareInput; // 0x0(0x0)
	bool bWindowFocusable; // 0x0(0x0)
	enum class EWindowVisibility WindowVisibility; // 0x0(0x0)
	bool bApplyGammaCorrection; // 0x0(0x0)
	struct ULocalPlayer* OwnerPlayer; // 0x0(0x0)
	struct FLinearColor BackgroundColor; // 0x0(0x0)
	struct FLinearColor TintColorAndOpacity; // 0x0(0x0)
	float OpacityFromTexture; // 0x0(0x0)
	enum class EWidgetBlendMode BlendMode; // 0x0(0x0)
	bool bIsTwoSided; // 0x0(0x0)
	bool TickWhenOffscreen; // 0x0(0x0)
	char pad_50F[0x1]; // 0x0(0x0)
	struct UBodySetup* BodySetup; // 0x0(0x0)
	struct UMaterialInterface* TranslucentMaterial; // 0x0(0x0)
	struct UMaterialInterface* TranslucentMaterial_OneSided; // 0x0(0x0)
	struct UMaterialInterface* OpaqueMaterial; // 0x0(0x0)
	struct UMaterialInterface* OpaqueMaterial_OneSided; // 0x0(0x0)
	struct UMaterialInterface* MaskedMaterial; // 0x0(0x0)
	struct UMaterialInterface* MaskedMaterial_OneSided; // 0x0(0x0)
	struct UTextureRenderTarget2D* RenderTarget; // 0x0(0x0)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x0(0x0)
	bool bAddedToScreen; // 0x0(0x0)
	bool bEditTimeUsable; // 0x0(0x0)
	char pad_55A[0x2]; // 0x0(0x0)
	struct FName SharedLayerName; // 0x0(0x0)
	__int32 LayerZOrder; // 0x0(0x0)
	enum class EWidgetGeometryMode GeometryMode; // 0x0(0x0)
	char pad_569[0x3]; // 0x0(0x0)
	float CylinderArcAngle; // 0x0(0x0)
	bool bCylinderReverse; // 0x0(0x0)
	enum class ETickMode TickMode; // 0x0(0x0)
	char pad_572[0x26]; // 0x0(0x0)
	struct UUserWidget* Widget; // 0x0(0x0)
	char pad_5A0[0x30]; // 0x0(0x0)

	void SetWindowVisibility(enum class EWindowVisibility InVisibility); // Function /Script/Game.GameWidgetComponent.SetWindowVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWindowFocusable(bool bInWindowFocusable); // Function /Script/Game.GameWidgetComponent.SetWindowFocusable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWidgetSpace(enum class EWidgetSpace NewSpace); // Function /Script/Game.GameWidgetComponent.SetWidgetSpace // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWidget(struct UUserWidget* Widget); // Function /Script/Game.GameWidgetComponent.SetWidget // (Native|Public|BlueprintCallable) // @ game+0
	void SetTwoSided(bool bWantTwoSided); // Function /Script/Game.GameWidgetComponent.SetTwoSided // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetTintColorAndOpacity(struct FLinearColor NewTintColorAndOpacity); // Function /Script/Game.GameWidgetComponent.SetTintColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetTickWhenOffscreen(bool bWantTickWhenOffscreen); // Function /Script/Game.GameWidgetComponent.SetTickWhenOffscreen // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetTickMode(enum class ETickMode InTickMode); // Function /Script/Game.GameWidgetComponent.SetTickMode // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetRedrawTime(float InRedrawTime); // Function /Script/Game.GameWidgetComponent.SetRedrawTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPivot(struct FVector2D& InPivot); // Function /Script/Game.GameWidgetComponent.SetPivot // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetOwnerPlayer(struct ULocalPlayer* LocalPlayer); // Function /Script/Game.GameWidgetComponent.SetOwnerPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetManuallyRedraw(bool bUseManualRedraw); // Function /Script/Game.GameWidgetComponent.SetManuallyRedraw // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetGeometryMode(enum class EWidgetGeometryMode InGeometryMode); // Function /Script/Game.GameWidgetComponent.SetGeometryMode // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetDrawSize(struct FVector2D Size); // Function /Script/Game.GameWidgetComponent.SetDrawSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize); // Function /Script/Game.GameWidgetComponent.SetDrawAtDesiredSize // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCylinderReverse(bool bInValue); // Function /Script/Game.GameWidgetComponent.SetCylinderReverse // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCylinderArcAngle(float InCylinderArcAngle); // Function /Script/Game.GameWidgetComponent.SetCylinderArcAngle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetBackgroundColor(struct FLinearColor NewBackgroundColor); // Function /Script/Game.GameWidgetComponent.SetBackgroundColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void RequestRedraw(); // Function /Script/Game.GameWidgetComponent.RequestRedraw // (Native|Public|BlueprintCallable) // @ game+0
	bool IsWidgetVisible(); // Function /Script/Game.GameWidgetComponent.IsWidgetVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class EWindowVisibility GetWindowVisiblility(); // Function /Script/Game.GameWidgetComponent.GetWindowVisiblility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetWindowFocusable(); // Function /Script/Game.GameWidgetComponent.GetWindowFocusable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class EWidgetSpace GetWidgetSpace(); // Function /Script/Game.GameWidgetComponent.GetWidgetSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UUserWidget* GetWidget(); // Function /Script/Game.GameWidgetComponent.GetWidget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UUserWidget* GetUserWidgetObject(); // Function /Script/Game.GameWidgetComponent.GetUserWidgetObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetTwoSided(); // Function /Script/Game.GameWidgetComponent.GetTwoSided // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetTickWhenOffscreen(); // Function /Script/Game.GameWidgetComponent.GetTickWhenOffscreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UTextureRenderTarget2D* GetRenderTarget(); // Function /Script/Game.GameWidgetComponent.GetRenderTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetRedrawTime(); // Function /Script/Game.GameWidgetComponent.GetRedrawTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector2D GetPivot(); // Function /Script/Game.GameWidgetComponent.GetPivot // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct ULocalPlayer* GetOwnerPlayer(); // Function /Script/Game.GameWidgetComponent.GetOwnerPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UMaterialInstanceDynamic* GetMaterialInstance(); // Function /Script/Game.GameWidgetComponent.GetMaterialInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetManuallyRedraw(); // Function /Script/Game.GameWidgetComponent.GetManuallyRedraw // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class EWidgetGeometryMode GetGeometryMode(); // Function /Script/Game.GameWidgetComponent.GetGeometryMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector2D GetDrawSize(); // Function /Script/Game.GameWidgetComponent.GetDrawSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetDrawAtDesiredSize(); // Function /Script/Game.GameWidgetComponent.GetDrawAtDesiredSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetCylinderReverse(); // Function /Script/Game.GameWidgetComponent.GetCylinderReverse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetCylinderArcAngle(); // Function /Script/Game.GameWidgetComponent.GetCylinderArcAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector2D GetCurrentDrawSize(); // Function /Script/Game.GameWidgetComponent.GetCurrentDrawSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GameWidgetInteractionComponent
// Size: 0x0 (Inherited: 0x0)
struct UGameWidgetInteractionComponent : UWidgetInteractionComponent {

	void OnScrollWheel(float ScrollDelta); // Function /Script/Game.GameWidgetInteractionComponent.OnScrollWheel // (Native|Public|BlueprintCallable) // @ game+0
	void OnReleasePointerKey(struct FKey Key); // Function /Script/Game.GameWidgetInteractionComponent.OnReleasePointerKey // (Native|Public|BlueprintCallable) // @ game+0
	void OnPressPointerKey(struct FKey Key); // Function /Script/Game.GameWidgetInteractionComponent.OnPressPointerKey // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GameWidgetSwitcher
// Size: 0x0 (Inherited: 0x0)
struct UGameWidgetSwitcher : UCanvasPanel {
	struct TArray<struct TSoftClassPtr<UObject>> WidgetClasses; // 0x0(0x0)
	bool bAutoStreaming; // 0x0(0x0)
	char pad_159[0x7]; // 0x0(0x0)
	struct TMap<__int32, struct TWeakObjectPtr<struct UUserWidget>> CacheWidget; // 0x0(0x0)
	char pad_1B0[0x10]; // 0x0(0x0)

	void StreamingWidget(); // Function /Script/Game.GameWidgetSwitcher.StreamingWidget // (Final|Native|Private) // @ game+0
	void SetActiveWidgetIndex(__int32 Index); // Function /Script/Game.GameWidgetSwitcher.SetActiveWidgetIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UUserWidget* GetWidgetAtIndex(__int32 Index); // Function /Script/Game.GameWidgetSwitcher.GetWidgetAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetPathArray(struct TArray<struct FString>& OutPaths); // Function /Script/Game.GameWidgetSwitcher.GetPathArray // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 GetActiveWidgetIndex(); // Function /Script/Game.GameWidgetSwitcher.GetActiveWidgetIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UUserWidget* GetActiveWidget(); // Function /Script/Game.GameWidgetSwitcher.GetActiveWidget // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.WwiseSystemManager
// Size: 0x0 (Inherited: 0x0)
struct UWwiseSystemManager : UEngineSubsystem {
	char pad_30[0x90]; // 0x0(0x0)

	struct FString ReplaceWwisePath(bool bReplace, struct FString InPath, struct UObject* WorldContextObject); // Function /Script/Game.WwiseSystemManager.ReplaceWwisePath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UWwiseComponent* PostEventReplaceAttachedWithCallbackSwitch(struct FString InEventName, struct USceneComponent* InAttachedComponent, struct FDelegate& OnEndPlay, struct TMap<struct FString, struct FString>& Switch, struct FName& InSocketName, bool bAutoDestroy, __int32 SwitchState); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAttachedWithCallbackSwitch // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAttachedWithCallback(struct FString InEventName, struct USceneComponent* InAttachedComponent, struct FDelegate& OnEndPlay, struct FName& InSocketName, bool bAutoDestroy, __int32 SwitchState); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAttachedWithCallback // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAttachedComponentSwitch(struct FString InEventName, struct USceneComponent* InAttachedComponent, struct TMap<struct FString, struct FString>& Switch, struct FName& InSocketName, bool bAutoDestroy, __int32 SwitchState); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAttachedComponentSwitch // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAttachedComponent(struct FString InEventName, struct USceneComponent* InAttachedComponent, struct FName& InSocketName, bool bAutoDestroy, __int32 SwitchState); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAttachedComponent // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAttachedActorSwitch(struct FString InEventName, struct AActor* InActor, struct TMap<struct FString, struct FString>& Switch); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAttachedActorSwitch // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAttachedActor(struct FString InEventName, struct AActor* InActor); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAttachedActor // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAtLocationWithCallbackSwitch(struct UObject* InWorldContext, struct FString InEventName, struct FVector& InLocation, struct FRotator& InRotation, struct FDelegate& OnEndPlay, struct TMap<struct FString, struct FString>& Switch, __int32 SwitchState); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAtLocationWithCallbackSwitch // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAtLocationWithCallback(struct UObject* InWorldContext, struct FString InEventName, struct FVector& InLocation, struct FRotator& InRotation, struct FDelegate& OnEndPlay, __int32 SwitchState); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAtLocationWithCallback // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAtLocationSwitch(struct UObject* InWorldContext, struct FString InEventName, struct FVector& InLocation, struct FRotator& InRotation, struct TMap<struct FString, struct FString>& Switch, __int32 SwitchState); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAtLocationSwitch // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEventReplaceAtLocation(struct UObject* InWorldContext, struct FString InEventName, struct FVector& InLocation, struct FRotator& InRotation, __int32 SwitchState); // Function /Script/Game.WwiseSystemManager.PostEventReplaceAtLocation // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEvent2DReplaceWithCallback(struct UObject* InWorldContext, struct FString InEventName, struct FDelegate& OnEndPlay); // Function /Script/Game.WwiseSystemManager.PostEvent2DReplaceWithCallback // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UWwiseComponent* PostEvent2DReplace(struct UObject* InWorldContext, struct FString InEventName); // Function /Script/Game.WwiseSystemManager.PostEvent2DReplace // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void OnSystemFinished_PSC(struct UWwiseComponent* PSC); // Function /Script/Game.WwiseSystemManager.OnSystemFinished_PSC // (Final|Native|Public) // @ game+0
	void OnEmitterEndDeleteParticleByID(__int32 ID, struct UAbilityComponentBase* OwnerAbility); // Function /Script/Game.WwiseSystemManager.OnEmitterEndDeleteParticleByID // (Final|Native|Private) // @ game+0
	void OnDeleteParticleByID(__int32 ID); // Function /Script/Game.WwiseSystemManager.OnDeleteParticleByID // (Final|Native|Private) // @ game+0
	void OnDeleteParticleByCancelID(__int32 ID, enum class ESkillInterruptedType InType); // Function /Script/Game.WwiseSystemManager.OnDeleteParticleByCancelID // (Final|Native|Private) // @ game+0
	void OnCharacterDeath(struct AGameCharacter* lpCharacter, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.WwiseSystemManager.OnCharacterDeath // (Final|Native|Private|HasOutParms) // @ game+0
	struct FString GetReplaceEventNameByObject(struct FString InEventName, struct UObject* InWorldContextObject); // Function /Script/Game.WwiseSystemManager.GetReplaceEventNameByObject // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	__int64 GetPiFuGDPL(struct UObject* WorldContextObject); // Function /Script/Game.WwiseSystemManager.GetPiFuGDPL // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FString FindWwiseReplacePathString(struct FString InPath, __int64 InReplaceId); // Function /Script/Game.WwiseSystemManager.FindWwiseReplacePathString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool FindWwiseReplacePath(struct FString& InOutPath, __int64 InReplaceId); // Function /Script/Game.WwiseSystemManager.FindWwiseReplacePath // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.GMAttributePreview
// Size: 0x0 (Inherited: 0x0)
struct UGMAttributePreview : UPanelWidget {
	char pad_138[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.GMLibrary
// Size: 0x0 (Inherited: 0x0)
struct UGMLibrary : UBlueprintFunctionLibrary {

	bool WithEditor(); // Function /Script/Game.GMLibrary.WithEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void StopFreedomCameraMode(struct UObject* WorldContextObject); // Function /Script/Game.GMLibrary.StopFreedomCameraMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void StartGod(struct UObject* WorldContextObject); // Function /Script/Game.GMLibrary.StartGod // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void StartFreedomCameraMode(struct UObject* WorldContextObject); // Function /Script/Game.GMLibrary.StartFreedomCameraMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString SignatureEncrypt(struct FString InSignature); // Function /Script/Game.GMLibrary.SignatureEncrypt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class EAppReturnType ShowDialogWithMsgType(enum class EAppMsgType MessageType, struct FString InTitle, struct FString InMsg); // Function /Script/Game.GMLibrary.ShowDialogWithMsgType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ShowDialog(struct FString InTitle, struct FString InMsg); // Function /Script/Game.GMLibrary.ShowDialog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetMainMapAsyncLoad(bool bAsync); // Function /Script/Game.GMLibrary.SetMainMapAsyncLoad // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetBrushTintColor(struct UImage* Img, __int32 R, __int32 G, __int32 A); // Function /Script/Game.GMLibrary.SetBrushTintColor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SendJsonToHttp(struct FString URL, struct FString Content); // Function /Script/Game.GMLibrary.SendJsonToHttp // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PreLoadGameAssetMode(bool bAsync); // Function /Script/Game.GMLibrary.PreLoadGameAssetMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PreLoadGameAssetEnabled(bool bEnabled); // Function /Script/Game.GMLibrary.PreLoadGameAssetEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString JsonEncrypt(struct FString InAESKey, struct FString InData); // Function /Script/Game.GMLibrary.JsonEncrypt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsShipping(); // Function /Script/Game.GMLibrary.IsShipping // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsLeftMouseButtonDown(struct APlayerController* Controller); // Function /Script/Game.GMLibrary.IsLeftMouseButtonDown // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsEditor(); // Function /Script/Game.GMLibrary.IsEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool HasNewLuaError(); // Function /Script/Game.GMLibrary.HasNewLuaError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetObjectArrayNumMinusAvailable(); // Function /Script/Game.GMLibrary.GetObjectArrayNumMinusAvailable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetLuaErrorCount(); // Function /Script/Game.GMLibrary.GetLuaErrorCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetHealth(struct UObject* WorldContextObject, __int32 InID, __int32 InLevel); // Function /Script/Game.GMLibrary.GetHealth // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetGMDefaultOpenState(); // Function /Script/Game.GMLibrary.GetGMDefaultOpenState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetAllSpawnMons(struct TArray<__int32>& OutMonIds, struct TArray<__int32>& OutMonAIs, struct TArray<struct FString>& OutMonNames, struct TArray<__int32>& OutMonCampTypes); // Function /Script/Game.GMLibrary.GetAllSpawnMons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString GetAllLuaError(); // Function /Script/Game.GMLibrary.GetAllLuaError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetAliveMonsterCount(); // Function /Script/Game.GMLibrary.GetAliveMonsterCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EndGod(struct UObject* WorldContextObject); // Function /Script/Game.GMLibrary.EndGod // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EnabledUnLoadMemReport(bool bEnabled); // Function /Script/Game.GMLibrary.EnabledUnLoadMemReport // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString DictionaryOrder(struct FString InTime, struct FString InToken, struct FString InNonce); // Function /Script/Game.GMLibrary.DictionaryOrder // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void CrashEyeError(); // Function /Script/Game.GMLibrary.CrashEyeError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ClipboardCopy(struct FString Str); // Function /Script/Game.GMLibrary.ClipboardCopy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ClearAllLuaError(); // Function /Script/Game.GMLibrary.ClearAllLuaError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GMRefresLog
// Size: 0x0 (Inherited: 0x0)
struct UGMRefresLog : UObject {
	struct FMulticastInlineDelegate mReceiveLog; // 0x0(0x0)
	struct TArray<struct FGMLogInfo> Logs; // 0x0(0x0)

	struct UGMRefresLog* GetGMRefresLogPtr(); // Function /Script/Game.GMRefresLog.GetGMRefresLogPtr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.GMShowLogItem
// Size: 0x0 (Inherited: 0x0)
struct UGMShowLogItem : UUserWidget {
	char pad_278[0x8]; // 0x0(0x0)

	void RefreshLogs(struct FGMLogInfo Message); // Function /Script/Game.GMShowLogItem.RefreshLogs // (Event|Public|BlueprintEvent) // @ game+0
	struct FString RefreshAllLogs(struct FString Log); // Function /Script/Game.GMShowLogItem.RefreshAllLogs // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UGMShowLogItem* GetGMLogsIns(); // Function /Script/Game.GMShowLogItem.GetGMLogsIns // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GraphicsSettingManager
// Size: 0x0 (Inherited: 0x0)
struct UGraphicsSettingManager : UGameInstanceSubsystem {
	char pad_30[0x168]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnEffectsQualityChanged; // 0x0(0x0)
	char pad_1A8[0x50]; // 0x0(0x0)

	void WriteThingsWhenPlayLogin(); // Function /Script/Game.GraphicsSettingManager.WriteThingsWhenPlayLogin // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool SupportsFramePace(__int32 QueryFramePace); // Function /Script/Game.GraphicsSettingManager.SupportsFramePace // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetVSync(__int32 State); // Function /Script/Game.GraphicsSettingManager.SetVSync // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetVolumetricFog(__int32 State); // Function /Script/Game.GraphicsSettingManager.SetVolumetricFog // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetShadowQuality(__int32 CategoryLevel); // Function /Script/Game.GraphicsSettingManager.SetShadowQuality // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetScreenPercentageForPC(__int32 Value); // Function /Script/Game.GraphicsSettingManager.SetScreenPercentageForPC // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetScreenPercentage(__int32 Value); // Function /Script/Game.GraphicsSettingManager.SetScreenPercentage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSceneQuality(__int32 CategoryLevel); // Function /Script/Game.GraphicsSettingManager.SetSceneQuality // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetReflection(__int32 State); // Function /Script/Game.GraphicsSettingManager.SetReflection // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPrecomputedVisibilityFlag(struct FString UniqueKey, bool bOpen); // Function /Script/Game.GraphicsSettingManager.SetPrecomputedVisibilityFlag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPPQuality(__int32 CategoryLevel); // Function /Script/Game.GraphicsSettingManager.SetPPQuality // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetParticleQuality(__int32 CategoryLevel); // Function /Script/Game.GraphicsSettingManager.SetParticleQuality // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetMotionBlur(__int32 State); // Function /Script/Game.GraphicsSettingManager.SetMotionBlur // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetGraphicsLevel(__int32 Level); // Function /Script/Game.GraphicsSettingManager.SetGraphicsLevel // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetFramePace(__int32 InFramePace); // Function /Script/Game.GraphicsSettingManager.SetFramePace // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetFpsQuality(__int32 Value); // Function /Script/Game.GraphicsSettingManager.SetFpsQuality // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetEffectQuality(__int32 CategoryLevel); // Function /Script/Game.GraphicsSettingManager.SetEffectQuality // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetDisplayMode(struct FIntPoint Resolution, __int32 IntFullscreenMode); // Function /Script/Game.GraphicsSettingManager.SetDisplayMode // (Final|Native|Private|HasDefaults|BlueprintCallable) // @ game+0
	void SetCustomFpsQuality(__int32 Value); // Function /Script/Game.GraphicsSettingManager.SetCustomFpsQuality // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetConsoleVariable(struct UObject* WorldContextObject, struct FString Name, struct FString Value, struct APlayerController* Player); // Function /Script/Game.GraphicsSettingManager.SetConsoleVariable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetCharacterMinLOD(struct USkeletalMeshComponent* SMC, __int32 MinLOD); // Function /Script/Game.GraphicsSettingManager.SetCharacterMinLOD // (Final|Native|Private|BlueprintCallable) // @ game+0
	void SetCharacterForcedLOD(struct AGameCharacter* Character, __int32 ForcedLOD, struct UAbilityComponent* Ability, __int32 SkillID); // Function /Script/Game.GraphicsSettingManager.SetCharacterForcedLOD // (Final|Native|Private|BlueprintCallable) // @ game+0
	void SetAAQuality(__int32 CategoryLevel); // Function /Script/Game.GraphicsSettingManager.SetAAQuality // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RestorePrecomputedVisibilityFlag(struct FString UniqueKey); // Function /Script/Game.GraphicsSettingManager.RestorePrecomputedVisibilityFlag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnMapChange(__int32 MapId); // Function /Script/Game.GraphicsSettingManager.OnMapChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnEffectsQualityChanged__DelegateSignature(__int32 Level); // DelegateFunction /Script/Game.GraphicsSettingManager.OnEffectsQualityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	bool IsPlanarReflectionDisabled(); // Function /Script/Game.GraphicsSettingManager.IsPlanarReflectionDisabled // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInMainMap(); // Function /Script/Game.GraphicsSettingManager.IsInMainMap // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInHouseMap(); // Function /Script/Game.GraphicsSettingManager.IsInHouseMap // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsGraphicsLevel(__int32 Level); // Function /Script/Game.GraphicsSettingManager.IsGraphicsLevel // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsDynamicLightDisabled(); // Function /Script/Game.GraphicsSettingManager.IsDynamicLightDisabled // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsCameraDitherDisabled(); // Function /Script/Game.GraphicsSettingManager.IsCameraDitherDisabled // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsBattleOutlineDisabled(); // Function /Script/Game.GraphicsSettingManager.IsBattleOutlineDisabled // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FIntPoint GetWindowSize(); // Function /Script/Game.GraphicsSettingManager.GetWindowSize // (Final|Native|Private|HasDefaults|BlueprintCallable) // @ game+0
	struct FIntPoint GetRecommendResolution(); // Function /Script/Game.GraphicsSettingManager.GetRecommendResolution // (Final|Native|Private|HasDefaults|BlueprintCallable) // @ game+0
	struct FIntPoint GetMaxWindowSize(); // Function /Script/Game.GraphicsSettingManager.GetMaxWindowSize // (Final|Native|Static|Private|HasDefaults|BlueprintCallable) // @ game+0
	__int32 GetLowResolutionQuality(__int32 Origin); // Function /Script/Game.GraphicsSettingManager.GetLowResolutionQuality // (Final|Native|Static|Private|BlueprintCallable) // @ game+0
	__int32 GetIntConsoleVariable(struct FString Name); // Function /Script/Game.GraphicsSettingManager.GetIntConsoleVariable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UGraphicsSettingManager* GetGraphicsSettingManager(struct UObject* WorldContextObject); // Function /Script/Game.GraphicsSettingManager.GetGraphicsSettingManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class EGraphicsSettingLevel GetGraphicsSettingLevel(); // Function /Script/Game.GraphicsSettingManager.GetGraphicsSettingLevel // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetFullScreen(); // Function /Script/Game.GraphicsSettingManager.GetFullScreen // (Final|Native|Private|BlueprintCallable) // @ game+0
	float GetFloatConsoleVariable(struct FString Name); // Function /Script/Game.GraphicsSettingManager.GetFloatConsoleVariable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetCategoryLevel(enum class EGraphicsSettingCategory Category); // Function /Script/Game.GraphicsSettingManager.GetCategoryLevel // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.GrenadeTips
// Size: 0x0 (Inherited: 0x0)
struct UGrenadeTips : ULuaWidget {

	void ReceiveWarning(bool IsWarning, float InTotalTime); // Function /Script/Game.GrenadeTips.ReceiveWarning // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.GyroActor
// Size: 0x0 (Inherited: 0x0)
struct AGyroActor : AActor {
	float Threshold; // 0x0(0x0)
	float IntervalTime; // 0x0(0x0)
	struct FRuntimeFloatCurve RecoverSpeedCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve LerpSpeedCurve; // 0x0(0x0)
	struct FVector2D MoveFactorXY; // 0x0(0x0)
	char pad_340[0x20]; // 0x0(0x0)

	void SetState(enum class EGyroState& InState); // Function /Script/Game.GyroActor.SetState // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetInputPercent(struct FVector2D& InPercent); // Function /Script/Game.GyroActor.SetInputPercent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetActiveTime(float InTime); // Function /Script/Game.GyroActor.SetActiveTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector2D GetGyroPos(); // Function /Script/Game.GyroActor.GetGyroPos // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetActiveTime(); // Function /Script/Game.GyroActor.GetActiveTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckMove(struct FVector2D& InDelta); // Function /Script/Game.GyroActor.CheckMove // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.WindowsGyroActor
// Size: 0x0 (Inherited: 0x0)
struct AWindowsGyroActor : AGyroActor {
};

 // Class /Script/Game.MobileGyroActor
// Size: 0x0 (Inherited: 0x0)
struct AMobileGyroActor : AGyroActor {
	char pad_360[0x10]; // 0x0(0x0)

	void SetTestInput(struct FVector2D& InTestInput); // Function /Script/Game.MobileGyroActor.SetTestInput // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FVector2D CalculateInput(struct FVector2D& InTilt, struct FVector2D& InOrigin); // Function /Script/Game.MobileGyroActor.CalculateInput // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.GyroWidget
// Size: 0x0 (Inherited: 0x0)
struct UGyroWidget : UUserWidget {
};

 // Class /Script/Game.HairEffectAct
// Size: 0x0 (Inherited: 0x0)
struct AHairEffectAct : AActor {

	void UpDataMatByLoc(); // Function /Script/Game.HairEffectAct.UpDataMatByLoc // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.HitEffectManager
// Size: 0x0 (Inherited: 0x0)
struct UHitEffectManager : UBlueprintFunctionLibrary {

	void PlayHitID(struct UObject* InWorldContext, struct AActor* Caster, __int32 BulletID, __int32 HitEffectID, struct FTransform& InTransform, struct FHitResult& InHit, bool bHasSilencer); // Function /Script/Game.HitEffectManager.PlayHitID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void PlayDirect(struct UObject* InWorldContext, struct AActor* Caster, struct FTransform& InTrans, struct UFXSystemAsset* InParticle, struct FString InSoundEvent); // Function /Script/Game.HitEffectManager.PlayDirect // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseAIController
// Size: 0x0 (Inherited: 0x0)
struct AHouseAIController : AAIController {
	char pad_328[0x30]; // 0x0(0x0)

	void PlayInteractFurnitureAnim(struct AHouseFurnitureBase* TargetFurniture); // Function /Script/Game.HouseAIController.PlayInteractFurnitureAnim // (Final|Native|Public) // @ game+0
	void OnOneFurnitureAnimEnd(); // Function /Script/Game.HouseAIController.OnOneFurnitureAnimEnd // (Final|Native|Public) // @ game+0
	void ClearFurnitureCameraAnimEvent(); // Function /Script/Game.HouseAIController.ClearFurnitureCameraAnimEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BindFurnitureCameraAnimEvent(); // Function /Script/Game.HouseAIController.BindFurnitureCameraAnimEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseAnimFurNotify
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimFurNotify : UAnimNotifyState {
	struct FName FurTag; // 0x0(0x0)
	struct TSoftClassPtr<UObject> FurClass; // 0x0(0x0)
	struct FName AnimTag; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimLibrary
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimLibrary : UBlueprintFunctionLibrary {

	struct UAnimMontage* GetHouseFaceAnimMontage(struct FString ResDirName, struct FString InActionName); // Function /Script/Game.HouseAnimLibrary.GetHouseFaceAnimMontage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UBlendSpace1D* GetHouseBlendSpace1D(struct FString ResDirName, struct FString InActionName); // Function /Script/Game.HouseAnimLibrary.GetHouseBlendSpace1D // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UBlendSpace* GetHouseBlendSpace(struct FString ResDirName, struct FString InActionName); // Function /Script/Game.HouseAnimLibrary.GetHouseBlendSpace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAnimSequence* GetHouseAnimSequenceByPath(struct FString ResDir); // Function /Script/Game.HouseAnimLibrary.GetHouseAnimSequenceByPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAnimSequence* GetHouseAnimSequence(struct FString ResDirName, struct FString InActionName); // Function /Script/Game.HouseAnimLibrary.GetHouseAnimSequence // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAnimMontage* GetHouseAnimMontage(struct FString ResDirName, struct FString InActionName); // Function /Script/Game.HouseAnimLibrary.GetHouseAnimMontage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.HouseAnimMoveStateBase
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateBase : UObject {
	struct AHousePlayerCharacter* Player; // 0x0(0x0)
	struct UHouseCharacterAnimIns* AnimInstance; // 0x0(0x0)
	char pad_38[0x30]; // 0x0(0x0)
	struct TArray<struct FAccesoryInstanceInfo> AccessoyInfos; // 0x0(0x0)

	void Update(float DeltaTime); // Function /Script/Game.HouseAnimMoveStateBase.Update // (Native|Public|BlueprintCallable) // @ game+0
	void Start(); // Function /Script/Game.HouseAnimMoveStateBase.Start // (Native|Public|BlueprintCallable) // @ game+0
	void Exit(); // Function /Script/Game.HouseAnimMoveStateBase.Exit // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseAnimMoveStateDistanceMap
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateDistanceMap : UHouseAnimMoveStateBase {
	float EnableLerpTimeProgress; // 0x0(0x0)
	float CurrentAccDirBlendSpd; // 0x0(0x0)
	char pad_80[0xB8]; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimMoveStateIdle
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateIdle : UHouseAnimMoveStateBase {
	float PlayIdleIntervale; // 0x0(0x0)
	float TurnInPlaceDelay; // 0x0(0x0)
	__int32 IdleSwitchCount; // 0x0(0x0)
	char pad_84[0x1C]; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimMoveStateLaunch
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateLaunch : UHouseAnimMoveStateDistanceMap {
	struct TMap<struct FString, struct FMontageSectionInfo> LaunchSectionInfos; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimMoveStatePivot
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStatePivot : UHouseAnimMoveStateDistanceMap {
	struct TMap<struct FString, struct FMontageSectionInfo> RunSectionInfos; // 0x0(0x0)
	struct TMap<struct FString, struct FMontageSectionInfo> RushSectionInfos; // 0x0(0x0)
	float RushReEntryTime_TurnLeft; // 0x0(0x0)
	float RushReEntryTime_TurnRight; // 0x0(0x0)
	float RunReEntryTime_TurnLeft; // 0x0(0x0)
	float RunReEntryTime_TurnRight; // 0x0(0x0)
	char pad_1E8[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimMoveStateRun
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateRun : UHouseAnimMoveStateBase {
	char pad_78[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimMoveStateRush
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateRush : UHouseAnimMoveStateBase {
	struct FName LeftSectionName; // 0x0(0x0)
	struct FName RightSectionName; // 0x0(0x0)
	struct FName LoopSectionName; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimMoveStateStop
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateStop : UHouseAnimMoveStateBase {
	struct UAnimMontage* StopMontage; // 0x0(0x0)
	char pad_80[0x4]; // 0x0(0x0)
	float RushStopTime; // 0x0(0x0)
	struct UAnimMontage* RunMontage; // 0x0(0x0)
	struct UAnimMontage* RushMontage; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimMoveStateTurnInPlace
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateTurnInPlace : UHouseAnimMoveStateBase {
	float TurnDelay; // 0x0(0x0)
	float TurnCoolDown; // 0x0(0x0)
	float FastTurnAngle; // 0x0(0x0)
	char pad_84[0x44]; // 0x0(0x0)
};

 // Class /Script/Game.HouseAnimMoveStateWalk
// Size: 0x0 (Inherited: 0x0)
struct UHouseAnimMoveStateWalk : UHouseAnimMoveStateBase {
};

 // Class /Script/Game.HouseBaseCharacter
// Size: 0x0 (Inherited: 0x0)
struct AHouseBaseCharacter : ACharacter {
	struct UCharacterRenderComponent* CharacterRenderComponent; // 0x0(0x0)
	struct USceneComponent* BubblePos; // 0x0(0x0)
	char pad_4D0[0x10]; // 0x0(0x0)
	bool IsInRush; // 0x0(0x0)
	char pad_4E1[0x7]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct ACharacterAccessory>> CharacterAccessories; // 0x0(0x0)
	struct UUserWidget* InteracterWidget; // 0x0(0x0)
	__int32 NpcId; // 0x0(0x0)
	__int32 GirlId; // 0x0(0x0)
	__int32 SuitId; // 0x0(0x0)
	__int32 AreaId; // 0x0(0x0)
	struct FString ResName; // 0x0(0x0)
	char pad_520[0x4]; // 0x0(0x0)
	float FaceToPlayerRange; // 0x0(0x0)
	float MaxNeckRaw; // 0x0(0x0)
	float MaxNeckPitch; // 0x0(0x0)
	struct TSoftObjectPtr<UCurveFloat> NeckBlendSpeed; // 0x0(0x0)
	float ResetBlendSpeedAngle; // 0x0(0x0)
	float NeckBlendBaseSpeed; // 0x0(0x0)
	float NeckDelayTurnBackTime; // 0x0(0x0)
	bool bStopInteractByKeyboard; // 0x0(0x0)
	char pad_565[0x1]; // 0x0(0x0)
	enum class EHouseInteractType InteractType; // 0x0(0x0)
	char pad_567[0x1]; // 0x0(0x0)
	struct FString InteractItemText; // 0x0(0x0)
	struct TSoftClassPtr<UObject> AnimInsWithOutPhysics; // 0x0(0x0)
	char pad_5A0[0x14]; // 0x0(0x0)
	struct FVector ShootTargetPos; // 0x0(0x0)
	char pad_5C0[0xC]; // 0x0(0x0)
	float ShootLocateTime; // 0x0(0x0)
	char pad_5D0[0x4]; // 0x0(0x0)
	bool IsInShootTarget; // 0x0(0x0)
	char pad_5D5[0x2B]; // 0x0(0x0)

	void UpdateTurnHead(float DeltaSeconds); // Function /Script/Game.HouseBaseCharacter.UpdateTurnHead // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateRotateFaceToPlayer(float DeltaSeconds); // Function /Script/Game.HouseBaseCharacter.UpdateRotateFaceToPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateBubble(bool OnlySelf); // Function /Script/Game.HouseBaseCharacter.UpdateBubble // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Spawned(); // Function /Script/Game.HouseBaseCharacter.Spawned // (Native|Event|Public|BlueprintEvent) // @ game+0
	void ShowNpcBubble(bool bShow); // Function /Script/Game.HouseBaseCharacter.ShowNpcBubble // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetShootTargetPos(struct FVector TargetPos); // Function /Script/Game.HouseBaseCharacter.SetShootTargetPos // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetPreShootTargetPos(struct FVector TargetPos); // Function /Script/Game.HouseBaseCharacter.SetPreShootTargetPos // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetNavAreaAffect(bool CanAffect); // Function /Script/Game.HouseBaseCharacter.SetNavAreaAffect // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnPlayGiftGivenCameraAnim(); // Function /Script/Game.HouseBaseCharacter.OnPlayGiftGivenCameraAnim // (Event|Public|BlueprintEvent) // @ game+0
	void OnInteractInBp(bool IsEnd); // Function /Script/Game.HouseBaseCharacter.OnInteractInBp // (Event|Public|BlueprintEvent) // @ game+0
	void OnGiftGiven(struct AHouseFurnitureBase* HouseFurniture); // Function /Script/Game.HouseBaseCharacter.OnGiftGiven // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetIcon(); // Function /Script/Game.HouseBaseCharacter.GetIcon // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FHouseCharacterTemplate GetCharacterTemplate(); // Function /Script/Game.HouseBaseCharacter.GetCharacterTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetCharacterAccessories(struct TArray<struct ACharacterAccessory*>& OutCharacterAccessories); // Function /Script/Game.HouseBaseCharacter.GetCharacterAccessories // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UAnimInstance* GetAnimInstance(); // Function /Script/Game.HouseBaseCharacter.GetAnimInstance // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BeginTurnToPlayer(struct AHouseBaseCharacter* TargetCharacter); // Function /Script/Game.HouseBaseCharacter.BeginTurnToPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool AttachCharacterAccessory(struct ACharacterAccessory* CharacterAccessoryClass); // Function /Script/Game.HouseBaseCharacter.AttachCharacterAccessory // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseBaseController
// Size: 0x0 (Inherited: 0x0)
struct AHouseBaseController : APlayerController {
	char pad_570[0x8]; // 0x0(0x0)

	void SetBlockControl(bool bBlock); // Function /Script/Game.HouseBaseController.SetBlockControl // (Native|Public|BlueprintCallable) // @ game+0
	void SetActionEnableInBlock(__int32 ActionId); // Function /Script/Game.HouseBaseController.SetActionEnableInBlock // (Native|Public|BlueprintCallable) // @ game+0
	bool IsInBlockControl(); // Function /Script/Game.HouseBaseController.IsInBlockControl // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseBaseMovementComponent
// Size: 0x0 (Inherited: 0x0)
struct UHouseBaseMovementComponent : UCharacterMovementComponent {
	char pad_B00[0x20]; // 0x0(0x0)

	void ResetMaxSpeed(); // Function /Script/Game.HouseBaseMovementComponent.ResetMaxSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveBlock(struct FHitResult& HitResult); // Function /Script/Game.HouseBaseMovementComponent.MoveBlock // (Final|Native|Public|HasOutParms) // @ game+0
	void ModifyMaxSpeed(float Value); // Function /Script/Game.HouseBaseMovementComponent.ModifyMaxSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ModifyMaxRotationRate(float Pitch, float Yaw, float Roll); // Function /Script/Game.HouseBaseMovementComponent.ModifyMaxRotationRate // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FRotator K2_GetDeltaRotation(float DeltaTime); // Function /Script/Game.HouseBaseMovementComponent.K2_GetDeltaRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float K2_GetCharacterMaxSpeed(); // Function /Script/Game.HouseBaseMovementComponent.K2_GetCharacterMaxSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetMoveStatus(float& OutDirection); // Function /Script/Game.HouseBaseMovementComponent.GetMoveStatus // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.HouseCanInteractActor
// Size: 0x0 (Inherited: 0x0)
struct AHouseCanInteractActor : AActor {
	char pad_220[0x8]; // 0x0(0x0)
	struct FString InteractItemText; // 0x0(0x0)
	struct UUserWidget* InteracterWidget; // 0x0(0x0)
	struct UUserWidget* InteractWidgetInstance; // 0x0(0x0)
	char pad_248[0x8]; // 0x0(0x0)

	void ShowInteractWidget(); // Function /Script/Game.HouseCanInteractActor.ShowInteractWidget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCanInteract(bool InCanInteract); // Function /Script/Game.HouseCanInteractActor.SetCanInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnBluePrintInteract(); // Function /Script/Game.HouseCanInteractActor.OnBluePrintInteract // (Event|Public|BlueprintEvent) // @ game+0
	void HideInteractWidget(); // Function /Script/Game.HouseCanInteractActor.HideInteractWidget // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetInteractText(); // Function /Script/Game.HouseCanInteractActor.GetInteractText // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.HouseBedRoomDoor
// Size: 0x0 (Inherited: 0x0)
struct AHouseBedRoomDoor : AHouseCanInteractActor {
	__int32 DoorState; // 0x0(0x0)
	bool bTransToInside; // 0x0(0x0)
	char pad_255[0x3]; // 0x0(0x0)
	struct ALevelSequenceActor* LSActor; // 0x0(0x0)
	__int32 BedRoomId; // 0x0(0x0)
	__int32 GirlId; // 0x0(0x0)
	char pad_268[0x8]; // 0x0(0x0)
	struct UFXSystemComponent* DoorInfoFX; // 0x0(0x0)
	struct UFXSystemComponent* DoorIdFX; // 0x0(0x0)
	bool IsFormatInteractTxt; // 0x0(0x0)
	char pad_281[0x7]; // 0x0(0x0)

	void UpdateDoorInfo(); // Function /Script/Game.HouseBedRoomDoor.UpdateDoorInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayerTransToPos(); // Function /Script/Game.HouseBedRoomDoor.PlayerTransToPos // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayerTransThroughDoor(); // Function /Script/Game.HouseBedRoomDoor.PlayerTransThroughDoor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayerBeginThroughDoor(); // Function /Script/Game.HouseBedRoomDoor.PlayerBeginThroughDoor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OpenTheDoor(__int32 InBedRoomId, __int32 InAreaId); // Function /Script/Game.HouseBedRoomDoor.OpenTheDoor // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnClosed(); // Function /Script/Game.HouseBedRoomDoor.OnClosed // (Native|Event|Public|BlueprintEvent) // @ game+0
	struct FRotator GetDoorInfoRoa(); // Function /Script/Game.HouseBedRoomDoor.GetDoorInfoRoa // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	struct FVector GetDoorInfoPos(); // Function /Script/Game.HouseBedRoomDoor.GetDoorInfoPos // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void CloseTheDoor(); // Function /Script/Game.HouseBedRoomDoor.CloseTheDoor // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.HouseBedRoomEntryPoint
// Size: 0x0 (Inherited: 0x0)
struct AHouseBedRoomEntryPoint : AActor {
	__int32 AreaId; // 0x0(0x0)
	char pad_224[0x4]; // 0x0(0x0)
	struct UBoxComponent* Box; // 0x0(0x0)
	bool IsInside; // 0x0(0x0)
	char pad_231[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.HouseBedRoomMgr
// Size: 0x0 (Inherited: 0x0)
struct UHouseBedRoomMgr : UGameWorldSubsystem {
	char pad_48[0x10]; // 0x0(0x0)
	struct ULevelStreamingDynamic* BedRoomLevelStreaming; // 0x0(0x0)
	struct ULevelStreamingDynamic* BedRoomArtLevelStreaming; // 0x0(0x0)
	struct AHouseGameMode* GameMode; // 0x0(0x0)
	struct FMulticastInlineDelegate OnBedRoomLoaded; // 0x0(0x0)
	char pad_80[0x20]; // 0x0(0x0)
	__int32 NowLoadBedRoomId; // 0x0(0x0)
	char pad_A4[0x74]; // 0x0(0x0)

	void UpdateDoors(); // Function /Script/Game.HouseBedRoomMgr.UpdateDoors // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UnLoadGirlBedRoom(__int32 BedRoomId, __int32 GirlId, bool DealMainLight); // Function /Script/Game.HouseBedRoomMgr.UnLoadGirlBedRoom // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RefreshPlayerRender(); // Function /Script/Game.HouseBedRoomMgr.RefreshPlayerRender // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RefreshPlayerAfter3DStory(); // Function /Script/Game.HouseBedRoomMgr.RefreshPlayerAfter3DStory // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnMainLightLevelUnLoad(unsigned __int32 ID); // Function /Script/Game.HouseBedRoomMgr.OnMainLightLevelUnLoad // (Final|Native|Public) // @ game+0
	void OnMainLightLevelLoad(unsigned __int32 ID); // Function /Script/Game.HouseBedRoomMgr.OnMainLightLevelLoad // (Final|Native|Public) // @ game+0
	void On3DStorySceneLoaded(unsigned __int32 ID); // Function /Script/Game.HouseBedRoomMgr.On3DStorySceneLoaded // (Final|Native|Public) // @ game+0
	void On3DStoryPlayEnd(); // Function /Script/Game.HouseBedRoomMgr.On3DStoryPlayEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NotifyBedRoomLoaded(); // Function /Script/Game.HouseBedRoomMgr.NotifyBedRoomLoaded // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool LoadGirlBedRoom(__int32 BedRoomId, bool ShowUIMask, bool CheckIsIn); // Function /Script/Game.HouseBedRoomMgr.LoadGirlBedRoom // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LoadBedRoomWithCallBack(__int32 BedRoomId, struct FDelegate InCallBack, bool ShowUIMask, bool CheckIsIn); // Function /Script/Game.HouseBedRoomMgr.LoadBedRoomWithCallBack // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInLoading(); // Function /Script/Game.HouseBedRoomMgr.IsInLoading // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetBedRoomAreaId(__int32 BedRoomId); // Function /Script/Game.HouseBedRoomMgr.GetBedRoomAreaId // (Final|Native|Public) // @ game+0
	void EntryBedRoomWithCallBack(__int32 BedRoomId, struct FDelegate InCallBack); // Function /Script/Game.HouseBedRoomMgr.EntryBedRoomWithCallBack // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Before3DStoryPlay(__int32 AreaId, struct FDelegate InCallBack); // Function /Script/Game.HouseBedRoomMgr.Before3DStoryPlay // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseBindBPAnimNotify
// Size: 0x0 (Inherited: 0x0)
struct UHouseBindBPAnimNotify : UAnimNotifyState {
	struct AActor* BPClass; // 0x0(0x0)
	struct FName Socket; // 0x0(0x0)
	struct FVector LocationOffset; // 0x0(0x0)
	struct FRotator RotatorOffset; // 0x0(0x0)
	struct FVector Scale; // 0x0(0x0)
	char pad_64[0x4]; // 0x0(0x0)
	struct AActor* BpActor; // 0x0(0x0)
};

 // Class /Script/Game.HouseBindItemAnimNotify
// Size: 0x0 (Inherited: 0x0)
struct UHouseBindItemAnimNotify : UAnimNotifyState {
	struct UStaticMesh* ItemMesh; // 0x0(0x0)
	struct FName Socket; // 0x0(0x0)
	struct FVector LocationOffset; // 0x0(0x0)
	struct FRotator RotatorOffset; // 0x0(0x0)
	struct FVector Scale; // 0x0(0x0)
	bool UseCustomDepth_255; // 0x0(0x0)
	char pad_65[0x3]; // 0x0(0x0)
	struct AStaticMeshActor* MeshActor; // 0x0(0x0)
};

 // Class /Script/Game.HouseBindSkeletalMeshAnimNotify
// Size: 0x0 (Inherited: 0x0)
struct UHouseBindSkeletalMeshAnimNotify : UAnimNotifyState {
	struct USkeletalMesh* SkeletalMesh; // 0x0(0x0)
	struct UAnimationAsset* Sequence; // 0x0(0x0)
	bool bLoop; // 0x0(0x0)
	bool bAttach; // 0x0(0x0)
	char pad_42[0x2]; // 0x0(0x0)
	struct FName Socket; // 0x0(0x0)
	struct FVector LocationOffset; // 0x0(0x0)
	struct FRotator RotatorOffset; // 0x0(0x0)
	struct FVector Scale; // 0x0(0x0)
	struct ASkeletalMeshActor* MeshActor; // 0x0(0x0)
};

 // Class /Script/Game.HouseInteractInteraface
// Size: 0x0 (Inherited: 0x0)
struct UHouseInteractInteraface : UInterface {

	bool StopInteractByKeyboard(); // Function /Script/Game.HouseInteractInteraface.StopInteractByKeyboard // (Native|Public) // @ game+0
	void OnInteractEnd(struct AHousePlayerController* PlayerController); // Function /Script/Game.HouseInteractInteraface.OnInteractEnd // (Native|Public) // @ game+0
	void OnInteract(struct AHousePlayerController* PlayerController); // Function /Script/Game.HouseInteractInteraface.OnInteract // (Native|Public) // @ game+0
	bool IsInteracting(); // Function /Script/Game.HouseInteractInteraface.IsInteracting // (Native|Public) // @ game+0
	bool CanInteract(); // Function /Script/Game.HouseInteractInteraface.CanInteract // (Native|Public) // @ game+0
};

 // Class /Script/Game.HouseCharacterAnimIns
// Size: 0x0 (Inherited: 0x0)
struct UHouseCharacterAnimIns : UAnimInstanceBase {
	struct AHouseBaseCharacter* m_lpCharacter; // 0x0(0x0)
	struct FVector2D LeanXY; // 0x0(0x0)
	struct FVector2D MoveDirection; // 0x0(0x0)
	struct FVector2D DodgeDirection; // 0x0(0x0)
	enum class ESimpleMoveType PlayerMoveType; // 0x0(0x0)
	float HorizontalSpeed; // 0x0(0x0)
	float HorizontalSpeedScale; // 0x0(0x0)
	float HorizontalSpeedRatio; // 0x0(0x0)
	float SpeedWarpingValue; // 0x0(0x0)
	bool SpeedWarpingEnable; // 0x0(0x0)
	char pad_542[0x2]; // 0x0(0x0)
	float IsRun; // 0x0(0x0)
	bool bIsAim; // 0x0(0x0)
	char pad_549[0x3]; // 0x0(0x0)
	float AimAngle; // 0x0(0x0)
	float AimMoveSpeedX; // 0x0(0x0)
	float AimMoveSpeedY; // 0x0(0x0)
	bool bIsWalking; // 0x0(0x0)
	bool bIsMoveOrWalk; // 0x0(0x0)
	bool bIsRushing; // 0x0(0x0)
	bool bIsRunningState; // 0x0(0x0)
	bool bIsIdleState; // 0x0(0x0)
	bool bIsStopState; // 0x0(0x0)
	bool bIsLastFrameWalking; // 0x0(0x0)
	bool bHasSpeed; // 0x0(0x0)
	bool bIsPivoting; // 0x0(0x0)
	bool bIsShootAim; // 0x0(0x0)
	char pad_562[0x2]; // 0x0(0x0)
	struct FVector2D ShootAimOffset; // 0x0(0x0)
	struct FVector ShootAimTarget; // 0x0(0x0)
	struct FString AimBoneName; // 0x0(0x0)
	enum class EGamePlayerMoveState CurMoveAnimState; // 0x0(0x0)
	char pad_589[0x7]; // 0x0(0x0)
	struct UBlendSpace1D* RunWalkBlendSpace; // 0x0(0x0)
	struct UBlendSpace* LeanBlendSpace; // 0x0(0x0)
	struct UBlendSpace* NeckBlendSpace; // 0x0(0x0)
	struct UAnimMontage* Launch_Montage; // 0x0(0x0)
	struct UAnimMontage* BaseRushStart_Montage; // 0x0(0x0)
	struct UAnimMontage* BaseRushLoop_Montage; // 0x0(0x0)
	struct UAnimMontage* RushStop_Montage; // 0x0(0x0)
	struct UAnimMontage* BaseIdle01_Montage; // 0x0(0x0)
	struct UAnimMontage* BaseIdle02_Montage; // 0x0(0x0)
	struct UAnimMontage* Stop_Montage; // 0x0(0x0)
	struct UAnimMontage* WalkStop_Montage; // 0x0(0x0)
	struct UAnimMontage* Pivot_Montage; // 0x0(0x0)
	struct UAnimMontage* RushPivot_Montage; // 0x0(0x0)
	struct UAnimMontage* TurnLeftL_Montage; // 0x0(0x0)
	struct UAnimMontage* TurnRightR_Montage; // 0x0(0x0)
	struct UAnimSequenceBase* CurrentAdditiveAnim; // 0x0(0x0)
	float TurnHeadYaw_Additive; // 0x0(0x0)
	float TurnHeadPitch_Additive; // 0x0(0x0)
	struct FVector AimAtLocation; // 0x0(0x0)
	char pad_624[0x8]; // 0x0(0x0)
	float NeckYawScale; // 0x0(0x0)
	float NeckPitchScale; // 0x0(0x0)
	bool bEnableBreastPhy; // 0x0(0x0)
	char pad_635[0xB]; // 0x0(0x0)

	void PlayMontageWithFace(struct FString InDirName, struct FString InActionName, bool CheckIsPlaying, bool NoBlend); // Function /Script/Game.HouseCharacterAnimIns.PlayMontageWithFace // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LoadAnimAsset(); // Function /Script/Game.HouseCharacterAnimIns.LoadAnimAsset // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsRush(); // Function /Script/Game.HouseCharacterAnimIns.IsRush // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAdditiveAnimValid(); // Function /Script/Game.HouseCharacterAnimIns.IsAdditiveAnimValid // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.HouseDealBedRoomItem
// Size: 0x0 (Inherited: 0x0)
struct AHouseDealBedRoomItem : AHouseCanInteractActor {
	char pad_250[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.HouseDropAreaBox
// Size: 0x0 (Inherited: 0x0)
struct AHouseDropAreaBox : AActor {
	struct UBoxComponent* BoxComponent; // 0x0(0x0)
	__int32 BoxId; // 0x0(0x0)
	char pad_22C[0x4]; // 0x0(0x0)
	struct AHouseFurnitureBase* DropFurClass; // 0x0(0x0)
	char pad_238[0x10]; // 0x0(0x0)

	void GetRandomBornPos(struct FTransform& InTrans); // Function /Script/Game.HouseDropAreaBox.GetRandomBornPos // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseFloorCheckBox
// Size: 0x0 (Inherited: 0x0)
struct AHouseFloorCheckBox : AActor {
	struct UBoxComponent* Box; // 0x0(0x0)
	__int32 FloorId; // 0x0(0x0)
	char pad_22C[0x4]; // 0x0(0x0)

	struct FVector2D GetActorNormalizedPosInBox(struct AActor* Actor); // Function /Script/Game.HouseFloorCheckBox.GetActorNormalizedPosInBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	bool CheckIsOnFloor(struct AActor* Actor); // Function /Script/Game.HouseFloorCheckBox.CheckIsOnFloor // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseFloorTransmissionPoint
// Size: 0x0 (Inherited: 0x0)
struct AHouseFloorTransmissionPoint : AActor {
	__int32 FloorId; // 0x0(0x0)
	__int32 BedRoomId; // 0x0(0x0)
};

 // Class /Script/Game.HouseFurnitureBase
// Size: 0x0 (Inherited: 0x0)
struct AHouseFurnitureBase : AActor {
	char pad_220[0x8]; // 0x0(0x0)
	struct AHouseRig_Rail* CameraRail; // 0x0(0x0)
	struct FVector CameraRailTargetOffset; // 0x0(0x0)
	bool AutoGenerateCameraRail; // 0x0(0x0)
	char pad_23D[0x3]; // 0x0(0x0)
	struct USceneComponent* CameraRailTargetCenter; // 0x0(0x0)
	float RailRadianRate; // 0x0(0x0)
	__int32 RailRadianAngle; // 0x0(0x0)
	float RailArmLength; // 0x0(0x0)
	float RailZOffset; // 0x0(0x0)
	float RailRelativeRate; // 0x0(0x0)
	bool Isclockwise; // 0x0(0x0)
	char pad_25D[0x3]; // 0x0(0x0)
	struct USceneComponent* CameraRailTrans; // 0x0(0x0)
	struct UStaticMeshComponent* FurStaticMesh; // 0x0(0x0)
	struct UNiagaraComponent* DropEffect; // 0x0(0x0)
	struct USkeletalMeshComponent* FurSkeletalMesh; // 0x0(0x0)
	struct AHouseFurnitureSpawner* spawner; // 0x0(0x0)
	struct TWeakObjectPtr<struct AActor> BornActorCache; // 0x0(0x0)
	struct TSoftClassPtr<UObject> BornActor; // 0x0(0x0)
	struct TArray<struct TSoftObjectPtr<UNiagaraSystem>> BornEffect; // 0x0(0x0)
	struct TArray<struct TSoftObjectPtr<UNiagaraSystem>> InteractEffect; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct UFXSystemComponent>> BornEffectCache; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct UFXSystemComponent>> InteractEffectCache; // 0x0(0x0)
	struct TWeakObjectPtr<struct UFXSystemComponent> PlayerInteractEffectCache; // 0x0(0x0)
	bool HasSpawnInteractEffect; // 0x0(0x0)
	char pad_301[0x3]; // 0x0(0x0)
	__int32 InteractWeight; // 0x0(0x0)
	bool HideBornEffectWhenInteract; // 0x0(0x0)
	bool HideBornActorWhenInteract; // 0x0(0x0)
	bool HideBornEffectWhenInteractByPlayer; // 0x0(0x0)
	bool HideBornActorWhenInteractByPlayer; // 0x0(0x0)
	char pad_30C[0x4]; // 0x0(0x0)
	struct UUserWidget* InteracterWidget; // 0x0(0x0)
	struct USceneComponent* InteractPos; // 0x0(0x0)
	struct UBoxComponent* InteractBox; // 0x0(0x0)
	struct FString InteractItemText; // 0x0(0x0)
	bool bPlayerCanInteract; // 0x0(0x0)
	bool bNpcCanInteract; // 0x0(0x0)
	bool IsPlayerInteracting; // 0x0(0x0)
	char pad_33B[0x1]; // 0x0(0x0)
	__int32 AreaId; // 0x0(0x0)
	__int32 TempId; // 0x0(0x0)
	char pad_344[0x4]; // 0x0(0x0)
	struct AHouseAIController* AIController; // 0x0(0x0)
	bool CanInteractMulti; // 0x0(0x0)
	char pad_351[0x3]; // 0x0(0x0)
	float InteractCD; // 0x0(0x0)
	bool IsInBackState; // 0x0(0x0)
	char pad_359[0x7]; // 0x0(0x0)
	struct FString FurInteractAnimMeshName; // 0x0(0x0)
	struct TSoftObjectPtr<UAnimMontage> FurInteractAnimMontage; // 0x0(0x0)
	struct TSoftObjectPtr<UNiagaraSystem> FurInteractEffect; // 0x0(0x0)
	bool PlayerInteractEffAutoDestroyed; // 0x0(0x0)
	char pad_3C1[0x3]; // 0x0(0x0)
	float PlayerInteractEffChangeSpeed; // 0x0(0x0)
	struct FName PlayerInteractEffChangeParamName; // 0x0(0x0)
	bool PlayerInteractEffDisappearInstantly; // 0x0(0x0)
	char pad_3D1[0x7]; // 0x0(0x0)
	struct FString FurInteractVoice; // 0x0(0x0)
	struct FString FurInteractAnimMeshNameBack; // 0x0(0x0)
	struct TSoftObjectPtr<UAnimMontage> FurInteractAnimMontageBack; // 0x0(0x0)
	struct FString FurInteractVoiceBack; // 0x0(0x0)
	char pad_430[0xD8]; // 0x0(0x0)

	struct UFXSystemComponent* SpawnEffectAutoDestroyed(struct UNiagaraSystem* InEffect); // Function /Script/Game.HouseFurnitureBase.SpawnEffectAutoDestroyed // (Event|Public|BlueprintEvent) // @ game+0
	struct UFXSystemComponent* SpawnEffect(struct UNiagaraSystem* InEffect); // Function /Script/Game.HouseFurnitureBase.SpawnEffect // (Event|Public|BlueprintEvent) // @ game+0
	void SetIsPlayerInteracting(bool InState); // Function /Script/Game.HouseFurnitureBase.SetIsPlayerInteracting // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetEffectParamInTimeLine(struct UFXSystemComponent* InEffect, float Speed, bool IsReverse, struct FName ValueName); // Function /Script/Game.HouseFurnitureBase.SetEffectParamInTimeLine // (Event|Public|BlueprintEvent) // @ game+0
	void PlayCameraAnim(); // Function /Script/Game.HouseFurnitureBase.PlayCameraAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnPlayerInteractEnd(struct UAnimMontage* InMontage, bool bInterrupted, struct AHousePlayerController* Player); // Function /Script/Game.HouseFurnitureBase.OnPlayerInteractEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnNotifyAnim(struct FName AnimTag, bool IsBegin); // Function /Script/Game.HouseFurnitureBase.OnNotifyAnim // (Event|Public|BlueprintEvent) // @ game+0
	void OnFurnitureTiming(__int32 TimingId, struct AHouseAIController* NPC, struct AHousePlayerController* Player); // Function /Script/Game.HouseFurnitureBase.OnFurnitureTiming // (Event|Public|BlueprintEvent) // @ game+0
	void OnEndInteractByNpc_Bp(); // Function /Script/Game.HouseFurnitureBase.OnEndInteractByNpc_Bp // (Event|Public|BlueprintEvent) // @ game+0
	void OnEndInteract(struct AHouseAIController* PlayerController); // Function /Script/Game.HouseFurnitureBase.OnEndInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnCameraAnimEnd(); // Function /Script/Game.HouseFurnitureBase.OnCameraAnimEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FHouseFurnitureTemplate K2_GetTemplate(); // Function /Script/Game.HouseFurnitureBase.K2_GetTemplate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void InteractedByPlayerInBP(struct AHousePlayerController* PlayerController); // Function /Script/Game.HouseFurnitureBase.InteractedByPlayerInBP // (Event|Public|BlueprintEvent) // @ game+0
	void InteractedBy_InBp(struct AHouseAIController* PlayerController); // Function /Script/Game.HouseFurnitureBase.InteractedBy_InBp // (Event|Public|BlueprintEvent) // @ game+0
	void InteractedBy(struct AHouseAIController* PlayerController); // Function /Script/Game.HouseFurnitureBase.InteractedBy // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FTransform GetInteractPos(__int32 NpcId); // Function /Script/Game.HouseFurnitureBase.GetInteractPos // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	bool GenerateCameraAnimRail(struct USplineComponent* TargetSpline); // Function /Script/Game.HouseFurnitureBase.GenerateCameraAnimRail // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CollectDropEnd(); // Function /Script/Game.HouseFurnitureBase.CollectDropEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CollectDrop(); // Function /Script/Game.HouseFurnitureBase.CollectDrop // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BeforeInteractedBy_InBp(struct AHouseAIController* PlayerController); // Function /Script/Game.HouseFurnitureBase.BeforeInteractedBy_InBp // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.HouseGameMode
// Size: 0x0 (Inherited: 0x0)
struct AHouseGameMode : AGameMode {
	char pad_308[0x8]; // 0x0(0x0)
	struct ALevelSequenceActor* FurnitureViewSequenceActor; // 0x0(0x0)
	char pad_318[0x28]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnFurnitureCameraAnimBegin; // 0x0(0x0)
	struct FMulticastInlineDelegate OnFurnitureCameraAnimEnd; // 0x0(0x0)
	struct FMulticastInlineDelegate OnFurnitureCameraAnimListBegin; // 0x0(0x0)
	struct FMulticastInlineDelegate FOnFurnitureCameraAnimListEnd; // 0x0(0x0)
	char pad_380[0x1B0]; // 0x0(0x0)

	void UpdateNpcBubble(__int32 NpcId); // Function /Script/Game.HouseGameMode.UpdateNpcBubble // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateDoors(); // Function /Script/Game.HouseGameMode.UpdateDoors // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SpawnNpcOnArea(__int32 AreaId); // Function /Script/Game.HouseGameMode.SpawnNpcOnArea // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SkipNowCameraView(); // Function /Script/Game.HouseGameMode.SkipNowCameraView // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SkipAllCameraView(); // Function /Script/Game.HouseGameMode.SkipAllCameraView // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ShowUIMask(bool InShow, bool IsBlack); // Function /Script/Game.HouseGameMode.ShowUIMask // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPlayerHiddenAndInCartoon(); // Function /Script/Game.HouseGameMode.SetPlayerHiddenAndInCartoon // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetPlayerCamera(); // Function /Script/Game.HouseGameMode.ResetPlayerCamera // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayNextCameraView(); // Function /Script/Game.HouseGameMode.PlayNextCameraView // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayCameraViewList(__int32 AreaId, struct FString ThanksKey); // Function /Script/Game.HouseGameMode.PlayCameraViewList // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayCameraAnimTalk(); // Function /Script/Game.HouseGameMode.PlayCameraAnimTalk // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnGiveGiftSuccess(__int32 AreaId, struct FString ThanksKey, bool CanInteract); // Function /Script/Game.HouseGameMode.OnGiveGiftSuccess // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnCollectDropEnd(__int32 PosID); // Function /Script/Game.HouseGameMode.OnCollectDropEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnCameraAnimSceneLoaded(); // Function /Script/Game.HouseGameMode.OnCameraAnimSceneLoaded // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnBedRoomLoaded(__int32 BedRoomId, __int32 AreaId); // Function /Script/Game.HouseGameMode.OnBedRoomLoaded // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LetNpcPlayAction(__int32 NpcId, struct FString ActionPath); // Function /Script/Game.HouseGameMode.LetNpcPlayAction // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LetGirlToBedRoom(__int32 InGirlId, bool RemoveGirl); // Function /Script/Game.HouseGameMode.LetGirlToBedRoom // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsGirlArea(__int32 AreaId); // Function /Script/Game.HouseGameMode.IsGirlArea // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetNpcIdByGirlId(__int32 GirlId); // Function /Script/Game.HouseGameMode.GetNpcIdByGirlId // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetNpcBornAreaId(__int32 NpcId); // Function /Script/Game.HouseGameMode.GetNpcBornAreaId // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetGirlSpineName(__int32 GirlId); // Function /Script/Game.HouseGameMode.GetGirlSpineName // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetGirlBedRoomId(__int32 InGirlId); // Function /Script/Game.HouseGameMode.GetGirlBedRoomId // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UHouseBedRoomMgr* GetBedRoomMgr(); // Function /Script/Game.HouseGameMode.GetBedRoomMgr // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DestroyNpcOnArea(__int32 AreaId); // Function /Script/Game.HouseGameMode.DestroyNpcOnArea // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearCameraViewList(); // Function /Script/Game.HouseGameMode.ClearCameraViewList // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CheckInitBornMap(); // Function /Script/Game.HouseGameMode.CheckInitBornMap // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BeforePlayCameAnim(__int32 AreaId); // Function /Script/Game.HouseGameMode.BeforePlayCameAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddFurToCameraViewList(struct AHouseFurnitureBase* Fur); // Function /Script/Game.HouseGameMode.AddFurToCameraViewList // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseJoystick
// Size: 0x0 (Inherited: 0x0)
struct UHouseJoystick : UUserWidget {
	struct FMulticastInlineDelegate OnGuideTouch; // 0x0(0x0)
	struct UWidget* ImgRun; // 0x0(0x0)
	struct UWidget* ImgCompass; // 0x0(0x0)
	struct UWidget* ImgDir; // 0x0(0x0)
	struct UWidget* ImgPointer; // 0x0(0x0)
	struct UWidget* ImgDirection; // 0x0(0x0)
	struct UWidget* BtnRun; // 0x0(0x0)
	struct UWidget* CheckKeepRun; // 0x0(0x0)
	struct UBorder* Area; // 0x0(0x0)
	struct UOverlay* Joystick; // 0x0(0x0)
	bool JoyStickFixed; // 0x0(0x0)
	char pad_2D1[0x3]; // 0x0(0x0)
	float KeepRushAngle; // 0x0(0x0)
	struct FVector2D MoveDirection; // 0x0(0x0)
	struct FVector2D KeepRushDirection; // 0x0(0x0)
	float MaxPointerOffset; // 0x0(0x0)
	enum class EGamePlayerMoveState CurrentMoveState; // 0x0(0x0)
	char pad_2ED[0x3]; // 0x0(0x0)
	struct AHousePlayerCharacter* CurrentPawn; // 0x0(0x0)
	struct UCanvasPanelSlot* RunPanelSlot; // 0x0(0x0)
	struct UHouseMoveContextObject* MoveCtxObject; // 0x0(0x0)
	char pad_308[0x60]; // 0x0(0x0)

	void UpdateMoveMent(float InDelta); // Function /Script/Game.HouseJoystick.UpdateMoveMent // (Final|Native|Public) // @ game+0
	void UIGuideTouch__DelegateSignature(__int32 Type); // DelegateFunction /Script/Game.HouseJoystick.UIGuideTouch__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void StopMove(); // Function /Script/Game.HouseJoystick.StopMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RequestMoveCamera(__int32 InPointerIndex); // Function /Script/Game.HouseJoystick.RequestMoveCamera // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void OnSettingChange(__int32 InSID, __int32 InType, __int32 InValue); // Function /Script/Game.HouseJoystick.OnSettingChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnNotifyPlayerMoveState(struct AGameCharacter* CurCharacter, enum class EGamePlayerMoveState LastType, enum class EGamePlayerMoveState CurType); // Function /Script/Game.HouseJoystick.OnNotifyPlayerMoveState // (Final|Native|Private) // @ game+0
	void HandleMovement(struct FGeometry& InGeometry, struct FPointerEvent& InGestureEvent); // Function /Script/Game.HouseJoystick.HandleMovement // (Final|Native|Public|HasOutParms) // @ game+0
	void HandledRotate(struct FPointerEvent& InPointerEvent); // Function /Script/Game.HouseJoystick.HandledRotate // (Final|Native|Public|HasOutParms) // @ game+0
	struct FVector2D GetTouchPointed(struct FGeometry& InGeometry, struct FPointerEvent& InGestureEvent); // Function /Script/Game.HouseJoystick.GetTouchPointed // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0
	struct FVector2D GetPointerCenter(); // Function /Script/Game.HouseJoystick.GetPointerCenter // (Final|Native|Public|HasDefaults) // @ game+0
	void EndMoveCamera(__int32 InPointerIndex); // Function /Script/Game.HouseJoystick.EndMoveCamera // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseLevelScriptActor
// Size: 0x0 (Inherited: 0x0)
struct AHouseLevelScriptActor : ALevelScriptActor {
	__int32 AreaId; // 0x0(0x0)
	char pad_22C[0x4]; // 0x0(0x0)

	void SpawnFurnitureOnArea(); // Function /Script/Game.HouseLevelScriptActor.SpawnFurnitureOnArea // (Final|Native|Public|BlueprintCallable|Const) // @ game+0
	void CallNpcOnBedRoomLoaded(__int32 InBedRoomId, __int32 InAreaId); // Function /Script/Game.HouseLevelScriptActor.CallNpcOnBedRoomLoaded // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CallNpc(); // Function /Script/Game.HouseLevelScriptActor.CallNpc // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseLoveAddAttributes
// Size: 0x0 (Inherited: 0x0)
struct UHouseLoveAddAttributes : UObject {
};

 // Class /Script/Game.HouseManager
// Size: 0x0 (Inherited: 0x0)
struct UHouseManager : UGameInstanceSubsystem {
	char pad_30[0x60]; // 0x0(0x0)

	void SetLoadingPercent(float InPercent); // Function /Script/Game.HouseManager.SetLoadingPercent // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetLoadingPercent(); // Function /Script/Game.HouseManager.GetLoadingPercent // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UHouseManager* GetHouseManagerInstance(struct UObject* WorldContextObject); // Function /Script/Game.HouseManager.GetHouseManagerInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseMoveContextObject
// Size: 0x0 (Inherited: 0x0)
struct UHouseMoveContextObject : UObject {
	struct UHouseCharacterAnimIns* AnimInstance; // 0x0(0x0)
	char pad_30[0x8]; // 0x0(0x0)
	struct FVector LastAcceleration; // 0x0(0x0)
	struct FVector LastValidAcceleration; // 0x0(0x0)
	struct FVector Acceleration; // 0x0(0x0)
	float SpeedBefore; // 0x0(0x0)
	struct FVector VelocityBefore; // 0x0(0x0)
	struct FVector DiffAcceration; // 0x0(0x0)
	struct FVector LastVelocity; // 0x0(0x0)
	float RotValue; // 0x0(0x0)
	float RushCounter; // 0x0(0x0)
	bool bPlayIdleMontage; // 0x0(0x0)
	char pad_8D[0x3]; // 0x0(0x0)
	struct TArray<struct FVector> PlayerControllerDirCaches; // 0x0(0x0)
	__int32 PlayerControllerDirCacheNum; // 0x0(0x0)
	float AccCharAngle; // 0x0(0x0)
	bool bLeftPiovt; // 0x0(0x0)
	bool bSkipRushStart; // 0x0(0x0)
	char pad_AA[0x6]; // 0x0(0x0)
	struct FRuntimeFloatCurve DecelerationCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve AccelerationCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve FrictionCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve RotationCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve PivotingAccFactorCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve ShootRunningAccFactorCurve; // 0x0(0x0)
	struct TMap<enum class EGamePlayerMoveState, struct UHouseAnimMoveStateBase*> AnimMoveStates; // 0x0(0x0)
	struct UAnimDistanceMappingCurveData* DistanceMappingData; // 0x0(0x0)
	enum class EGamePlayerMoveState NextState; // 0x0(0x0)
	enum class EGamePlayerMoveState CurState; // 0x0(0x0)
	char pad_43A[0x6]; // 0x0(0x0)
	struct FRuntimeFloatCurve LeanCurveX; // 0x0(0x0)
	struct FRuntimeFloatCurve LeanCurveY; // 0x0(0x0)
	struct FRuntimeFloatCurve MobileLeanCurveX; // 0x0(0x0)
	struct FRuntimeFloatCurve MobileLeanCurveY; // 0x0(0x0)
	float LeanSpeed; // 0x0(0x0)
	float WalkLeanRecoverSpeed; // 0x0(0x0)
	float SkillLeanRecoverSpeed; // 0x0(0x0)
	float MobileLeanSpeed; // 0x0(0x0)
	float MobileWalkLeanRecoverSpeed; // 0x0(0x0)
	float MobileSkillLeanRecoverSpeed; // 0x0(0x0)
	char pad_678[0x20]; // 0x0(0x0)
};

 // Class /Script/Game.HouseNavArea
// Size: 0x0 (Inherited: 0x0)
struct UHouseNavArea : UNavArea {
	__int32 AreaId; // 0x0(0x0)
	char pad_4C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.HouseNpcBornAreaBox
// Size: 0x0 (Inherited: 0x0)
struct AHouseNpcBornAreaBox : AActor {
	struct UBoxComponent* BoxComponent; // 0x0(0x0)
	__int32 AreaId; // 0x0(0x0)
	char pad_22C[0x4]; // 0x0(0x0)

	void GetRandomBornPos(struct FTransform& InTrans); // Function /Script/Game.HouseNpcBornAreaBox.GetRandomBornPos // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HousePlayerCameraManager
// Size: 0x0 (Inherited: 0x0)
struct AHousePlayerCameraManager : APlayerCameraManager {
	char pad_2810[0xE0]; // 0x0(0x0)
};

 // Class /Script/Game.HousePlayerCharacter
// Size: 0x0 (Inherited: 0x0)
struct AHousePlayerCharacter : AHouseBaseCharacter {
	struct USpringArmComponent* CameraArm; // 0x0(0x0)
	struct UCameraComponent* Camera; // 0x0(0x0)
	struct FHouseCameraInfo NormalCameraInfo; // 0x0(0x0)
	struct FHouseCameraInfo TelescopeCameraInfo; // 0x0(0x0)
	struct FTalkCameraInfo TalkCameraInfo; // 0x0(0x0)
	struct AHouseBaseCharacter* TalkTarget; // 0x0(0x0)
	float ViewPitchMax; // 0x0(0x0)
	float ViewPitchMin; // 0x0(0x0)
	char pad_69C[0x24]; // 0x0(0x0)

	void StopTelescope(); // Function /Script/Game.HousePlayerCharacter.StopTelescope // (Final|Native|Public) // @ game+0
	void StartTelescope(); // Function /Script/Game.HousePlayerCharacter.StartTelescope // (Final|Native|Public) // @ game+0
	void SetAnimIsRun(float IsRun); // Function /Script/Game.HousePlayerCharacter.SetAnimIsRun // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetCameraRoa(); // Function /Script/Game.HousePlayerCharacter.ResetCameraRoa // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnEndTalk(); // Function /Script/Game.HousePlayerCharacter.OnEndTalk // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInTelescope(); // Function /Script/Game.HousePlayerCharacter.IsInTelescope // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetAnimAngle(); // Function /Script/Game.HousePlayerCharacter.GetAnimAngle // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HousePlayerController
// Size: 0x0 (Inherited: 0x0)
struct AHousePlayerController : AHouseBaseController {
	struct AHousePlayerCharacter* playerCharacter; // 0x0(0x0)
	struct TMap<enum class ESensitivityType, float> SensitivityMap; // 0x0(0x0)
	struct TMap<enum class EHandleSettingType, __int32> HandleSettingMap; // 0x0(0x0)
	__int32 KeyboardInputCache; // 0x0(0x0)
	char pad_624[0x4]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnFurnitureInteract; // 0x0(0x0)
	struct AActor* NowInteractActor; // 0x0(0x0)
	char pad_640[0x1]; // 0x0(0x0)
	bool LastInputGamepad; // 0x0(0x0)
	char pad_642[0x2]; // 0x0(0x0)
	unsigned __int32 ExhaleCount; // 0x0(0x0)
	unsigned __int32 AltExhaleCount; // 0x0(0x0)
	bool bAltExhaleMouse; // 0x0(0x0)
	bool bExhaleMouse; // 0x0(0x0)
	char pad_64E[0x32]; // 0x0(0x0)

	void UnLoadBedRoomThenTransToPos(struct AActor* Target); // Function /Script/Game.HousePlayerController.UnLoadBedRoomThenTransToPos // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UnbindFurnitureCameraAnimEvent(); // Function /Script/Game.HousePlayerController.UnbindFurnitureCameraAnimEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TryInteract(); // Function /Script/Game.HousePlayerController.TryInteract // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TransToPos(struct AActor* Target, bool UnLoadBedRoom); // Function /Script/Game.HousePlayerController.TransToPos // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Telescope(bool bPress); // Function /Script/Game.HousePlayerController.Telescope // (Final|Native|Public) // @ game+0
	struct APawn* SpawnHousePlayerCharacter(struct AActor* bornPoint); // Function /Script/Game.HousePlayerController.SpawnHousePlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct APawn* SpawnHouseCharacter(struct AActor* bornPoint, __int32 TemplateId); // Function /Script/Game.HousePlayerController.SpawnHouseCharacter // (Native|Public|BlueprintCallable) // @ game+0
	void ShowMouse(bool bShow); // Function /Script/Game.HousePlayerController.ShowMouse // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPawnHidden(bool InHidden); // Function /Script/Game.HousePlayerController.SetPawnHidden // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetKeyboardInputStateCache(enum class EHousePCKeyboardType InType); // Function /Script/Game.HousePlayerController.SetKeyboardInputStateCache // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Rush(bool bPress, bool bKeyBorad); // Function /Script/Game.HousePlayerController.Rush // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayInteractFurnitureAnim(struct AHouseFurnitureBase* TargetFurniture); // Function /Script/Game.HousePlayerController.PlayInteractFurnitureAnim // (Final|Native|Public) // @ game+0
	void OnSettingChange(__int32 InSID, __int32 InType, __int32 InValue); // Function /Script/Game.HousePlayerController.OnSettingChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnOneFurnitureAnimEnd(); // Function /Script/Game.HousePlayerController.OnOneFurnitureAnimEnd // (Final|Native|Public) // @ game+0
	void OnGazeButton(bool bPress); // Function /Script/Game.HousePlayerController.OnGazeButton // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnCameraAnimEnd(); // Function /Script/Game.HousePlayerController.OnCameraAnimEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveRight(float fVal); // Function /Script/Game.HousePlayerController.MoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveForward(float fVal); // Function /Script/Game.HousePlayerController.MoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LookUp(float fVal); // Function /Script/Game.HousePlayerController.LookUp // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LookAround(float fVal); // Function /Script/Game.HousePlayerController.LookAround // (Final|Native|Public|BlueprintCallable) // @ game+0
	void KeboardMoveRight(float fVal); // Function /Script/Game.HousePlayerController.KeboardMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void KeboardMoveForward(float fVal); // Function /Script/Game.HousePlayerController.KeboardMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0
	void KeboardLookUp(float fVal); // Function /Script/Game.HousePlayerController.KeboardLookUp // (Final|Native|Public|BlueprintCallable) // @ game+0
	void KeboardLookAround(float fVal); // Function /Script/Game.HousePlayerController.KeboardLookAround // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInCartoon(); // Function /Script/Game.HousePlayerController.IsInCartoon // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InteractFurniture(struct AHouseFurnitureBase* HouseFurniture); // Function /Script/Game.HousePlayerController.InteractFurniture // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetSensitivityByType(enum class ESensitivityType& InType, float defaultvalue); // Function /Script/Game.HousePlayerController.GetSensitivityByType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetHandleSettingValueByType(enum class EHandleSettingType& InType); // Function /Script/Game.HousePlayerController.GetHandleSettingValueByType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	float GetGYROSensitivityMultiplier(); // Function /Script/Game.HousePlayerController.GetGYROSensitivityMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetCameraRotSpeed(); // Function /Script/Game.HousePlayerController.GetCameraRotSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GamepadMoveRight(float fVal); // Function /Script/Game.HousePlayerController.GamepadMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GamepadMoveForward(float fVal); // Function /Script/Game.HousePlayerController.GamepadMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GamepadLookUp(float fVal); // Function /Script/Game.HousePlayerController.GamepadLookUp // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GamepadLookAround(float fVal); // Function /Script/Game.HousePlayerController.GamepadLookAround // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EndCustomMove(); // Function /Script/Game.HousePlayerController.EndCustomMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CustomMoveToTarget(struct FVector& TargetPos); // Function /Script/Game.HousePlayerController.CustomMoveToTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void ClearKeyboardInputStateCache(enum class EHousePCKeyboardType InType); // Function /Script/Game.HousePlayerController.ClearKeyboardInputStateCache // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearAllKeyboardInputStateCache(); // Function /Script/Game.HousePlayerController.ClearAllKeyboardInputStateCache // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CheckKeyboardInputStateCache(enum class EHousePCKeyboardType InType); // Function /Script/Game.HousePlayerController.CheckKeyboardInputStateCache // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void BindFurnitureCameraAnimEvent(); // Function /Script/Game.HousePlayerController.BindFurnitureCameraAnimEvent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BackToStartPos(); // Function /Script/Game.HousePlayerController.BackToStartPos // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HousePlayerMovementComponent
// Size: 0x0 (Inherited: 0x0)
struct UHousePlayerMovementComponent : UHouseBaseMovementComponent {
	struct UCharacterStateMachineComponent* CharacterStateMachineComponent; // 0x0(0x0)
	char bCustomRotation : 1; // 0x0(0x0)
	char pad_B28_1 : 7; // 0x0(0x0)
	char pad_B29[0x57]; // 0x0(0x0)
	struct UHouseMoveContextObject* MoveCtxObj; // 0x0(0x0)
	char pad_B88[0x8]; // 0x0(0x0)

	struct FRotator ReceiveCustomRotation(struct FRotator CurrentRotation, struct FRotator TargetRotation, float DeltaTime); // Function /Script/Game.HousePlayerMovementComponent.ReceiveCustomRotation // (Final|Native|Public|HasDefaults|Const) // @ game+0
	struct UHouseMoveContextObject* GetMoveCtxObject(); // Function /Script/Game.HousePlayerMovementComponent.GetMoveCtxObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.HousePuzzleClip
// Size: 0x0 (Inherited: 0x0)
struct UHousePuzzleClip : UUserWidget {
	char pad_278[0x8]; // 0x0(0x0)
	struct TWeakObjectPtr<struct UWidget> AnchorWidget; // 0x0(0x0)
	char pad_288[0x8]; // 0x0(0x0)
	struct APlayerController* PlayerController; // 0x0(0x0)
	struct TWeakObjectPtr<struct UCanvasPanel> TargetDragArea; // 0x0(0x0)
	struct TWeakObjectPtr<struct UCanvasPanel> RemoveArea; // 0x0(0x0)
	struct TWeakObjectPtr<struct UScrollBox> OwnerScroll; // 0x0(0x0)
	bool DragByDir; // 0x0(0x0)
	char pad_2B1[0x3]; // 0x0(0x0)
	float HorizonDisAsDrag; // 0x0(0x0)
	float VerticalDisAsDragList; // 0x0(0x0)
	float TimeAsClick; // 0x0(0x0)
	float DragScrollScale; // 0x0(0x0)
	bool IsCopy; // 0x0(0x0)
	bool IsOnMap; // 0x0(0x0)
	char pad_2C6[0x2]; // 0x0(0x0)
	__int32 ClipId; // 0x0(0x0)
	__int32 RotId; // 0x0(0x0)
	char pad_2D0[0x20]; // 0x0(0x0)

	void SetTargetDragArea(struct UCanvasPanel* InTargetDragArea); // Function /Script/Game.HousePuzzleClip.SetTargetDragArea // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetRemoveArea(struct UCanvasPanel* InRemoveArea); // Function /Script/Game.HousePuzzleClip.SetRemoveArea // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetOwnerScroll(struct UScrollBox* InScroll); // Function /Script/Game.HousePuzzleClip.SetOwnerScroll // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAnchorWidget(struct UWidget* InAnchorWidget); // Function /Script/Game.HousePuzzleClip.SetAnchorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnClipDragging(struct FVector2D ScreenPos); // Function /Script/Game.HousePuzzleClip.OnClipDragging // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void OnClipDraggedEnd(struct FVector2D ScreenPos); // Function /Script/Game.HousePuzzleClip.OnClipDraggedEnd // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void OnClipClicked(); // Function /Script/Game.HousePuzzleClip.OnClipClicked // (Event|Public|BlueprintEvent) // @ game+0
	struct UHousePuzzleClip* CreateCopy(); // Function /Script/Game.HousePuzzleClip.CreateCopy // (Event|Public|BlueprintEvent) // @ game+0
	void ClearCopy(bool NeedRemove); // Function /Script/Game.HousePuzzleClip.ClearCopy // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseRig_Rail
// Size: 0x0 (Inherited: 0x0)
struct AHouseRig_Rail : AActor {
	float CurrentPositionOnRail; // 0x0(0x0)
	bool bLockOrientationToRail; // 0x0(0x0)
	char pad_225[0x13]; // 0x0(0x0)
	struct USceneComponent* TransformComponent; // 0x0(0x0)
	struct USplineComponent* RailSplineComponent; // 0x0(0x0)
	struct USceneComponent* RailCameraMount; // 0x0(0x0)
	char pad_250[0x8]; // 0x0(0x0)

	struct USplineComponent* GetRailSplineComponent(); // Function /Script/Game.HouseRig_Rail.GetRailSplineComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.HouseRoomItem
// Size: 0x0 (Inherited: 0x0)
struct UHouseRoomItem : ULuaWidget {
	bool StartDrag; // 0x0(0x0)
	bool IsListItem; // 0x0(0x0)
	char pad_2B2[0x6]; // 0x0(0x0)

	void SetStartDrag(bool Value); // Function /Script/Game.HouseRoomItem.SetStartDrag // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanDrag(struct FPointerEvent InEvent); // Function /Script/Game.HouseRoomItem.CanDrag // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.HouseShadowMapMask
// Size: 0x0 (Inherited: 0x0)
struct UHouseShadowMapMask : UActorComponent {
	char pad_B0[0x1]; // 0x0(0x0)
	bool bShadowMapMask; // 0x0(0x0)
	bool bNeedTick; // 0x0(0x0)
	char pad_B3[0x1]; // 0x0(0x0)
	float MinShadowValue; // 0x0(0x0)
	struct UTexture2D* DefaultTexture_Black; // 0x0(0x0)
	struct UTexture2D* DefaultTexture_White; // 0x0(0x0)
	char pad_C8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.HouseShowBubbleNotify
// Size: 0x0 (Inherited: 0x0)
struct UHouseShowBubbleNotify : UAnimNotifyState {
	__int32 TexId; // 0x0(0x0)
	char pad_34[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.HouseSpringArmComponent
// Size: 0x0 (Inherited: 0x0)
struct UHouseSpringArmComponent : USpringArmComponent {
	float HitDistanceMultiplier; // 0x0(0x0)
	float BlendOutSpeed; // 0x0(0x0)
	float TargetOffsetBlendSpeed; // 0x0(0x0)
	float RoleBodyRadius; // 0x0(0x0)
	bool bCustomSocketOffset; // 0x0(0x0)
	char pad_291[0x3]; // 0x0(0x0)
	float OverlapBlendInSpeed; // 0x0(0x0)
	float CollisionSpringLength; // 0x0(0x0)
	float SpringCoefficient; // 0x0(0x0)
	struct FAlphaBlend BlendOutInfo; // 0x0(0x0)
	bool bUseCustomAnim; // 0x0(0x0)
	char pad_2D1[0x7]; // 0x0(0x0)
	struct UCurveFloat* CameraRotationLagSpeedCurve; // 0x0(0x0)
	float CameraRotationLagSpeedTime; // 0x0(0x0)
	bool bTemp; // 0x0(0x0)
	char pad_2E5[0x3]; // 0x0(0x0)
	float FadeAngle; // 0x0(0x0)
	float FadeRadiusPercent; // 0x0(0x0)
	float FadeZAlpha; // 0x0(0x0)
	struct FVector FadeRange; // 0x0(0x0)
	float FadeNormalPlayerDist; // 0x0(0x0)
	char pad_304[0x4]; // 0x0(0x0)
	struct UCurveFloat* FadePlayerCurve; // 0x0(0x0)
	char pad_310[0x80]; // 0x0(0x0)
};

 // Class /Script/Game.HouseTransmissionDoor
// Size: 0x0 (Inherited: 0x0)
struct AHouseTransmissionDoor : AHouseCanInteractActor {
	struct AHouseFloorTransmissionPoint* TargetPoint; // 0x0(0x0)
	struct ALevelSequenceActor* LSActor; // 0x0(0x0)
	bool ChangePosOnBegin; // 0x0(0x0)
	char pad_261[0x7]; // 0x0(0x0)

	void ChangePlayerPos(); // Function /Script/Game.HouseTransmissionDoor.ChangePlayerPos // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.HPComponent
// Size: 0x0 (Inherited: 0x0)
struct UHPComponent : UWidgetComponent {
	float HPKeepTime; // 0x0(0x0)
	__int32 HPType; // 0x0(0x0)
	bool bKeepVisible; // 0x0(0x0)
	char pad_5C9[0x3]; // 0x0(0x0)
	float KeepTime; // 0x0(0x0)
	__int32 MaxWidgetNum; // 0x0(0x0)
	struct FVector2D DistanceRange; // 0x0(0x0)
	struct FVector2D ScaleRange; // 0x0(0x0)
	char pad_5E4[0x4]; // 0x0(0x0)
	struct UHPWidgetBase* HPWidget; // 0x0(0x0)
};

 // Class /Script/Game.HPWidgetBase
// Size: 0x0 (Inherited: 0x0)
struct UHPWidgetBase : UUserWidgetAnimation {
	char pad_2C0[0x10]; // 0x0(0x0)
	struct FString LeftAppearName; // 0x0(0x0)
	struct FString LeftVanishName; // 0x0(0x0)
	struct FString RightAppearName; // 0x0(0x0)
	struct FString RightVanishName; // 0x0(0x0)
	struct UWidget* TempLeft; // 0x0(0x0)
	struct UWidget* TempRight; // 0x0(0x0)
	bool bForceHide; // 0x0(0x0)
	enum class EAuxiliaryLineDirection bAuxiliaryWireLeft; // 0x0(0x0)
	char pad_322[0x6]; // 0x0(0x0)
	struct TArray<struct UObject*> BuffListObjs; // 0x0(0x0)
	char pad_338[0x88]; // 0x0(0x0)
	bool bWaitDisappearAnim; // 0x0(0x0)
	char pad_3C1[0x3]; // 0x0(0x0)
	float WaitRecover; // 0x0(0x0)
	struct UCurveFloat* DistanceScaleCurve; // 0x0(0x0)
	struct UCurveFloat* FOVScaleCurve; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> Pawn; // 0x0(0x0)
	struct UWidget* TmpStateReplyAdd; // 0x0(0x0)
	struct UWidget* TmpStateInvincible; // 0x0(0x0)
	struct UWidget* TmpStateReduceTreat; // 0x0(0x0)
	struct TMap<enum class EModifyHPType, struct UElemExplDataItem*> MapElemExplBar; // 0x0(0x0)
	char pad_448[0x8]; // 0x0(0x0)

	void UpdateImage(enum class EFightMonsterTipsType InTipsType); // Function /Script/Game.HPWidgetBase.UpdateImage // (Native|Event|Public|BlueprintEvent) // @ game+0
	void ShowModifier(struct TArray<struct FModifierExhibitionData>& Modify); // Function /Script/Game.HPWidgetBase.ShowModifier // (Native|Public|HasOutParms) // @ game+0
	void SetSkillBlockup(__int32 InSkillId, float StopTime); // Function /Script/Game.HPWidgetBase.SetSkillBlockup // (Native|Public) // @ game+0
	void SetSkill(__int32 InSkillId, float InValue, bool bHide); // Function /Script/Game.HPWidgetBase.SetSkill // (Native|Public|BlueprintCallable) // @ game+0
	void SetSheild(float InValue); // Function /Script/Game.HPWidgetBase.SetSheild // (Native|Public|BlueprintCallable) // @ game+0
	void SetProgress(float InValue); // Function /Script/Game.HPWidgetBase.SetProgress // (Native|Public) // @ game+0
	void SetPercent(float InValue); // Function /Script/Game.HPWidgetBase.SetPercent // (Native|Public|BlueprintCallable) // @ game+0
	void SetModifierValue(float Value); // Function /Script/Game.HPWidgetBase.SetModifierValue // (Native|Public) // @ game+0
	void PlayWhiteAnim(); // Function /Script/Game.HPWidgetBase.PlayWhiteAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayVisibiltyAnim(); // Function /Script/Game.HPWidgetBase.PlayVisibiltyAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayUIEffect(struct TArray<struct FModifierExhibitionData>& Modify); // Function /Script/Game.HPWidgetBase.PlayUIEffect // (Native|Public|HasOutParms) // @ game+0
	void PlayStateAnim(bool bPlay); // Function /Script/Game.HPWidgetBase.PlayStateAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayResetAnim(); // Function /Script/Game.HPWidgetBase.PlayResetAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayRedAnim(); // Function /Script/Game.HPWidgetBase.PlayRedAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayFlashAnim(); // Function /Script/Game.HPWidgetBase.PlayFlashAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayDisappearAnim(); // Function /Script/Game.HPWidgetBase.PlayDisappearAnim // (Event|Public|BlueprintEvent) // @ game+0
	bool PanelVisible(); // Function /Script/Game.HPWidgetBase.PanelVisible // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void OnSetLocationAndVisibleOfHPBar(bool bVisible); // Function /Script/Game.HPWidgetBase.OnSetLocationAndVisibleOfHPBar // (Event|Public|BlueprintEvent) // @ game+0
	void OnRecover(float InSize); // Function /Script/Game.HPWidgetBase.OnRecover // (Native|Public) // @ game+0
	void OnHit(float InCurrent, float InTarget); // Function /Script/Game.HPWidgetBase.OnHit // (Native|Public) // @ game+0
	void OnChangeElemExplosion(struct TArray<struct FElemItemData>& ArrElemExplosion); // Function /Script/Game.HPWidgetBase.OnChangeElemExplosion // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void MonsterDie(); // Function /Script/Game.HPWidgetBase.MonsterDie // (Native|Public|BlueprintCallable) // @ game+0
	void InitBuff(struct TArray<__int32>& InSkillIds, struct UAbilityComponentBase* InAbility); // Function /Script/Game.HPWidgetBase.InitBuff // (Native|Public|HasOutParms) // @ game+0
	void Init(); // Function /Script/Game.HPWidgetBase.Init // (Native|Public) // @ game+0
	struct UProgressBar* GetProgressSkill(); // Function /Script/Game.HPWidgetBase.GetProgressSkill // (Native|Public) // @ game+0
	struct UProgressBar* GetProgressShield(); // Function /Script/Game.HPWidgetBase.GetProgressShield // (Native|Public) // @ game+0
	struct UProgressBar* GetProgress(); // Function /Script/Game.HPWidgetBase.GetProgress // (Native|Public) // @ game+0
	struct AGameCharacter* GetPawn(); // Function /Script/Game.HPWidgetBase.GetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UListView* GetListElement(); // Function /Script/Game.HPWidgetBase.GetListElement // (Native|Public) // @ game+0
	struct UWidget* GetEffect(); // Function /Script/Game.HPWidgetBase.GetEffect // (Native|Public) // @ game+0
	struct UWidget* GetDamage(); // Function /Script/Game.HPWidgetBase.GetDamage // (Native|Public) // @ game+0
	struct UProgressBar* GetBarHpRed(); // Function /Script/Game.HPWidgetBase.GetBarHpRed // (Native|Public) // @ game+0
	void EndFinish(); // Function /Script/Game.HPWidgetBase.EndFinish // (Native|Public|BlueprintCallable) // @ game+0
	void End(); // Function /Script/Game.HPWidgetBase.End // (Native|Public) // @ game+0
	bool CheckInit(); // Function /Script/Game.HPWidgetBase.CheckInit // (Native|Public) // @ game+0
};

 // Class /Script/Game.MonsterHp
// Size: 0x0 (Inherited: 0x0)
struct UMonsterHp : UHPWidgetBase {
	struct UWidget* TempPanel; // 0x0(0x0)
	struct UProgressBar* TempProgress; // 0x0(0x0)
	struct UProgressBar* ShieldProgress; // 0x0(0x0)
	struct UWidget* TempEffect; // 0x0(0x0)
	struct UWidget* TempDamage; // 0x0(0x0)
	struct UListView* ListTop; // 0x0(0x0)
	struct UListView* StateBuffList; // 0x0(0x0)
	struct TArray<__int32> SpecializedSkillID; // 0x0(0x0)
	struct UProgressBar* BarSkill; // 0x0(0x0)
	struct UCanvasPanel* PanelSkill; // 0x0(0x0)
	struct UImage* ImgSkill; // 0x0(0x0)
	struct UImage* ImgBounce1; // 0x0(0x0)
	struct UImage* ImgBounce2; // 0x0(0x0)
	struct UImage* ImgBounce3; // 0x0(0x0)
	struct UListView* ListElement; // 0x0(0x0)
	struct FString InterruptAnimName; // 0x0(0x0)
	struct FString SilentAnimName; // 0x0(0x0)
	struct FString ResetAnimName; // 0x0(0x0)

	void OnSkillCancle(__int32 InSkillId, enum class ESkillInterruptedType InType); // Function /Script/Game.MonsterHp.OnSkillCancle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InterruptAnimFinished(); // Function /Script/Game.MonsterHp.InterruptAnimFinished // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.OrdinaryHp
// Size: 0x0 (Inherited: 0x0)
struct UOrdinaryHp : UHPWidgetBase {
	struct UProgressBar* TempProgress; // 0x0(0x0)
	struct UProgressBar* ShieldProgress; // 0x0(0x0)
	struct UWidget* TempEffect; // 0x0(0x0)
	struct UWidget* TempDamage; // 0x0(0x0)
	struct UListView* StateList; // 0x0(0x0)
	struct TArray<__int32> SpecializedSkillID; // 0x0(0x0)
	struct UProgressBar* BarSkill; // 0x0(0x0)
	struct UCanvasPanel* PanelSkill; // 0x0(0x0)
	struct UImage* ImgSkill; // 0x0(0x0)
	struct FString InterruptAnimName; // 0x0(0x0)
	struct FString SilentAnimName; // 0x0(0x0)
	struct FString ResetAnimName; // 0x0(0x0)
	struct UImage* ImgBounce1; // 0x0(0x0)
	struct UImage* ImgBounce2; // 0x0(0x0)
	struct UImage* ImgBounce3; // 0x0(0x0)
	struct UListView* ListElement; // 0x0(0x0)

	void OnSkillCancle(__int32 InSkillId, enum class ESkillInterruptedType InType); // Function /Script/Game.OrdinaryHp.OnSkillCancle // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ObstaclesHp
// Size: 0x0 (Inherited: 0x0)
struct UObstaclesHp : UHPWidgetBase {
	struct UProgressBar* TempProgress; // 0x0(0x0)
	struct UProgressBar* TempBarHpRed; // 0x0(0x0)
};

 // Class /Script/Game.NpcHp
// Size: 0x0 (Inherited: 0x0)
struct UNpcHp : UHPWidgetBase {
	float LowHpPercent; // 0x0(0x0)
	char pad_454[0x4]; // 0x0(0x0)
	struct UProgressBar* TempProgress; // 0x0(0x0)
	struct UProgressBar* TempBarHpRed; // 0x0(0x0)
	struct UWidget* TempEffect; // 0x0(0x0)

	void PlayHPLowAnim(bool bLow); // Function /Script/Game.NpcHp.PlayHPLowAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayHpBreakAnim(); // Function /Script/Game.NpcHp.PlayHpBreakAnim // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.PartHp
// Size: 0x0 (Inherited: 0x0)
struct UPartHp : UHPWidgetBase {
	struct UProgressBar* TempProgress; // 0x0(0x0)
	struct UProgressBar* ShieldProgress; // 0x0(0x0)
	struct UWidget* TempEffect; // 0x0(0x0)
	struct UWidget* TempDamage; // 0x0(0x0)
	struct UTextBlock* TempTxtNum; // 0x0(0x0)
	struct TWeakObjectPtr<struct AAccessory_Destructible> DAccessory; // 0x0(0x0)
	struct UImage* ImgBounce1; // 0x0(0x0)
	struct UImage* ImgBounce2; // 0x0(0x0)
	struct UImage* ImgBounce3; // 0x0(0x0)
	struct UListView* ListElement; // 0x0(0x0)
	struct UWidget* ImgIcon; // 0x0(0x0)
	char pad_4A8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.PartHp2
// Size: 0x0 (Inherited: 0x0)
struct UPartHp2 : UHPWidgetBase {
	struct UProgressBar* TempProgress; // 0x0(0x0)
	struct UProgressBar* ShieldProgress; // 0x0(0x0)
	struct UWidget* TempEffect; // 0x0(0x0)
	struct UWidget* TempDamage; // 0x0(0x0)
	struct UTextBlock* TempTxtNum; // 0x0(0x0)
	struct TWeakObjectPtr<struct AAccessory_Destructible> DAccessory; // 0x0(0x0)
	struct UWidget* TmpStateReduceDown; // 0x0(0x0)
	struct UWidget* ImgIcon; // 0x0(0x0)
	char pad_490[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.ArmorHp
// Size: 0x0 (Inherited: 0x0)
struct UArmorHp : UHPWidgetBase {
	struct UProgressBar* TempProgress; // 0x0(0x0)
	struct UProgressBar* ShieldProgress; // 0x0(0x0)
	struct UWidget* TempEffect; // 0x0(0x0)
	struct UWidget* TempDamage; // 0x0(0x0)
	struct UTextBlock* TempTxtNum; // 0x0(0x0)
	struct TWeakObjectPtr<struct AAccessory_Destructible> DAccessory; // 0x0(0x0)
	char pad_480[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.PlayerHp
// Size: 0x0 (Inherited: 0x0)
struct UPlayerHp : UHPWidgetBase {
	struct UWidgetAnimation* NotEnough; // 0x0(0x0)
	struct UProgressBar* PowerProgress; // 0x0(0x0)
	struct UWidget* TempEffect; // 0x0(0x0)
	struct UWidget* TempDamage; // 0x0(0x0)
	struct UProgressBar* BarHpProgress; // 0x0(0x0)
	struct UImage* TmpImgSheild; // 0x0(0x0)
	struct UImage* TmpImgHpHeal; // 0x0(0x0)
	struct UImage* TmpImgHPDed; // 0x0(0x0)
	struct UTextBlock* TxtCurHealth; // 0x0(0x0)
	struct UTextBlock* TxtMaxHealth; // 0x0(0x0)
	struct UListView* StateList; // 0x0(0x0)
	struct UCanvasPanel* TmpPanelSpecial; // 0x0(0x0)
	struct UWidget* tmpImgIconEmpty; // 0x0(0x0)
	struct UProgressBar* tmpSkillBar; // 0x0(0x0)
	struct UImage* tmpImgIcon; // 0x0(0x0)
	struct UWidget* tmpPanelNum; // 0x0(0x0)
	struct UHorizontalBox* tmpPanelPiece; // 0x0(0x0)
	struct UHorizontalBox* tmpPanelPieceBG; // 0x0(0x0)
	struct URedirectTextBlock* tmpTxtNum; // 0x0(0x0)
	struct TArray<struct UWidget*> tmpPieces; // 0x0(0x0)
	struct TArray<struct UWidget*> tmpPieceBgs; // 0x0(0x0)
	struct URedirectTextBlock* tmpTxtAmmunition; // 0x0(0x0)
	struct UHorizontalBox* TmpPanelPowerMark; // 0x0(0x0)
	struct UWidgetAnimation* HpHealAnim; // 0x0(0x0)
	char pad_520[0x30]; // 0x0(0x0)
	struct AGameCharacter* CacheCharacter; // 0x0(0x0)
	struct FSoftObjectPath CacheIconObjectPath; // 0x0(0x0)
	struct UPlayerViewSpecialData* CalcFunction; // 0x0(0x0)
	struct TArray<struct UModifierBuffIconItem*> AllBuffItems; // 0x0(0x0)
	float HealthDedSpeed; // 0x0(0x0)
	char pad_58C[0x4]; // 0x0(0x0)
	struct FSoftClassPath PowerMarkPath; // 0x0(0x0)
	float PowerEachMarkCount; // 0x0(0x0)
	char pad_5AC[0x4]; // 0x0(0x0)

	void SetBloodAndShield(float DeltaSeconds, bool bReset); // Function /Script/Game.PlayerHp.SetBloodAndShield // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetChange(); // Function /Script/Game.PlayerHp.ResetChange // (Event|Public|BlueprintEvent) // @ game+0
	void OnShieldChange(float Current, float Max, float Old); // Function /Script/Game.PlayerHp.OnShieldChange // (Final|Native|Public) // @ game+0
	void OnModifiersChange(__int32 InModifierID, bool IsApply); // Function /Script/Game.PlayerHp.OnModifiersChange // (Final|Native|Public) // @ game+0
	void OnHealthChange(float Current, float Max, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.PlayerHp.OnHealthChange // (Final|Native|Public) // @ game+0
	void K2_OnPlayHpLowAnim(bool bPlay); // Function /Script/Game.PlayerHp.K2_OnPlayHpLowAnim // (Event|Public|BlueprintEvent) // @ game+0
	void K2_OnPlayEnergyFullLoopAnim(bool bPlay); // Function /Script/Game.PlayerHp.K2_OnPlayEnergyFullLoopAnim // (Event|Public|BlueprintEvent) // @ game+0
	void K2_OnPlayEnergyFullAnim(bool bPlay); // Function /Script/Game.PlayerHp.K2_OnPlayEnergyFullAnim // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.BuffIconItem
// Size: 0x0 (Inherited: 0x0)
struct UBuffIconItem : UObject {
	__int32 SkillID; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
	struct FSoftObjectPath IconPath; // 0x0(0x0)
	bool bBlockup; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	float RemainTime; // 0x0(0x0)
	bool bUse; // 0x0(0x0)
	char pad_51[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.ModifierBuffIconItem
// Size: 0x0 (Inherited: 0x0)
struct UModifierBuffIconItem : UObject {
	__int32 ModifierID; // 0x0(0x0)
	struct TWeakObjectPtr<struct UAbilityComponentBase> Launcher; // 0x0(0x0)
	bool bUse; // 0x0(0x0)
	char pad_35[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.MonsterItemBuf
// Size: 0x0 (Inherited: 0x0)
struct UMonsterItemBuf : UUserWidgetAnimation {
	char pad_2C0[0x10]; // 0x0(0x0)
	struct UWidget* Group_Buffs; // 0x0(0x0)
	struct UImage* Img_buff; // 0x0(0x0)
	struct UWidget* BuffNum; // 0x0(0x0)
	struct URedirectImage* ImgCD; // 0x0(0x0)
	struct URedirectTextBlock* TxtBUffNum; // 0x0(0x0)
	char pad_2F8[0x8]; // 0x0(0x0)
	struct UWidget* Group_Skill; // 0x0(0x0)
	struct UImage* ImgSkill; // 0x0(0x0)
	char pad_310[0x8]; // 0x0(0x0)

	void K2_OnSkillBlockup(bool bBlockup); // Function /Script/Game.MonsterItemBuf.K2_OnSkillBlockup // (Event|Protected|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.PlayerViewSpecialData
// Size: 0x0 (Inherited: 0x0)
struct UPlayerViewSpecialData : UObject {
	__int32 ShowType; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)

	void GetData(struct AGameCharacter* InPlayer, float& OutCount, float& OutMaxCount, struct FSoftObjectPath& OutIconPath, __int32& SoundId); // Function /Script/Game.PlayerViewSpecialData.GetData // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.ElemExplDataItem
// Size: 0x0 (Inherited: 0x0)
struct UElemExplDataItem : UObject {
	float CurValue; // 0x0(0x0)
	float MaxValue; // 0x0(0x0)
	enum class EModifyHPType Type; // 0x0(0x0)
	char pad_31[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.ElemExplosionUIItem
// Size: 0x0 (Inherited: 0x0)
struct UElemExplosionUIItem : UUserWidgetAnimation {
	char pad_2C0[0x8]; // 0x0(0x0)
	struct UProgressBar* BarElement; // 0x0(0x0)
	struct UWidgetAnimation* OnAnim; // 0x0(0x0)

	void OnAnimFinished(); // Function /Script/Game.ElemExplosionUIItem.OnAnimFinished // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.HyperTextBlock
// Size: 0x0 (Inherited: 0x0)
struct UHyperTextBlock : UWidget {
	char pad_120[0x8]; // 0x0(0x0)
	struct UCommonTextScrollStyle* ScrollStyle; // 0x0(0x0)
	bool bShrinkContent; // 0x0(0x0)
	char pad_131[0x3]; // 0x0(0x0)
	__int32 StretchMinSize; // 0x0(0x0)
	struct FText Content; // 0x0(0x0)
	struct FDelegate ContentDelegate; // 0x0(0x0)
	struct FSlateFontInfo ContentFont; // 0x0(0x0)
	struct FSlateColor ColorAndOpacity; // 0x0(0x0)
	struct FDelegate ColorAndOpacityDelegate; // 0x0(0x0)
	struct FVector2D ShadowOffset; // 0x0(0x0)
	struct FLinearColor ShadowColorAndOpacity; // 0x0(0x0)
	struct FDelegate ShadowColorAndOpacityDelegate; // 0x0(0x0)
	struct UDataTable* AdditionalStyles; // 0x0(0x0)
	bool AutoWrapText; // 0x0(0x0)
	char pad_221[0x3]; // 0x0(0x0)
	float WrapTextAt; // 0x0(0x0)
	enum class ETextWrappingPolicy WrappingPolicy; // 0x0(0x0)
	char pad_229[0x3]; // 0x0(0x0)
	struct FMargin Margin; // 0x0(0x0)
	float LineHeightPercentage; // 0x0(0x0)
	enum class ETextJustify Justification; // 0x0(0x0)
	char pad_241[0x7]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnHyperLinkClicked; // 0x0(0x0)
	struct FMulticastInlineDelegate OnHyperButtonClicked; // 0x0(0x0)
	char pad_268[0x48]; // 0x0(0x0)
	struct TMap<struct FString, struct UObject*> CachedResource; // 0x0(0x0)

	void SwapFontAsset(); // Function /Script/Game.HyperTextBlock.SwapFontAsset // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWrapTextAt(float InValue); // Function /Script/Game.HyperTextBlock.SetWrapTextAt // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetText(struct FText InText); // Function /Script/Game.HyperTextBlock.SetText // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetFont(struct FSlateFontInfo InFontInfo); // Function /Script/Game.HyperTextBlock.SetFont // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetContent(struct FText InHyperText); // Function /Script/Game.HyperTextBlock.SetContent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetColorOpacity(struct FSlateColor Color); // Function /Script/Game.HyperTextBlock.SetColorOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetColorAndOpacity(struct FString Color); // Function /Script/Game.HyperTextBlock.SetColorAndOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAutoWrapText(bool InAutoWrapText); // Function /Script/Game.HyperTextBlock.SetAutoWrapText // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnHyperLinkClicked__DelegateSignature(struct FString InHyperData); // DelegateFunction /Script/Game.HyperTextBlock.OnHyperLinkClicked__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnHyperButtonClicked__DelegateSignature(struct FString InButtonId); // DelegateFunction /Script/Game.HyperTextBlock.OnHyperButtonClicked__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	struct FText GetText(); // Function /Script/Game.HyperTextBlock.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FText GetContent(); // Function /Script/Game.HyperTextBlock.GetContent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.IndicateActor
// Size: 0x0 (Inherited: 0x0)
struct AIndicateActor : AActor {
};

 // Class /Script/Game.InteractionWidget
// Size: 0x0 (Inherited: 0x0)
struct UInteractionWidget : UUserWidget {
	float Factor; // 0x0(0x0)
	float RotateSpeed; // 0x0(0x0)
	float MinMoveDis; // 0x0(0x0)
	bool bDown; // 0x0(0x0)
	char pad_285[0x63]; // 0x0(0x0)

	void OnZoomChange(float Value); // Function /Script/Game.InteractionWidget.OnZoomChange // (Event|Public|BlueprintEvent) // @ game+0
	void OnRotateOrMove(float RotateVal, float MoveVal); // Function /Script/Game.InteractionWidget.OnRotateOrMove // (Event|Public|BlueprintEvent) // @ game+0
	void OnRotate(float Value); // Function /Script/Game.InteractionWidget.OnRotate // (Event|Public|BlueprintEvent) // @ game+0
	void OnMove(float Value); // Function /Script/Game.InteractionWidget.OnMove // (Event|Public|BlueprintEvent) // @ game+0
	void OnButtonUp(); // Function /Script/Game.InteractionWidget.OnButtonUp // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.InteractNpcSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UInteractNpcSubsystem : UGameTickableWorldSubsystem {
	struct TMap<struct TWeakObjectPtr<struct AGameCharacter>, struct FTalkInfo> TalkFuncMap; // 0x0(0x0)
	char pad_A8[0x68]; // 0x0(0x0)

	void RemoveUI(); // Function /Script/Game.InteractNpcSubsystem.RemoveUI // (Final|Native|Public) // @ game+0
	void OnPlayerTalk(struct APlayerController* PC); // Function /Script/Game.InteractNpcSubsystem.OnPlayerTalk // (Final|Native|Public) // @ game+0
	struct FTalkHandle AddNpcCanTalk(struct FString NpcTag, struct FTalkInfo InOnTalk); // Function /Script/Game.InteractNpcSubsystem.AddNpcCanTalk // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.ItemLibrary
// Size: 0x0 (Inherited: 0x0)
struct UItemLibrary : UBlueprintFunctionLibrary {

	struct FWeaponTemplate GetWeaponTemplateForAppearID(__int32 InAppearID); // Function /Script/Game.ItemLibrary.GetWeaponTemplateForAppearID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FWeaponTemplate GetWeaponTemplate(__int64 InTemplateID); // Function /Script/Game.ItemLibrary.GetWeaponTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GetWeaponPartsTemplates(struct TArray<struct FItemTemplate>& OutTemplates); // Function /Script/Game.ItemLibrary.GetWeaponPartsTemplates // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FWeaponPartsTemplate GetWeaponPartsTemplateForAppearID(__int32 InAppearID); // Function /Script/Game.ItemLibrary.GetWeaponPartsTemplateForAppearID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FWeaponPartsTemplate GetWeaponPartsTemplate(__int64 InTemplateID); // Function /Script/Game.ItemLibrary.GetWeaponPartsTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetWeaponPartAbilityValueByIndex(__int32 InType, struct FWeaponPartsAbilityTemplate& InTemplate); // Function /Script/Game.ItemLibrary.GetWeaponPartAbilityValueByIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	float GetWeaponPartAbilityValue(enum class EWeaponAttributeType InType, struct FWeaponPartsAbilityTemplate& InTemplate); // Function /Script/Game.ItemLibrary.GetWeaponPartAbilityValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetWeaponAbilityValueToStr(enum class EWeaponAttributeType InType, struct UItem* InWeapon, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetWeaponAbilityValueToStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetWeaponAbilityValueByIndexToStr(__int32 InType, struct UItem* InWeapon, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetWeaponAbilityValueByIndexToStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetWeaponAbilityValueByIndex(__int32 InType, struct UItem* InWeapon, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetWeaponAbilityValueByIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetWeaponAbilityValue(enum class EWeaponAttributeType InType, struct UItem* InWeapon, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetWeaponAbilityValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int64 GetTemplateID(__int32 InG, __int32 InD, __int32 InP, __int32 InL); // Function /Script/Game.ItemLibrary.GetTemplateID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FSkillInfo GetSkillTemplate(__int32 InTemplateID); // Function /Script/Game.ItemLibrary.GetSkillTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GetSingleTotalValueToStr(__int32 InType, struct UItem* InCard, struct FString& StrRoleValue, struct FString& StrWeaponValue, struct FString& StrLogisticsValue, struct FString& StrTotal); // Function /Script/Game.ItemLibrary.GetSingleTotalValueToStr // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	float GetSingleTotalValue(__int32 InType, struct UItem* InCard, float& RoleValue, float& WeaponValue, float& LogisticsValue); // Function /Script/Game.ItemLibrary.GetSingleTotalValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FModelMaterialModify GetModelMaterialModifyForAppearID(__int32 InAppearID); // Function /Script/Game.ItemLibrary.GetModelMaterialModifyForAppearID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GetItemTemplatesByGenre(struct TArray<struct FItemTemplate>& OutTemplates, __int32 G); // Function /Script/Game.ItemLibrary.GetItemTemplatesByGenre // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FItemTemplate GetItemTemplateByGDPL(__int32 InG, __int32 InD, __int32 InP, __int32 InL); // Function /Script/Game.ItemLibrary.GetItemTemplateByGDPL // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UItem* GetItem(__int64 InUID); // Function /Script/Game.ItemLibrary.GetItem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetDefaultWeaponPartTemplateID(__int64 InWeaponID, enum class EWeaponSlotType& InType); // Function /Script/Game.ItemLibrary.GetDefaultWeaponPartTemplateID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	void GetCharacterTemplates(struct TArray<struct FItemTemplate>& OutTemplates); // Function /Script/Game.ItemLibrary.GetCharacterTemplates // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FCharacterSkinTemplate GetCharacterSkinTemplateForAppearID(__int32 InAppearID); // Function /Script/Game.ItemLibrary.GetCharacterSkinTemplateForAppearID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FCharacterSkinTemplate GetCharacterSkinTemplate(__int64 InTemplateID); // Function /Script/Game.ItemLibrary.GetCharacterSkinTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetCharacterCardAbilityValueToStr(enum class EAttributeType InType, struct UItem* InCard, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetCharacterCardAbilityValueToStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetCharacterCardAbilityValueByStrToStr(struct FString InStrType, struct UItem* InCard, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetCharacterCardAbilityValueByStrToStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetCharacterCardAbilityValueByStr(struct FString InStrType, struct UItem* InCard, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetCharacterCardAbilityValueByStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetCharacterCardAbilityValueByIndexToStr(__int32 InType, struct UItem* InCard, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetCharacterCardAbilityValueByIndexToStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetCharacterCardAbilityValueByIndex(__int32 InType, struct UItem* InCard, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetCharacterCardAbilityValueByIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetCharacterCardAbilityValue(enum class EAttributeType InType, struct UItem* InCard, __int32 InLevel, __int32 InQuality); // Function /Script/Game.ItemLibrary.GetCharacterCardAbilityValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FCharacterAtrributeTemplate GetCharacterAtrributeTemplate(__int64 InTemplateID); // Function /Script/Game.ItemLibrary.GetCharacterAtrributeTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FCharacterAtrributeTemplate GetCharacterAtrributeForAppearID(__int32 InAppearID); // Function /Script/Game.ItemLibrary.GetCharacterAtrributeForAppearID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.ItemSpawner_CanSave
// Size: 0x0 (Inherited: 0x0)
struct AItemSpawner_CanSave : AActor {
	struct UCapsuleComponent* Capsule; // 0x0(0x0)
	struct AActor* SpawnClass; // 0x0(0x0)
	__int32 Index; // 0x0(0x0)
	enum class ESpawnerType ItemType; // 0x0(0x0)
	bool ReSpawnWhenValid; // 0x0(0x0)
	char pad_236[0x2]; // 0x0(0x0)
	struct AActor* AttachParent; // 0x0(0x0)
	struct FVector AttachParentOffset; // 0x0(0x0)
	struct FVector AttachParentLocalScale; // 0x0(0x0)
	char pad_258[0x8]; // 0x0(0x0)

	void ReSpawn(bool ValidState); // Function /Script/Game.ItemSpawner_CanSave.ReSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetIsValid(); // Function /Script/Game.ItemSpawner_CanSave.GetIsValid // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CheckNeedDestroy(); // Function /Script/Game.ItemSpawner_CanSave.CheckNeedDestroy // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UIParticleInterface
// Size: 0x0 (Inherited: 0x0)
struct UUIParticleInterface : UInterface {
};

 // Class /Script/Game.Joystick
// Size: 0x0 (Inherited: 0x0)
struct UJoystick : UUserWidget {
	char pad_278[0x8]; // 0x0(0x0)
	struct FMulticastInlineDelegate OnGuideTouch; // 0x0(0x0)
	struct UWidget* ImgCompass; // 0x0(0x0)
	struct UWidget* ImgDir; // 0x0(0x0)
	struct UWidget* ImgPointer; // 0x0(0x0)
	struct UWidget* ImgDirection; // 0x0(0x0)
	struct UWidget* BtnRun; // 0x0(0x0)
	struct UWidget* CheckKeepRun; // 0x0(0x0)
	struct UWidget* BtnNotClock; // 0x0(0x0)
	struct UWidget* BtnMoveFast; // 0x0(0x0)
	struct UWidgetAnimation* Appear; // 0x0(0x0)
	struct UWidgetAnimation* Select; // 0x0(0x0)
	struct UBorder* Area; // 0x0(0x0)
	struct UBorder* ResetCameraArea; // 0x0(0x0)
	struct UWidget* Joystick; // 0x0(0x0)
	bool JoyStickFixed; // 0x0(0x0)
	char pad_2F9[0x3]; // 0x0(0x0)
	float KeepRushAngle; // 0x0(0x0)
	float SpdRatio; // 0x0(0x0)
	char pad_304[0x4]; // 0x0(0x0)
	struct FRuntimeFloatCurve CurveX; // 0x0(0x0)
	struct FRuntimeFloatCurve CurveY; // 0x0(0x0)
	struct FRuntimeFloatCurve CurveX_NoAcc; // 0x0(0x0)
	struct FRuntimeFloatCurve CurveY_NoAcc; // 0x0(0x0)
	struct FRuntimeFloatCurve CurveTime; // 0x0(0x0)
	struct FRuntimeFloatCurve ClampCurveX; // 0x0(0x0)
	struct FRuntimeFloatCurve ClampCurveY; // 0x0(0x0)
	float TickInterval; // 0x0(0x0)
	float CachedTime; // 0x0(0x0)
	float CameraMoveCaclFactor; // 0x0(0x0)
	char pad_6CC[0x4]; // 0x0(0x0)
	struct FRuntimeFloatCurve CameraMoveDampingFactorCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve CameraScaleMoveDampingFactorCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve CameraCancelSpeedLimitFactorCurve; // 0x0(0x0)
	float CameraValidSpeed_Min; // 0x0(0x0)
	float XYFilterSpeed; // 0x0(0x0)
	float XYFilterScale; // 0x0(0x0)
	float InputInterSpd; // 0x0(0x0)
	float StepMoventerSpd; // 0x0(0x0)
	float MaxResetCameraIntervalTime; // 0x0(0x0)
	float MaxResetCameraIntervalDist; // 0x0(0x0)
	char pad_884[0x8]; // 0x0(0x0)
	struct FVector2D MoveDirection; // 0x0(0x0)
	struct FVector2D KeepRushDirection; // 0x0(0x0)
	float MaxPointerOffset; // 0x0(0x0)
	enum class EGamePlayerMoveState CurrentMoveState; // 0x0(0x0)
	char pad_8A1[0x3]; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> CurrentPawn; // 0x0(0x0)
	char pad_8AC[0x4]; // 0x0(0x0)
	struct UCanvasPanelSlot* RunPanelSlot; // 0x0(0x0)
	struct TWeakObjectPtr<struct UButtonBase> CurTouchFollowButton; // 0x0(0x0)
	struct TWeakObjectPtr<struct USkillPanel> SkillPanel; // 0x0(0x0)
	__int32 CurActionMode; // 0x0(0x0)
	__int32 CurVerticalSlide; // 0x0(0x0)
	char pad_8D0[0x1E0]; // 0x0(0x0)

	void UpdateMoveMent(float InDelta); // Function /Script/Game.Joystick.UpdateMoveMent // (Final|Native|Public) // @ game+0
	void UIGuideTouch__DelegateSignature(__int32 Type); // DelegateFunction /Script/Game.Joystick.UIGuideTouch__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void StopMove(); // Function /Script/Game.Joystick.StopMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetKeepRunWidgetSize(); // Function /Script/Game.Joystick.SetKeepRunWidgetSize // (Final|Native|Public) // @ game+0
	void SetCurTouchMoveButton(); // Function /Script/Game.Joystick.SetCurTouchMoveButton // (Final|Native|Public) // @ game+0
	void RequestMoveCamera(__int32 InPointerIndex); // Function /Script/Game.Joystick.RequestMoveCamera // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void OnSetVerticalSlide(__int32 VerticalSlide); // Function /Script/Game.Joystick.OnSetVerticalSlide // (Final|Native|Public) // @ game+0
	void OnSettingChange(__int32 InSID, __int32 InType, __int32 InValue); // Function /Script/Game.Joystick.OnSettingChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnSetActionMode(__int32 ActionMode); // Function /Script/Game.Joystick.OnSetActionMode // (Final|Native|Public) // @ game+0
	void OnNotifyPlayerMoveState(struct AGameCharacter* CurCharacter, enum class EGamePlayerMoveState LastType, enum class EGamePlayerMoveState CurType); // Function /Script/Game.Joystick.OnNotifyPlayerMoveState // (Final|Native|Private) // @ game+0
	void OnCameraMove(struct FPointerEvent& InGestureEvent); // Function /Script/Game.Joystick.OnCameraMove // (Final|Native|Private|HasOutParms) // @ game+0
	void HandleMovement(struct FGeometry& InGeometry, struct FPointerEvent& InGestureEvent); // Function /Script/Game.Joystick.HandleMovement // (Final|Native|Public|HasOutParms) // @ game+0
	void HandledRotate(struct FPointerEvent& InPointerEvent); // Function /Script/Game.Joystick.HandledRotate // (Final|Native|Public|HasOutParms|Const) // @ game+0
	struct FVector2D GetTouchPointed(struct FGeometry& InGeometry, struct FPointerEvent& InGestureEvent); // Function /Script/Game.Joystick.GetTouchPointed // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0
	struct FVector2D GetPointerCenter(); // Function /Script/Game.Joystick.GetPointerCenter // (Final|Native|Public|HasDefaults) // @ game+0
	void EndMoveCamera(__int32 InPointerIndex); // Function /Script/Game.Joystick.EndMoveCamera // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.LevelDropBase
// Size: 0x0 (Inherited: 0x0)
struct ALevelDropBase : AGameInteractorBase {
	char pad_2E0[0x10]; // 0x0(0x0)
	struct FFlexibleEnumValue CampType; // 0x0(0x0)
	bool ShowOnUI; // 0x0(0x0)
	char pad_2F5[0x3]; // 0x0(0x0)
	struct ULevelDropEffectComponentBase* DropEffectCompClass; // 0x0(0x0)
	enum class ELevelDropType DropType; // 0x0(0x0)
	char pad_301[0x3]; // 0x0(0x0)
	__int32 DropLevel; // 0x0(0x0)
	struct UStaticMeshComponent* MeshComponent; // 0x0(0x0)
	struct USphereComponent* RootSphere; // 0x0(0x0)
	struct USphereComponent* PickSphere; // 0x0(0x0)
	struct ULevelDropEffectComponentBase* DropEffectComp; // 0x0(0x0)
	__int32 RepresentNum; // 0x0(0x0)
	char pad_32C[0x4]; // 0x0(0x0)
	struct FString GDPL; // 0x0(0x0)
	__int32 TemplateId; // 0x0(0x0)
	char pad_344[0x4]; // 0x0(0x0)
	struct FString DropName; // 0x0(0x0)
	float LifeSpan; // 0x0(0x0)
	struct FVector2D LifeSpanRandom; // 0x0(0x0)
	float PickRadius; // 0x0(0x0)
	bool bAutoPickWhenLifeSpanExpired; // 0x0(0x0)
	char pad_369[0x3]; // 0x0(0x0)
	float AutoPickRadius; // 0x0(0x0)
	struct FString PickWwiseEvent; // 0x0(0x0)
	bool bCanPickWhenPlaySkillAnim; // 0x0(0x0)
	char pad_381[0x7]; // 0x0(0x0)
	struct TArray<struct FString> customParams; // 0x0(0x0)
	__int32 LevelPoint; // 0x0(0x0)
	bool bTaskMustPickUp; // 0x0(0x0)
	char pad_39D[0x3]; // 0x0(0x0)
	struct FFragmentStoryInfo FragmentStoryInfo; // 0x0(0x0)
	char pad_3AC[0x4]; // 0x0(0x0)
	struct TArray<__int32> HaveActedMembers; // 0x0(0x0)
	struct TWeakObjectPtr<struct UAbilityComponentBase> LauncherAbility; // 0x0(0x0)
	char pad_3C8[0x30]; // 0x0(0x0)
	struct UAbilityComponent_LevelDrop* Ability; // 0x0(0x0)

	void SetPickRadius(float InPickRadius); // Function /Script/Game.LevelDropBase.SetPickRadius // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnStartPerform(); // Function /Script/Game.LevelDropBase.OnStartPerform // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnInitialize(); // Function /Script/Game.LevelDropBase.OnInitialize // (Native|Event|Public|BlueprintEvent) // @ game+0
	bool IsSpawnAtServer(); // Function /Script/Game.LevelDropBase.IsSpawnAtServer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsPerforming(); // Function /Script/Game.LevelDropBase.IsPerforming // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void EndPerform(); // Function /Script/Game.LevelDropBase.EndPerform // (Native|Public) // @ game+0
	void Client_HaveActedMember(__int32 PlayerId); // Function /Script/Game.LevelDropBase.Client_HaveActedMember // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void BeginOverLap(); // Function /Script/Game.LevelDropBase.BeginOverLap // (Final|Native|Public) // @ game+0
	void ApplyEffectInCode(struct AController* BelongCtrl); // Function /Script/Game.LevelDropBase.ApplyEffectInCode // (Final|Native|Public) // @ game+0
	void ApplyEffect_ServerInCode(struct AController* BelongCtrl); // Function /Script/Game.LevelDropBase.ApplyEffect_ServerInCode // (Final|Native|Public) // @ game+0
	void ApplyEffect_Server(struct AController* BelongCtrl); // Function /Script/Game.LevelDropBase.ApplyEffect_Server // (Native|Event|Public|BlueprintEvent) // @ game+0
	void ApplyEffect(struct AController* BelongCtrl); // Function /Script/Game.LevelDropBase.ApplyEffect // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.LevelDropEffectComponentBase
// Size: 0x0 (Inherited: 0x0)
struct ULevelDropEffectComponentBase : UActorComponent {
	struct FSoftObjectPath FlashParticle; // 0x0(0x0)
	struct FSoftObjectPath ApplyParticle; // 0x0(0x0)
	float ApplyParticleTriggerCD; // 0x0(0x0)
	float StartFlashTime; // 0x0(0x0)
	char pad_E8[0x8]; // 0x0(0x0)
	struct UFXSystemComponent* FlashParticleComp; // 0x0(0x0)
	char pad_F8[0x44]; // 0x0(0x0)
	float MeshSimTime; // 0x0(0x0)
	char pad_140[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.LevelDropEffectComponent
// Size: 0x0 (Inherited: 0x0)
struct ULevelDropEffectComponent : ULevelDropEffectComponentBase {
	float AdsorbSpeed; // 0x0(0x0)
	float EndAdsorbRadius; // 0x0(0x0)
	struct FVector2D RandomInitialVelocity_Vertical; // 0x0(0x0)
	struct FVector2D RandomInitialVelocity; // 0x0(0x0)
	float CustomAirDeceleration; // 0x0(0x0)
	float CustomLandDeceleration; // 0x0(0x0)
	float RollingSpeedScale; // 0x0(0x0)
	bool bCanBounce; // 0x0(0x0)
	bool bCanFloat; // 0x0(0x0)
	char pad_16E[0x2]; // 0x0(0x0)
	struct FVector2D FloatRandomDistanceRange; // 0x0(0x0)
	float FloatSpeed; // 0x0(0x0)
	float BounceCoefficient; // 0x0(0x0)
	char pad_180[0x10]; // 0x0(0x0)
	struct UStaticMeshComponent* TargetMesh; // 0x0(0x0)
};

 // Class /Script/Game.DropApplyTarget
// Size: 0x0 (Inherited: 0x0)
struct UDropApplyTarget : UObject {

	struct TArray<struct AGameCharacter*> GetTargets(struct AController* BelongCtrl); // Function /Script/Game.DropApplyTarget.GetTargets // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.DropApplyFunc
// Size: 0x0 (Inherited: 0x0)
struct UDropApplyFunc : UObject {

	void ApplyFunc(struct AGameCharacter* Target, struct ALevelDropBase* Drop); // Function /Script/Game.DropApplyFunc.ApplyFunc // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.LevelDropsManager
// Size: 0x0 (Inherited: 0x0)
struct ULevelDropsManager : UGameTickableWorldSubsystem {
	char pad_58[0x254]; // 0x0(0x0)
	__int32 NormalMonsterMoneyNum; // 0x0(0x0)
	__int32 EliteMonsterMoneyNum; // 0x0(0x0)
	__int32 BossMonsterMoneyNum; // 0x0(0x0)
	struct TArray<struct ALevelDropBase*> DropPool; // 0x0(0x0)
	char pad_2C8[0x38]; // 0x0(0x0)

	void SpawnMultiMoneyOnClient(struct FVector& SpawnLocation, __int32 MoneyNum, __int32 InOnlineMoneyGuid, bool RandomRange); // Function /Script/Game.LevelDropsManager.SpawnMultiMoneyOnClient // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct ALevelDropBase* SpawnFragmentDropByID(__int32 TemplateId, struct FTransform& Transform, __int32 FragmentId, bool IsGroup, bool bUseInitialVelocity); // Function /Script/Game.LevelDropsManager.SpawnFragmentDropByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct ALevelDropBase* SpawnDropWithOwner(struct UObject* OwnerObject, __int32 TemplateId, struct FTransform& Transform, __int32 RepresentNum, bool bUseInitialVelocity, struct UAbilityComponentBase* LauncherAbility); // Function /Script/Game.LevelDropsManager.SpawnDropWithOwner // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct ALevelDropBase* SpawnDropByID(__int32 TemplateId, struct FTransform& Transform, __int32 RepresentNum, bool bUseInitialVelocity, struct UAbilityComponentBase* LauncherAbility); // Function /Script/Game.LevelDropsManager.SpawnDropByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetMultiCointRate(float InRate); // Function /Script/Game.LevelDropsManager.SetMultiCointRate // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveDropFromAI(struct AGameAICharacter* AIChar, __int32 DropID, __int32 Num); // Function /Script/Game.LevelDropsManager.RemoveDropFromAI // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnLevelFinish(enum class ELevelFinishResult FinishResult, float LevelTime, enum class ELevelFailedReason FailedReason); // Function /Script/Game.LevelDropsManager.OnLevelFinish // (Final|Native|Public) // @ game+0
	bool HadAllocateSuccess(); // Function /Script/Game.LevelDropsManager.HadAllocateSuccess // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int64 GetSpecialDropsCache(); // Function /Script/Game.LevelDropsManager.GetSpecialDropsCache // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<__int32> GetSpawnIndexsByTag(struct FString Tag, __int32 TemplateId); // Function /Script/Game.LevelDropsManager.GetSpawnIndexsByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TMap<struct FString, __int32> GetGainedDrops(); // Function /Script/Game.LevelDropsManager.GetGainedDrops // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FDropEffectTemplate GetDropEffectTemplateByID(__int32 TemplateId); // Function /Script/Game.LevelDropsManager.GetDropEffectTemplateByID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GetAllDrops(); // Function /Script/Game.LevelDropsManager.GetAllDrops // (Final|Native|Public) // @ game+0
	void AllocateDropToAI(struct AGameAICharacter* AIChar, __int32 DropID, __int32 Num); // Function /Script/Game.LevelDropsManager.AllocateDropToAI // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AllocateDrop(struct FString& GDPL, __int32 DropNum, __int32 TemplateId); // Function /Script/Game.LevelDropsManager.AllocateDrop // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AddFragmentDropBySpawnIndex(__int32 SpawnIndex, __int32 TemplateId, __int32 FragmentId, bool IsGroup); // Function /Script/Game.LevelDropsManager.AddFragmentDropBySpawnIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddAllocateDropBySpawnIndex(__int32 SpawnIndex, __int32 TemplateId, float LifeSpan); // Function /Script/Game.LevelDropsManager.AddAllocateDropBySpawnIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.LevelInteractionDropBase
// Size: 0x0 (Inherited: 0x0)
struct ALevelInteractionDropBase : ALevelDropBase {
	float InteractionRadius; // 0x0(0x0)
	float PickUpRadius; // 0x0(0x0)
	bool IsReadyForPick; // 0x0(0x0)
	bool InPicking; // 0x0(0x0)
	char pad_40A[0x6]; // 0x0(0x0)
	struct AActor* Player; // 0x0(0x0)

	void PickUp(); // Function /Script/Game.LevelInteractionDropBase.PickUp // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnEndPerform(); // Function /Script/Game.LevelInteractionDropBase.OnEndPerform // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnEndOverLap(struct AActor* OtherActor); // Function /Script/Game.LevelInteractionDropBase.OnEndOverLap // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnBeginOverLap(struct AActor* OtherActor); // Function /Script/Game.LevelInteractionDropBase.OnBeginOverLap // (Native|Event|Public|BlueprintEvent) // @ game+0
	void OnAfterPickUp(); // Function /Script/Game.LevelInteractionDropBase.OnAfterPickUp // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.LevelLibrary
// Size: 0x0 (Inherited: 0x0)
struct ULevelLibrary : UBlueprintFunctionLibrary {

	void TrySpawnDropsByTransform(struct UObject* WorldContextObject, struct FTransform Trans, struct TArray<__int32>& DropData, struct TArray<struct ALevelDropBase*>& Out); // Function /Script/Game.LevelLibrary.TrySpawnDropsByTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void TrySpawnDrops(struct AActor* InActor, struct TArray<__int32>& DropData, struct TArray<struct ALevelDropBase*>& Out); // Function /Script/Game.LevelLibrary.TrySpawnDrops // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SyncPlayersLevel(struct UObject* WorldContext); // Function /Script/Game.LevelLibrary.SyncPlayersLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SwitchNav(struct UMeshComponent* InComponent, bool bOpen); // Function /Script/Game.LevelLibrary.SwitchNav // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AGameCharacter* SpawnNpcByPoint(struct UObject* WorldContextObject, struct FSpawnNpcPointParams& InParams, struct TArray<struct FName> AddTags, struct AActor* Owner, bool bSpawnImmediately); // Function /Script/Game.LevelLibrary.SpawnNpcByPoint // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AGameCharacter* SpawnNpcAtLocation(struct UObject* WorldContextObject, struct FSpawnNpcParams& Params, struct AActor* Owner); // Function /Script/Game.LevelLibrary.SpawnNpcAtLocation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AGameCharacter* SpawnMonsterAtLocation(struct UObject* WorldContextObject, struct FSpawnMonsterParameters& Params, struct AActor* Owner); // Function /Script/Game.LevelLibrary.SpawnMonsterAtLocation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AActor* SpawnBarricadeByPoint(struct UObject* WorldContextObject, struct FActiveDestroyTemplate& InTemplate, struct FString PointName, struct TArray<struct FName> AddTags, struct AActor* Owner); // Function /Script/Game.LevelLibrary.SpawnBarricadeByPoint // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SpawnAreaStaticActor(struct UObject* WorldContextObject, __int32 AreaId); // Function /Script/Game.LevelLibrary.SpawnAreaStaticActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AActor* SpawnActorFromClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner, struct APawn* Instigator); // Function /Script/Game.LevelLibrary.SpawnActorFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void ShowOrHideOneTips(struct AActor* InActor, bool Inactive, enum class EFightMonsterTipsType InTipsType, struct FString InSocket); // Function /Script/Game.LevelLibrary.ShowOrHideOneTips // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ShowMouseCursorInLevel(struct UObject* WorldContextObject, bool bShow); // Function /Script/Game.LevelLibrary.ShowMouseCursorInLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetBoomWarn(bool InBoomWarn); // Function /Script/Game.LevelLibrary.SetBoomWarn // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ResetPlayerToStartPoint(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.ResetPlayerToStartPoint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveBuff(struct UObject* WorldContextObject, __int32 ModifierID, bool CastToPlayer); // Function /Script/Game.LevelLibrary.RemoveBuff // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PutAIEventByID(struct AGameCharacter* Character, __int32 EventId, bool bIsFightEvent); // Function /Script/Game.LevelLibrary.PutAIEventByID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PlaySuccessShow(); // Function /Script/Game.LevelLibrary.PlaySuccessShow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void LimitNPCMaxNum(struct UObject* WorldContextObject, struct AActor* Summoner, struct AGameCharacter* NewSummoned, __int32 MaxNum); // Function /Script/Game.LevelLibrary.LimitNPCMaxNum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void KillActorByTag(struct UObject* WorldContextObject, struct FString Tag); // Function /Script/Game.LevelLibrary.KillActorByTag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsInUIMap(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.IsInUIMap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsInHouse(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.IsInHouse // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void HideInClassActor(struct UObject* WorldContextObject, struct TArray<struct UObject*> InClass); // Function /Script/Game.LevelLibrary.HideInClassActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void HideAllObject(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.HideAllObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool HasPlayerControllerAlive(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.HasPlayerControllerAlive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetWeaponType(struct AGameCharacter* InChar); // Function /Script/Game.LevelLibrary.GetWeaponType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FWavesTemplate GetWavesTemplate(__int32 InID); // Function /Script/Game.LevelLibrary.GetWavesTemplate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UObject* GetUIByUnLua(struct FString UIName); // Function /Script/Game.LevelLibrary.GetUIByUnLua // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetTowerLevelID(__int32& RefID); // Function /Script/Game.LevelLibrary.GetTowerLevelID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetTowerLevelAreaTime(__int32 RefID); // Function /Script/Game.LevelLibrary.GetTowerLevelAreaTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetTowerLevelAreaID(__int32& RefID); // Function /Script/Game.LevelLibrary.GetTowerLevelAreaID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FSpawnEffet GetSpawnEffectTemplate(__int32 InID); // Function /Script/Game.LevelLibrary.GetSpawnEffectTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UFXSystemAsset* GetSpawnEffect(struct FSpawnEffet InSpawnEffectTemplate); // Function /Script/Game.LevelLibrary.GetSpawnEffect // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetSpawnedSequenceRoot(struct ALevelSequenceActor* InSequenceActor); // Function /Script/Game.LevelLibrary.GetSpawnedSequenceRoot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetPresetMonsterLevelById(__int32 ID); // Function /Script/Game.LevelLibrary.GetPresetMonsterLevelById // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetPresetMonsterLevel(struct UObject* WorldContext); // Function /Script/Game.LevelLibrary.GetPresetMonsterLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FCharacterAtrributeTemplate GetPlayerTemplate(__int32 InID); // Function /Script/Game.LevelLibrary.GetPlayerTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GetPlayerControllerList(struct UObject* WorldContextObject, struct TArray<struct APlayerController*>& OutPlayerCtrls); // Function /Script/Game.LevelLibrary.GetPlayerControllerList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetMonsterNumByTag(struct UObject* WorldContextObject, struct FName InTag); // Function /Script/Game.LevelLibrary.GetMonsterNumByTag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetLocalizationText(struct FString Key); // Function /Script/Game.LevelLibrary.GetLocalizationText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetLevelID(__int32& RefLevelID); // Function /Script/Game.LevelLibrary.GetLevelID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<__int32> GetLevelEntries(); // Function /Script/Game.LevelLibrary.GetLevelEntries // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetHPDamagePercent(struct AGameCharacter* Target, float Damage); // Function /Script/Game.LevelLibrary.GetHPDamagePercent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AGameTaskActor* GetGameTaskActor(struct UObject* WorldContext); // Function /Script/Game.LevelLibrary.GetGameTaskActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameStateBase* GetGameState(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.GetGameState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetDefendTotalWave(struct UObject* WorldContext); // Function /Script/Game.LevelLibrary.GetDefendTotalWave // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetDefendCurWave(struct UObject* WorldContext); // Function /Script/Game.LevelLibrary.GetDefendCurWave // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetDarkZoneGZMax(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.GetDarkZoneGZMax // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetDarkZoneGZ(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.GetDarkZoneGZ // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetCurrentLevelId(struct UObject* WorldContext); // Function /Script/Game.LevelLibrary.GetCurrentLevelId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FCharacterTemplate GetCharacterTemplate(__int32 InID); // Function /Script/Game.LevelLibrary.GetCharacterTemplate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetBoomWarn(); // Function /Script/Game.LevelLibrary.GetBoomWarn // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AWeaponPart* GetAttachedWeaponPart(struct UObject* WorldContextObject, struct AActor* InSequenceActor, enum class EWeaponSlotType InSlotType); // Function /Script/Game.LevelLibrary.GetAttachedWeaponPart // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FSpawnNpcSpCfg GetAreaSkillId(struct AGameTaskActor* TaskActor); // Function /Script/Game.LevelLibrary.GetAreaSkillId // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetAllPlayerMaxHpSum(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.GetAllPlayerMaxHpSum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AActor* GetActorByTag(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FName Tag); // Function /Script/Game.LevelLibrary.GetActorByTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetActorByName(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FString Name); // Function /Script/Game.LevelLibrary.GetActorByName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FActiveWavesTemplate GetActiveWavesTemplate(__int32 InID); // Function /Script/Game.LevelLibrary.GetActiveWavesTemplate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FActiveSpawnersTemplate GetActiveSpawnersTemplate(__int32 InID, enum class ELevelType LevelType, struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.GetActiveSpawnersTemplate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FActiveDestroyTemplate GetActiveDestroyTemplate(__int32 InID); // Function /Script/Game.LevelLibrary.GetActiveDestroyTemplate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ForceSetPlayersLevel(struct UObject* WorldContext, __int32 Level, __int32 Level2, __int32 Level3); // Function /Script/Game.LevelLibrary.ForceSetPlayersLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void FlushPressedKeys(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.FlushPressedKeys // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Fishing(struct AGameCharacter* InPlayer, enum class EFishingEvent InEvent, struct FVector InSpotPos); // Function /Script/Game.LevelLibrary.Fishing // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct AAITeamLogic* FindOrCreateTeam(struct UObject* WorldContextObject, struct FString Name, bool bCreate); // Function /Script/Game.LevelLibrary.FindOrCreateTeam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ExecAIEventInString(struct AGameCharacter* Character, struct FString EventString); // Function /Script/Game.LevelLibrary.ExecAIEventInString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EntryDarkZoneRegion(struct AActor* InActor, __int32 InRegion, bool InForce); // Function /Script/Game.LevelLibrary.EntryDarkZoneRegion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void DispatchToLua(struct FString EventId, __int32 InParam); // Function /Script/Game.LevelLibrary.DispatchToLua // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void DestroyAllCharacter(struct UObject* WorldContextObject); // Function /Script/Game.LevelLibrary.DestroyAllCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void DebugMsg(struct FString Msg); // Function /Script/Game.LevelLibrary.DebugMsg // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void DarkZoneTeleport(__int32 InActorId, struct AGameCharacter* InPlayer); // Function /Script/Game.LevelLibrary.DarkZoneTeleport // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ClearAreaStaticActor(struct UObject* WorldContextObject, __int32 AreaId); // Function /Script/Game.LevelLibrary.ClearAreaStaticActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ClearAreaGameCharacters(struct UObject* WorldContextObject, __int32 AreaId); // Function /Script/Game.LevelLibrary.ClearAreaGameCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ChangeLevelSequenceLight(struct ULevelSequence* InSequence, struct UMovieSceneSequence* InMovieSceneSequence); // Function /Script/Game.LevelLibrary.ChangeLevelSequenceLight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AttachCurrentWeaponToSequenceActor(struct UObject* WorldContextObject, struct AActor* InSequenceActor, struct FName InSockName); // Function /Script/Game.LevelLibrary.AttachCurrentWeaponToSequenceActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AttachCurrentWeaponPartToComponent(struct UObject* WorldContextObject, struct AActor* InSequenceActor, struct USceneComponent* InComponent, struct FName InSocketName, struct FString ResMontageDec, enum class EWeaponSlotType InSlotType); // Function /Script/Game.LevelLibrary.AttachCurrentWeaponPartToComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AttachCurrentSkinToSequenceActor(struct UObject* WorldContextObject, struct AActor* InSequenceActor); // Function /Script/Game.LevelLibrary.AttachCurrentSkinToSequenceActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct ULevelStreamingDynamic* AddLevelStreaming(struct UObject* WorldContextObject, struct FString InPath); // Function /Script/Game.LevelLibrary.AddLevelStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddBuff(struct UObject* WorldContextObject, __int32 ModifierID, bool CastToPlayer); // Function /Script/Game.LevelLibrary.AddBuff // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.LevelNeutralActor
// Size: 0x0 (Inherited: 0x0)
struct ALevelNeutralActor : AGameSkillInteractorBase {
	struct FFlexibleEnumValue CampType; // 0x0(0x0)
	char pad_B34[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.LevelPath_Plane
// Size: 0x0 (Inherited: 0x0)
struct ALevelPath_Plane : AActor {
	float PlaneHeight; // 0x0(0x0)
	float PlaneLength; // 0x0(0x0)
	float TrySpawnAtDistance; // 0x0(0x0)
	float StartPerformDelay; // 0x0(0x0)
	float PerformTime; // 0x0(0x0)
	float RotTolerance; // 0x0(0x0)
	bool bCanPerform; // 0x0(0x0)
	char pad_239[0x3]; // 0x0(0x0)
	float Mat_U; // 0x0(0x0)

	void StartPerform(struct USplineComponent* SplineComp); // Function /Script/Game.LevelPath_Plane.StartPerform // (Event|Public|BlueprintEvent) // @ game+0
	void StartBlend(float BlendTime); // Function /Script/Game.LevelPath_Plane.StartBlend // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.LevelPathPainter
// Size: 0x0 (Inherited: 0x0)
struct ALevelPathPainter : AActor {
	bool bDebugPath; // 0x0(0x0)
	char pad_221[0x17]; // 0x0(0x0)
	struct TArray<struct USplineComponent*> DeactiveSplines; // 0x0(0x0)
	bool bShowTrackUI; // 0x0(0x0)
	char pad_249[0x7]; // 0x0(0x0)
	struct AActor* PathEndActor; // 0x0(0x0)
	char pad_258[0x8]; // 0x0(0x0)
	struct UNiagaraSystem* PathFX; // 0x0(0x0)
	char pad_268[0x8]; // 0x0(0x0)
	struct UFXSystemAsset* PathStartFX; // 0x0(0x0)
	char pad_278[0x10]; // 0x0(0x0)
	struct UNiagaraSystem* LineStartFX; // 0x0(0x0)
	char pad_290[0x58]; // 0x0(0x0)

	void ShowLevelPath(bool bForce); // Function /Script/Game.LevelPathPainter.ShowLevelPath // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetShowTrackUI(bool bShow); // Function /Script/Game.LevelPathPainter.SetShowTrackUI // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPathEnd(struct AActor* EndActor, enum class ELevelPathEndType InPathType); // Function /Script/Game.LevelPathPainter.SetPathEnd // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetParamters(struct AActor* GoalActor, enum class ELevelPathEndType InPathType, struct UNiagaraSystem* PathFX, struct UFXSystemAsset* PathStartFX, struct UNiagaraSystem* LineStartFX, struct UNavigationQueryFilter* NavFilterClass, float FXMoveSpeed, float PathFXStartDistance, float ZOffset, float InMinLife, float InMaxLife, float InDisappearDist, float BlendDisappearTime, struct FVector StartFXOffset, struct ALevelPath_Plane* PlaneClass, float CheckSegmentLength, float ShowPathCD, struct FString InGoalActorTag, float InExtendLineTraceLength); // Function /Script/Game.LevelPathPainter.SetParamters // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct AActor* SelectNearestPathEndActor(); // Function /Script/Game.LevelPathPainter.SelectNearestPathEndActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetShowTrackUI(); // Function /Script/Game.LevelPathPainter.GetShowTrackUI // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	enum class ELevelPathEndType GetPathType(); // Function /Script/Game.LevelPathPainter.GetPathType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AActor* GetPathEnd(); // Function /Script/Game.LevelPathPainter.GetPathEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct ALevelPathPainter* GetLevelPathPainter(struct UObject* Obj); // Function /Script/Game.LevelPathPainter.GetLevelPathPainter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.LevelPointsManager
// Size: 0x0 (Inherited: 0x0)
struct ULevelPointsManager : UGameTickableWorldSubsystem {
	char pad_58[0x8]; // 0x0(0x0)
	__int32 NormalMonsterPoint; // 0x0(0x0)
	__int32 EliteMonsterPoint; // 0x0(0x0)
	__int32 BossMonsterPoint; // 0x0(0x0)
	char pad_6C[0x4]; // 0x0(0x0)

	void OnGameTaskExecuteFinish(struct UGameTask_Execute* ExecuteNode); // Function /Script/Game.LevelPointsManager.OnGameTaskExecuteFinish // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.LevelStarTaskBase
// Size: 0x0 (Inherited: 0x0)
struct ULevelStarTaskBase : UObject {
	bool bEnableTick; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)
	struct TArray<struct FString> Params; // 0x0(0x0)
	bool bPremise; // 0x0(0x0)
	bool bStage; // 0x0(0x0)
	bool bAchieveFailed; // 0x0(0x0)
	char pad_43[0x25]; // 0x0(0x0)

	void StarTaskFinish(); // Function /Script/Game.LevelStarTaskBase.StarTaskFinish // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StageTip(); // Function /Script/Game.LevelStarTaskBase.StageTip // (Native|Public|BlueprintCallable) // @ game+0
	void OnTick(); // Function /Script/Game.LevelStarTaskBase.OnTick // (Event|Public|BlueprintEvent) // @ game+0
	void OnStart(); // Function /Script/Game.LevelStarTaskBase.OnStart // (Event|Public|BlueprintEvent) // @ game+0
	void OnPrepare(); // Function /Script/Game.LevelStarTaskBase.OnPrepare // (Event|Public|BlueprintEvent) // @ game+0
	bool IsHasFinished(); // Function /Script/Game.LevelStarTaskBase.IsHasFinished // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsFinished(); // Function /Script/Game.LevelStarTaskBase.IsFinished // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameTaskActor* GetTaskActor(); // Function /Script/Game.LevelStarTaskBase.GetTaskActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct ULevelStarTaskManager* GetStarTaskManger(); // Function /Script/Game.LevelStarTaskBase.GetStarTaskManger // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetPercent(); // Function /Script/Game.LevelStarTaskBase.GetPercent // (Native|Event|Public|BlueprintEvent) // @ game+0
	struct FString GetDescription(); // Function /Script/Game.LevelStarTaskBase.GetDescription // (Native|Event|Public|BlueprintEvent) // @ game+0
	struct FString GetCurrentState(); // Function /Script/Game.LevelStarTaskBase.GetCurrentState // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0
	bool CheckFinishCondition(); // Function /Script/Game.LevelStarTaskBase.CheckFinishCondition // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.LevelStarTask_AddNumOnEvent
// Size: 0x0 (Inherited: 0x0)
struct ULevelStarTask_AddNumOnEvent : ULevelStarTaskBase {
	char pad_68[0x8]; // 0x0(0x0)
	__int32 NowNum; // 0x0(0x0)
	__int32 RequestDeadNum; // 0x0(0x0)
	bool NeedNumBigger; // 0x0(0x0)
	bool IncludeEqual; // 0x0(0x0)
	char pad_7A[0x6]; // 0x0(0x0)
	struct FString EventName; // 0x0(0x0)
	char pad_90[0x8]; // 0x0(0x0)

	void OnLevelFinish(enum class ELevelFinishResult FinishResult, float Time); // Function /Script/Game.LevelStarTask_AddNumOnEvent.OnLevelFinish // (Final|Native|Public) // @ game+0
	void K2_OnLevelFinish(); // Function /Script/Game.LevelStarTask_AddNumOnEvent.K2_OnLevelFinish // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.LevelStarTask_CastSkill
// Size: 0x0 (Inherited: 0x0)
struct ULevelStarTask_CastSkill : ULevelStarTaskBase {
	__int32 CastTimes; // 0x0(0x0)
	__int32 TargetTimes; // 0x0(0x0)
	bool UseSkillCastCD; // 0x0(0x0)
	char pad_71[0x7]; // 0x0(0x0)

	void OnLevelFinish(enum class ELevelFinishResult FinishResult, float Time); // Function /Script/Game.LevelStarTask_CastSkill.OnLevelFinish // (Final|Native|Public) // @ game+0
	bool OnCheckSuccess(); // Function /Script/Game.LevelStarTask_CastSkill.OnCheckSuccess // (Native|Event|Public|BlueprintEvent) // @ game+0
	bool OnCheckSkill(struct UAbilityComponent* Ability, __int32 SkillID); // Function /Script/Game.LevelStarTask_CastSkill.OnCheckSkill // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.LevelStarTask_PlayerDeadNum
// Size: 0x0 (Inherited: 0x0)
struct ULevelStarTask_PlayerDeadNum : ULevelStarTaskBase {
	char pad_68[0x8]; // 0x0(0x0)

	void OnLevelFinish(enum class ELevelFinishResult FinishResult, float Time); // Function /Script/Game.LevelStarTask_PlayerDeadNum.OnLevelFinish // (Final|Native|Public) // @ game+0
	void OnCharacterDeath(struct AGameCharacter* DeadCharacter); // Function /Script/Game.LevelStarTask_PlayerDeadNum.OnCharacterDeath // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.LevelStarTask_PlayerHealth
// Size: 0x0 (Inherited: 0x0)
struct ULevelStarTask_PlayerHealth : ULevelStarTaskBase {
};

 // Class /Script/Game.LevelStarTaskManager
// Size: 0x0 (Inherited: 0x0)
struct ULevelStarTaskManager : UGameTickableWorldSubsystem {
	struct FMulticastInlineDelegate OnCharacterDie; // 0x0(0x0)
	struct FMulticastInlineDelegate OnLevelFinish; // 0x0(0x0)
	char pad_78[0x8]; // 0x0(0x0)
	struct TArray<struct ULevelStarTaskBase*> NowLevelStarTasks; // 0x0(0x0)
	char pad_90[0x10]; // 0x0(0x0)

	void OnLevelFinished(enum class ELevelFinishResult FinishResult, float Time, enum class ELevelFailedReason FailedReason); // Function /Script/Game.LevelStarTaskManager.OnLevelFinished // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InitNowLevelStarTasks(); // Function /Script/Game.LevelStarTaskManager.InitNowLevelStarTasks // (Final|Native|Public) // @ game+0
	void GM_ResetStarTasks(__int32 Index, struct FString ResetParam, bool InFinish); // Function /Script/Game.LevelStarTaskManager.GM_ResetStarTasks // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GM_ChangeStarTask(__int32 Index, struct FString& TastStr); // Function /Script/Game.LevelStarTaskManager.GM_ChangeStarTask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AGameTaskActor* GetTaskActor(); // Function /Script/Game.LevelStarTaskManager.GetTaskActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetStarTaskResultCache(); // Function /Script/Game.LevelStarTaskManager.GetStarTaskResultCache // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FStarTaskProperty GetStarTaskProperty(__int32 LevelID, __int32 Index); // Function /Script/Game.LevelStarTaskManager.GetStarTaskProperty // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FStarTaskProperty> GetStarTaskProperties_OutTowerLevel(__int32 TowerAreaID); // Function /Script/Game.LevelStarTaskManager.GetStarTaskProperties_OutTowerLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FStarTaskProperty> GetStarTaskProperties(); // Function /Script/Game.LevelStarTaskManager.GetStarTaskProperties // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FStarTaskProperty> GetInfoByCondition(struct FString StarTasksInfo); // Function /Script/Game.LevelStarTaskManager.GetInfoByCondition // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetFightLog_GetStar(); // Function /Script/Game.LevelStarTaskManager.GetFightLog_GetStar // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetFightLog_FinalStar(); // Function /Script/Game.LevelStarTaskManager.GetFightLog_FinalStar // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<struct FStarTaskProperty> GetDetailStarTaskProperties(); // Function /Script/Game.LevelStarTaskManager.GetDetailStarTaskProperties // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FStarTaskProperty> GetDefendStarInfos(); // Function /Script/Game.LevelStarTaskManager.GetDefendStarInfos // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetDeadPlayerNum(); // Function /Script/Game.LevelStarTaskManager.GetDeadPlayerNum // (Final|Native|Public|BlueprintCallable) // @ game+0
	void FinishAllStarTasks(); // Function /Script/Game.LevelStarTaskManager.FinishAllStarTasks // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.LoadingWidget
// Size: 0x0 (Inherited: 0x0)
struct ULoadingWidget : UUserWidget {
	struct TArray<struct TSoftObjectPtr<UTexture>> RandomBgList; // 0x0(0x0)
	struct UImage* ImageBg; // 0x0(0x0)
	struct UProgressBar* ProgressBar; // 0x0(0x0)
	struct USlider* Slider_66; // 0x0(0x0)
	struct UTextBlock* TextPercent; // 0x0(0x0)
	float UpdateInterval; // 0x0(0x0)
	char pad_2AC[0xC]; // 0x0(0x0)
	struct UUserWidget* TowerSceneSwitch; // 0x0(0x0)
	struct UCanvasPanel* PanelTips1; // 0x0(0x0)
	struct UTextBlock* TxtTips1Title; // 0x0(0x0)
	struct UHyperTextBlock* TxtTips1Intro; // 0x0(0x0)
	struct UCanvasPanel* PanelTips2; // 0x0(0x0)
	struct UTextBlock* TxtTips2Title; // 0x0(0x0)
	struct UHyperTextBlock* TxtTips2Intro; // 0x0(0x0)
	struct UCanvasPanel* PanelTips3; // 0x0(0x0)
	struct UTextBlock* TxtTips3Title; // 0x0(0x0)
	struct UHyperTextBlock* TxtTips3Intro; // 0x0(0x0)
	char pad_308[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.LocalizationSubSystem
// Size: 0x0 (Inherited: 0x0)
struct ULocalizationSubSystem : UGameInstanceSubsystem {
	struct TMap<struct FSoftObjectPath, struct FSoftObjectPath> CacheFontMap; // 0x0(0x0)

	void ReplaceFontAsset(struct UTextBlock* InTextBlock); // Function /Script/Game.LocalizationSubSystem.ReplaceFontAsset // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ReloadFontConfig(); // Function /Script/Game.LocalizationSubSystem.ReloadFontConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsBackSwitchFontAsset(struct UTextBlock* InTextBlock); // Function /Script/Game.LocalizationSubSystem.IsBackSwitchFontAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetOSLanguage(); // Function /Script/Game.LocalizationSubSystem.GetOSLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct ULocalizationSubSystem* Get(); // Function /Script/Game.LocalizationSubSystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.LocalizedTexture
// Size: 0x0 (Inherited: 0x0)
struct ULocalizedTexture : UDataAsset {
	char pad_30[0x8]; // 0x0(0x0)
	struct FSoftObjectPath DefaultTexture; // 0x0(0x0)
	struct TMap<struct FString, struct FSoftObjectPath> SpecialLocalizedTextures; // 0x0(0x0)
	struct UObject* BakedSourceObject; // 0x0(0x0)

	struct UTexture2D* GetDisplayTexture(); // Function /Script/Game.LocalizedTexture.GetDisplayTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.MapManager
// Size: 0x0 (Inherited: 0x0)
struct UMapManager : UGameInstanceSubsystem {
	char pad_30[0x28]; // 0x0(0x0)
	struct TMap<__int32, struct FMapInfo> MapInfos; // 0x0(0x0)
	char pad_A8[0x38]; // 0x0(0x0)

	void SwtichBGM(struct FString InMusic, struct FString InAmbience); // Function /Script/Game.MapManager.SwtichBGM // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSwitch(struct FString InSwitchGroup, struct FString InSwitchState); // Function /Script/Game.MapManager.SetSwitch // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetForceTickInLoading(bool InbForceTick); // Function /Script/Game.MapManager.SetForceTickInLoading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ResumeMusic(__int32 InTransitionMS); // Function /Script/Game.MapManager.ResumeMusic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RestoreMusic(); // Function /Script/Game.MapManager.RestoreMusic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PauseMusic(__int32 InTransitionMS); // Function /Script/Game.MapManager.PauseMusic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool Open(__int32 InMapId, struct FString InOption); // Function /Script/Game.MapManager.Open // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsLoading(); // Function /Script/Game.MapManager.IsLoading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsForceTickInLoading(); // Function /Script/Game.MapManager.IsForceTickInLoading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UWwiseComponent* GetWwiseComponent(); // Function /Script/Game.MapManager.GetWwiseComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UMapManager* GetSingleton(); // Function /Script/Game.MapManager.GetSingleton // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetMaps(struct TArray<struct FMapInfo>& Maps); // Function /Script/Game.MapManager.GetMaps // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString GetMapPath(); // Function /Script/Game.MapManager.GetMapPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetMapIdByLevelPath(struct UWorld* World); // Function /Script/Game.MapManager.GetMapIdByLevelPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetMapIdByGameInstance(struct UGameInstance* Instance); // Function /Script/Game.MapManager.GetMapIdByGameInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetLoadingPercent(); // Function /Script/Game.MapManager.GetLoadingPercent // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetCurrentLevelId(); // Function /Script/Game.MapManager.GetCurrentLevelId // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetCurrentID(); // Function /Script/Game.MapManager.GetCurrentID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UWwiseComponent* GetAmbienceComponent(); // Function /Script/Game.MapManager.GetAmbienceComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool Find(__int32 InMapId, struct FMapInfo& OutInfo); // Function /Script/Game.MapManager.Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void CancelBlockClick(); // Function /Script/Game.MapManager.CancelBlockClick // (Final|Native|Private) // @ game+0
};

 // Class /Script/Game.MarkSkillRunningInterface
// Size: 0x0 (Inherited: 0x0)
struct UMarkSkillRunningInterface : UInterface {

	void MarkRunning(); // Function /Script/Game.MarkSkillRunningInterface.MarkRunning // (Native|Public|BlueprintCallable) // @ game+0
	bool IsMarkedRunning(); // Function /Script/Game.MarkSkillRunningInterface.IsMarkedRunning // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MaskImage
// Size: 0x0 (Inherited: 0x0)
struct UMaskImage : UWidget {
	struct FMaskImageStyle WidgetStyle; // 0x0(0x0)
	char pad_2C8[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.MatchingGroundNormalComponent
// Size: 0x0 (Inherited: 0x0)
struct UMatchingGroundNormalComponent : UActorComponent {
	float MatchingSpeed; // 0x0(0x0)
	float AngleThreahold; // 0x0(0x0)
	char pad_B8[0x28]; // 0x0(0x0)
	struct AGameCharacter* Owner; // 0x0(0x0)
	char pad_E8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialControlEditorManager
// Size: 0x0 (Inherited: 0x0)
struct UMaterialControlEditorManager : UBlueprintFunctionLibrary {

	void TriggerByManual(struct TArray<struct AActor*> Actors, struct AActor* MaterialVolume); // Function /Script/Game.MaterialControlEditorManager.TriggerByManual // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MaterialControlManager
// Size: 0x0 (Inherited: 0x0)
struct UMaterialControlManager : UWorldSubsystem {
	char pad_30[0x78]; // 0x0(0x0)
	struct UMaterialParameterCollection* EffectMPCObject; // 0x0(0x0)
	struct UMaterialControlVolumeMPC* DefaultEffectMPC; // 0x0(0x0)
	struct TArray<struct AMaterialControlVolumeBase*> EffectVolumes; // 0x0(0x0)
	char pad_C8[0x8]; // 0x0(0x0)

	void UpdateManually(); // Function /Script/Game.MaterialControlManager.UpdateManually // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TriggerByManual(struct AActor* Actor); // Function /Script/Game.MaterialControlManager.TriggerByManual // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MaterialControlVolumeBase
// Size: 0x0 (Inherited: 0x0)
struct AMaterialControlVolumeBase : ATriggerBase {
	unsigned __int32 Priority; // 0x0(0x0)
	float BlendWeight; // 0x0(0x0)
	struct UCurveFloat* BlendCurve; // 0x0(0x0)
	struct TMap<struct FName, struct FScalarParameter> ScalarParameters; // 0x0(0x0)
	struct TMap<struct FName, struct FVectorParameter> VectorParameters; // 0x0(0x0)
	struct TMap<struct FName, struct FTextureParameter> TextureParameters; // 0x0(0x0)
	struct UMaterialControlVolumeMPC* EffectMPC; // 0x0(0x0)
	char pad_330[0xC0]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialControlSphereVolume
// Size: 0x0 (Inherited: 0x0)
struct AMaterialControlSphereVolume : AMaterialControlVolumeBase {
	float BlendRadius; // 0x0(0x0)
	char pad_3F4[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialControlVolume
// Size: 0x0 (Inherited: 0x0)
struct AMaterialControlVolume : AMaterialControlVolumeBase {
	struct FVector BlendRadiusVector; // 0x0(0x0)
	char pad_3FC[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialControlVolumeMPC
// Size: 0x0 (Inherited: 0x0)
struct UMaterialControlVolumeMPC : UObject {
	struct TMap<struct FName, float> ScalarParameters; // 0x0(0x0)
	struct TMap<struct FName, struct FLinearColor> VectorParameters; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionSceneLightController
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionSceneLightController : UMaterialExpressionCustomOutput {
	struct FExpressionInput SceneLightVector; // 0x0(0x0)
	char pad_4C[0x8]; // 0x0(0x0)
	struct FExpressionInput SceneLightColorAndIntensity; // 0x0(0x0)
	char pad_60[0x8]; // 0x0(0x0)
	struct FExpressionInput StaticShadowMaskMap; // 0x0(0x0)
	char pad_74[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionPlanarReflectionController
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionPlanarReflectionController : UMaterialExpressionCustomOutput {
	struct FExpressionInput ReflectionContrast; // 0x0(0x0)
	char pad_4C[0x8]; // 0x0(0x0)
	struct FExpressionInput ReflectionColorIntensityOffset; // 0x0(0x0)
	char pad_60[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionShadingModelCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput ShadingModel; // 0x0(0x0)
	char pad_4C[0x8]; // 0x0(0x0)
	struct FExpressionInput LightColor; // 0x0(0x0)
	char pad_60[0x8]; // 0x0(0x0)
	struct FExpressionInput LightMinMax; // 0x0(0x0)
	char pad_74[0x8]; // 0x0(0x0)
	struct FExpressionInput InirectMinMax; // 0x0(0x0)
	char pad_88[0x8]; // 0x0(0x0)
	struct FExpressionInput FillLighting; // 0x0(0x0)
	char pad_9C[0x8]; // 0x0(0x0)
	struct FExpressionInput ShadowMapMask; // 0x0(0x0)
	char pad_B0[0x8]; // 0x0(0x0)
	struct FExpressionInput MaterialCustomData; // 0x0(0x0)
	char pad_C4[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionShadingModelClothCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelClothCustomOutput : UMaterialExpressionShadingModelCustomOutput {
};

 // Class /Script/Game.MaterialExpressionShadingModelClearCoatCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelClearCoatCustomOutput : UMaterialExpressionShadingModelCustomOutput {
};

 // Class /Script/Game.MaterialExpressionShadingModelHairCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelHairCustomOutput : UMaterialExpressionShadingModelCustomOutput {
};

 // Class /Script/Game.MaterialExpressionShadingModelFaceSkinCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelFaceSkinCustomOutput : UMaterialExpressionShadingModelCustomOutput {
};

 // Class /Script/Game.MaterialExpressionShadingModelSubsurfaceCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelSubsurfaceCustomOutput : UMaterialExpressionShadingModelCustomOutput {
};

 // Class /Script/Game.MaterialExpressionShadingModelEyeCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelEyeCustomOutput : UMaterialExpressionShadingModelCustomOutput {
};

 // Class /Script/Game.MaterialExpressionShadingModelTwoSidedFoliageCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelTwoSidedFoliageCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x0(0x0)
	char pad_4C[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionShadingModelCustomLightingOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelCustomLightingOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Roughness; // 0x0(0x0)
	char pad_4C[0x8]; // 0x0(0x0)
	struct FExpressionInput SpecularColor; // 0x0(0x0)
	char pad_60[0x8]; // 0x0(0x0)
	struct FExpressionInput DiffuseLighting; // 0x0(0x0)
	char pad_74[0x8]; // 0x0(0x0)
	struct FExpressionInput DiffuseGI; // 0x0(0x0)
	char pad_88[0x8]; // 0x0(0x0)
	struct FExpressionInput ShadowMapMask; // 0x0(0x0)
	char pad_9C[0x8]; // 0x0(0x0)
	struct FExpressionInput LowQualityReflection; // 0x0(0x0)
	char pad_B0[0x8]; // 0x0(0x0)
	struct FExpressionInput LightColor; // 0x0(0x0)
	char pad_C4[0x8]; // 0x0(0x0)
	struct FExpressionInput Specular; // 0x0(0x0)
	char pad_D8[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionShadingModelCustomIndirectLightOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelCustomIndirectLightOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Irradiance; // 0x0(0x0)
	char pad_4C[0x8]; // 0x0(0x0)
	struct FExpressionInput ReflectionEnviroment; // 0x0(0x0)
	char pad_60[0x8]; // 0x0(0x0)
	struct FExpressionInput ExposureController; // 0x0(0x0)
	char pad_74[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionShadingModelMultiLightScatterCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionShadingModelMultiLightScatterCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x0(0x0)
	char pad_4C[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionTextureObjectRawCustomOutput
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionTextureObjectRawCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x0(0x0)
	char pad_4C[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialExpressionViewTool
// Size: 0x0 (Inherited: 0x0)
struct UMaterialExpressionViewTool : UMaterialExpressionCustomOutput {
	struct FExpressionInput GetRenderView; // 0x0(0x0)
	char pad_4C[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.MaterialLayerInformation
// Size: 0x0 (Inherited: 0x0)
struct UMaterialLayerInformation : UDataAsset {
	struct TMap<struct FString, struct FString> ParameterCategories; // 0x0(0x0)
	struct TMap<__int32, struct FString> LayerNames; // 0x0(0x0)
	struct TMap<struct FString, __int32> NameLayers; // 0x0(0x0)
};

 // Class /Script/Game.MaterialLayerParameters
// Size: 0x0 (Inherited: 0x0)
struct UMaterialLayerParameters : UDataAsset {
	struct TMap<struct FName, float> Scalars; // 0x0(0x0)
	struct TMap<struct FName, struct FLinearColor> Vectors; // 0x0(0x0)
};

 // Class /Script/Game.MathLibrary
// Size: 0x0 (Inherited: 0x0)
struct UMathLibrary : UBlueprintFunctionLibrary {

	struct FVector VInterpNormalRotationTo(struct FVector& Current, struct FVector& Target, float DeltaTime, float RotationSpeedDegrees); // Function /Script/Game.MathLibrary.VInterpNormalRotationTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	float VectorAngleXY3(struct FVector& From, struct FVector& To); // Function /Script/Game.MathLibrary.VectorAngleXY3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	float VectorAngleXY2(struct FVector& From, struct FVector& To); // Function /Script/Game.MathLibrary.VectorAngleXY2 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	float VectorAngleXY(struct FVector& From, struct FVector& To); // Function /Script/Game.MathLibrary.VectorAngleXY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	float VectorAngle2D3(struct FVector2D& From, struct FVector2D& To); // Function /Script/Game.MathLibrary.VectorAngle2D3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	float VectorAngle2D2(struct FVector2D& From, struct FVector2D& To); // Function /Script/Game.MathLibrary.VectorAngle2D2 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	float VectorAngle2D(struct FVector2D& From, struct FVector2D& To); // Function /Script/Game.MathLibrary.VectorAngle2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FQuat SequenceRotationZYX(struct FRotator& From, struct FRotator& InRot); // Function /Script/Game.MathLibrary.SequenceRotationZYX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct FQuat SequenceRotationYZX(struct FRotator& From, struct FRotator& InRot); // Function /Script/Game.MathLibrary.SequenceRotationYZX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	bool InHalfAngleRange2D(struct FVector& A, struct FVector& B, float HalfAngle); // Function /Script/Game.MathLibrary.InHalfAngleRange2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	float GetRuntimeCurveValue(struct FRuntimeFloatCurve& InCurve, float InTime); // Function /Script/Game.MathLibrary.GetRuntimeCurveValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	float GetBulletPerceptionTime(struct FVector LaunchLoc, struct FVector TargetLoc, struct FVector TargetVelocity, float BulletSpeed); // Function /Script/Game.MathLibrary.GetBulletPerceptionTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.Modifier
// Size: 0x0 (Inherited: 0x0)
struct UModifier : UObject {
	char pad_28[0xC]; // 0x0(0x0)
	float LifeTime; // 0x0(0x0)
	float CreateTime; // 0x0(0x0)
	float RandomKeepTime; // 0x0(0x0)
	float LifeTimeRemain; // 0x0(0x0)
	float LiveTime; // 0x0(0x0)
	float TickInterval; // 0x0(0x0)
	__int32 ID; // 0x0(0x0)
	__int32 RunTimeID; // 0x0(0x0)
	__int32 SkillOwnerID; // 0x0(0x0)
	__int32 SkillRunTimeID; // 0x0(0x0)
	unsigned __int32 DamageEffectUniqueID; // 0x0(0x0)
	char pad_60[0x8]; // 0x0(0x0)
	struct FVector OriginLocation; // 0x0(0x0)
	struct FVector ApplyLocation; // 0x0(0x0)
	struct FVector LocalApplyLocation; // 0x0(0x0)
	__int32 Level; // 0x0(0x0)
	bool bScaleSlomo; // 0x0(0x0)
	char SlomPriority; // 0x0(0x0)
	bool bBindOnNotifySummon; // 0x0(0x0)
	bool bBindBulletHit; // 0x0(0x0)
	bool bForceRemove; // 0x0(0x0)
	bool bApplyEffect; // 0x0(0x0)
	char pad_96[0xA]; // 0x0(0x0)
	__int32 MaxOverlaid; // 0x0(0x0)
	__int32 CurOverlaid; // 0x0(0x0)
	float CurAtuoRemoveOneTime; // 0x0(0x0)
	char pad_AC[0x4]; // 0x0(0x0)
	struct FBlockByControlProtectionKeepEffectInfo BlockedKeepEffectInfo; // 0x0(0x0)
	char pad_100[0x10]; // 0x0(0x0)
	struct TWeakObjectPtr<struct APlayerWeapon> OldWeapon; // 0x0(0x0)
	struct USkillMove* StorgeSkillMove; // 0x0(0x0)
	struct TWeakObjectPtr<struct UAbilityComponentBase> Target; // 0x0(0x0)
	struct TWeakObjectPtr<struct UAbilityComponentBase> Launcher; // 0x0(0x0)
	struct TWeakObjectPtr<struct USkillEmitter> EmitterOwner; // 0x0(0x0)
	float CurTime; // 0x0(0x0)
	float ElapesTime; // 0x0(0x0)
	__int32 RenderStateID; // 0x0(0x0)
	__int32 AbnormalStateID; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> Conditions; // 0x0(0x0)
	enum class ECampRelation RecordCampRelation; // 0x0(0x0)
	bool bCanApply; // 0x0(0x0)
	char pad_19A[0x6]; // 0x0(0x0)
	struct TArray<struct UGameAbilityBuffer*> BufferRefs; // 0x0(0x0)
	bool bEndModifier; // 0x0(0x0)
	char pad_1B1[0x7]; // 0x0(0x0)
	struct TArray<__int32> PostProcessIds; // 0x0(0x0)
	struct TArray<__int32> SubModifierRunTimeID; // 0x0(0x0)
	struct TArray<struct ACustomEffectActor*> StartEffectActors; // 0x0(0x0)
	struct TArray<struct ACustomEffectActor*> IntervalEffectActors; // 0x0(0x0)
	struct TArray<struct ACustomEffectActor*> KeepEffectActors; // 0x0(0x0)
	struct TArray<struct ACustomEffectActor*> EndEffectActors; // 0x0(0x0)
	struct TArray<struct ACustomEffectActor*> PostApplyEffectActors; // 0x0(0x0)
	struct TArray<struct FAttributeChangeValue> CacheKeepEffectChangeValue; // 0x0(0x0)
	struct TArray<struct FAttributeChangeValue> CacheKeepConditionEffectChangeValue; // 0x0(0x0)
	struct TArray<__int32> CacheKeepModifiers; // 0x0(0x0)
	struct TArray<__int32> CacheConditionKeepModifiers; // 0x0(0x0)
	char pad_268[0x10]; // 0x0(0x0)
	struct FBoneResult ApplyBoneInfo; // 0x0(0x0)
	struct FBoneResult ApplyPartInfo; // 0x0(0x0)
	struct FBoneResult ApplyPartitionInfo; // 0x0(0x0)
	char pad_2D8[0x28]; // 0x0(0x0)

	void SpreadModifier(struct UAbilityComponentBase* AbilityComp, __int32 ModifierID, __int32 RemoveModifierID); // Function /Script/Game.Modifier.SpreadModifier // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetNextXBullet(__int32 InCount); // Function /Script/Game.Modifier.SetNextXBullet // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCurOverlaid(__int32 TargetOverlaid); // Function /Script/Game.Modifier.SetCurOverlaid // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveOverlaid(__int32 InOverlaid); // Function /Script/Game.Modifier.RemoveOverlaid // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ReduceCurOverlaid(); // Function /Script/Game.Modifier.ReduceCurOverlaid // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnSwitch(struct AGameCharacter* OldCharacter, struct AGameCharacter* NewCharacter); // Function /Script/Game.Modifier.OnSwitch // (Final|Native|Public) // @ game+0
	void OnQTESwitch(struct FQTESwitchParam& SwitchParam); // Function /Script/Game.Modifier.OnQTESwitch // (Final|Native|Public|HasOutParms) // @ game+0
	void OnNotifySummon(struct AGameCharacter* InSummon); // Function /Script/Game.Modifier.OnNotifySummon // (Final|Native|Public) // @ game+0
	void OnFireHit(struct FHitResult& HitResult, struct FBulletInfo& BulletInfo, struct ABullet* InBullet); // Function /Script/Game.Modifier.OnFireHit // (Final|Native|Public|HasOutParms) // @ game+0
	void OnBulletHitTarget(struct ABullet* BulletRef, struct FHitResult& HitResult); // Function /Script/Game.Modifier.OnBulletHitTarget // (Final|Native|Public|HasOutParms) // @ game+0
	void OnAsyncLoadAbnormalRenderClass(struct UObject* LoadedObject); // Function /Script/Game.Modifier.OnAsyncLoadAbnormalRenderClass // (Final|Native|Protected) // @ game+0
	__int32 MakeModifierToQueryResult(__int32 ModifierID, struct UObject* InOuter, struct UAbilityComponentBase* lpLauncher, struct UAbilityComponentBase* lpTarget, struct FQueryResult& QueryResult, struct USkillEmitter* InEmitter, struct FVector& ApplyLoc, struct FVector& OriginLoc, __int32 OverlaidNum, __int32 InLevel, bool bMarkRunning); // Function /Script/Game.Modifier.MakeModifierToQueryResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	__int32 MakeModifierToApplyBoneResult(__int32 ModifierID, struct UObject* InOuter, struct UAbilityComponentBase* lpLauncher, struct UAbilityComponentBase* lpTarget, struct FBoneResult& PartResult, struct FBoneResult& PartitionResult, struct USkillEmitter* InEmitter, struct FVector& ApplyLoc, struct FVector& OriginLoc, __int32 OverlaidNum, __int32 InLevel, bool bMarkRunning); // Function /Script/Game.Modifier.MakeModifierToApplyBoneResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	__int32 MakeModifier(__int32 ModifierID, struct UObject* InOuter, struct UAbilityComponentBase* lpLauncher, struct UAbilityComponentBase* lpTarget, struct USkillEmitter* InEmitter, struct FVector& ApplyLoc, struct FVector& OriginLoc, __int32 OverlaidNum, __int32 InLevel); // Function /Script/Game.Modifier.MakeModifier // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void LogReceiveAbnormalState(bool bStart); // Function /Script/Game.Modifier.LogReceiveAbnormalState // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsShowOnUI(); // Function /Script/Game.Modifier.IsShowOnUI // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsModifierTagBlockByModifierTag(struct UAbilityComponentBase* AbilityComp, struct FGameplayTag ModifierTag); // Function /Script/Game.Modifier.IsModifierTagBlockByModifierTag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UAbilityComponentBase* GetTarget(); // Function /Script/Game.Modifier.GetTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetModifierKeepTime(struct UAbilityComponentBase* TargetAbilityComp); // Function /Script/Game.Modifier.GetModifierKeepTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetMaxOverlaid(); // Function /Script/Game.Modifier.GetMaxOverlaid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetLevel(); // Function /Script/Game.Modifier.GetLevel // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAbilityComponentBase* GetLauncher(); // Function /Script/Game.Modifier.GetLauncher // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetKeepEffectAtttibuteValue(struct UAbilityAttribute* InAttribute); // Function /Script/Game.Modifier.GetKeepEffectAtttibuteValue // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetID(); // Function /Script/Game.Modifier.GetID // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UObject* GetIcon(); // Function /Script/Game.Modifier.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetCurOverlaid(); // Function /Script/Game.Modifier.GetCurOverlaid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FString GetClassTag(); // Function /Script/Game.Modifier.GetClassTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FBoneResult GetApplyPartitionInfo(); // Function /Script/Game.Modifier.GetApplyPartitionInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FBoneResult GetApplyPartInfo(); // Function /Script/Game.Modifier.GetApplyPartInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector GetApplyLocation(); // Function /Script/Game.Modifier.GetApplyLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector GetApplyBoneLocation(); // Function /Script/Game.Modifier.GetApplyBoneLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetAloneMaxCount(); // Function /Script/Game.Modifier.GetAloneMaxCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CheckModifierTag(__int32 ModifierID, struct FString& InTagName); // Function /Script/Game.Modifier.CheckModifierTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	void ApplyAttributeChange(struct UAbilityComponentBase* AbilityTarget, struct FAttributeChangeValue& AttributeChange, enum class EModifierEffectType InType); // Function /Script/Game.Modifier.ApplyAttributeChange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AddRemainingTime(float InTime, bool bLimitInKeepTime); // Function /Script/Game.Modifier.AddRemainingTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddCurOverlaid(__int32 InOverlaid); // Function /Script/Game.Modifier.AddCurOverlaid // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MonBloodBar
// Size: 0x0 (Inherited: 0x0)
struct UMonBloodBar : UUserWidgetAnimation {
	struct TArray<struct FMonBloodBarData> UseBloodBars; // 0x0(0x0)
	struct TArray<struct UHPWidgetBase*> UseBloodWidgets; // 0x0(0x0)
	struct TArray<struct UHPWidgetBase*> UnuseBloodWidgets; // 0x0(0x0)
	struct UCanvasPanel* RootContainer; // 0x0(0x0)
	struct TArray<struct UHPWidgetBase*> AllMonBloodBarClass; // 0x0(0x0)
	__int32 DefaultMonBloodBarCount; // 0x0(0x0)
	char pad_30C[0xAC]; // 0x0(0x0)
};

 // Class /Script/Game.MonsterAnimMoveStateBase
// Size: 0x0 (Inherited: 0x0)
struct UMonsterAnimMoveStateBase : UObject {
	struct AGameAICharacter* Monster; // 0x0(0x0)
	struct UAnimInstance_Humanoid* AnimInstance; // 0x0(0x0)
	char pad_38[0x38]; // 0x0(0x0)

	void Update(float DeltaTime); // Function /Script/Game.MonsterAnimMoveStateBase.Update // (Native|Public|BlueprintCallable) // @ game+0
	void Start(); // Function /Script/Game.MonsterAnimMoveStateBase.Start // (Native|Public|BlueprintCallable) // @ game+0
	void Exit(); // Function /Script/Game.MonsterAnimMoveStateBase.Exit // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MonsterAnimMoveStateDistanceMap
// Size: 0x0 (Inherited: 0x0)
struct UMonsterAnimMoveStateDistanceMap : UMonsterAnimMoveStateBase {
	float EnableLerpTimeProgress; // 0x0(0x0)
	float CurrentAccDirBlendSpd; // 0x0(0x0)
	char pad_78[0xE8]; // 0x0(0x0)
};

 // Class /Script/Game.MonsterAnimMoveStateIdle
// Size: 0x0 (Inherited: 0x0)
struct UMonsterAnimMoveStateIdle : UMonsterAnimMoveStateBase {
	struct UAnimMontage* IdleMontage; // 0x0(0x0)
};

 // Class /Script/Game.MonsterAnimMoveStateLaunch
// Size: 0x0 (Inherited: 0x0)
struct UMonsterAnimMoveStateLaunch : UMonsterAnimMoveStateDistanceMap {
	struct TMap<struct FString, struct FMontageSectionInfo> LaunchSectionInfos; // 0x0(0x0)
};

 // Class /Script/Game.MonsterAnimMoveStateRun
// Size: 0x0 (Inherited: 0x0)
struct UMonsterAnimMoveStateRun : UMonsterAnimMoveStateBase {
};

 // Class /Script/Game.MonsterAnimMoveStateStop
// Size: 0x0 (Inherited: 0x0)
struct UMonsterAnimMoveStateStop : UMonsterAnimMoveStateBase {
	struct UAnimMontage* StopMontage; // 0x0(0x0)
	char pad_78[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.MonsterBubble
// Size: 0x0 (Inherited: 0x0)
struct AMonsterBubble : ATextRenderActor {
	char pad_228[0x18]; // 0x0(0x0)
	struct UStaticMeshComponent* BubbleBackGround; // 0x0(0x0)
	struct UStaticMeshComponent* BubbleBackGroundUpper; // 0x0(0x0)
	struct UStaticMeshComponent* BubbleBackGroundLower; // 0x0(0x0)
	char pad_258[0x10]; // 0x0(0x0)
	float ScaleFactor; // 0x0(0x0)
	float WorldSize; // 0x0(0x0)
	float UpBackGroundOffsetZ; // 0x0(0x0)
	float DownBackGroundOffsetZ; // 0x0(0x0)
	float LineHeight; // 0x0(0x0)
	float LineBackGroundScale; // 0x0(0x0)
	float MidOffsetScale; // 0x0(0x0)
	__int32 StrLength; // 0x0(0x0)
	float ShowHideTime; // 0x0(0x0)
	char pad_28C[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.MonsterBubbleSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UMonsterBubbleSubsystem : UGameWorldSubsystem {
	char pad_48[0x8]; // 0x0(0x0)
	struct TMap<struct TWeakObjectPtr<struct AGameCharacter>, struct FMonsterBubbleInfo> BubbleMap; // 0x0(0x0)
	struct UObject* BubbleClass; // 0x0(0x0)
	struct UObject* UIWidgetClass; // 0x0(0x0)
	char pad_B0[0x18]; // 0x0(0x0)

	void AddBubble(struct FString Tag, struct FMonsterBubbleInfo BubbleInfo); // Function /Script/Game.MonsterBubbleSubsystem.AddBubble // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MonsterBunker
// Size: 0x0 (Inherited: 0x0)
struct AMonsterBunker : ABunker {
};

 // Class /Script/Game.MonsterDirectionWidget
// Size: 0x0 (Inherited: 0x0)
struct UMonsterDirectionWidget : UUserWidget {
	struct FSoftClassPath ItemWidgetPath; // 0x0(0x0)
	struct UPanelWidget* MyContainer; // 0x0(0x0)
	char pad_298[0x8]; // 0x0(0x0)

	void SetState(bool bWarning); // Function /Script/Game.MonsterDirectionWidget.SetState // (Final|Native|Public) // @ game+0
	void OnHit(struct FApplyDamageResultData& DamageResultData); // Function /Script/Game.MonsterDirectionWidget.OnHit // (Final|Native|Public|HasOutParms) // @ game+0
	struct UMonsterDirectionItemBase* GetUnUse(); // Function /Script/Game.MonsterDirectionWidget.GetUnUse // (Final|Native|Public|Const) // @ game+0
	struct UMonsterDirectionItemBase* Add(struct AGameCharacter* InAddMon); // Function /Script/Game.MonsterDirectionWidget.Add // (Final|Native|Public|Const) // @ game+0
};

 // Class /Script/Game.MonsterDirectionItemBase
// Size: 0x0 (Inherited: 0x0)
struct UMonsterDirectionItemBase : UUserWidget {
	struct TWeakObjectPtr<struct AGameCharacter> BindCharacter; // 0x0(0x0)
	char pad_280[0x8]; // 0x0(0x0)
	struct UCanvasPanelSlot* HitNodeSlot; // 0x0(0x0)
	char pad_290[0x10]; // 0x0(0x0)

	void Reset(); // Function /Script/Game.MonsterDirectionItemBase.Reset // (Final|Native|Public) // @ game+0
	void OnWarning(bool bWarning); // Function /Script/Game.MonsterDirectionItemBase.OnWarning // (Event|Public|BlueprintEvent) // @ game+0
	void OnHit(); // Function /Script/Game.MonsterDirectionItemBase.OnHit // (Event|Public|BlueprintEvent) // @ game+0
	void OnHardHit(); // Function /Script/Game.MonsterDirectionItemBase.OnHardHit // (Event|Public|BlueprintEvent) // @ game+0
	void Init(struct AGameCharacter* InCharacter); // Function /Script/Game.MonsterDirectionItemBase.Init // (Final|Native|Public) // @ game+0
	void Hit(float InValue); // Function /Script/Game.MonsterDirectionItemBase.Hit // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.MonsterMoveContextObject
// Size: 0x0 (Inherited: 0x0)
struct UMonsterMoveContextObject : UObject {
	struct UAnimInstance_Humanoid* AnimInstance; // 0x0(0x0)
	char pad_30[0x8]; // 0x0(0x0)
	struct FVector Acceleration; // 0x0(0x0)
	struct FVector Velocity; // 0x0(0x0)
	float VelocityValue; // 0x0(0x0)
	float LastVelocityValue; // 0x0(0x0)
	struct TMap<enum class EGamePlayerMoveState, struct UMonsterAnimMoveStateBase*> AnimMoveStates; // 0x0(0x0)
	struct UAnimDistanceMappingCurveData* DistanceMappingData; // 0x0(0x0)
	enum class EGamePlayerMoveState NextState; // 0x0(0x0)
	enum class EGamePlayerMoveState CurState; // 0x0(0x0)
	enum class EGamePlayerMoveState LastState; // 0x0(0x0)
	char pad_B3[0x5]; // 0x0(0x0)
	struct AGameAICharacter* AICharacter; // 0x0(0x0)
};

 // Class /Script/Game.MontageAbilityState
// Size: 0x0 (Inherited: 0x0)
struct UMontageAbilityState : UGameAbilityBuffer {
	char pad_D0[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.MontageStateComponent
// Size: 0x0 (Inherited: 0x0)
struct UMontageStateComponent : USkillEffectComponent {
	struct UMontageAbilityState* MontageAbilityStateClass; // 0x0(0x0)
	struct UMontageAbilityState* CurrentMontageAbilityState; // 0x0(0x0)
	struct UPlaySkillMontageComponent* PlaySkillMontage; // 0x0(0x0)
	struct AGameSkill* CurrentSkill; // 0x0(0x0)
	bool bBunkerEdgeBackSkill; // 0x0(0x0)
	bool bInMoveLimit; // 0x0(0x0)
	bool bSamePriorityBreakable; // 0x0(0x0)
	bool bWaitForAnimStop; // 0x0(0x0)
	bool bDodgeSkillBreakable; // 0x0(0x0)
	bool bCanTurnForce; // 0x0(0x0)
	bool bCastSuccess; // 0x0(0x0)
	bool bAimWithSkill; // 0x0(0x0)
	float EndSkillNotifyTime; // 0x0(0x0)
	char pad_EC[0x4]; // 0x0(0x0)
	struct TArray<__int32> ActiveDeriverdSkillIDs; // 0x0(0x0)
	struct TArray<__int32> PriorityBreakableSkillIDs; // 0x0(0x0)
	char pad_110[0x18]; // 0x0(0x0)

	bool IsMoveWillInterruptSkill(); // Function /Script/Game.MontageStateComponent.IsMoveWillInterruptSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.MotionCurveModifier
// Size: 0x0 (Inherited: 0x0)
struct UMotionCurveModifier : UObject {
	struct TWeakObjectPtr<struct UAnimSequenceBase> Animation; // 0x0(0x0)
	float StartTime; // 0x0(0x0)
	float EndTime; // 0x0(0x0)
	float PreviousPosition; // 0x0(0x0)
	float CurrentPosition; // 0x0(0x0)
	float Weight; // 0x0(0x0)
	char pad_44[0xC]; // 0x0(0x0)
	struct FTransform StartTransform; // 0x0(0x0)
	float ActualStartTime; // 0x0(0x0)
	struct FDelegate OnActivateDelegate; // 0x0(0x0)
	struct FDelegate OnUpdateDelegate; // 0x0(0x0)
	struct FDelegate OnDeactivateDelegate; // 0x0(0x0)
	enum class EMotionCurveModifierState State; // 0x0(0x0)
	char pad_B5[0xB]; // 0x0(0x0)
};

 // Class /Script/Game.MotionCurveModifier_Warp
// Size: 0x0 (Inherited: 0x0)
struct UMotionCurveModifier_Warp : UMotionCurveModifier {
	struct FName WarpTargetName; // 0x0(0x0)
	enum class EWarpPointAnimProvider WarpPointAnimProvider; // 0x0(0x0)
	bool bUseProviderRotation; // 0x0(0x0)
	char pad_CA[0x6]; // 0x0(0x0)
	struct FTransform WarpPointAnimTransform; // 0x0(0x0)
	struct FName WarpPointAnimBoneName; // 0x0(0x0)
	bool bWarpTranslation; // 0x0(0x0)
	bool bIgnoreZAxis; // 0x0(0x0)
	enum class EAlphaBlendOption AddTranslationEasingFunc; // 0x0(0x0)
	char pad_10B[0x5]; // 0x0(0x0)
	struct UCurveFloat* AddTranslationEasingCurve; // 0x0(0x0)
	bool bWarpRotation; // 0x0(0x0)
	enum class EMotionWarpRotationType RotationType; // 0x0(0x0)
	char pad_11A[0x2]; // 0x0(0x0)
	float WarpRotationTimeMultiplier; // 0x0(0x0)
	struct FTransform CachedTargetTransform; // 0x0(0x0)
	struct FQuat CachedTargetQuat; // 0x0(0x0)
	char pad_160[0x40]; // 0x0(0x0)
};

 // Class /Script/Game.MotionCurveModifier_SimpleWarp
// Size: 0x0 (Inherited: 0x0)
struct UMotionCurveModifier_SimpleWarp : UMotionCurveModifier_Warp {
};

 // Class /Script/Game.MotionCurveModifier_Scale
// Size: 0x0 (Inherited: 0x0)
struct UMotionCurveModifier_Scale : UMotionCurveModifier {
	struct FVector Scale; // 0x0(0x0)
	char pad_CC[0x4]; // 0x0(0x0)

	struct UMotionCurveModifier_Scale* AddMotionCurveModifierScale(struct UTargetWarpingComponent* InTargetWarpingComp, struct UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, struct FVector InScale); // Function /Script/Game.MotionCurveModifier_Scale.AddMotionCurveModifierScale // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MotionCurveModifier_PeakWarp
// Size: 0x0 (Inherited: 0x0)
struct UMotionCurveModifier_PeakWarp : UMotionCurveModifier_Warp {
};

 // Class /Script/Game.MotionCurveModifier_SkewWarp
// Size: 0x0 (Inherited: 0x0)
struct UMotionCurveModifier_SkewWarp : UMotionCurveModifier_Warp {

	struct UMotionCurveModifier_SkewWarp* AddMotionCurveModifierSkewWarp(struct UTargetWarpingComponent* InMotionWarpingComp, struct UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, struct FName InWarpTargetName, enum class EWarpPointAnimProvider InWarpPointAnimProvider, struct FTransform InWarpPointAnimTransform, struct FName InWarpPointAnimBoneName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, enum class EMotionWarpRotationType InRotationType, float InWarpRotationTimeMultiplier); // Function /Script/Game.MotionCurveModifier_SkewWarp.AddMotionCurveModifierSkewWarp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MoveContextObject
// Size: 0x0 (Inherited: 0x0)
struct UMoveContextObject : UObject {
	struct UGameCharacterAnimInstance* AnimInstance; // 0x0(0x0)
	char pad_30[0x10]; // 0x0(0x0)
	struct FVector LastAcceleration; // 0x0(0x0)
	struct FVector LastValidAcceleration; // 0x0(0x0)
	struct FVector Acceleration; // 0x0(0x0)
	bool bHasAccelerationInput; // 0x0(0x0)
	char pad_65[0x3]; // 0x0(0x0)
	float SpeedBefore; // 0x0(0x0)
	struct FVector VelocityBefore; // 0x0(0x0)
	struct FVector DiffAcceration; // 0x0(0x0)
	struct FVector LastVelocity; // 0x0(0x0)
	float YawDeltaSinceLastFrame; // 0x0(0x0)
	float RotValue; // 0x0(0x0)
	float RushCounter; // 0x0(0x0)
	bool bPlayIdleMontage; // 0x0(0x0)
	char pad_9D[0x3]; // 0x0(0x0)
	__int32 CachedAccNum; // 0x0(0x0)
	float AdvanceSkillRatationRatio; // 0x0(0x0)
	float AdvanceSkillDecelerationRatio; // 0x0(0x0)
	float AdvanceSkillAecelerationRatio; // 0x0(0x0)
	float AccCharAngle; // 0x0(0x0)
	bool bSkipRushStart; // 0x0(0x0)
	bool bLeftPiovt; // 0x0(0x0)
	bool bIsAdvanceWalk; // 0x0(0x0)
	char pad_B7[0x1]; // 0x0(0x0)
	float TargetFramerate; // 0x0(0x0)
	char pad_BC[0x4]; // 0x0(0x0)
	struct FRuntimeFloatCurve DecelerationCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve AccelerationCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve FrictionCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve RotationCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve RotationCurve_Bunker; // 0x0(0x0)
	struct FRuntimeFloatCurve PivotingAccFactorCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve ShootRunningAccFactorCurve; // 0x0(0x0)
	struct FRuntimeFloatCurve RushingAccFactorCurve; // 0x0(0x0)
	struct TMap<enum class EGamePlayerMoveState, struct UAnimMoveStateBase*> AnimMoveStates; // 0x0(0x0)
	struct UAnimDistanceMappingCurveData* DistanceMappingData; // 0x0(0x0)
	enum class EGamePlayerMoveState NextState; // 0x0(0x0)
	enum class EGamePlayerMoveState CurState; // 0x0(0x0)
	enum class EGamePlayerMoveState LastState; // 0x0(0x0)
	char pad_55B[0x5]; // 0x0(0x0)
	struct FRuntimeFloatCurve LeanCurveX; // 0x0(0x0)
	struct FRuntimeFloatCurve LeanCurveY; // 0x0(0x0)
	struct FRuntimeFloatCurve MobileLeanCurveX; // 0x0(0x0)
	struct FRuntimeFloatCurve MobileLeanCurveY; // 0x0(0x0)
	float LeanSpeed; // 0x0(0x0)
	float WalkLeanRecoverSpeed; // 0x0(0x0)
	float SkillLeanRecoverSpeed; // 0x0(0x0)
	float MobileLeanSpeed; // 0x0(0x0)
	float MobileWalkLeanRecoverSpeed; // 0x0(0x0)
	float MobileSkillLeanRecoverSpeed; // 0x0(0x0)
	float PivotingEnterSpeedScale; // 0x0(0x0)
	float RootYawBlendOutSpd; // 0x0(0x0)
	float BunkerRotFactor; // 0x0(0x0)
	float BunkerAccFactor; // 0x0(0x0)
	float BunkerDeceFactor; // 0x0(0x0)
	char pad_7AC[0x54]; // 0x0(0x0)
};

 // Class /Script/Game.SkillInterruptComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillInterruptComponent : USkillEffectComponent {
	char pad_C0[0x1]; // 0x0(0x0)
	bool bHasInterrupted; // 0x0(0x0)
	char pad_C2[0x6]; // 0x0(0x0)

	void ServerInterruptSkill(); // Function /Script/Game.SkillInterruptComponent.ServerInterruptSkill // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0
	bool ReceiveCheckInterrupt(float DeltaTime); // Function /Script/Game.SkillInterruptComponent.ReceiveCheckInterrupt // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.MoveInterruptComponent
// Size: 0x0 (Inherited: 0x0)
struct UMoveInterruptComponent : USkillInterruptComponent {
};

 // Class /Script/Game.MovieClipSubtitlesTextBlock
// Size: 0x0 (Inherited: 0x0)
struct UMovieClipSubtitlesTextBlock : UHyperTextBlock {
	char pad_300[0x10]; // 0x0(0x0)
	struct TArray<struct FVector2D> TextInfoSections; // 0x0(0x0)
	char pad_320[0x20]; // 0x0(0x0)
};

 // Class /Script/Game.MultipleProgressBar
// Size: 0x0 (Inherited: 0x0)
struct UMultipleProgressBar : UWidget {
	struct FMultipleProgressBarStyle WidgetStyle; // 0x0(0x0)
	struct TArray<float> Percents; // 0x0(0x0)
	enum class EMultipleProgressBarFillType BarFillType; // 0x0(0x0)
	char pad_259[0x3]; // 0x0(0x0)
	struct FVector2D BorderPadding; // 0x0(0x0)
	struct FDelegate PercentsDelegate; // 0x0(0x0)
	char pad_274[0x4]; // 0x0(0x0)
	struct TArray<struct FLinearColor> FillColorAndOpacitys; // 0x0(0x0)
	struct FDelegate FillColorAndOpacitysDelegate; // 0x0(0x0)
	char pad_298[0x10]; // 0x0(0x0)

	void SetPercents(struct TArray<float>& InPercents); // Function /Script/Game.MultipleProgressBar.SetPercents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetFillColorAndOpacitys(struct TArray<struct FLinearColor>& InColors); // Function /Script/Game.MultipleProgressBar.SetFillColorAndOpacitys // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.NavArea_Air
// Size: 0x0 (Inherited: 0x0)
struct UNavArea_Air : UNavArea {
};

 // Class /Script/Game.NoCookConstructionActor
// Size: 0x0 (Inherited: 0x0)
struct ANoCookConstructionActor : AActor {
};

 // Class /Script/Game.NpcAIDebugComponent
// Size: 0x0 (Inherited: 0x0)
struct UNpcAIDebugComponent : UActorComponent {
	char pad_B0[0x10]; // 0x0(0x0)
	bool DrawTargetActorInfo; // 0x0(0x0)
	bool DrawSceneTargetInfo; // 0x0(0x0)
	bool DrawArrow; // 0x0(0x0)
	char pad_C3[0x1]; // 0x0(0x0)
	__int32 ArrowSize; // 0x0(0x0)
	bool DrawFightParamInfo; // 0x0(0x0)
	bool DrawSafeArea; // 0x0(0x0)
	bool DrawAIEvent; // 0x0(0x0)
	bool DrawToken; // 0x0(0x0)
	bool DrawAIDirectorInfo; // 0x0(0x0)
	bool DrawMaxWalkSpeed; // 0x0(0x0)
	char pad_CE[0x2]; // 0x0(0x0)
	struct TArray<struct FSkillWeightDebugInfo> DebugSkillWeightInfos; // 0x0(0x0)
	char pad_E0[0x50]; // 0x0(0x0)
};

 // Class /Script/Game.NPCSpawnPoint
// Size: 0x0 (Inherited: 0x0)
struct ANPCSpawnPoint : AActor {
	bool bPlayFX; // 0x0(0x0)
	char pad_221[0x7]; // 0x0(0x0)
	struct UFXSystemAsset* SpawnFX; // 0x0(0x0)
	struct UCapsuleComponent* Capsule; // 0x0(0x0)
	struct USceneComponent* FXPlayPoint; // 0x0(0x0)
};

 // Class /Script/Game.NPCSpawner
// Size: 0x0 (Inherited: 0x0)
struct ANPCSpawner : ANPCSpawnPoint {
	__int32 ID; // 0x0(0x0)
	__int32 Level; // 0x0(0x0)
	struct FString Team; // 0x0(0x0)
	enum class ECharacterType Type; // 0x0(0x0)
	char pad_259[0x3]; // 0x0(0x0)
	unsigned __int32 AI; // 0x0(0x0)
	struct FSpecializedSkillsConfig SpecializedSkillsConfig; // 0x0(0x0)
	bool bIsTeamCaptain; // 0x0(0x0)
	char pad_281[0x7]; // 0x0(0x0)
	struct APatrolPoint_New* PatrolPoint; // 0x0(0x0)
	struct TArray<struct UAIEvent*> AIEvents; // 0x0(0x0)
	bool bSpawnNPCImmediately; // 0x0(0x0)
	char pad_2A1[0x3]; // 0x0(0x0)
	float DelaySpawnTime; // 0x0(0x0)
	float SpawnProbability; // 0x0(0x0)
	__int32 SpecialDropGDPLN; // 0x0(0x0)

	struct AGameCharacter* SpawnNpc(); // Function /Script/Game.NPCSpawner.SpawnNpc // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.OnlineGameModeBase
// Size: 0x0 (Inherited: 0x0)
struct AOnlineGameModeBase : AGameBaseMode {
	char bWaitClient : 1; // 0x0(0x0)
	char pad_358_1 : 7; // 0x0(0x0)
	char pad_359[0x3]; // 0x0(0x0)
	__int32 MaxRPCPerNetUpdate; // 0x0(0x0)
	char pad_360[0x8]; // 0x0(0x0)
	struct TMap<struct FUniqueNetIdRepl, struct TWeakObjectPtr<struct APlayerController>> ReConnectedPlayerControllersMap; // 0x0(0x0)
	struct TMap<struct FUniqueNetIdRepl, struct TWeakObjectPtr<struct UNetConnection>> PlayerId2NetConnectionMap; // 0x0(0x0)
};

 // Class /Script/Game.ParticleAnalyseTooler
// Size: 0x0 (Inherited: 0x0)
struct UParticleAnalyseTooler : UBlueprintFunctionLibrary {

	void WriteStatisticsInfoToFile(); // Function /Script/Game.ParticleAnalyseTooler.WriteStatisticsInfoToFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UTexture2D* GetParticleThumbnail(struct UParticleSystem* Particle); // Function /Script/Game.ParticleAnalyseTooler.GetParticleThumbnail // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ClearStatisticsInfos(); // Function /Script/Game.ParticleAnalyseTooler.ClearStatisticsInfos // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ClearRuntimeInfo(); // Function /Script/Game.ParticleAnalyseTooler.ClearRuntimeInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FParticleSystemComponentRuntimeInfo CalcParticleRuntimeInfo(struct UParticleSystemComponent* Particle); // Function /Script/Game.ParticleAnalyseTooler.CalcParticleRuntimeInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ParticleModuleTypeDataSkeletalMesh
// Size: 0x0 (Inherited: 0x0)
struct UParticleModuleTypeDataSkeletalMesh : UParticleModuleTypeDataBase {
	struct USkeletalMesh* Mesh; // 0x0(0x0)
	struct FSingleAnimationPlayData Animation; // 0x0(0x0)
	char bFollowAttached : 1; // 0x0(0x0)
	char bCastShadow : 1; // 0x0(0x0)
	char bCastDynamicShadow : 1; // 0x0(0x0)
	char bCastSelfShadowOnly : 1; // 0x0(0x0)
	char pad_50_4 : 4; // 0x0(0x0)
	char pad_51[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.ParticleModuleTypeDataSubParticle
// Size: 0x0 (Inherited: 0x0)
struct UParticleModuleTypeDataSubParticle : UParticleModuleTypeDataBase {
	struct UParticleSystem* Template; // 0x0(0x0)
	char bFollowAttached : 1; // 0x0(0x0)
	char pad_38_1 : 7; // 0x0(0x0)
	char pad_39[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.PatrolLogicComponent
// Size: 0x0 (Inherited: 0x0)
struct UPatrolLogicComponent : UAILogicComponent {
	char pad_B0[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.PatrolPoint_New
// Size: 0x0 (Inherited: 0x0)
struct APatrolPoint_New : AActor {
	struct UCapsuleComponent* Capsule; // 0x0(0x0)
	struct UBillboardComponent* BillBoard; // 0x0(0x0)
	struct TArray<struct FWeightPatrolPoint> NextPoints; // 0x0(0x0)
	struct FVector2D RandomStayTime; // 0x0(0x0)
	bool bPlayMontage; // 0x0(0x0)
	char pad_249[0x7]; // 0x0(0x0)
	struct UAnimMontage* Montage; // 0x0(0x0)
};

 // Class /Script/Game.PauseFrameComponent
// Size: 0x0 (Inherited: 0x0)
struct UPauseFrameComponent : UActorComponent {
	struct TArray<struct UFXSystemComponent*> KeepPaticles; // 0x0(0x0)
	struct AGameCharacter* OwnerActor; // 0x0(0x0)
	struct UAbilityComponent* AbilityComponent; // 0x0(0x0)
	struct UAnimMontage* CurrentSkillMontage; // 0x0(0x0)
	struct TArray<struct UFXSystemComponent*> SpawnedPaticles; // 0x0(0x0)
	char pad_E8[0x8]; // 0x0(0x0)
	float CurPauseFrameTime; // 0x0(0x0)
	char pad_F4[0x4]; // 0x0(0x0)

	void OnSkillCancel(__int32 InSkillId, enum class ESkillInterruptedType InType); // Function /Script/Game.PauseFrameComponent.OnSkillCancel // (Final|Native|Public) // @ game+0
	void OnPauseFrame(float PauseFrameTime, __int32 InSkillId); // Function /Script/Game.PauseFrameComponent.OnPauseFrame // (Final|Native|Public) // @ game+0
	bool IsPauseFrame(); // Function /Script/Game.PauseFrameComponent.IsPauseFrame // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void ClientPauseFrame(bool bStart); // Function /Script/Game.PauseFrameComponent.ClientPauseFrame // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
};

 // Class /Script/Game.PerformanceAnimConditionBase
// Size: 0x0 (Inherited: 0x0)
struct UPerformanceAnimConditionBase : UObject {
};

 // Class /Script/Game.PerformanceAnimCondition_SuitMatching
// Size: 0x0 (Inherited: 0x0)
struct UPerformanceAnimCondition_SuitMatching : UPerformanceAnimConditionBase {
	float SuitId_1; // 0x0(0x0)
	float SuitId_2; // 0x0(0x0)
	float SuitId_3; // 0x0(0x0)
	char pad_34[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.PerformanceAnimCondition_TimeMatching
// Size: 0x0 (Inherited: 0x0)
struct UPerformanceAnimCondition_TimeMatching : UPerformanceAnimConditionBase {
	float TimeRange_Min; // 0x0(0x0)
	float TimeRange_Max; // 0x0(0x0)
};

 // Class /Script/Game.PerformanceManager
// Size: 0x0 (Inherited: 0x0)
struct APerformanceManager : AActor {
	char pad_220[0x8]; // 0x0(0x0)
	struct APlayerController* PlayerController; // 0x0(0x0)
};

 // Class /Script/Game.PhysicalMaterialMaskUserData
// Size: 0x0 (Inherited: 0x0)
struct UPhysicalMaterialMaskUserData : UAssetUserData {
	struct UPhysicalMaterial* PhysMaterial_Black; // 0x0(0x0)
	struct UPhysicalMaterial* PhysMaterial_Red; // 0x0(0x0)
	struct UPhysicalMaterial* PhysMaterial_Green; // 0x0(0x0)
	struct UPhysicalMaterial* PhysMaterial_Blue; // 0x0(0x0)
	struct TArray<unsigned __int32> MaskData; // 0x0(0x0)
	__int32 SizeX; // 0x0(0x0)
	__int32 SizeY; // 0x0(0x0)
};

 // Class /Script/Game.PhysXOptimizer
// Size: 0x0 (Inherited: 0x0)
struct APhysXOptimizer : AActor {
	bool bEnableOptimization; // 0x0(0x0)
	char pad_221[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.PlayerControlRotationLimitComponent
// Size: 0x0 (Inherited: 0x0)
struct UPlayerControlRotationLimitComponent : UActorComponent {
	char pad_B0[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.PlayerMovementComponent
// Size: 0x0 (Inherited: 0x0)
struct UPlayerMovementComponent : UBaseMovementComponent {
	struct UCharacterStateMachineComponent* CharacterStateMachineComponent; // 0x0(0x0)
	float AutoRushTime; // 0x0(0x0)
	float AutoRushSpeedScale; // 0x0(0x0)
	char bCustomRotation : 1; // 0x0(0x0)
	float LandLimitTime; // 0x0(0x0)
	float FallDistance; // 0x0(0x0)
	float CurrentLandTime; // 0x0(0x0)
	float FallSpeed; // 0x0(0x0)
	float DistanceTriggerFalling; // 0x0(0x0)
	float Drag; // 0x0(0x0)
	struct FVector2D LandBlockTimeRange; // 0x0(0x0)
	struct FVector2D JumpToLandTimeRange; // 0x0(0x0)
	float LandingAnimStopTime_Falling; // 0x0(0x0)
	float LandingAnimStopTime_Jump; // 0x0(0x0)
	struct FRuntimeFloatCurve Curve; // 0x0(0x0)
	bool bDebugPrintJumpInfo; // 0x0(0x0)
	char pad_D09_1 : 7; // 0x0(0x0)
	char pad_D0A[0x2]; // 0x0(0x0)
	float JumpSpeedUpRatio; // 0x0(0x0)
	float LandFrictionFactor; // 0x0(0x0)
	float JumpSpeedUpRatioCoolDown; // 0x0(0x0)
	float fMaxValidStartToCrossDist; // 0x0(0x0)
	float fMaxValidBunkerCrossLength; // 0x0(0x0)
	float fMaxValidBunkerCrossHeight; // 0x0(0x0)
	float fMinValidBunkerEdgeWidth; // 0x0(0x0)
	float fMaxValidMovePredictionLength_Cross; // 0x0(0x0)
	float fCrossLimitAngle; // 0x0(0x0)
	float BunkerCrossMaxDistance; // 0x0(0x0)
	char pad_D34[0x4]; // 0x0(0x0)
	struct FRuntimeFloatCurve CurveCrossMaxDistanceScale; // 0x0(0x0)
	struct FRuntimeFloatCurve CurveCrossMaxDistanceScaleByLength; // 0x0(0x0)
	struct FRuntimeFloatCurve CrossLandAdditiveCurve; // 0x0(0x0)
	struct FName CrossStarPosName; // 0x0(0x0)
	struct FName CrossEndPosName; // 0x0(0x0)
	float fMaxValidStartToBunkerDist; // 0x0(0x0)
	float fMaxValidBunkerInteractHeight; // 0x0(0x0)
	float fMaxValidBunkerInteractHeightOffset; // 0x0(0x0)
	float fMinValidBunkerInteractEdgeWidth; // 0x0(0x0)
	float fMinValidBunkerMoveEdgeWidth; // 0x0(0x0)
	float fMaxValidMovePredictionLength_Bunker; // 0x0(0x0)
	struct FName BunkerEnterPosName; // 0x0(0x0)
	char pad_F00[0x18]; // 0x0(0x0)
	struct AGameCharacter* m_lpGameCharacter; // 0x0(0x0)
	struct UCurveFloat* AimRotCurve; // 0x0(0x0)
	char pad_F28[0x50]; // 0x0(0x0)
	float SkillRotationTime; // 0x0(0x0)
	char pad_F7C[0x4]; // 0x0(0x0)
	float MaxServerSafeAcceptPositionSquared; // 0x0(0x0)
	char pad_F84[0x4]; // 0x0(0x0)
	struct UMoveContextObject* MoveCtxObj; // 0x0(0x0)
	float AimRotSpd; // 0x0(0x0)
	char pad_F94[0x39C]; // 0x0(0x0)

	void UpdateSkillDesireRotator(struct FRotator InDesireRotation, float RotSped, float DeltaYaw); // Function /Script/Game.PlayerMovementComponent.UpdateSkillDesireRotator // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void SetSkillDesireRotator_KeepRotator(struct FRotator InDesireRotation, float RotSped, float KeepTime); // Function /Script/Game.PlayerMovementComponent.SetSkillDesireRotator_KeepRotator // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void SetSkillDesireRotator(struct FRotator InDesireRotation); // Function /Script/Game.PlayerMovementComponent.SetSkillDesireRotator // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void SetSkillDesiredRotation(struct FRotator InDesireRotation); // Function /Script/Game.PlayerMovementComponent.SetSkillDesiredRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetAdvancedMovement(bool bIsAdvanced); // Function /Script/Game.PlayerMovementComponent.SetAdvancedMovement // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ServerSetTeleportLocation(struct FVector InLocation); // Function /Script/Game.PlayerMovementComponent.ServerSetTeleportLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0
	bool ReceiveCustomSpeedCurve(struct FCustomSpeedCurve& CustomSpeedCurve); // Function /Script/Game.PlayerMovementComponent.ReceiveCustomSpeedCurve // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	struct FRotator ReceiveCustomRotation(struct FRotator CurrentRotation, struct FRotator TargetRotation, float DeltaTime); // Function /Script/Game.PlayerMovementComponent.ReceiveCustomRotation // (Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0
	bool ReceiveCheckAllowRush(); // Function /Script/Game.PlayerMovementComponent.ReceiveCheckAllowRush // (Native|Event|Public|BlueprintEvent|Const) // @ game+0
	bool IsAdvancedAction(); // Function /Script/Game.PlayerMovementComponent.IsAdvancedAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetTureSpeed(); // Function /Script/Game.PlayerMovementComponent.GetTureSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FQuat GetSkillDesiredRotation(); // Function /Script/Game.PlayerMovementComponent.GetSkillDesiredRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct UMoveContextObject* GetMoveCtxObject(); // Function /Script/Game.PlayerMovementComponent.GetMoveCtxObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FCustomSpeedCurve GetCustomSpeed(bool bIsNormal); // Function /Script/Game.PlayerMovementComponent.GetCustomSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FRotator GetAimStateRotation(); // Function /Script/Game.PlayerMovementComponent.GetAimStateRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ClearLandBlockOnNextTick(bool bIsFalling); // Function /Script/Game.PlayerMovementComponent.ClearLandBlockOnNextTick // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PlayerPerformanceComponent
// Size: 0x0 (Inherited: 0x0)
struct UPlayerPerformanceComponent : UActorComponent {
	struct APerformanceManager* PerformanceManager; // 0x0(0x0)
	bool bControlAnimationPerformance; // 0x0(0x0)
	char pad_B9[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.PlayerTeamLogic
// Size: 0x0 (Inherited: 0x0)
struct APlayerTeamLogic : AAITeamLogic {
	char pad_358[0x8]; // 0x0(0x0)

	void OnQTESwitch(struct FQTESwitchParam& QTEParam); // Function /Script/Game.PlayerTeamLogic.OnQTESwitch // (Final|Native|Public|HasOutParms) // @ game+0
};

 // Class /Script/Game.PlayerWeapon
// Size: 0x0 (Inherited: 0x0)
struct APlayerWeapon : ACharacterAccessory {
	bool bDebugPrintScatter; // 0x0(0x0)
	enum class EWeaponState CurrentWeaponState; // 0x0(0x0)
	char pad_33A[0x2]; // 0x0(0x0)
	float CurrentShootAdditive; // 0x0(0x0)
	float ShootAdditiveSpeed; // 0x0(0x0)
	char pad_344[0x4]; // 0x0(0x0)
	struct UFXSystemComponent* FireEffect; // 0x0(0x0)
	struct TArray<struct UFXSystemComponent*> BulletFireEffect; // 0x0(0x0)
	struct FRecoil Recoil; // 0x0(0x0)
	struct FRotator LastRecoil; // 0x0(0x0)
	float OnceShotRecoilForceRevise; // 0x0(0x0)
	struct FSoftObjectPath RecoilRecoveryPath; // 0x0(0x0)
	struct UCurveVector* RecoilRecovery; // 0x0(0x0)
	struct UCurveFloat* RecoilForcePitchRateCurve; // 0x0(0x0)
	struct FVector RecoilLimitValue; // 0x0(0x0)
	struct FVector2D CurrentBreathShaking; // 0x0(0x0)
	bool bCanFiring; // 0x0(0x0)
	char pad_3DD[0x3]; // 0x0(0x0)
	float m_fPreheatValue; // 0x0(0x0)
	float m_fWaitPreheatTime; // 0x0(0x0)
	float m_fPreheatTime; // 0x0(0x0)
	char pad_3EC[0x4]; // 0x0(0x0)
	struct UCurveFloat* AddPreheatCurve; // 0x0(0x0)
	struct UCurveFloat* DecPreheatCurve; // 0x0(0x0)
	struct UCurveFloat* AddOverloadCurve; // 0x0(0x0)
	struct UCurveFloat* DecOverloadCurve; // 0x0(0x0)
	struct UCurveFloat* DecOverHeatCurve; // 0x0(0x0)
	struct UCurveFloat* HeatToShootSpeed; // 0x0(0x0)
	struct UCurveFloat* HeatToDamage; // 0x0(0x0)
	float m_fOverloadValue; // 0x0(0x0)
	float m_fOverloadTime; // 0x0(0x0)
	bool bActive; // 0x0(0x0)
	bool bOverHeat; // 0x0(0x0)
	char pad_432[0x2]; // 0x0(0x0)
	float m_fWaitOverloadTime; // 0x0(0x0)
	bool bLoadAnimInterrupt; // 0x0(0x0)
	char pad_439[0xF]; // 0x0(0x0)
	struct UMeshComponent* m_lpWeaponMesh; // 0x0(0x0)
	struct UMatineeCameraShake* m_lpCameraShake; // 0x0(0x0)
	struct UCurveFloat* CameraShakeCurve; // 0x0(0x0)
	struct UWwiseComponent* FireWwiseComp; // 0x0(0x0)
	struct UWeaponFirePointLightComponent* LightComponent; // 0x0(0x0)
	__int64 WeaponTemplateId; // 0x0(0x0)
	bool bCurrentUseWeapon; // 0x0(0x0)
	char pad_479[0x7]; // 0x0(0x0)
	struct FMulticastInlineDelegate PreWeaponFire; // 0x0(0x0)
	struct FMulticastInlineDelegate AllBulletHit; // 0x0(0x0)
	struct FMulticastInlineDelegate OnWeaponFire; // 0x0(0x0)
	struct FMulticastInlineDelegate OnBulletChange; // 0x0(0x0)
	struct FMulticastInlineDelegate OnWeaponShootRay; // 0x0(0x0)
	struct FMulticastInlineDelegate OnClientPreheat; // 0x0(0x0)
	struct FMulticastInlineDelegate OnClientCharge; // 0x0(0x0)
	struct FMulticastInlineDelegate OnClientShoot; // 0x0(0x0)
	struct FMulticastInlineDelegate OnClientFireForceStop; // 0x0(0x0)
	char pad_510[0x3]; // 0x0(0x0)
	bool bShootForced; // 0x0(0x0)
	bool bWaitPlayBoltAnimation; // 0x0(0x0)
	char pad_515[0x5C]; // 0x0(0x0)
	char bUseTempClampAimOffset : 1; // 0x0(0x0)
	char pad_571_1 : 7; // 0x0(0x0)
	char pad_572[0x2]; // 0x0(0x0)
	float TempClampAimOffsetYaw; // 0x0(0x0)
	__int32 TempBulletID; // 0x0(0x0)
	__int32 TempBulletModifierRuntimeID; // 0x0(0x0)
	__int32 TempBulletActiveTimes; // 0x0(0x0)
	char pad_584[0x4]; // 0x0(0x0)
	struct UWeaponAbiliityComponent* AccessoryAbility; // 0x0(0x0)
	struct UAbilityComponent* OwnerAbility; // 0x0(0x0)
	struct UWeaponItem* WeaponItem; // 0x0(0x0)
	__int32 WeaponAppearID; // 0x0(0x0)
	char pad_5A4[0x4]; // 0x0(0x0)
	struct FWeaponTemplate WeaponInfo; // 0x0(0x0)
	struct FWeaponGrowTemplate WeaponGrowInfo; // 0x0(0x0)
	struct FWeaponFriction WeaponFriction; // 0x0(0x0)
	__int32 ShootBulletCost; // 0x0(0x0)
	__int32 ShootBulletLaunchCount; // 0x0(0x0)
	__int32 HomingEmitterID; // 0x0(0x0)
	char pad_EA4[0xC]; // 0x0(0x0)
	struct FBulletInfo BulletInfo; // 0x0(0x0)
	__int32 HitCount; // 0x0(0x0)
	__int32 CacheHitSameNum; // 0x0(0x0)
	struct AGameCharacter* PreHitTarget; // 0x0(0x0)
	bool bFixedAim; // 0x0(0x0)
	enum class EAimActionType AfterFireAimAction; // 0x0(0x0)
	char FireState; // 0x0(0x0)
	char pad_1253[0x1]; // 0x0(0x0)
	float ShootTimer; // 0x0(0x0)
	__int32 CurrentShootBullet; // 0x0(0x0)
	__int32 CurrentAllShootBullet; // 0x0(0x0)
	char pad_1260[0xC]; // 0x0(0x0)
	struct FVector2D WeaponScatterRange; // 0x0(0x0)
	char pad_1274[0xC]; // 0x0(0x0)
	struct FVector4 TmpWeaponScatterRange; // 0x0(0x0)
	struct FVector4 CurrentWeaponScatter; // 0x0(0x0)
	float CurShootScatterValue; // 0x0(0x0)
	float CurShootScatterAddTime; // 0x0(0x0)
	float CurShootScatterWaitTime; // 0x0(0x0)
	float CurShootScatterRecoverTime; // 0x0(0x0)
	struct UCurveFloat* ShootScatterAddCurve; // 0x0(0x0)
	struct UCurveFloat* ShootScatterRecoverCurve; // 0x0(0x0)
	char pad_12C0[0xD]; // 0x0(0x0)
	bool bShootComplateShopFire; // 0x0(0x0)
	bool bSemiAutomaticFired; // 0x0(0x0)
	char BurstBulletCount; // 0x0(0x0)
	char ForceShootCount; // 0x0(0x0)
	char pad_12D1[0x3]; // 0x0(0x0)
	float OverridePreHitTime; // 0x0(0x0)
	char pad_12D8[0x10]; // 0x0(0x0)
	struct FSoftClassPath TmpCrossHairUI; // 0x0(0x0)
	struct FSoftClassPath TmpAimCrossHairUI; // 0x0(0x0)
	struct FSoftClassPath TmpAmmunitionUI; // 0x0(0x0)
	char pad_1330[0x8]; // 0x0(0x0)
	float CurResponseInputTime; // 0x0(0x0)
	char pad_133C[0xC]; // 0x0(0x0)
	struct TArray<struct FWeaponScatterSigma> WeaponScatterSigma; // 0x0(0x0)
	float NormalUseFireSocketDistance; // 0x0(0x0)
	float AimUseFireSocketDistance; // 0x0(0x0)
	struct TArray<struct FWeaponReloadDelayInfo> ReloadDelayTimes; // 0x0(0x0)
	struct UFXSystemComponent* PathRef; // 0x0(0x0)
	struct UFXSystemComponent* HitParticleRef; // 0x0(0x0)
	struct UWwiseComponent* HitWiseComp; // 0x0(0x0)
	struct UParticleSystemComponent* PreFireEffect; // 0x0(0x0)
	struct UFXSystemComponent* PreheatEffect; // 0x0(0x0)
	struct TMap<struct FString, struct UAnimMontage*> SkillMontages; // 0x0(0x0)
	float MaxBulletCount; // 0x0(0x0)
	float CurBulletCount; // 0x0(0x0)
	struct TArray<struct FRayRpcHitInfo> RayRpcHitInfos; // 0x0(0x0)
	char pad_1400[0x8]; // 0x0(0x0)
	struct TArray<struct UModifierSpecialEffectObject*> ModifierSpecialEffects; // 0x0(0x0)
	struct TArray<struct FBulletModifierSpecialEffects> BulletModifierSpecialEffects; // 0x0(0x0)
	bool bSmokeActive; // 0x0(0x0)
	char pad_1429[0x3]; // 0x0(0x0)
	float CurrentShootSmokeValue; // 0x0(0x0)
	struct UFXSystemComponent* FireSmokeRef; // 0x0(0x0)
	struct TArray<struct FBulletEnchantInfo> EnchantInfos; // 0x0(0x0)
	struct UCurveFloat* BreathShakingYawCurve; // 0x0(0x0)
	struct UCurveFloat* BreathShakingPitchCurve; // 0x0(0x0)
	char pad_1458[0x8]; // 0x0(0x0)

	void SingleShoot(); // Function /Script/Game.PlayerWeapon.SingleShoot // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ShowFireLight(); // Function /Script/Game.PlayerWeapon.ShowFireLight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ShootFakeBullet(struct APlayerWeapon* lpWeapon, struct UAbilityComponentBase* lpAbility, struct FVector InPos, struct FVector InDir, __int32 InBulletID, __int32 BulletRunID, float FiringRangeUltimateLimit); // Function /Script/Game.PlayerWeapon.ShootFakeBullet // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0
	void ShootComplateShopFire(); // Function /Script/Game.PlayerWeapon.ShootComplateShopFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetWeaponState_Server(enum class EWeaponState WeaponState); // Function /Script/Game.PlayerWeapon.SetWeaponState_Server // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void SetWeaponBulletId(__int32 nWeaponBulletId); // Function /Script/Game.PlayerWeapon.SetWeaponBulletId // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void SetTempBulletID(__int32 TempBulletID, __int32 ModifierRunTimeID, __int32 UseTimes); // Function /Script/Game.PlayerWeapon.SetTempBulletID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetShootBulletLaunchCount(__int32 InCount); // Function /Script/Game.PlayerWeapon.SetShootBulletLaunchCount // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetNotShowFireLight(bool bNotShow); // Function /Script/Game.PlayerWeapon.SetNotShowFireLight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetLoadAnimInterrupt(bool bInterrupt); // Function /Script/Game.PlayerWeapon.SetLoadAnimInterrupt // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetHomingEmitterID(__int32 InID, bool bRemove); // Function /Script/Game.PlayerWeapon.SetHomingEmitterID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCurrentUseWeapon(bool bUse); // Function /Script/Game.PlayerWeapon.SetCurrentUseWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCrossHairUI(struct FString CrossHairUI); // Function /Script/Game.PlayerWeapon.SetCrossHairUI // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void SetAmmunitionUI(struct FString AmmunitionUI); // Function /Script/Game.PlayerWeapon.SetAmmunitionUI // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void SetAimCrossHairUI(struct FString AimCrossHairUI); // Function /Script/Game.PlayerWeapon.SetAimCrossHairUI // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
	void ServerShootTargets(struct FVector ShootStartPosition, struct TArray<struct FVector> ShootTargets, struct TArray<struct FVector> ShootCameraPosition); // Function /Script/Game.PlayerWeapon.ServerShootTargets // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults) // @ game+0
	void ServerRayShootTargets(struct FVector ShootStartPosition, struct TArray<struct FRayMultiHitInfo> InMultiHitInfos); // Function /Script/Game.PlayerWeapon.ServerRayShootTargets // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults) // @ game+0
	void ServerCanFiring(bool bFiring); // Function /Script/Game.PlayerWeapon.ServerCanFiring // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_ShootRay(); // Function /Script/Game.PlayerWeapon.Server_ShootRay // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0
	void ResetCurrentSmokeValue(); // Function /Script/Game.PlayerWeapon.ResetCurrentSmokeValue // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ReplaceWeaponParts(struct UWeaponParts* InWeaponParts); // Function /Script/Game.PlayerWeapon.ReplaceWeaponParts // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RemoveWeaponParts(enum class EWeaponSlotType InType); // Function /Script/Game.PlayerWeapon.RemoveWeaponParts // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool ReceiveStopFire(); // Function /Script/Game.PlayerWeapon.ReceiveStopFire // (Event|Protected|BlueprintEvent|Const) // @ game+0
	bool ReceiveStartReload(); // Function /Script/Game.PlayerWeapon.ReceiveStartReload // (Event|Protected|BlueprintEvent|Const) // @ game+0
	bool ReceiveShootBullet(); // Function /Script/Game.PlayerWeapon.ReceiveShootBullet // (Event|Protected|BlueprintEvent|Const) // @ game+0
	void ReceiveOnChangeState(char CurrentFireState, char PrevFireState); // Function /Script/Game.PlayerWeapon.ReceiveOnChangeState // (Native|Event|Protected|BlueprintEvent) // @ game+0
	bool ReceiveBreakFire(); // Function /Script/Game.PlayerWeapon.ReceiveBreakFire // (Event|Protected|BlueprintEvent|Const) // @ game+0
	void RandomShootTarets(struct FVector& ShootDir, __int32 ShootBulletCount, struct TArray<struct FVector>& OutShootPositions); // Function /Script/Game.PlayerWeapon.RandomShootTarets // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void PlayHitEffect(struct FVector StartLoc, struct FHitResult HitResult, __int32 BulletEnchantID); // Function /Script/Game.PlayerWeapon.PlayHitEffect // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0
	void OnWeaponShoot__DelegateSignature(__int32 FireTimeId, __int32 BulletCount); // DelegateFunction /Script/Game.PlayerWeapon.OnWeaponShoot__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnWeaponFire__DelegateSignature(char ForceShootCount); // DelegateFunction /Script/Game.PlayerWeapon.OnWeaponFire__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnRep_WeaponAppearID(); // Function /Script/Game.PlayerWeapon.OnRep_WeaponAppearID // (Final|Native|Protected) // @ game+0
	void OnRep_WaitPlayBoltAnimation(); // Function /Script/Game.PlayerWeapon.OnRep_WaitPlayBoltAnimation // (Final|Native|Protected) // @ game+0
	void OnRep_CurrentUseWeapon(); // Function /Script/Game.PlayerWeapon.OnRep_CurrentUseWeapon // (Final|Native|Public) // @ game+0
	void OnPreWeaponFire__DelegateSignature(); // DelegateFunction /Script/Game.PlayerWeapon.OnPreWeaponFire__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnFireBulletHit(struct FFireInfo Info, bool bStartFire); // Function /Script/Game.PlayerWeapon.OnFireBulletHit // (Final|Native|Public) // @ game+0
	void OnClientFireState__DelegateSignature(); // DelegateFunction /Script/Game.PlayerWeapon.OnClientFireState__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnBulletChange__DelegateSignature(__int32 CurBulletCount, __int32 LastBulletCount); // DelegateFunction /Script/Game.PlayerWeapon.OnBulletChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnAllBulletHit__DelegateSignature(); // DelegateFunction /Script/Game.PlayerWeapon.OnAllBulletHit__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void NetMulticast_ReceiveShootBullet(); // Function /Script/Game.PlayerWeapon.NetMulticast_ReceiveShootBullet // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	struct FVector LimitVRandCone(struct FVector& Dir, float ConeHalfAngle, float dVariance, float GaussRange); // Function /Script/Game.PlayerWeapon.LimitVRandCone // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FVector K2_GetShootPosition(); // Function /Script/Game.PlayerWeapon.K2_GetShootPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsShooting(); // Function /Script/Game.PlayerWeapon.IsShooting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsShootForced(); // Function /Script/Game.PlayerWeapon.IsShootForced // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsScattering(); // Function /Script/Game.PlayerWeapon.IsScattering // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool HasSilencer(); // Function /Script/Game.PlayerWeapon.HasSilencer // (Final|Native|Public|BlueprintCallable) // @ game+0
	void HandleSkillEnd(__int32 SkillID); // Function /Script/Game.PlayerWeapon.HandleSkillEnd // (Final|Native|Protected) // @ game+0
	enum class EWeaponState GetWeaponState(); // Function /Script/Game.PlayerWeapon.GetWeaponState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetWeaponSocketBySocketName(enum class EWeaponSlotType InType, struct FTransform& OutTransform, struct FName Socket, enum class ERelativeTransformSpace TransformSpace); // Function /Script/Game.PlayerWeapon.GetWeaponSocketBySocketName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void GetWeaponScatterSigma(float& OutSigma, float& OutRange); // Function /Script/Game.PlayerWeapon.GetWeaponScatterSigma // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FWeaponPartsTemplate GetWeaponPartTemplate(enum class EWeaponSlotType InType); // Function /Script/Game.PlayerWeapon.GetWeaponPartTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetWeaponPartPosInWeapon(enum class EWeaponSlotType InType, struct FVector& OutPos); // Function /Script/Game.PlayerWeapon.GetWeaponPartPosInWeapon // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetWeaponOverloadValue(); // Function /Script/Game.PlayerWeapon.GetWeaponOverloadValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UWeaponItem* GetWeaponItem(); // Function /Script/Game.PlayerWeapon.GetWeaponItem // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetWeaponBulletId(); // Function /Script/Game.PlayerWeapon.GetWeaponBulletId // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<struct FVector> GetShootTargets(__int32 ShootBulletCount, struct TArray<struct FVector>& OutShootPositions); // Function /Script/Game.PlayerWeapon.GetShootTargets // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector GetShootTarget(); // Function /Script/Game.PlayerWeapon.GetShootTarget // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetShootBulletLaunchCount(); // Function /Script/Game.PlayerWeapon.GetShootBulletLaunchCount // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetRealShootPoint2Screen(struct FVector2D& OutViewPos); // Function /Script/Game.PlayerWeapon.GetRealShootPoint2Screen // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct USceneComponent* GetMuzzleMesh(); // Function /Script/Game.PlayerWeapon.GetMuzzleMesh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetFireSkill(); // Function /Script/Game.PlayerWeapon.GetFireSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FBulletEnchantInfo> GetEnchantInfos(); // Function /Script/Game.PlayerWeapon.GetEnchantInfos // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetCurrentSmokeValue(); // Function /Script/Game.PlayerWeapon.GetCurrentSmokeValue // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FSoftClassPath GetCrossHairUIWidget(); // Function /Script/Game.PlayerWeapon.GetCrossHairUIWidget // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameCharacter* GetCharacterOwner(); // Function /Script/Game.PlayerWeapon.GetCharacterOwner // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FSoftClassPath GetAmmunitionUIWidget(); // Function /Script/Game.PlayerWeapon.GetAmmunitionUIWidget // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FVector2D GetAmmunitionUIOffset(); // Function /Script/Game.PlayerWeapon.GetAmmunitionUIOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FSoftClassPath GetAimCrossHairUIWidget(); // Function /Script/Game.PlayerWeapon.GetAimCrossHairUIWidget // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetAimAudioID(); // Function /Script/Game.PlayerWeapon.GetAimAudioID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GaussRand(float dExpect, float dVariance, float dRange); // Function /Script/Game.PlayerWeapon.GaussRand // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void FreshExchantInfos(); // Function /Script/Game.PlayerWeapon.FreshExchantInfos // (Final|Native|Public) // @ game+0
	void ForceStopFire(); // Function /Script/Game.PlayerWeapon.ForceStopFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ForceShootBullet(char AutoShootCount, float InOverridePreHitTime); // Function /Script/Game.PlayerWeapon.ForceShootBullet // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0
	void DrawTraceRayBulletBounce(struct FVector StartLoc, struct FVector EndLoc); // Function /Script/Game.PlayerWeapon.DrawTraceRayBulletBounce // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0
	void DelayStartReload(); // Function /Script/Game.PlayerWeapon.DelayStartReload // (Final|Native|Protected) // @ game+0
	struct APlayerWeapon* CreatePlayerWeapon(struct AActor* ActorOwner, struct UWeaponItem* WeaponItem); // Function /Script/Game.PlayerWeapon.CreatePlayerWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Client_SetBullet(__int32 Cur, __int32 Max); // Function /Script/Game.PlayerWeapon.Client_SetBullet // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void Client_FireEffect(); // Function /Script/Game.PlayerWeapon.Client_FireEffect // (Net|Native|Event|NetMulticast|Public) // @ game+0
	void Client_DrawTraceBulletSingle(struct FVector StartLoc, struct TArray<struct FRayHitInfo> HitResults, bool bForceDraw); // Function /Script/Game.PlayerWeapon.Client_DrawTraceBulletSingle // (Net|Native|Event|NetMulticast|Protected|HasDefaults) // @ game+0
	void Client_DrawTraceBullet(struct TArray<struct FRayRpcHitInfo> RpcHitInfos); // Function /Script/Game.PlayerWeapon.Client_DrawTraceBullet // (Net|Native|Event|NetMulticast|Protected) // @ game+0
	void Client_DeactiveFireEffect(bool bDestory); // Function /Script/Game.PlayerWeapon.Client_DeactiveFireEffect // (Net|Native|Event|NetMulticast|Public) // @ game+0
	void Client_BulletChange(__int32 nChangeValue); // Function /Script/Game.PlayerWeapon.Client_BulletChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0
	void ClearTempBulletID(__int32 ModifierRunTimeID); // Function /Script/Game.PlayerWeapon.ClearTempBulletID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CastSkillStopFire(); // Function /Script/Game.PlayerWeapon.CastSkillStopFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanShootingInBunker(); // Function /Script/Game.PlayerWeapon.CanShootingInBunker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CallOwnerSMReceiveStartReload(); // Function /Script/Game.PlayerWeapon.CallOwnerSMReceiveStartReload // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void AlterShotRecoilForceRevise(float InRevise); // Function /Script/Game.PlayerWeapon.AlterShotRecoilForceRevise // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PlayerWeapon_Ray
// Size: 0x0 (Inherited: 0x0)
struct APlayerWeapon_Ray : APlayerWeapon {
};

 // Class /Script/Game.PlaySkillMontageComponent
// Size: 0x0 (Inherited: 0x0)
struct UPlaySkillMontageComponent : USkillEffectComponent {
	char pad_C0[0x4]; // 0x0(0x0)
	__int32 SkillID; // 0x0(0x0)
	char pad_C8[0x8]; // 0x0(0x0)
	struct UAnimMontage* PlayingSkillMontage; // 0x0(0x0)
	char pad_D8[0x4]; // 0x0(0x0)
	float PlayRate; // 0x0(0x0)
	bool bIsPlaying; // 0x0(0x0)
	char bStopAllMontages : 1; // 0x0(0x0)
	char bAllowRunOnDedicatedServer : 1; // 0x0(0x0)
	char bRunOnDedicatedServer : 1; // 0x0(0x0)
	char pad_E1_3 : 5; // 0x0(0x0)
	bool bStartInBunker; // 0x0(0x0)
	char pad_E3[0x15]; // 0x0(0x0)
	__int32 MontageInstancesID; // 0x0(0x0)
	char pad_FC[0x4]; // 0x0(0x0)

	void SetAnimStopBlendTime(float InTime); // Function /Script/Game.PlaySkillMontageComponent.SetAnimStopBlendTime // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
	void ServerInterruptSkill(char ComboId); // Function /Script/Game.PlaySkillMontageComponent.ServerInterruptSkill // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0
	void ReceivePlayMontage_JumpToPosition(float Position); // Function /Script/Game.PlaySkillMontageComponent.ReceivePlayMontage_JumpToPosition // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void PlayMontage_JumpToSection(struct FName Section); // Function /Script/Game.PlaySkillMontageComponent.PlayMontage_JumpToSection // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayMontage_JumpToPosition(float Position); // Function /Script/Game.PlaySkillMontageComponent.PlayMontage_JumpToPosition // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
};

 // Class /Script/Game.PostProcessParams
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams : UObject {
	bool bCloseAutoExposure; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)
	struct TMap<struct FName, float> Scalars; // 0x0(0x0)
	struct TMap<struct FName, struct FLinearColor> Colors; // 0x0(0x0)
	struct FFlexibleEnumValue CharacterEffectType; // 0x0(0x0)
	__int32 Priority; // 0x0(0x0)
	float TotalTime; // 0x0(0x0)
	char pad_DC[0x4]; // 0x0(0x0)
	struct TArray<struct UMaterialParameter*> MaterialParameters; // 0x0(0x0)
	char pad_F0[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessCaptureTargetParams
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessCaptureTargetParams : UPostProcessParams {
	struct TArray<struct AActor*> Targets; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessCommon
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessCommon : UObject {
	char pad_28[0x8]; // 0x0(0x0)
	struct TWeakObjectPtr<struct AActor> Launcher; // 0x0(0x0)
	char pad_38[0x8]; // 0x0(0x0)
	struct UPostProcessParams* Params; // 0x0(0x0)
	struct UMaterialInstanceDynamic* Mid; // 0x0(0x0)

	void OnTick(float DeltaTime); // Function /Script/Game.PostProcessCommon.OnTick // (Native|Public|BlueprintCallable) // @ game+0
	void OnStart(); // Function /Script/Game.PostProcessCommon.OnStart // (Native|Public|BlueprintCallable) // @ game+0
	void OnEnd(); // Function /Script/Game.PostProcessCommon.OnEnd // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PostProcessCaptureTarget
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessCaptureTarget : UPostProcessCommon {
	struct TArray<struct ASceneCapture2D*> SceneCapture2Ds; // 0x0(0x0)
	struct TArray<struct FCaptureTargetActorCacheInfo> ActorCacheInfo; // 0x0(0x0)
	char pad_70[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessTargetSelector
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessTargetSelector : UObject {
	char pad_28[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessParams_FrameAnimation
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_FrameAnimation : UPostProcessParams {
	float Time; // 0x0(0x0)
	char pad_FC[0x4]; // 0x0(0x0)
	struct UCurveFloat* FadeCurve; // 0x0(0x0)
	bool bTexutre; // 0x0(0x0)
	char pad_109[0x7]; // 0x0(0x0)
	struct UTexture* Texture; // 0x0(0x0)
	bool bRow; // 0x0(0x0)
	char pad_119[0x3]; // 0x0(0x0)
	__int32 Row; // 0x0(0x0)
	bool bCol; // 0x0(0x0)
	char pad_121[0x3]; // 0x0(0x0)
	__int32 Col; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessFrameAnimation
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessFrameAnimation : UPostProcessCommon {
	char pad_50[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessManager
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessManager : UGameInstanceSubsystem {
	char pad_30[0x8]; // 0x0(0x0)
	struct TMap<enum class EPostProcessType, struct UMaterialInstance*> MIs; // 0x0(0x0)
	struct TArray<struct FNewPPStateInfo> NewPPStateInfos; // 0x0(0x0)
	struct TWeakObjectPtr<struct APostProcessVolume> UnboundPPV; // 0x0(0x0)
	struct TArray<struct FPPMaterialBlendInfo> BlendInfos; // 0x0(0x0)
	char pad_B0[0x8]; // 0x0(0x0)

	void UpdateVectorParameters(struct UObject* WorldContextObject, __int32 ID, struct FString Name, struct FLinearColor& Value); // Function /Script/Game.PostProcessManager.UpdateVectorParameters // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void UpdateScalarParameters(struct UObject* WorldContextObject, __int32 ID, struct FString Name, float Value); // Function /Script/Game.PostProcessManager.UpdateScalarParameters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void UpdateBlendWeight(struct UObject* WorldContextObject, __int32 ID, float Value); // Function /Script/Game.PostProcessManager.UpdateBlendWeight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 StartPostProcessNew(struct UObject* WorldContextObject, struct AActor* Caster, struct UPostProcessParams* Params); // Function /Script/Game.PostProcessManager.StartPostProcessNew // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ShowPostProcessBlur(struct UObject* WorldContextObject, bool bIsShow); // Function /Script/Game.PostProcessManager.ShowPostProcessBlur // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void OnWorldCleanup(struct UWorld* World, bool bSessionEnded, bool bCleanupResources); // Function /Script/Game.PostProcessManager.OnWorldCleanup // (Final|Native|Protected) // @ game+0
	void OnLoadMap(struct UWorld* World); // Function /Script/Game.PostProcessManager.OnLoadMap // (Final|Native|Protected) // @ game+0
	void EndPostProcess(struct UObject* WorldContextObject, __int32 ID); // Function /Script/Game.PostProcessManager.EndPostProcess // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PostProcessParams_MaskBlur
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_MaskBlur : UPostProcessParams {
};

 // Class /Script/Game.PostProcessMaskBlur
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessMaskBlur : UPostProcessCommon {
};

 // Class /Script/Game.PostProcessParams_Outline
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_Outline : UPostProcessParams {
	float BlendInTime; // 0x0(0x0)
	char pad_FC[0x4]; // 0x0(0x0)
	struct UCurveFloat* BlendInCurve; // 0x0(0x0)
	float BlendOutTime; // 0x0(0x0)
	char pad_10C[0x4]; // 0x0(0x0)
	struct UCurveFloat* BlendOutCurve; // 0x0(0x0)
	bool bDepthEdgeHeight; // 0x0(0x0)
	char pad_119[0x3]; // 0x0(0x0)
	float DepthEdgeHeight; // 0x0(0x0)
	bool bDepthEdgeWidth; // 0x0(0x0)
	char pad_121[0x3]; // 0x0(0x0)
	float DepthEdgeWidth; // 0x0(0x0)
	bool bDepthHideDistance; // 0x0(0x0)
	char pad_129[0x3]; // 0x0(0x0)
	float DepthHideDistance; // 0x0(0x0)
	struct UCurveFloat* DepthHideDistanceCurve; // 0x0(0x0)
	bool bDepthValue; // 0x0(0x0)
	char pad_139[0x3]; // 0x0(0x0)
	float DepthValue; // 0x0(0x0)
	bool bSceneLight; // 0x0(0x0)
	char pad_141[0x3]; // 0x0(0x0)
	float SceneLight; // 0x0(0x0)
	bool bEdgeColor; // 0x0(0x0)
	char pad_149[0x3]; // 0x0(0x0)
	struct FColor EdgeColor; // 0x0(0x0)
	struct UPostProcessTargetSelector* EdgeTarget_249; // 0x0(0x0)
	bool bEdgeColor_249; // 0x0(0x0)
	char pad_159[0x3]; // 0x0(0x0)
	struct FColor EdgeColor_249; // 0x0(0x0)
	struct UPostProcessTargetSelector* EdgeTarget_250; // 0x0(0x0)
	bool bEdgeColor_250; // 0x0(0x0)
	char pad_169[0x3]; // 0x0(0x0)
	struct FColor EdgeColor_250; // 0x0(0x0)
	struct UPostProcessTargetSelector* EdgeTarget_251; // 0x0(0x0)
	bool bEdgeColor_251; // 0x0(0x0)
	char pad_179[0x3]; // 0x0(0x0)
	struct FColor EdgeColor_251; // 0x0(0x0)
	bool bGammaScale; // 0x0(0x0)
	char pad_181[0x3]; // 0x0(0x0)
	float GammaScale; // 0x0(0x0)
	bool bGamma; // 0x0(0x0)
	char pad_189[0x3]; // 0x0(0x0)
	struct FLinearColor Gamma; // 0x0(0x0)
	char pad_19C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessOutline
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessOutline : UPostProcessCommon {
	char pad_50[0x100]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessParams_MaskOutline
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_MaskOutline : UPostProcessParams {
	bool bDepthEdgeHeight; // 0x0(0x0)
	char pad_F9[0x3]; // 0x0(0x0)
	float DepthEdgeHeight; // 0x0(0x0)
	bool bDepthEdgeWidth; // 0x0(0x0)
	char pad_101[0x3]; // 0x0(0x0)
	float DepthEdgeWidth; // 0x0(0x0)
	bool bDepthHideDistance; // 0x0(0x0)
	char pad_109[0x3]; // 0x0(0x0)
	float DepthHideDistance; // 0x0(0x0)
	struct UCurveFloat* DepthHideDistanceCurve; // 0x0(0x0)
	bool bDepthValue; // 0x0(0x0)
	char pad_119[0x3]; // 0x0(0x0)
	float DepthValue; // 0x0(0x0)
	bool bSceneLight; // 0x0(0x0)
	char pad_121[0x3]; // 0x0(0x0)
	float SceneLight; // 0x0(0x0)
	bool bEdgeColor; // 0x0(0x0)
	char pad_129[0x3]; // 0x0(0x0)
	struct FColor EdgeColor; // 0x0(0x0)
	bool bGammaScale; // 0x0(0x0)
	char pad_131[0x3]; // 0x0(0x0)
	float GammaScale; // 0x0(0x0)
	bool bGamma; // 0x0(0x0)
	char pad_139[0x3]; // 0x0(0x0)
	struct FLinearColor Gamma; // 0x0(0x0)
	char pad_14C[0x4]; // 0x0(0x0)
	struct UPostProcessTargetSelector* TargetSelector; // 0x0(0x0)
	__int32 StencilValue; // 0x0(0x0)
	enum class ERendererDepthStencilState RendererDepthStencilState; // 0x0(0x0)
	char pad_15D[0x3]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessMaskOutline
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessMaskOutline : UPostProcessCommon {
	char pad_50[0x60]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessParams_ExplosiveOutline
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_ExplosiveOutline : UPostProcessParams {
};

 // Class /Script/Game.PostProcessExplosiveOutline
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessExplosiveOutline : UPostProcessCommon {
	char pad_50[0x60]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessParams_RadialBlur
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_RadialBlur : UPostProcessParams {
	bool bCenterX; // 0x0(0x0)
	char pad_F9[0x3]; // 0x0(0x0)
	float CenterX; // 0x0(0x0)
	bool bCenterY; // 0x0(0x0)
	char pad_101[0x3]; // 0x0(0x0)
	float CenterY; // 0x0(0x0)
	bool bOffset; // 0x0(0x0)
	char pad_109[0x3]; // 0x0(0x0)
	float Offset; // 0x0(0x0)
	bool bFadeDuration; // 0x0(0x0)
	char pad_111[0x3]; // 0x0(0x0)
	float FadeDuration; // 0x0(0x0)
	bool bSampleNum; // 0x0(0x0)
	char pad_119[0x3]; // 0x0(0x0)
	float SampleNum; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessRadialBlur
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessRadialBlur : UPostProcessCommon {
	float CenterX; // 0x0(0x0)
	float CenterY; // 0x0(0x0)
	float Offset; // 0x0(0x0)
	float FadeDuration; // 0x0(0x0)
	float SampleNum; // 0x0(0x0)
	char pad_64[0xC]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessParams_ScanLevel
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_ScanLevel : UPostProcessParams {
	struct UCurveFloat* ScaleCurve; // 0x0(0x0)
	struct UCurveFloat* ColorScale; // 0x0(0x0)
	bool bColor01; // 0x0(0x0)
	char pad_109[0x3]; // 0x0(0x0)
	struct FLinearColor Color01; // 0x0(0x0)
	bool bColor02; // 0x0(0x0)
	char pad_11D[0x3]; // 0x0(0x0)
	struct FLinearColor Color02; // 0x0(0x0)
	bool bTexSize; // 0x0(0x0)
	char pad_131[0x3]; // 0x0(0x0)
	struct FLinearColor TexSize; // 0x0(0x0)
	bool bMain; // 0x0(0x0)
	char pad_145[0x3]; // 0x0(0x0)
	struct UTexture2D* Main; // 0x0(0x0)
	bool bOut_Line; // 0x0(0x0)
	char pad_151[0x3]; // 0x0(0x0)
	float Out_Line; // 0x0(0x0)
	bool bHardness; // 0x0(0x0)
	char pad_159[0x3]; // 0x0(0x0)
	float Hardness; // 0x0(0x0)
	bool bSceneDepth; // 0x0(0x0)
	char pad_161[0x3]; // 0x0(0x0)
	float SceneDepth; // 0x0(0x0)
	bool bSpeed; // 0x0(0x0)
	char pad_169[0x3]; // 0x0(0x0)
	float Speed; // 0x0(0x0)
	bool bRadiusSub; // 0x0(0x0)
	char pad_171[0x3]; // 0x0(0x0)
	float RadiusSub; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessScanLevel
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessScanLevel : UPostProcessCommon {
	char pad_50[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessTargetSelector_Launcher
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessTargetSelector_Launcher : UPostProcessTargetSelector {
};

 // Class /Script/Game.PostProcessTargetSelector_Targets
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessTargetSelector_Targets : UPostProcessTargetSelector {
	struct TArray<struct AActor*> Targets; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessTargetSelector_AllGameCharacter
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessTargetSelector_AllGameCharacter : UPostProcessTargetSelector {
};

 // Class /Script/Game.PostProcessParams_Simple
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_Simple : UPostProcessParams {
	struct UMaterialInterface* mat; // 0x0(0x0)
	struct FName CurveName; // 0x0(0x0)
	float TimeIn; // 0x0(0x0)
	char pad_10C[0x4]; // 0x0(0x0)
	struct UCurveFloat* CurveIn; // 0x0(0x0)
	float Timeout; // 0x0(0x0)
	char pad_11C[0x4]; // 0x0(0x0)
	struct UCurveFloat* CurveOut; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessSimple
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessSimple : UPostProcessCommon {
	char pad_50[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessMaterialParams
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessMaterialParams : UPostProcessParams {
	struct UMaterialInterface* Material; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessMaterial
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessMaterial : UPostProcessCommon {
};

 // Class /Script/Game.PostProcessParams_StencilGrayscale
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_StencilGrayscale : UPostProcessParams {
	bool bColor; // 0x0(0x0)
	char pad_F9[0x3]; // 0x0(0x0)
	struct FLinearColor Color; // 0x0(0x0)
	char pad_10C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessStencilGrayscale
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessStencilGrayscale : UPostProcessCommon {
};

 // Class /Script/Game.PostProcessParams_TintLevel
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessParams_TintLevel : UPostProcessParams {
	float Speed; // 0x0(0x0)
	bool bUseCuvre; // 0x0(0x0)
	char pad_FD[0x3]; // 0x0(0x0)
	struct UCurveFloat* FadeCurve; // 0x0(0x0)
	bool bFarColor; // 0x0(0x0)
	char pad_109[0x3]; // 0x0(0x0)
	struct FLinearColor FarColor; // 0x0(0x0)
	bool bNearColor; // 0x0(0x0)
	char pad_11D[0x3]; // 0x0(0x0)
	struct FLinearColor NearColor; // 0x0(0x0)
	bool bSkyColor; // 0x0(0x0)
	char pad_131[0x3]; // 0x0(0x0)
	struct FLinearColor SkyColor; // 0x0(0x0)
	bool bNearDistance; // 0x0(0x0)
	char pad_145[0x3]; // 0x0(0x0)
	float NearDistance; // 0x0(0x0)
	bool bNF; // 0x0(0x0)
	char pad_14D[0x3]; // 0x0(0x0)
	float NF; // 0x0(0x0)
	bool bSkyDistance; // 0x0(0x0)
	char pad_155[0x3]; // 0x0(0x0)
	float SkyDistance; // 0x0(0x0)
	char pad_15C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessTintLevel
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessTintLevel : UPostProcessCommon {
	char pad_50[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessUMG3DParams
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessUMG3DParams : UPostProcessParams {
};

 // Class /Script/Game.PostProcessUMG3D
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessUMG3D : UPostProcessCommon {
	struct ASceneCapture2D* SceneCapture2D; // 0x0(0x0)
	struct TArray<struct FUMG3DActorCacheInfo> ActorCacheInfo; // 0x0(0x0)
	char pad_68[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.PostProcessUtils
// Size: 0x0 (Inherited: 0x0)
struct UPostProcessUtils : UBlueprintFunctionLibrary {

	void StartBattleFinishPP(struct TArray<struct AActor*> Targets); // Function /Script/Game.PostProcessUtils.StartBattleFinishPP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetUseUIPostMaterial(struct UObject* WorldContextObject, bool Value); // Function /Script/Game.PostProcessUtils.SetUseUIPostMaterial // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveUMG3D(struct AActor* Actor); // Function /Script/Game.PostProcessUtils.RemoveUMG3D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveExplosive(struct AActor* Actor); // Function /Script/Game.PostProcessUtils.RemoveExplosive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FVector2D GetRTRenderSize(); // Function /Script/Game.PostProcessUtils.GetRTRenderSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	void EndBattleFinishPP(struct UObject* WorldContext); // Function /Script/Game.PostProcessUtils.EndBattleFinishPP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddUMG3D(struct AActor* Actor); // Function /Script/Game.PostProcessUtils.AddUMG3D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddExplosive(struct AActor* Actor); // Function /Script/Game.PostProcessUtils.AddExplosive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PreLoadAsset
// Size: 0x0 (Inherited: 0x0)
struct UPreLoadAsset : UDataAsset {
	struct TArray<struct FString> AssetsToPreLoad; // 0x0(0x0)
	struct TArray<struct FString> SoundsToPreLoad; // 0x0(0x0)
};

 // Class /Script/Game.PreloadNpcRes
// Size: 0x0 (Inherited: 0x0)
struct UPreloadNpcRes : UDataAsset {
	struct TArray<struct FName> Resources; // 0x0(0x0)
	struct TArray<struct FName> ServerResources; // 0x0(0x0)
	struct TArray<__int32> MonsterIds; // 0x0(0x0)
};

 // Class /Script/Game.PreLoadMonster
// Size: 0x0 (Inherited: 0x0)
struct UPreLoadMonster : UDataAsset {
};

 // Class /Script/Game.TestLibrary
// Size: 0x0 (Inherited: 0x0)
struct UTestLibrary : UBlueprintFunctionLibrary {

	void LoadModel(struct UObject* WorldContextObject, struct FTestCharacter& InData, struct TArray<struct APreviewModel*>& ret); // Function /Script/Game.TestLibrary.LoadModel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetAllTestCharacter(struct FSoftObjectPath& InDataTable, struct TArray<struct FTestCharacter>& OutCharacters); // Function /Script/Game.TestLibrary.GetAllTestCharacter // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PreviewAccessoryAnimInstace
// Size: 0x0 (Inherited: 0x0)
struct UPreviewAccessoryAnimInstace : UAnimInstanceBase {
	struct TMap<struct FString, enum class EUIWidgetAnimType> UIAnimStateContainer; // 0x0(0x0)
	struct FString WeaponName; // 0x0(0x0)
	struct FString GirlName; // 0x0(0x0)
	float ShowDelay; // 0x0(0x0)
	struct FString SkinAnimNameSuffix; // 0x0(0x0)
	struct TArray<struct FWidgetBaseAccessoryAnimData_Runtime> WidgetBaseAccessoryAnimDataContainer; // 0x0(0x0)
	struct UAnimSequenceBase* CurrentAnim; // 0x0(0x0)
	struct UAnimSequenceBase* CurrentAdditiveAnim; // 0x0(0x0)
	struct FString AnimNameSuffix; // 0x0(0x0)
	struct FString OriginalGirlName; // 0x0(0x0)
	enum class EUIWidgetAnimType CurrentPreviewState; // 0x0(0x0)
	char pad_5D5[0xB]; // 0x0(0x0)

	void SetPreviewCharacterAnimStateType(enum class EUIWidgetAnimType InType); // Function /Script/Game.PreviewAccessoryAnimInstace.SetPreviewCharacterAnimStateType // (Native|Public) // @ game+0
	void SetAnimSkinAnimSuffix(struct FString InAnimSuffix); // Function /Script/Game.PreviewAccessoryAnimInstace.SetAnimSkinAnimSuffix // (Final|Native|Public) // @ game+0
	void SetAnimResfixName(struct FString InGirlName, struct FString InWeaponName); // Function /Script/Game.PreviewAccessoryAnimInstace.SetAnimResfixName // (Native|Public) // @ game+0
	void SetAnimNameSuffix(struct FString GirlNameSuffix, struct FString InOriginalGirlName); // Function /Script/Game.PreviewAccessoryAnimInstace.SetAnimNameSuffix // (Native|Public) // @ game+0
	bool IsAdditiveAnimValid(); // Function /Script/Game.PreviewAccessoryAnimInstace.IsAdditiveAnimValid // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckUIStateActive(enum class EUIWidgetAnimType uiType); // Function /Script/Game.PreviewAccessoryAnimInstace.CheckUIStateActive // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PreviewCharacterAnimInstance
// Size: 0x0 (Inherited: 0x0)
struct UPreviewCharacterAnimInstance : UAnimInstanceBase {
	struct TMap<struct FString, enum class EUIWidgetAnimType> UIAnimStateContainer; // 0x0(0x0)
	struct FString WeaponName; // 0x0(0x0)
	struct FString GirlName; // 0x0(0x0)
	__int32 CharacterTemplateID; // 0x0(0x0)
	float ShowDelay; // 0x0(0x0)
	bool bIsPlaying; // 0x0(0x0)
	struct FString SkinAnimNameSuffix; // 0x0(0x0)
	__int32 SkinTemplateID; // 0x0(0x0)
	float BreastPhyValue; // 0x0(0x0)
	bool bGMBreastPhyEnable; // 0x0(0x0)
	bool bBreastPhyEnable; // 0x0(0x0)
	char pad_5A3[0x5]; // 0x0(0x0)
	struct TArray<struct FWidgetBaseStandAnimData_Runtime> WidgetBaseStandAnimDataContainer; // 0x0(0x0)
	struct UAnimSequenceBase* CurrentAnim; // 0x0(0x0)
	struct FString AnimNameSuffix; // 0x0(0x0)
	struct FString OriginalGirlName; // 0x0(0x0)
	enum class EUIWidgetAnimType CurrentPreviewState; // 0x0(0x0)
	char pad_5E1[0x29F]; // 0x0(0x0)

	void SetPreviewCharacterAnimStateType(enum class EUIWidgetAnimType InType); // Function /Script/Game.PreviewCharacterAnimInstance.SetPreviewCharacterAnimStateType // (Final|Native|Public) // @ game+0
	void SetCharacterTemplateID(__int32 InCharacterTemplateID); // Function /Script/Game.PreviewCharacterAnimInstance.SetCharacterTemplateID // (Final|Native|Public) // @ game+0
	void SetAnimSkinAnimSuffix(struct FString InAnimSuffix, __int32 InSkinTemplateID); // Function /Script/Game.PreviewCharacterAnimInstance.SetAnimSkinAnimSuffix // (Final|Native|Public) // @ game+0
	void SetAnimResfixName(struct FString InGirlName, struct FString InWeaponName); // Function /Script/Game.PreviewCharacterAnimInstance.SetAnimResfixName // (Final|Native|Public) // @ game+0
	void SetAnimNameSuffix(struct FString GirlNameSuffix, struct FString InOriginalGirlName); // Function /Script/Game.PreviewCharacterAnimInstance.SetAnimNameSuffix // (Final|Native|Public) // @ game+0
	struct TArray<struct UAnimSequenceBase*> GetPerformanceAnimList(); // Function /Script/Game.PreviewCharacterAnimInstance.GetPerformanceAnimList // (Final|Native|Public) // @ game+0
	struct UAnimSequenceBase* GetCurrentBaseAnim(); // Function /Script/Game.PreviewCharacterAnimInstance.GetCurrentBaseAnim // (Final|Native|Public) // @ game+0
	bool CheckUIStateActive(enum class EUIWidgetAnimType uiType); // Function /Script/Game.PreviewCharacterAnimInstance.CheckUIStateActive // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PreviewLibrary
// Size: 0x0 (Inherited: 0x0)
struct UPreviewLibrary : UBlueprintFunctionLibrary {

	struct APreviewActor* PreviewCardAndWeaponIDByCallback(struct UObject* WorldContextObject, __int64 InCardID, __int64 InWeaponID, struct FPreviewModelInfo& InModelInfo, struct FDelegate InLoadingCmplete); // Function /Script/Game.PreviewLibrary.PreviewCardAndWeaponIDByCallback // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct APreviewActor* PreviewCardAndWeaponID(struct UObject* WorldContextObject, __int64 InCardID, __int64 InWeaponID, struct FPreviewModelInfo& InModelInfo); // Function /Script/Game.PreviewLibrary.PreviewCardAndWeaponID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct APreviewActor* PreviewByMonsterID(struct UObject* WorldContextObject, __int64 InTemplateID, struct FPreviewModelInfo& InModelInfo); // Function /Script/Game.PreviewLibrary.PreviewByMonsterID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct APreviewActor* PreviewByItemObj(struct UObject* WorldContextObject, struct UItem* pItem, struct FPreviewModelInfo& InModelInfo); // Function /Script/Game.PreviewLibrary.PreviewByItemObj // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct APreviewActor* PreviewByItemByCallback(struct UObject* WorldContextObject, __int64 InID, struct FPreviewModelInfo& InModelInfo, struct FDelegate InLoadingCmplete); // Function /Script/Game.PreviewLibrary.PreviewByItemByCallback // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct APreviewActor* PreviewByItem(struct UObject* WorldContextObject, __int64 InID, struct FPreviewModelInfo& InModelInfo); // Function /Script/Game.PreviewLibrary.PreviewByItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct APreviewActor* PreviewByGDPLByCallback(struct UObject* WorldContextObject, enum class EItemType& InItemType, __int64 InTemplateID, struct FPreviewModelInfo& InModelInfo, struct FDelegate InLoadingCmplete); // Function /Script/Game.PreviewLibrary.PreviewByGDPLByCallback // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct APreviewActor* PreviewByGDPL(struct UObject* WorldContextObject, enum class EItemType& InItemType, __int64 InTemplateID, struct FPreviewModelInfo& InModelInfo); // Function /Script/Game.PreviewLibrary.PreviewByGDPL // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FString> GetPreviewAnimSequencePathList(enum class EUIWidgetAnimType InType, struct FString InGirlName, struct FString InSkinAnimNameSuffix, struct FString InAnimNameSuffix, struct FString InOriginalGirlName, struct FString InWeaponName); // Function /Script/Game.PreviewLibrary.GetPreviewAnimSequencePathList // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GatherCharacterAsset(struct UCharacterCard* InCard, bool bIncludeWeapon, enum class EUIWidgetAnimType InAnimType, struct TArray<struct FSoftObjectPath>& Assets); // Function /Script/Game.PreviewLibrary.GatherCharacterAsset // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AttachToSequenceActor(struct UObject* WorldContextObject, struct AActor* InSequenceActor); // Function /Script/Game.PreviewLibrary.AttachToSequenceActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AttachToActor(struct APreviewActor* InActor, struct AActor* ToActor); // Function /Script/Game.PreviewLibrary.AttachToActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PreviewActor
// Size: 0x0 (Inherited: 0x0)
struct APreviewActor : AActor {
	struct UCharacterRenderComponent* CharacterRenderComponent; // 0x0(0x0)
	char pad_228[0x20]; // 0x0(0x0)
	struct FPreviewModelInfo ModelInfo; // 0x0(0x0)
	char pad_288[0x88]; // 0x0(0x0)

	void UpdateTransform(struct FTransform& InTransform); // Function /Script/Game.PreviewActor.UpdateTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void Rotate(float InAngle); // Function /Script/Game.PreviewActor.Rotate // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ModifyModelMaterial(); // Function /Script/Game.PreviewActor.ModifyModelMaterial // (Final|Native|Private) // @ game+0
	void LoadAllComplete_CardAndWeapon(struct TArray<struct UObject*>& LoadedObjects); // Function /Script/Game.PreviewActor.LoadAllComplete_CardAndWeapon // (Final|Native|Private|HasOutParms) // @ game+0
	void LoadAllComplete(struct TArray<struct UObject*>& LoadedObjects); // Function /Script/Game.PreviewActor.LoadAllComplete // (Final|Native|Private|HasOutParms) // @ game+0
	struct APreviewModel* GetModel(); // Function /Script/Game.PreviewActor.GetModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int64 GetItemId(); // Function /Script/Game.PreviewActor.GetItemId // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DoLoadAsset(); // Function /Script/Game.PreviewActor.DoLoadAsset // (Final|Native|Private) // @ game+0
	void Clear(); // Function /Script/Game.PreviewActor.Clear // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PreviewModel
// Size: 0x0 (Inherited: 0x0)
struct APreviewModel : AActor {
	struct UOVRLipSyncPlaybackActorComponent* LipSyncComponet; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct ACharacterAccessory>> PreviewModelAccessories; // 0x0(0x0)
	struct TMap<struct FString, struct TWeakObjectPtr<struct APreviewModel>> AttachActors; // 0x0(0x0)
	char pad_288[0x8]; // 0x0(0x0)
	struct FString GirlNameStr; // 0x0(0x0)
	char pad_2A0[0x20]; // 0x0(0x0)
	struct USkeletalMeshComponent* FaceComponent; // 0x0(0x0)
	__int32 LastPreviewModelSkinTemplateId; // 0x0(0x0)
	char pad_2CC[0x4]; // 0x0(0x0)

	void UpdateWeaponPart(enum class EWeaponSlotType InSlotType, __int32 InPartTemplateID); // Function /Script/Game.PreviewModel.UpdateWeaponPart // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateWeaponByGDPL(__int64 InTemplateID); // Function /Script/Game.PreviewModel.UpdateWeaponByGDPL // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateWeaponAllPart(struct UWeaponItem* InWeapon, bool bDefault); // Function /Script/Game.PreviewModel.UpdateWeaponAllPart // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateWeapon(__int64 InID); // Function /Script/Game.PreviewModel.UpdateWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateCharacterSkin(__int64 InTemplateID); // Function /Script/Game.PreviewModel.UpdateCharacterSkin // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPreviewCharacterAnimStateType(enum class EUIWidgetAnimType WidgetType); // Function /Script/Game.PreviewModel.SetPreviewCharacterAnimStateType // (Final|Native|Public|BlueprintCallable|Const) // @ game+0
	void SetAnimResfixName(struct FString GirlName, struct FString WeaponName); // Function /Script/Game.PreviewModel.SetAnimResfixName // (Final|Native|Public|BlueprintCallable|Const) // @ game+0
	void RemoveAttachByTag(struct FString InTag); // Function /Script/Game.PreviewModel.RemoveAttachByTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayMontage(struct FSoftObjectPath& InMontage, struct FString InSection); // Function /Script/Game.PreviewModel.PlayMontage // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void PlayAnimationBySoftPath(struct FSoftObjectPath& SoftObjectPath); // Function /Script/Game.PreviewModel.PlayAnimationBySoftPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void OnPreviewModelMeshChange(); // Function /Script/Game.PreviewModel.OnPreviewModelMeshChange // (Event|Public|BlueprintEvent) // @ game+0
	void OnLipSyncEnd(); // Function /Script/Game.PreviewModel.OnLipSyncEnd // (Final|Native|Public) // @ game+0
	void OnLipSyncDataReady(); // Function /Script/Game.PreviewModel.OnLipSyncDataReady // (Final|Native|Public) // @ game+0
	struct UMeshComponent* K2_GetMeshComponent(); // Function /Script/Game.PreviewModel.K2_GetMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsPlayingMontage(); // Function /Script/Game.PreviewModel.IsPlayingMontage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void HideWeapon(bool bHide); // Function /Script/Game.PreviewModel.HideWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Hide(bool bHide); // Function /Script/Game.PreviewModel.Hide // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UObject* GetPreviewCharacterAnimInstanceObj(); // Function /Script/Game.PreviewModel.GetPreviewCharacterAnimInstanceObj // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetCharacterAccessories(struct TArray<struct ACharacterAccessory*>& OutCharacterAccessories); // Function /Script/Game.PreviewModel.GetCharacterAccessories // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetCenterPos(struct FVector& CenterPos); // Function /Script/Game.PreviewModel.GetCenterPos // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct APreviewModel* GetAttachActorByTag(struct FString InTag); // Function /Script/Game.PreviewModel.GetAttachActorByTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct ACharacterAccessory* GetAccessoryByClass(struct ACharacterAccessory* AccessoryClass); // Function /Script/Game.PreviewModel.GetAccessoryByClass // (Native|Public|BlueprintCallable) // @ game+0
	void FixPosition(); // Function /Script/Game.PreviewModel.FixPosition // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearAccessory(); // Function /Script/Game.PreviewModel.ClearAccessory // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PreviewWeapon
// Size: 0x0 (Inherited: 0x0)
struct APreviewWeapon : AActor {
	struct FVector Size; // 0x0(0x0)
	struct FVector OriginPosition; // 0x0(0x0)
	struct FRotator OriginRotator; // 0x0(0x0)
	bool bDrawDebug; // 0x0(0x0)
	char pad_245[0x3]; // 0x0(0x0)
	float RotateSpeed; // 0x0(0x0)
	float AutoRotateSpeed; // 0x0(0x0)
	struct FRuntimeFloatCurve RecoverCure; // 0x0(0x0)
	struct UPostProcessParams* PostParams; // 0x0(0x0)
	struct FMaterialStateParameter AlphaParameters; // 0x0(0x0)
	struct FMulticastInlineDelegate OnWeaponPartRotateFinish; // 0x0(0x0)
	char pad_330[0x1C]; // 0x0(0x0)
	struct TWeakObjectPtr<struct APreviewActor> PreviewActor; // 0x0(0x0)
	char pad_354[0x14]; // 0x0(0x0)

	struct APreviewWeapon* SpawnPreviewWeapon(struct UObject* WorldContextObject, struct UWeaponItem* InWeapon); // Function /Script/Game.PreviewWeapon.SpawnPreviewWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetStage(enum class EPreviewWeaponStage InStage); // Function /Script/Game.PreviewWeapon.SetStage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetInputFlag(bool bInput); // Function /Script/Game.PreviewWeapon.SetInputFlag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NativeTickAlpha(float InDelta); // Function /Script/Game.PreviewWeapon.NativeTickAlpha // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NativeEndAlpha(); // Function /Script/Game.PreviewWeapon.NativeEndAlpha // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NativeBeginAlpha(__int32 InMatID); // Function /Script/Game.PreviewWeapon.NativeBeginAlpha // (Final|Native|Public|BlueprintCallable) // @ game+0
	void LoadWeapon(struct UWeaponItem* InWeapon, struct FRotator& InRot); // Function /Script/Game.PreviewWeapon.LoadWeapon // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void LoadComplete(__int64 ItemId); // Function /Script/Game.PreviewWeapon.LoadComplete // (Final|Native|Private) // @ game+0
	enum class EPreviewWeaponStage GetStage(); // Function /Script/Game.PreviewWeapon.GetStage // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct APreviewActor* GetPreviewActor(); // Function /Script/Game.PreviewWeapon.GetPreviewActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct APreviewModel* GetPartActor(enum class EWeaponSlotType InSlotType); // Function /Script/Game.PreviewWeapon.GetPartActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GachaLoadWeapon(struct UWeaponItem* InWeapon, struct FRotator& InRot, struct FDelegate InLoadingComplete); // Function /Script/Game.PreviewWeapon.GachaLoadWeapon // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void GachaLoadComplete(__int64 ItemId); // Function /Script/Game.PreviewWeapon.GachaLoadComplete // (Final|Native|Private) // @ game+0
	void AddInput(float InAddDelta); // Function /Script/Game.PreviewWeapon.AddInput // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.PSOUtilities
// Size: 0x0 (Inherited: 0x0)
struct UPSOUtilities : UBlueprintFunctionLibrary {

	void StartLevelPrologue(); // Function /Script/Game.PSOUtilities.StartLevelPrologue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Shutdown(); // Function /Script/Game.PSOUtilities.Shutdown // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetPrecompileBatchSizeAndMode(__int32 Size); // Function /Script/Game.PSOUtilities.SetPrecompileBatchSizeAndMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetOtherLevelMask(); // Function /Script/Game.PSOUtilities.SetOtherLevelMask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ResumeCompilePSO(); // Function /Script/Game.PSOUtilities.ResumeCompilePSO // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PauseCompilePSO(); // Function /Script/Game.PSOUtilities.PauseCompilePSO // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void LoadPSOThingsOnce(bool bPlayed); // Function /Script/Game.PSOUtilities.LoadPSOThingsOnce // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EndLevelPrologue(); // Function /Script/Game.PSOUtilities.EndLevelPrologue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.RedirectImage
// Size: 0x0 (Inherited: 0x0)
struct URedirectImage : UImage {
	struct FString PaintingType; // 0x0(0x0)
	struct FSoftObjectPath MaterialTexturePath; // 0x0(0x0)
	char pad_250[0x20]; // 0x0(0x0)

	void AsyncSetTexture(struct FSoftObjectPath& InSoftPath, bool bMatchSize); // Function /Script/Game.RedirectImage.AsyncSetTexture // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.CommonTextScrollStyle
// Size: 0x0 (Inherited: 0x0)
struct UCommonTextScrollStyle : UObject {
	float Speed; // 0x0(0x0)
	float StartDelay; // 0x0(0x0)
	float EndDelay; // 0x0(0x0)
	float FadeInDelay; // 0x0(0x0)
	float FadeOutDelay; // 0x0(0x0)
	char pad_3C[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.ReloadSkillComponent
// Size: 0x0 (Inherited: 0x0)
struct UReloadSkillComponent : UPlaySkillMontageComponent {
	char pad_100[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.RespawnActor
// Size: 0x0 (Inherited: 0x0)
struct ARespawnActor : AActor {
	__int32 RespawnId; // 0x0(0x0)
	char pad_224[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.ReviveHelper
// Size: 0x0 (Inherited: 0x0)
struct AReviveHelper : AActor {
	struct UFXSystemAsset* AssistParticle; // 0x0(0x0)
	struct UFXSystemAsset* AssistDisappearParticle; // 0x0(0x0)
	struct UFXSystemAsset* ReviveParticle; // 0x0(0x0)
	float ProgressHeightOffset; // 0x0(0x0)
	char pad_23C[0x4]; // 0x0(0x0)
	struct UFXSystemComponent* AssistParticleRef; // 0x0(0x0)
	char pad_248[0x14]; // 0x0(0x0)
	float CurrentProgress; // 0x0(0x0)
	__int32 MemberCount; // 0x0(0x0)
	float CurrentSpeed; // 0x0(0x0)
	struct AGamePlayerController* OwnerPlayerController; // 0x0(0x0)
	char pad_270[0x18]; // 0x0(0x0)

	void ReviveImmediately(); // Function /Script/Game.ReviveHelper.ReviveImmediately // (Final|Native|Public|BlueprintCallable) // @ game+0
	void NetMulticast_NotifyPlayerState(__int32 InPlayerId, bool InIsEntry, __int32 InMemberCount, float InServerProgress); // Function /Script/Game.ReviveHelper.NetMulticast_NotifyPlayerState // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	void NetMulticast_NotifyPlayerReviveTimeOut(); // Function /Script/Game.ReviveHelper.NetMulticast_NotifyPlayerReviveTimeOut // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	bool IsSinglePlayer(); // Function /Script/Game.ReviveHelper.IsSinglePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetPercent(); // Function /Script/Game.ReviveHelper.GetPercent // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetNeedTime(); // Function /Script/Game.ReviveHelper.GetNeedTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetMaxReviveCount(); // Function /Script/Game.ReviveHelper.GetMaxReviveCount // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.Reviver
// Size: 0x0 (Inherited: 0x0)
struct AReviver : AActor {
	bool bAutoInitial; // 0x0(0x0)
	char pad_221[0x3]; // 0x0(0x0)
	float HealthScale; // 0x0(0x0)
	float ProgressTime; // 0x0(0x0)
	float RecoveryTime; // 0x0(0x0)
	float CurrentTime; // 0x0(0x0)
	enum class EGameInteractorState CurrentInteractState; // 0x0(0x0)
	char pad_235[0x3]; // 0x0(0x0)
	struct AActor* RevivedActor; // 0x0(0x0)

	bool StartRevive(); // Function /Script/Game.Reviver.StartRevive // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetState(enum class EGameInteractorState InState); // Function /Script/Game.Reviver.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnRep_InteractState(); // Function /Script/Game.Reviver.OnRep_InteractState // (Final|Native|Protected) // @ game+0
	void OnProgressState(); // Function /Script/Game.Reviver.OnProgressState // (Event|Protected|BlueprintEvent) // @ game+0
	void OnFinishState(); // Function /Script/Game.Reviver.OnFinishState // (Event|Protected|BlueprintEvent) // @ game+0
	void OnDisableState(); // Function /Script/Game.Reviver.OnDisableState // (Event|Protected|BlueprintEvent) // @ game+0
	bool CanRevive(struct AActor* OtherActor); // Function /Script/Game.Reviver.CanRevive // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0
};

 // Class /Script/Game.SceneActorRenderComponent
// Size: 0x0 (Inherited: 0x0)
struct USceneActorRenderComponent : UActorComponent {
	struct TMap<struct TWeakObjectPtr<struct UMeshComponent>, struct FSceneActorMaterialCache> MaterialCaches; // 0x0(0x0)
	char pad_100[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.SceneCaptureImage
// Size: 0x0 (Inherited: 0x0)
struct USceneCaptureImage : UImage {
	struct UMaterialInterface* PostProcessMaterial; // 0x0(0x0)
	struct ASceneCapture2D* Capture; // 0x0(0x0)
	char pad_238[0x8]; // 0x0(0x0)

	void DoCapture(); // Function /Script/Game.SceneCaptureImage.DoCapture // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SceneMovieActor
// Size: 0x0 (Inherited: 0x0)
struct ASceneMovieActor : AStaticMeshActor {
	struct UFileMediaSource* MediaSource; // 0x0(0x0)
	struct UMediaPlayer* MediaPlayer; // 0x0(0x0)
	struct UMediaTexture* MediaTexture; // 0x0(0x0)
	struct APlayerCameraManager* CameraManager; // 0x0(0x0)
	char pad_250[0x8]; // 0x0(0x0)

	void OnMediaSourceOpenedHandler(struct FString DeviceUrl); // Function /Script/Game.SceneMovieActor.OnMediaSourceOpenedHandler // (Final|Native|Protected) // @ game+0
	void OnMediaOpenFailedHandler(struct FString DeviceUrl); // Function /Script/Game.SceneMovieActor.OnMediaOpenFailedHandler // (Final|Native|Protected) // @ game+0
	void OnMediaEndHandler(); // Function /Script/Game.SceneMovieActor.OnMediaEndHandler // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.ScrollText
// Size: 0x0 (Inherited: 0x0)
struct UScrollText : UTextLayoutWidget {
	float ScrollSpeed; // 0x0(0x0)
	char pad_144[0x4]; // 0x0(0x0)
	struct FText Text; // 0x0(0x0)
	struct FDelegate TextDelegate; // 0x0(0x0)
	struct FSlateColor ColorAndOpacity; // 0x0(0x0)
	struct FDelegate ColorAndOpacityDelegate; // 0x0(0x0)
	struct FSlateFontInfo Font; // 0x0(0x0)
	struct FSlateBrush StrikeBrush; // 0x0(0x0)
	struct FVector2D ShadowOffset; // 0x0(0x0)
	struct FLinearColor ShadowColorAndOpacity; // 0x0(0x0)
	struct FDelegate ShadowColorAndOpacityDelegate; // 0x0(0x0)
	float MinDesiredWidth; // 0x0(0x0)
	bool bWrapWithInvalidationPanel; // 0x0(0x0)
	bool bAutoWrapText; // 0x0(0x0)
	enum class ETextTransformPolicy TextTransformPolicy; // 0x0(0x0)
	bool bSimpleTextMode; // 0x0(0x0)
	char pad_2B8[0x10]; // 0x0(0x0)

	void SetTextTransformPolicy(enum class ETextTransformPolicy InTransformPolicy); // Function /Script/Game.ScrollText.SetTextTransformPolicy // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetText(struct FText InText); // Function /Script/Game.ScrollText.SetText // (Native|Public|BlueprintCallable) // @ game+0
	void SetStrikeBrush(struct FSlateBrush& InStrikeBrush); // Function /Script/Game.ScrollText.SetStrikeBrush // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetShadowOffset(struct FVector2D InShadowOffset); // Function /Script/Game.ScrollText.SetShadowOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity); // Function /Script/Game.ScrollText.SetShadowColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetOpacity(float InOpacity); // Function /Script/Game.ScrollText.SetOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetMinDesiredWidth(float InMinDesiredWidth); // Function /Script/Game.ScrollText.SetMinDesiredWidth // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetFont(struct FSlateFontInfo& InFontInfo); // Function /Script/Game.ScrollText.SetFont // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetColorAndOpacity(struct FSlateColor InColorAndOpacity); // Function /Script/Game.ScrollText.SetColorAndOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAutoWrapText(bool InAutoTextWrap); // Function /Script/Game.ScrollText.SetAutoWrapText // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FText GetText(); // Function /Script/Game.ScrollText.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UMaterialInstanceDynamic* GetDynamicOutlineMaterial(); // Function /Script/Game.ScrollText.GetDynamicOutlineMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UMaterialInstanceDynamic* GetDynamicFontMaterial(); // Function /Script/Game.ScrollText.GetDynamicFontMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SeasunGameSession
// Size: 0x0 (Inherited: 0x0)
struct ASeasunGameSession : AGameSession {
};

 // Class /Script/Game.SeasunNetPing
// Size: 0x0 (Inherited: 0x0)
struct USeasunNetPing : UGameTickableWorldSubsystem {
	char pad_58[0x30]; // 0x0(0x0)
};

 // Class /Script/Game.SelectWidget
// Size: 0x0 (Inherited: 0x0)
struct USelectWidget : ULuaWidget {
	struct UWidget* ListBtn; // 0x0(0x0)
	struct UWidget* BtnSelect; // 0x0(0x0)

	void OnForcus(struct FVector2D InPosition); // Function /Script/Game.SelectWidget.OnForcus // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void OnBlur(struct FVector2D InPosition); // Function /Script/Game.SelectWidget.OnBlur // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	struct UWidget* FindWidget(struct FName& InName); // Function /Script/Game.SelectWidget.FindWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SimpleAnimComponent
// Size: 0x0 (Inherited: 0x0)
struct USimpleAnimComponent : UActorComponent {
	struct FTransform From; // 0x0(0x0)
	struct FTransform To; // 0x0(0x0)
	struct UCurveFloat* Curve; // 0x0(0x0)
	float AllTime; // 0x0(0x0)
	char pad_11C[0x4]; // 0x0(0x0)
	struct USceneComponent* CacheTarget; // 0x0(0x0)
	char pad_128[0x18]; // 0x0(0x0)

	void PlayAnim(struct USceneComponent* Target); // Function /Script/Game.SimpleAnimComponent.PlayAnim // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SimpleDestructibles
// Size: 0x0 (Inherited: 0x0)
struct ASimpleDestructibles : AGameSkillInteractorBase {
	struct UStaticMeshComponent* MeshTemp; // 0x0(0x0)
	__int32 HP; // 0x0(0x0)
	__int32 CharacterTemplateID; // 0x0(0x0)
	char pad_B40[0x10]; // 0x0(0x0)

	void OnDestroy(struct AGameCharacter* Character, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.SimpleDestructibles.OnDestroy // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.SimpleDroneAIController
// Size: 0x0 (Inherited: 0x0)
struct ASimpleDroneAIController : AGameAIController {
	struct TWeakObjectPtr<struct AGamePetCharacter> GamePet; // 0x0(0x0)
	char pad_498[0x8]; // 0x0(0x0)

	void SetFollowEnabled(bool CanFollow); // Function /Script/Game.SimpleDroneAIController.SetFollowEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetFollowEnabled(); // Function /Script/Game.SimpleDroneAIController.GetFollowEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SkillActor
// Size: 0x0 (Inherited: 0x0)
struct ASkillActor : AActor {
	char pad_220[0x8]; // 0x0(0x0)
	struct UAbilityComponentBase* AbilityComp; // 0x0(0x0)
	struct FFlexibleEnumValue CampType; // 0x0(0x0)
	char pad_234[0x4]; // 0x0(0x0)
};

 // Class /Script/Game.SkillAnimNotifyComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillAnimNotifyComponent : USkillEffectComponent {
	float CurrentPosition; // 0x0(0x0)
	float CurrentClientPosition; // 0x0(0x0)
	char pad_C8[0x8]; // 0x0(0x0)
	struct TArray<struct FAnimStateEventInfo> ActiveAnimStateEvent; // 0x0(0x0)
	struct TArray<struct FAnimStateEventInfo> PrepareActiveAnimStateEvent; // 0x0(0x0)
	struct UPlaySkillMontageComponent* PlaySkillMontage; // 0x0(0x0)
	struct UAnimMontage* CurrentSkillMontage; // 0x0(0x0)
	bool bInAnimTick; // 0x0(0x0)
	char pad_101[0x7]; // 0x0(0x0)

	void ServerMontagePositon(float MontagePositon); // Function /Script/Game.SkillAnimNotifyComponent.ServerMontagePositon // (Net|Native|Event|Protected|NetServer) // @ game+0
};

 // Class /Script/Game.SkillBufferStateComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillBufferStateComponent : USkillEffectComponent {
	struct TArray<struct UGameAbilityBuffer*> AbilityBufferClasses; // 0x0(0x0)
};

 // Class /Script/Game.ButtonBase
// Size: 0x0 (Inherited: 0x0)
struct UButtonBase : UDragWidget {
	struct FMulticastInlineDelegate OnGuideMouseButtonEvent; // 0x0(0x0)
	struct FMulticastInlineDelegate OnButtonVisibleChange; // 0x0(0x0)
	float TriggerTime; // 0x0(0x0)
	bool SkillInCD; // 0x0(0x0)
	bool EnergyNotEnough; // 0x0(0x0)
	char pad_2FE[0xCA]; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGamePlayerController> PlayerController; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> Pawn; // 0x0(0x0)
	struct UWidget* TempPanelTier; // 0x0(0x0)
	struct UTextBlock* TempTxtTier; // 0x0(0x0)
	struct UImage* TempBarTier; // 0x0(0x0)
	struct UWidget* TempNumberPanel; // 0x0(0x0)
	struct TArray<struct UWidget*> TempNumberNodes; // 0x0(0x0)
	struct TArray<struct UImage*> TempNumberNodesWhite; // 0x0(0x0)
	bool bExistModifierEffect; // 0x0(0x0)
	char pad_419[0x7]; // 0x0(0x0)
	struct TArray<struct FString> ModifierEffectNames; // 0x0(0x0)

	void VisibilityChanged(enum class ESlateVisibility InVisibility); // Function /Script/Game.ButtonBase.VisibilityChanged // (Native|Public) // @ game+0
	void UIGuideMouseButton__DelegateSignature(__int32 Type, struct FPointerEvent& InMouseEvent); // DelegateFunction /Script/Game.ButtonBase.UIGuideMouseButton__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0
	void SetButtonState(enum class ESkillButtonState InState); // Function /Script/Game.ButtonBase.SetButtonState // (Final|Native|Public) // @ game+0
	void OnChargeTimesChange(__int32 InCurrentTimes, __int32 InMaxTimes); // Function /Script/Game.ButtonBase.OnChargeTimesChange // (Event|Protected|BlueprintEvent) // @ game+0
	void OnButtonVisibleChange__DelegateSignature(); // DelegateFunction /Script/Game.ButtonBase.OnButtonVisibleChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnAppliedModifierChange(__int32 InModifierID, bool IsApply); // Function /Script/Game.ButtonBase.OnAppliedModifierChange // (Native|Public) // @ game+0
	void K2_PlaySustainAnim(bool bPlay); // Function /Script/Game.ButtonBase.K2_PlaySustainAnim // (Event|Protected|BlueprintEvent) // @ game+0
	void K2_PlayCDAnim(bool bPlay); // Function /Script/Game.ButtonBase.K2_PlayCDAnim // (Event|Protected|BlueprintEvent) // @ game+0
	void AroundOrUp(struct FPointerEvent& InEvent); // Function /Script/Game.ButtonBase.AroundOrUp // (Native|Public|HasOutParms|Const) // @ game+0
};

 // Class /Script/Game.CostomFireButton
// Size: 0x0 (Inherited: 0x0)
struct UCostomFireButton : UButtonBase {
	char pad_430[0x4]; // 0x0(0x0)
	struct TWeakObjectPtr<struct USkillPanel> Panel; // 0x0(0x0)
	char pad_43C[0x4]; // 0x0(0x0)
	struct UWidget* TempPressImg; // 0x0(0x0)

	void CancelAim(bool bInAiming); // Function /Script/Game.CostomFireButton.CancelAim // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.JumpButton
// Size: 0x0 (Inherited: 0x0)
struct UJumpButton : UButtonBase {
	struct UWidget* TempNormalImg; // 0x0(0x0)
	struct UWidget* TempPressImg; // 0x0(0x0)
};

 // Class /Script/Game.LeftCancel
// Size: 0x0 (Inherited: 0x0)
struct ULeftCancel : UButtonBase {
	struct TWeakObjectPtr<struct USkillPanel> Panel; // 0x0(0x0)
	struct UWidget* TempPressImg; // 0x0(0x0)
};

 // Class /Script/Game.SkillAimButton
// Size: 0x0 (Inherited: 0x0)
struct USkillAimButton : UButtonBase {
	char pad_430[0x8]; // 0x0(0x0)
	struct UWidget* TempNormalImg; // 0x0(0x0)
	struct UWidget* TempPressImg; // 0x0(0x0)
	struct UWidget* TempOpenImg; // 0x0(0x0)
	struct UWidget* TempCloseImg; // 0x0(0x0)
	char pad_458[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.SkillReloadButton
// Size: 0x0 (Inherited: 0x0)
struct USkillReloadButton : UButtonBase {
	struct UWidget* TempNormalImg; // 0x0(0x0)
	struct UWidget* TempPressImg; // 0x0(0x0)
	struct UImage* TempReloadingImg; // 0x0(0x0)
	char pad_448[0x8]; // 0x0(0x0)

	void OnReload(bool bIsReload, float TotalTime, bool bInterrupt); // Function /Script/Game.SkillReloadButton.OnReload // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SkillRushButton
// Size: 0x0 (Inherited: 0x0)
struct USkillRushButton : UButtonBase {
	struct UImage* ImgBar; // 0x0(0x0)
	struct UWidget* TempNormalImg; // 0x0(0x0)
	struct UWidget* TempPressImg; // 0x0(0x0)
	struct UWidget* TempCDPanel; // 0x0(0x0)
	struct UTextBlock* TempCDText; // 0x0(0x0)
	struct UImage* TempCDImg; // 0x0(0x0)
	char pad_460[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.SkillButton
// Size: 0x0 (Inherited: 0x0)
struct USkillButton : UButtonBase {
	__int32 SkillIndex; // 0x0(0x0)
	bool bQTE; // 0x0(0x0)
	bool bRushOrRun; // 0x0(0x0)
	bool bTempRushOrRun; // 0x0(0x0)
	bool bInAbnormal; // 0x0(0x0)
	struct UTextBlock* TxtState; // 0x0(0x0)
	struct UImage* ImgBar; // 0x0(0x0)
	__int32 CurrentSkillId; // 0x0(0x0)
	float HoldButtonIntoRushTime; // 0x0(0x0)
	float HoldRushButtonIntoRunTime; // 0x0(0x0)
	float StartHoldButtonTime; // 0x0(0x0)
	bool bSkillCDPre; // 0x0(0x0)
	bool bEnergyPre; // 0x0(0x0)
	char pad_45A[0x2]; // 0x0(0x0)
	struct TWeakObjectPtr<struct ASkillSelector> SkillSelector; // 0x0(0x0)
	__int32 DerivedSkillId; // 0x0(0x0)
	bool bStartDerivedSkill; // 0x0(0x0)
	char pad_469[0x7]; // 0x0(0x0)
	struct UWidget* TempNormalImg; // 0x0(0x0)
	struct UWidget* TempPressImg; // 0x0(0x0)
	struct UWidget* TempImgBG; // 0x0(0x0)
	struct UWidget* TempPoint; // 0x0(0x0)
	struct UWidget* TempSelect; // 0x0(0x0)
	struct UImage* TempImgIcon; // 0x0(0x0)
	struct UWidget* TempPanelCD; // 0x0(0x0)
	struct UImage* TempImageCD; // 0x0(0x0)
	struct UTextBlock* TempTxtCD; // 0x0(0x0)
	struct UWidget* TempPanelTag; // 0x0(0x0)
	struct UTextBlock* TempTxtTag; // 0x0(0x0)
	struct UProgressBar* TempBarNoEnergy; // 0x0(0x0)
	char pad_4D0[0xC]; // 0x0(0x0)
	struct TWeakObjectPtr<struct USkillPanel> SkillPanel; // 0x0(0x0)
	char pad_4E4[0x4]; // 0x0(0x0)

	void UseSkill(enum class ESkillCastType InType); // Function /Script/Game.SkillButton.UseSkill // (Final|Native|Private) // @ game+0
	void SetSkillPanel(struct USkillPanel* InSkillPanel); // Function /Script/Game.SkillButton.SetSkillPanel // (Final|Native|Public) // @ game+0
	void QTEActive(__int32 InID); // Function /Script/Game.SkillButton.QTEActive // (Final|Native|Public) // @ game+0
	void PlayDerivedSkillAnim(bool bPlay); // Function /Script/Game.SkillButton.PlayDerivedSkillAnim // (Event|Public|BlueprintEvent) // @ game+0
	void PlayCastableAnim(); // Function /Script/Game.SkillButton.PlayCastableAnim // (Event|Public|BlueprintEvent) // @ game+0
	void OnSkillStrengthening(bool bStart); // Function /Script/Game.SkillButton.OnSkillStrengthening // (Event|Public|BlueprintEvent) // @ game+0
	void OnSkillStateChange(__int32 InIndex, __int32 InID, enum class ESkillCastableType InType, bool bAutoCastCheck, __int32 DelegateCastIndex); // Function /Script/Game.SkillButton.OnSkillStateChange // (Final|Native|Private) // @ game+0
	void OnReduceCD(); // Function /Script/Game.SkillButton.OnReduceCD // (Event|Public|BlueprintEvent) // @ game+0
	void OnQTEStateChange(bool bActive); // Function /Script/Game.SkillButton.OnQTEStateChange // (Event|Public|BlueprintEvent) // @ game+0
	void K2_SetButtonForbid(bool bForbid); // Function /Script/Game.SkillButton.K2_SetButtonForbid // (Event|Public|BlueprintEvent) // @ game+0
	void K2_SetButtonAbnormal(bool bForbid); // Function /Script/Game.SkillButton.K2_SetButtonAbnormal // (Event|Public|BlueprintEvent) // @ game+0
	void K2_NormalEnergyChange(bool bFull); // Function /Script/Game.SkillButton.K2_NormalEnergyChange // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.RushSkillButton
// Size: 0x0 (Inherited: 0x0)
struct URushSkillButton : USkillButton {
};

 // Class /Script/Game.SuperSkillButton
// Size: 0x0 (Inherited: 0x0)
struct USuperSkillButton : UButtonBase {
	__int32 SkillIndex; // 0x0(0x0)
	__int32 CurrentSkillId; // 0x0(0x0)
	float SkillNeedEnergy; // 0x0(0x0)
	bool bEnergyFull; // 0x0(0x0)
	bool bEnergyPre; // 0x0(0x0)
	bool bSkillCDPre; // 0x0(0x0)
	char pad_43F[0x1]; // 0x0(0x0)
	struct TWeakObjectPtr<struct ASkillSelector> SkillSelector; // 0x0(0x0)
	char pad_448[0x8]; // 0x0(0x0)
	struct UImage* ImgBG; // 0x0(0x0)
	struct UImage* ImgIcon; // 0x0(0x0)
	struct UCanvasPanel* PanelFinish; // 0x0(0x0)
	struct UCanvasPanel* PanelEnough; // 0x0(0x0)
	struct UWidget* TmpParticleEnough; // 0x0(0x0)
	struct UCanvasPanel* PanelCD; // 0x0(0x0)
	struct UImage* ImgCD; // 0x0(0x0)
	struct UTextBlock* TxtCD; // 0x0(0x0)
	struct UImage* PressImg; // 0x0(0x0)
	struct UTextBlock* TxtPowerNum; // 0x0(0x0)

	void UseSkill(enum class ESkillCastType InType); // Function /Script/Game.SuperSkillButton.UseSkill // (Final|Native|Public) // @ game+0
	void OnSkillStrengthening(bool bStart); // Function /Script/Game.SuperSkillButton.OnSkillStrengthening // (Event|Public|BlueprintEvent) // @ game+0
	void OnSkillStateChange(__int32 InIndex, __int32 InID, enum class ESkillCastableType InType, bool bAutoCastCheck, __int32 DelegateCastIndex); // Function /Script/Game.SuperSkillButton.OnSkillStateChange // (Final|Native|Private) // @ game+0
	void OnReduceCD(); // Function /Script/Game.SuperSkillButton.OnReduceCD // (Event|Public|BlueprintEvent) // @ game+0
	void K2_SetButtonForbid(bool bForbid); // Function /Script/Game.SuperSkillButton.K2_SetButtonForbid // (Event|Public|BlueprintEvent) // @ game+0
	void K2_PlayFinishAnim(); // Function /Script/Game.SuperSkillButton.K2_PlayFinishAnim // (Event|Public|BlueprintEvent) // @ game+0
	void K2_PlayEnoughAnim(bool bPlay); // Function /Script/Game.SuperSkillButton.K2_PlayEnoughAnim // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.BackSuperSkillButton
// Size: 0x0 (Inherited: 0x0)
struct UBackSuperSkillButton : UButtonBase {
	__int32 SkillIndex; // 0x0(0x0)
	__int32 CurrentSkillId; // 0x0(0x0)
	float SkillNeedEnergy; // 0x0(0x0)
	bool bEnergyFull; // 0x0(0x0)
	char pad_43D[0x3]; // 0x0(0x0)
	struct TWeakObjectPtr<struct ASkillSelector> SkillSelector; // 0x0(0x0)
	char pad_448[0x8]; // 0x0(0x0)
	struct UImage* ImgBG; // 0x0(0x0)
	struct UImage* ImgIcon; // 0x0(0x0)
	struct UCanvasPanel* PanelFinish; // 0x0(0x0)
	struct UWidget* TmpParticleEnough; // 0x0(0x0)
	struct UImage* PressImg; // 0x0(0x0)
	struct UWidget* Silence; // 0x0(0x0)

	void UseSkill(enum class ESkillCastType InType); // Function /Script/Game.BackSuperSkillButton.UseSkill // (Final|Native|Public) // @ game+0
	void OnSkillStrengthening(bool bStart); // Function /Script/Game.BackSuperSkillButton.OnSkillStrengthening // (Event|Public|BlueprintEvent) // @ game+0
	void OnSkillStateChange(__int32 InIndex, __int32 InID, enum class ESkillCastableType InType, bool bAutoCastCheck, __int32 DelegateCastIndex); // Function /Script/Game.BackSuperSkillButton.OnSkillStateChange // (Final|Native|Private) // @ game+0
	void OnReduceCD(); // Function /Script/Game.BackSuperSkillButton.OnReduceCD // (Event|Public|BlueprintEvent) // @ game+0
	void K2_PlayFinishAnim(); // Function /Script/Game.BackSuperSkillButton.K2_PlayFinishAnim // (Event|Public|BlueprintEvent) // @ game+0
	void K2_PlayEnoughAnim(bool bPlay); // Function /Script/Game.BackSuperSkillButton.K2_PlayEnoughAnim // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.FireButton
// Size: 0x0 (Inherited: 0x0)
struct UFireButton : UButtonBase {
	struct UWidget* TempPressImg; // 0x0(0x0)
	__int32 SkillIndex; // 0x0(0x0)
	float MaxSize; // 0x0(0x0)
	__int32 CurrentSkillId; // 0x0(0x0)
	char pad_444[0x4]; // 0x0(0x0)
	struct UWidget* BG; // 0x0(0x0)
	struct UWidget* Fire; // 0x0(0x0)

	void UseSkill(enum class ESkillCastType InType); // Function /Script/Game.FireButton.UseSkill // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.LeftFireButton
// Size: 0x0 (Inherited: 0x0)
struct ULeftFireButton : UButtonBase {
	__int32 SkillIndex; // 0x0(0x0)
	float MaxSize; // 0x0(0x0)
	__int32 CurrentSkillId; // 0x0(0x0)
	char pad_43C[0x4]; // 0x0(0x0)
	struct UWidget* ImgNomral; // 0x0(0x0)
	struct UWidget* ImgPress; // 0x0(0x0)

	void UseSkill(enum class ESkillCastType InType); // Function /Script/Game.LeftFireButton.UseSkill // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.IParticleBase
// Size: 0x0 (Inherited: 0x0)
struct UIParticleBase : UUserWidget {
	struct FMulticastInlineDelegate OnEmitUIParticle; // 0x0(0x0)
	struct FMulticastInlineDelegate OnMatUIParticle; // 0x0(0x0)

	void OnMatUIParticle__DelegateSignature(bool IsOn, struct UMaterialInstance* UIParticle); // DelegateFunction /Script/Game.IParticleBase.OnMatUIParticle__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnEmitUIParticle__DelegateSignature(bool IsOn, struct UFXSystemAsset* UIParticle); // DelegateFunction /Script/Game.IParticleBase.OnEmitUIParticle__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void IsMatUIParticle(bool IsOn, struct UMaterialInstance* UIMat); // Function /Script/Game.IParticleBase.IsMatUIParticle // (Native|Public) // @ game+0
	void IsEmitUIParticle(bool IsOn, struct UFXSystemAsset* UIParticle); // Function /Script/Game.IParticleBase.IsEmitUIParticle // (Native|Public) // @ game+0
};

 // Class /Script/Game.IEmitParticle
// Size: 0x0 (Inherited: 0x0)
struct UIEmitParticle : UIParticleBase {
	struct UUIParticleImage* TmpPareSilent; // 0x0(0x0)
};

 // Class /Script/Game.IDynamicMaterial
// Size: 0x0 (Inherited: 0x0)
struct UIDynamicMaterial : UIParticleBase {
	struct UImage* PareSilentMat; // 0x0(0x0)
};

 // Class /Script/Game.SkillCDComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillCDComponent : USkillEffectComponent {
	enum class ECDType CDType; // 0x0(0x0)
	char pad_C1[0x3]; // 0x0(0x0)
	__int32 SkillID; // 0x0(0x0)
};

 // Class /Script/Game.AnimNotifyState_SkillCombo
// Size: 0x0 (Inherited: 0x0)
struct UAnimNotifyState_SkillCombo : UAnimNotifyState {
	char ComboId; // 0x0(0x0)
	char pad_31[0x3]; // 0x0(0x0)
	__int32 MontageSectionIndex; // 0x0(0x0)
};

 // Class /Script/Game.SkillComboComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillComboComponent : UPlaySkillMontageComponent {
	char pad_100[0x4]; // 0x0(0x0)
	struct FName StopComboSection; // 0x0(0x0)
	char pad_10C[0x4]; // 0x0(0x0)
	struct UAnimNotifyState_SkillCombo* CurrentSkillCombo; // 0x0(0x0)
	bool bComboWaiting; // 0x0(0x0)
	char pad_119[0x7]; // 0x0(0x0)

	void ServerJumpComboSection(__int32 MontageSectionIndex); // Function /Script/Game.SkillComboComponent.ServerJumpComboSection // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0
	bool ReceiveChcekCombo(); // Function /Script/Game.SkillComboComponent.ReceiveChcekCombo // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0
	bool ReceiveAllowJumpCombo(char ComboId); // Function /Script/Game.SkillComboComponent.ReceiveAllowJumpCombo // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0
	void PlayComboSection(__int32 MontageSectionIndex); // Function /Script/Game.SkillComboComponent.PlayComboSection // (Final|Net|NetReliableNative|Event|NetMulticast|Private|BlueprintCallable) // @ game+0
	void K2_ShowSkillComboTip(char ComboId); // Function /Script/Game.SkillComboComponent.K2_ShowSkillComboTip // (Event|Protected|BlueprintEvent|Const) // @ game+0
	void K2_CloseSkillComboTip(char ComboId); // Function /Script/Game.SkillComboComponent.K2_CloseSkillComboTip // (Event|Protected|BlueprintEvent|Const) // @ game+0
};

 // Class /Script/Game.SkillCostComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillCostComponent : USkillEffectComponent {
	char pad_C0[0x10]; // 0x0(0x0)
};

 // Class /Script/Game.SkillDodgeComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillDodgeComponent : USkillEffectComponent {
	struct UPlaySkillMontageComponent* PlaySkillMontage; // 0x0(0x0)
};

 // Class /Script/Game.SkillEmitter
// Size: 0x0 (Inherited: 0x0)
struct USkillEmitter : UObject {
	char pad_28[0x10]; // 0x0(0x0)
	struct TArray<struct FTransform> SearchAnchors; // 0x0(0x0)
	char pad_48[0x8]; // 0x0(0x0)
	struct FEmitterInfo InfoTemplete; // 0x0(0x0)
	struct FEmitterInfo OverrideInfoTemplete; // 0x0(0x0)
	__int32 OverrideInfoTempleteID; // 0x0(0x0)
	char pad_A14[0x4]; // 0x0(0x0)
	struct FString InheritRandomSocket; // 0x0(0x0)
	struct TArray<struct FQueryResult> QueryResults; // 0x0(0x0)
	struct TArray<struct FQueryResult> InheritResults; // 0x0(0x0)
	struct FBlockByControlProtectionKeepEffectInfo BlockedKeepEffectInfo; // 0x0(0x0)
	struct FRuntimeEASInfo RuntimeEASInfo; // 0x0(0x0)
	__int32 InstanceId; // 0x0(0x0)
	__int32 ActiveTimes; // 0x0(0x0)
	float EmitTime; // 0x0(0x0)
	bool bKeepRunning; // 0x0(0x0)
	bool bInActive; // 0x0(0x0)
	char pad_AC2[0x2]; // 0x0(0x0)
	float EndMontagePosition; // 0x0(0x0)
	float DurationOnMontage; // 0x0(0x0)
	bool bPrepare; // 0x0(0x0)
	char pad_ACD[0x3]; // 0x0(0x0)
	struct TMap<struct FString, struct FTransform> SocketStorageTransform; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> Conditions; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> EndConditions; // 0x0(0x0)
	struct TArray<struct UEmitterAnchorPointRuleBase*> AnchorRules; // 0x0(0x0)
	struct TMap<struct AActor*, __int32> TargetApplyTimes; // 0x0(0x0)
	__int32 EffectApplyTimes; // 0x0(0x0)
	__int32 SkillTriggerTimes; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameSkill> GameSkillOwner; // 0x0(0x0)
	struct TWeakObjectPtr<struct USkillMove> SkillMove; // 0x0(0x0)
	char pad_C38[0x8]; // 0x0(0x0)
	struct FTransform CastTransform; // 0x0(0x0)
	float ActiveTime; // 0x0(0x0)
	char bDataInit : 1; // 0x0(0x0)
	char pad_C74_1 : 7; // 0x0(0x0)
	char pad_C75[0x3]; // 0x0(0x0)
	struct TArray<struct FAnimNotifyEvent> Notifies; // 0x0(0x0)
	float PreMontagePositionTime; // 0x0(0x0)
	float CurrentMontagePositionTime; // 0x0(0x0)
	__int32 Level; // 0x0(0x0)
	char pad_C94[0xC]; // 0x0(0x0)
	struct UFXSystemComponent* RayParticleRef; // 0x0(0x0)
	struct UFXSystemComponent* RayHitParticleRef_Loop; // 0x0(0x0)
	struct TArray<struct UFXSystemComponent*> AnchorParticles; // 0x0(0x0)
	struct TArray<struct UWwiseComponent*> AnchorPointSounds; // 0x0(0x0)
	char pad_CD0[0x20]; // 0x0(0x0)

	void SpawnBulletWithEmitterInfo(struct UAbilityComponentBase* SpawnerAbility, struct FEmitterInfo& Info, struct TArray<struct FQueryResult>& Queries, __int32& CurrentActiveTimes, struct FTransform& BulletSpawnTransform, __int32 InLevel); // Function /Script/Game.SkillEmitter.SpawnBulletWithEmitterInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SortTargetsByRule(struct TArray<struct FQueryResult>& Results, struct FEmitterInfo& EmitterInfo, struct UAbilityComponentBase* EmitterLauncher, struct AGameSkill* SkillRef, struct AActor* CastActor, struct USkillEmitter* EmitterRef); // Function /Script/Game.SkillEmitter.SortTargetsByRule // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetSkillMove(struct USkillMove* NewSkillMove); // Function /Script/Game.SkillEmitter.SetSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetOverrideEmitterID(__int32 OverrideID); // Function /Script/Game.SkillEmitter.SetOverrideEmitterID // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetLevel(__int32 InLevel); // Function /Script/Game.SkillEmitter.SetLevel // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetGameSkillOwner(struct AGameSkill* GameSkill); // Function /Script/Game.SkillEmitter.SetGameSkillOwner // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FTransform> SearchTargetsWithEmitterInfo(struct TArray<struct FQueryResult>& Results, struct FEmitterInfo& Info, struct UAbilityComponentBase* EmitterLauncher, struct AGameSkill* SkillRef, struct USkillEmitter* EmitterRef, struct AActor* CastActor, struct AActor* ModifierOwner); // Function /Script/Game.SkillEmitter.SearchTargetsWithEmitterInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FTransform> SearchTargetsWithEmitter(struct TArray<struct FQueryResult>& Results, struct USkillEmitter* InEmitter); // Function /Script/Game.SkillEmitter.SearchTargetsWithEmitter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> QueryTargetsWithCollision(struct AActor* CollisionOwner, struct FEmitterInfo& EmitterInfo, struct USkillEmitter* EmitterRef, bool bUseRelationCheck); // Function /Script/Game.SkillEmitter.QueryTargetsWithCollision // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void PlayRayEffect(struct FVector& InStart, struct FVector& InEnd); // Function /Script/Game.SkillEmitter.PlayRayEffect // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void PlayRayBulletLaunchSound(__int32 InBulletID, struct FTransform& CenterTransform); // Function /Script/Game.SkillEmitter.PlayRayBulletLaunchSound // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void PlayBulletHitEffect(__int32 InBulletID, struct FHitResult& InHit); // Function /Script/Game.SkillEmitter.PlayBulletHitEffect // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void OnSkillMoveEnd(struct USkillMove* MoveRef); // Function /Script/Game.SkillEmitter.OnSkillMoveEnd // (Final|Native|Public) // @ game+0
	void OnOverrideSettingRemove(__int32 TargetId, __int32 OverrideID); // Function /Script/Game.SkillEmitter.OnOverrideSettingRemove // (Final|Native|Protected) // @ game+0
	void OnOverrideSettingAdd(__int32 TargetId, __int32 OverrideID); // Function /Script/Game.SkillEmitter.OnOverrideSettingAdd // (Final|Native|Protected) // @ game+0
	void OnInit(struct FEmitterInfo& Data); // Function /Script/Game.SkillEmitter.OnInit // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0
	void OnEmitTick(float DeltaTime); // Function /Script/Game.SkillEmitter.OnEmitTick // (Event|Protected|BlueprintEvent) // @ game+0
	void OnEmitterInterrupt(); // Function /Script/Game.SkillEmitter.OnEmitterInterrupt // (Event|Protected|BlueprintEvent) // @ game+0
	void OnEmitEnd(); // Function /Script/Game.SkillEmitter.OnEmitEnd // (Event|Protected|BlueprintEvent) // @ game+0
	void OnEmitBegin(); // Function /Script/Game.SkillEmitter.OnEmitBegin // (Event|Protected|BlueprintEvent) // @ game+0
	enum class EEmitterResult OnEmit(); // Function /Script/Game.SkillEmitter.OnEmit // (Event|Protected|BlueprintEvent) // @ game+0
	bool IsTargetCanApply(struct AActor* Target); // Function /Script/Game.SkillEmitter.IsTargetCanApply // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsRelationCorrect(struct AActor* Target); // Function /Script/Game.SkillEmitter.IsRelationCorrect // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FString> GetStringArrayValue(__int32 Index); // Function /Script/Game.SkillEmitter.GetStringArrayValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<struct FTransform> GetSpecificTargets(struct TArray<struct FQueryResult>& Targets, struct FEmitterSearchSetting& Info, struct UAbilityComponentBase* EmitterLauncher, struct AActor* ModifierOwner); // Function /Script/Game.SkillEmitter.GetSpecificTargets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct USkillMove* GetSkillMove(); // Function /Script/Game.SkillEmitter.GetSkillMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	__int32 GetSkillLevel(); // Function /Script/Game.SkillEmitter.GetSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AActor* GetSkillLauncher(); // Function /Script/Game.SkillEmitter.GetSkillLauncher // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FSkillInfo GetSkillInfo(); // Function /Script/Game.SkillEmitter.GetSkillInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetSkillId(__int32& OutSkillId, __int32& OutSkillRuntimeId); // Function /Script/Game.SkillEmitter.GetSkillId // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct FTransform> GetSkillAnchorTransform(); // Function /Script/Game.SkillEmitter.GetSkillAnchorTransform // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FTransform GetSelectorTransform(); // Function /Script/Game.SkillEmitter.GetSelectorTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct FQueryResult> GetResultTargets(); // Function /Script/Game.SkillEmitter.GetResultTargets // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetRandomSocket(); // Function /Script/Game.SkillEmitter.GetRandomSocket // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0
	struct TArray<struct FTransform> GetRandomPointInAnchorRange(struct TArray<struct FQueryResult>& Points, struct FEmitterSearchSetting& Info, struct UAbilityComponentBase* EmitterLauncher, struct AGameSkill* SkillRef, struct USkillEmitter* EmitterRef, struct AActor* CastActor, struct AActor* ModifierOwner); // Function /Script/Game.SkillEmitter.GetRandomPointInAnchorRange // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FTransform> GetQueryTargetsInAnchorRange(struct TArray<struct FQueryResult>& Targets, struct FEmitterSearchSetting& Info, struct UAbilityComponentBase* EmitterLauncher, struct AGameSkill* SkillRef, struct USkillEmitter* EmitterRef, struct AActor* CastActor, struct AActor* ModifierOwner); // Function /Script/Game.SkillEmitter.GetQueryTargetsInAnchorRange // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString GetParamValue(__int32 Index); // Function /Script/Game.SkillEmitter.GetParamValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetParamLength(); // Function /Script/Game.SkillEmitter.GetParamLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetParamintValueForLevel(__int32 Index); // Function /Script/Game.SkillEmitter.GetParamintValueForLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetParamintValue(__int32 Index); // Function /Script/Game.SkillEmitter.GetParamintValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<__int32> GetParamInt32ArrayValue(__int32 Index); // Function /Script/Game.SkillEmitter.GetParamInt32ArrayValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetParamfloatValueForLevel(__int32 Index); // Function /Script/Game.SkillEmitter.GetParamfloatValueForLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetParamfloatValue(__int32 Index); // Function /Script/Game.SkillEmitter.GetParamfloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetParamboolValue(__int32 Index); // Function /Script/Game.SkillEmitter.GetParamboolValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FQueryResult GetNextApplyResultByEffectPriority(); // Function /Script/Game.SkillEmitter.GetNextApplyResultByEffectPriority // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AGameCharacter* GetInstigator(); // Function /Script/Game.SkillEmitter.GetInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct AActor*> GetInheritTargets(); // Function /Script/Game.SkillEmitter.GetInheritTargets // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FTransform> GetInheritTargetActors(struct TArray<struct FQueryResult>& Targets, struct FEmitterSearchSetting& Info, struct UAbilityComponentBase* EmitterLauncher, struct AGameSkill* SkillRef, struct USkillEmitter* EmitterRef); // Function /Script/Game.SkillEmitter.GetInheritTargetActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FTransform> GetInheritPoints(struct TArray<struct FQueryResult>& Points, struct FEmitterSearchSetting& Info, struct UAbilityComponentBase* EmitterLauncher, struct AGameSkill* SkillRef, struct USkillEmitter* EmitterRef); // Function /Script/Game.SkillEmitter.GetInheritPoints // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AGameSkill* GetGameSkillOwner(); // Function /Script/Game.SkillEmitter.GetGameSkillOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetFirePointFromWeapon(struct FTransform& FirePoint); // Function /Script/Game.SkillEmitter.GetFirePointFromWeapon // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FEmitterInfo GetEmitterInfo(); // Function /Script/Game.SkillEmitter.GetEmitterInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetEmitterID(); // Function /Script/Game.SkillEmitter.GetEmitterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void GetDamageOriginAndDirection(struct FVector CurrentLoc, struct FVector& OriginLoc, struct FVector& Direction); // Function /Script/Game.SkillEmitter.GetDamageOriginAndDirection // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
	struct TArray<struct FTransform> GetCastTransformFromEmitterInfo(struct FEmitterInfo& Info, struct AActor* Instigator, struct AActor* CastActor, struct AGameSkill* SkillOwner, struct USkillEmitter* EmitterRef); // Function /Script/Game.SkillEmitter.GetCastTransformFromEmitterInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 GetBulletSettingLengthInEmitter(); // Function /Script/Game.SkillEmitter.GetBulletSettingLengthInEmitter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct FBulletSpawnSetting GetBulletSettingInEmitter(); // Function /Script/Game.SkillEmitter.GetBulletSettingInEmitter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TArray<struct FTransform> GetAnchorPoint(struct FEmitterSearchSetting& Info, struct AActor* CastActor, struct UAbilityComponentBase* EmitterLauncher, struct AGameSkill* SkillRef, struct USkillEmitter* EmitterRef, bool bUsePoint, struct AActor* ModifierOwner); // Function /Script/Game.SkillEmitter.GetAnchorPoint // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct FQueryResult> GetAllResultsByEffectPriority(); // Function /Script/Game.SkillEmitter.GetAllResultsByEffectPriority // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UAbilityComponentBase* GetAbilityOwner(); // Function /Script/Game.SkillEmitter.GetAbilityOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void FreshRayParticlePath(struct FVector& StartLoc, struct FVector& EndLoc); // Function /Script/Game.SkillEmitter.FreshRayParticlePath // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool FindSocketTransformOnOwner(struct AActor* LauncherActor, struct FString Socket, struct FTransform& ResultTransform); // Function /Script/Game.SkillEmitter.FindSocketTransformOnOwner // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void FilterTargets(struct TArray<struct FQueryResult>& Targets, struct FEmitterSearchSetting& Info, struct UAbilityComponentBase* EmitterLauncher, struct FTransform& AnchorTransoform, struct AActor* CastActor); // Function /Script/Game.SkillEmitter.FilterTargets // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void FilterPoints(struct TArray<struct FQueryResult>& Points, struct FEmitterSearchSetting& Info, struct UAbilityComponentBase* EmitterLauncher, struct FTransform& AnchorTransoform); // Function /Script/Game.SkillEmitter.FilterPoints // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void EmitTickRay(struct FTransform& CenterTransform, struct FBulletInfo& RayInfo, bool bMultiRay, float RayDistance); // Function /Script/Game.SkillEmitter.EmitTickRay // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterTickRayToLoc(struct FTransform& CenterTransform, struct FBulletInfo& RayInfo, struct FVector& RayEndLoc, bool bLineTrace); // Function /Script/Game.SkillEmitter.EmitterTickRayToLoc // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct ABullet*> EmitterSpawnBulletWithEmitter(struct USkillEmitter* InEmitter, struct FTransform& BulletSpawnTransform); // Function /Script/Game.SkillEmitter.EmitterSpawnBulletWithEmitter // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct TArray<struct ABullet*> EmitterSpawnBullet(struct UAbilityComponentBase* SpawnerAbility, struct FEmitterInfo& Info, struct TArray<struct FQueryResult>& Queries, __int32& CurrentActiveTimes, struct FTransform& BulletSpawnTransform, struct USkillEmitter* EmitterRef, __int32 InLevel); // Function /Script/Game.SkillEmitter.EmitterSpawnBullet // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterHitEffectPlay(struct FEmitterInfo& EmitterInfo, struct AActor* Target, struct AActor* InLauncher, struct FQueryResult& EmitterHitResult, struct FVector& InHitLocation); // Function /Script/Game.SkillEmitter.EmitterHitEffectPlay // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterDestroyLua(); // Function /Script/Game.SkillEmitter.EmitterDestroyLua // (Event|Public|BlueprintEvent) // @ game+0
	void EmitterAnchorEffectPlayForEmitter(struct FVector& Center, struct FRotator& Rotation); // Function /Script/Game.SkillEmitter.EmitterAnchorEffectPlayForEmitter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterAnchorEffectPlay(struct AActor* EmitterLauncher, struct FEmitterInfo& EmitterInfo, struct FVector& Center, struct FRotator& Rotation, __int64 HashIndex, struct TArray<struct FQueryResult>& InQueryResults); // Function /Script/Game.SkillEmitter.EmitterAnchorEffectPlay // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterAnchorEffectFreshForEmitter(struct FVector& Center, struct FRotator& Rotation); // Function /Script/Game.SkillEmitter.EmitterAnchorEffectFreshForEmitter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterAnchorEffectFresh(struct UObject* Outer, struct FEmitterInfo& EmitterInfo, struct FVector& Center, struct FRotator& Rotation, __int64 HashIndex); // Function /Script/Game.SkillEmitter.EmitterAnchorEffectFresh // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void EmitterAnchorEffectEndForEmitter(); // Function /Script/Game.SkillEmitter.EmitterAnchorEffectEndForEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EmitterAnchorEffectEnd(struct AActor* InLauncher, __int64 HashIndex, struct FEmitterInfo& EmitterInfo); // Function /Script/Game.SkillEmitter.EmitterAnchorEffectEnd // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void EmitSearch(float DeltaTime); // Function /Script/Game.SkillEmitter.EmitSearch // (Final|Native|Public|BlueprintCallable) // @ game+0
	enum class EEmitterResult Emit(float DeltaTime); // Function /Script/Game.SkillEmitter.Emit // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CreateRayParticle(); // Function /Script/Game.SkillEmitter.CreateRayParticle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ApplyMagicToActor(struct FQueryResult& Querier, struct FVector& ApplyLocation, struct FVector& OriginLocation, float DamageScaler, struct FName BoneName); // Function /Script/Game.SkillEmitter.ApplyMagicToActor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void ApplyEffectToActor(struct FEmitterInfo& EmitterInfo, struct UAbilityComponentBase* LauncherAbility, struct FQueryResult& Result, struct FVector& ApplyLoc, struct FVector& OriginLoc, __int32 Level, float DamageScaler, struct FName BoneName, struct USkillEmitter* InLauncherEmitter, struct ABullet* InBullet, struct AActor* CastActor); // Function /Script/Game.SkillEmitter.ApplyEffectToActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void ApplyAbnormalState(struct AGameCharacter* Causer, struct UAbilityComponentBase* Target, struct TArray<struct FAbnormalStateApplyInfo>& Infos, struct FVector& ApplyLocation, struct FVector& OriginLocation, float Scaler, __int32 InID); // Function /Script/Game.SkillEmitter.ApplyAbnormalState // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void AddTargetApplyNum(struct AActor* Target); // Function /Script/Game.SkillEmitter.AddTargetApplyNum // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddQueryResult(struct AActor* Target, struct FVector TargetLoc); // Function /Script/Game.SkillEmitter.AddQueryResult // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.Skill_Emitter
// Size: 0x0 (Inherited: 0x0)
struct USkill_Emitter : USkillEmitter {

	struct TArray<struct FSoftObjectPath> OnGetAssetPath(struct TArray<struct FParamInfo>& Values, struct TArray<__int32>& CharacterIDs); // Function /Script/Game.Skill_Emitter.OnGetAssetPath // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void GetDefaultParamsValue(struct TArray<struct FParamInfo>& Values); // Function /Script/Game.Skill_Emitter.GetDefaultParamsValue // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void GetAssetPath(struct TArray<struct FParamInfo>& Params, struct TArray<struct FSoftObjectPath>& OutPaths, struct TArray<__int32>& CharacterIDs); // Function /Script/Game.Skill_Emitter.GetAssetPath // (Final|Native|Public|HasOutParms) // @ game+0
};

 // Class /Script/Game.SkillEmitterComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillEmitterComponent : USkillAnimNotifyComponent {
	struct TArray<__int32> NeesFreshBoneEmitters; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> Emitters; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> AutoEmitters; // 0x0(0x0)
	struct TArray<__int32> MultiAutoEmitters; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> KeepEmitters; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> SkillEndEmitters; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> CurrentEmitters; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> CurrentAutoEmitters; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> CurrentMultiAutoEmitters; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> DirtyEmitter; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> EmitterCheckCondition; // 0x0(0x0)
	struct TArray<struct USkillEmitter*> AllEmitters; // 0x0(0x0)
	struct TArray<__int32> InterruptEmitterIDs; // 0x0(0x0)
	struct TArray<__int32> CastableEmitterIDs; // 0x0(0x0)
	struct UAnimNotifyState_ReloadBullet* ReloadBulletState; // 0x0(0x0)
	struct UAnimNotifyState_PreReloading* PreReloadingState; // 0x0(0x0)
};

 // Class /Script/Game.SkillEmitterEditor
// Size: 0x0 (Inherited: 0x0)
struct USkillEmitterEditor : UBlueprintFunctionLibrary {

	void GetWeaponAssetPath(__int32 WeaponID, struct TArray<struct FSoftObjectPath>& OutPaths, struct TArray<__int32>& CharacterIDs, struct TArray<__int32>& ModifierIDs); // Function /Script/Game.SkillEmitterEditor.GetWeaponAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetTrapAssetPath(__int32 TrapID, struct TArray<struct FSoftObjectPath>& OutPaths, struct TArray<__int32>& CharacterIDs, struct TArray<__int32>& ModifierIDs); // Function /Script/Game.SkillEmitterEditor.GetTrapAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetSkillAssetPath(__int32 InSkillId, struct TArray<struct FSoftObjectPath>& Paths, struct TArray<__int32>& CharacterIDs, struct TArray<__int32>& ModifierIDs); // Function /Script/Game.SkillEmitterEditor.GetSkillAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetModifierAssetPath(__int32 InModifierID, struct TArray<struct FSoftObjectPath>& OutPath, struct TArray<__int32>& CharacterIDs, struct TArray<__int32>& ModifierIDs); // Function /Script/Game.SkillEmitterEditor.GetModifierAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetMagicAssetPath(struct UMagicAssets* MagicDefaultRef, struct TArray<struct FParamInfo>& Infos, struct TArray<struct FSoftObjectPath>& OutPath, struct TArray<__int32>& CharacterIDs, struct TArray<__int32>& ModifierIDs); // Function /Script/Game.SkillEmitterEditor.GetMagicAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetHitEffectGroupAssetPath(__int32 InID, struct TArray<struct FSoftObjectPath>& OutPath); // Function /Script/Game.SkillEmitterEditor.GetHitEffectGroupAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetEmitterAssetPath(__int32 EmitterID, struct TArray<struct FSoftObjectPath>& Paths, struct TArray<__int32>& CharacterIDs, struct TArray<__int32>& ModifierIDs); // Function /Script/Game.SkillEmitterEditor.GetEmitterAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetBulletEnchantAssetPath(enum class EWeaponType InWeaponType, enum class EModifyHPType InDamageType, struct TArray<struct FSoftObjectPath>& Paths); // Function /Script/Game.SkillEmitterEditor.GetBulletEnchantAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetBulletAssetPath(__int32 InBulletID, struct TArray<struct FSoftObjectPath>& OutPath, struct TArray<__int32>& CharacterIDs, struct TArray<__int32>& ModifierIDs); // Function /Script/Game.SkillEmitterEditor.GetBulletAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SkillInBunkerComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillInBunkerComponent : USkillEffectComponent {
	char pad_C0[0x8]; // 0x0(0x0)
	struct AGameSkill* lpCurrentSkill; // 0x0(0x0)
};

 // Class /Script/Game.SkillModifyComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillModifyComponent : USkillEffectComponent {
	struct TArray<struct UGameAttributeModifier*> Modifiers; // 0x0(0x0)
};

 // Class /Script/Game.SkillMove
// Size: 0x0 (Inherited: 0x0)
struct USkillMove : UObject {
	char pad_28[0x8]; // 0x0(0x0)
	bool bStart; // 0x0(0x0)
	char pad_31[0x7]; // 0x0(0x0)
	struct USkillEmitter* SpawnedBy; // 0x0(0x0)
	__int32 HitStatePriority; // 0x0(0x0)
	float EmitterMontageDurationTime; // 0x0(0x0)
	__int32 ModifierRunTimeID; // 0x0(0x0)
	char pad_4C[0x4]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct UShapeComponent>> CollisionShapeComponents; // 0x0(0x0)
	struct TSet<struct FName> TargetSocketNames; // 0x0(0x0)
	char pad_B0[0x8]; // 0x0(0x0)
	struct FSkillMoveParamInfo ParamInfo; // 0x0(0x0)
	struct FVector TargetLocation; // 0x0(0x0)
	struct TWeakObjectPtr<struct AActor> MoveTarget; // 0x0(0x0)
	char pad_13C[0x4]; // 0x0(0x0)
	struct FQueryResult QueryTargetResult; // 0x0(0x0)
	struct TWeakObjectPtr<struct UBaseMovementComponent> TargetMoveComponent; // 0x0(0x0)
	bool bFinish; // 0x0(0x0)
	char pad_1B9[0x7]; // 0x0(0x0)

	bool OnMoveTouchTargetCheck(struct AActor* InTarget); // Function /Script/Game.SkillMove.OnMoveTouchTargetCheck // (Event|Protected|BlueprintEvent) // @ game+0
	void OnMoveTickCheck(float DeltaTime); // Function /Script/Game.SkillMove.OnMoveTickCheck // (Event|Protected|BlueprintEvent) // @ game+0
	void OnMoveTick(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration, struct UBaseMovementComponent* Movement); // Function /Script/Game.SkillMove.OnMoveTick // (Event|Protected|BlueprintEvent) // @ game+0
	void OnMoveStart(struct AActor* Launcher, struct UBaseMovementComponent* Movement); // Function /Script/Game.SkillMove.OnMoveStart // (Event|Protected|BlueprintEvent) // @ game+0
	void OnMoveEnd(struct UBaseMovementComponent* Movement); // Function /Script/Game.SkillMove.OnMoveEnd // (Event|Protected|BlueprintEvent) // @ game+0
	void OnMoveBlock(struct FHitResult& HitResult); // Function /Script/Game.SkillMove.OnMoveBlock // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0
	void OnCharacterSwitch(struct AGameCharacter* PreCharacter, struct AGameCharacter* NewCharacter); // Function /Script/Game.SkillMove.OnCharacterSwitch // (Final|Native|Public) // @ game+0
	void OnCharacterQTESwitch(struct FQTESwitchParam& QTEParam); // Function /Script/Game.SkillMove.OnCharacterQTESwitch // (Final|Native|Public|HasOutParms) // @ game+0
	void OnActorBump(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult& Hit); // Function /Script/Game.SkillMove.OnActorBump // (Native|Protected|HasOutParms|HasDefaults) // @ game+0
	void MoveFinish(struct UBaseMovementComponent* Movement); // Function /Script/Game.SkillMove.MoveFinish // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveBlock(struct FHitResult& HitResult); // Function /Script/Game.SkillMove.MoveBlock // (Final|Native|Public|HasOutParms) // @ game+0
	bool IsUsedToAddVelocityInsteadOverride(); // Function /Script/Game.SkillMove.IsUsedToAddVelocityInsteadOverride // (Event|Public|BlueprintEvent) // @ game+0
	bool IsFinish(); // Function /Script/Game.SkillMove.IsFinish // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool HitIsAllowStop(struct AActor* SelfActor, struct AActor* OtherActor); // Function /Script/Game.SkillMove.HitIsAllowStop // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0
	struct TArray<struct FString> GetStringArrayValue(__int32 Index); // Function /Script/Game.SkillMove.GetStringArrayValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetParamValue(__int32 Index); // Function /Script/Game.SkillMove.GetParamValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetParamLength(); // Function /Script/Game.SkillMove.GetParamLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetParamintValue(__int32 Index); // Function /Script/Game.SkillMove.GetParamintValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TArray<__int32> GetParamInt32ArrayValue(__int32 Index); // Function /Script/Game.SkillMove.GetParamInt32ArrayValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetParamfloatValue(__int32 Index); // Function /Script/Game.SkillMove.GetParamfloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetParamboolValue(__int32 Index); // Function /Script/Game.SkillMove.GetParamboolValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UBaseMovementComponent* GetMovementComp(); // Function /Script/Game.SkillMove.GetMovementComp // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetJumpVelocity(struct UBaseMovementComponent* MovementLauncher, struct FVector TargetLoc, struct FVector2D ValidDistance, struct FVector2D GravityScale, struct FVector2D CostTimeRange, float& CostTime, float& Gravity, struct FVector& JumpVelocity); // Function /Script/Game.SkillMove.GetJumpVelocity // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool GetJumpUniformAcceleration(struct UBaseMovementComponent* MovementLauncher, struct FVector TargetLoc, struct FVector2D ValidDistance, struct FVector2D GravityScale, struct FVector2D CostTimeRange, float FinalValocity, float& Acceleration, float& CostTime, float& Gravity, struct FVector& JumpVelocity); // Function /Script/Game.SkillMove.GetJumpUniformAcceleration // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FVector2D GetFVector2DValue(__int32 Index); // Function /Script/Game.SkillMove.GetFVector2DValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct FVector GetAimTargetLocation(); // Function /Script/Game.SkillMove.GetAimTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void DetachShapeComponentToMoveActor(struct AActor* Launcher, struct FString ComponentTag); // Function /Script/Game.SkillMove.DetachShapeComponentToMoveActor // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Destroy(); // Function /Script/Game.SkillMove.Destroy // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DeActiveSpawnedByEmitter(); // Function /Script/Game.SkillMove.DeActiveSpawnedByEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CreatSkillMoveByMagic(struct FVector TargetLocation, struct AActor* Goal, struct AGameCharacter* Target, struct FMagicParameter& Info, struct UModifier* ModifierRef, struct FString SkillMoveName); // Function /Script/Game.SkillMove.CreatSkillMoveByMagic // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void CreateSkillMove(struct FQueryResult& QueryTarget, struct AGameCharacter* Target, struct USkillEmitter* EmitterOwner, __int32 InEmitterID, struct FString SkillMoveName); // Function /Script/Game.SkillMove.CreateSkillMove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool CheckTouchAimTarget(struct AActor* InTarget); // Function /Script/Game.SkillMove.CheckTouchAimTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool CheckCollisionTouchingTarget(); // Function /Script/Game.SkillMove.CheckCollisionTouchingTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CancleSkillMoveByMagic(struct AGameCharacter* Target, __int32 InModifierRunTimeID); // Function /Script/Game.SkillMove.CancleSkillMoveByMagic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void CancleSkillMove(struct AGameCharacter* Target, struct USkillMove* MoveRef); // Function /Script/Game.SkillMove.CancleSkillMove // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AttachShapeComponentToMoveActor(struct AActor* Launcher, struct FString ComponentTag); // Function /Script/Game.SkillMove.AttachShapeComponentToMoveActor // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.AbnormalMove
// Size: 0x0 (Inherited: 0x0)
struct UAbnormalMove : UObject {
	char pad_28[0x18]; // 0x0(0x0)
	__int32 AnimType; // 0x0(0x0)
	bool bEnd; // 0x0(0x0)
	char pad_45[0x3]; // 0x0(0x0)

	void OnMoveBlock(struct FHitResult& Impact); // Function /Script/Game.AbnormalMove.OnMoveBlock // (Native|Public|HasOutParms) // @ game+0
};

 // Class /Script/Game.FloatingAbnormalMove
// Size: 0x0 (Inherited: 0x0)
struct UFloatingAbnormalMove : UAbnormalMove {
	char pad_48[0x10]; // 0x0(0x0)
	struct FFloatingMoveInfo MoveInfo; // 0x0(0x0)
	char pad_98[0x10]; // 0x0(0x0)
	float CurrentTime; // 0x0(0x0)
	float PreTime; // 0x0(0x0)
	char pad_B0[0x10]; // 0x0(0x0)
	struct UBaseMovementComponent* TargetMovecomp; // 0x0(0x0)
	char pad_C8[0x60]; // 0x0(0x0)

	float RestartFloating(); // Function /Script/Game.FloatingAbnormalMove.RestartFloating // (Event|Public|BlueprintEvent) // @ game+0
	float MoveTickCalcVelocity(float DeltaTime); // Function /Script/Game.FloatingAbnormalMove.MoveTickCalcVelocity // (Event|Public|BlueprintEvent) // @ game+0
	float FloatingRisingVelocity(float DeltaTime); // Function /Script/Game.FloatingAbnormalMove.FloatingRisingVelocity // (Event|Public|BlueprintEvent) // @ game+0
	void DeadPerformenceTrigger(); // Function /Script/Game.FloatingAbnormalMove.DeadPerformenceTrigger // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
};

 // Class /Script/Game.RepelAbnormalMove
// Size: 0x0 (Inherited: 0x0)
struct URepelAbnormalMove : UAbnormalMove {
	struct FRepelMoveInfo MoveInfo; // 0x0(0x0)
	char pad_90[0x8]; // 0x0(0x0)
	struct UCurveBase* RepelEndStageMoveCurve; // 0x0(0x0)
	struct UCurveBase* PlayerMoveMotion; // 0x0(0x0)
	float CurrentTime; // 0x0(0x0)
	float PreTime; // 0x0(0x0)
	char pad_B0[0x8]; // 0x0(0x0)

	void SetInEndStage(); // Function /Script/Game.RepelAbnormalMove.SetInEndStage // (Final|Native|Public|BlueprintCallable) // @ game+0
	float RestartRepel(); // Function /Script/Game.RepelAbnormalMove.RestartRepel // (Event|Public|BlueprintEvent) // @ game+0
	float RepelMoveExtendTime(); // Function /Script/Game.RepelAbnormalMove.RepelMoveExtendTime // (Event|Public|BlueprintEvent) // @ game+0
	float MoveTickCalcVelocity(float DeltaTime); // Function /Script/Game.RepelAbnormalMove.MoveTickCalcVelocity // (Event|Public|BlueprintEvent) // @ game+0
	void DeadPerformenceTrigger(); // Function /Script/Game.RepelAbnormalMove.DeadPerformenceTrigger // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0
};

 // Class /Script/Game.LieAbnormalMove
// Size: 0x0 (Inherited: 0x0)
struct ULieAbnormalMove : UAbnormalMove {
	char pad_48[0x28]; // 0x0(0x0)
};

 // Class /Script/Game.StandUpAbnormalMove
// Size: 0x0 (Inherited: 0x0)
struct UStandUpAbnormalMove : UAbnormalMove {
	char pad_48[0x20]; // 0x0(0x0)
	struct UCurveBase* MotionCurve; // 0x0(0x0)
};

 // Class /Script/Game.FrozenAbnormalMove
// Size: 0x0 (Inherited: 0x0)
struct UFrozenAbnormalMove : UAbnormalMove {
	struct UCurveFloat* FrozenCurve; // 0x0(0x0)
	char pad_50[0x20]; // 0x0(0x0)
};

 // Class /Script/Game.SkillPanel
// Size: 0x0 (Inherited: 0x0)
struct USkillPanel : UUserWidgetAnimation {
	struct TMap<__int32, struct UButtonBase*> SkillBtns; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGamePlayerController> GamePlayerController; // 0x0(0x0)
	struct UPanelWidget* TempRoot; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> Pawn; // 0x0(0x0)
	struct UWidget* TmpBtnLeftFire; // 0x0(0x0)
	struct UWidget* TmpBtnAim; // 0x0(0x0)
	struct UWidget* TmpBtnLeftCancel; // 0x0(0x0)
	struct TWeakObjectPtr<struct UCostomFireButton> CostomFireBtn; // 0x0(0x0)
	struct TWeakObjectPtr<struct USkillAimButton> AimButton; // 0x0(0x0)
	char pad_350[0x8]; // 0x0(0x0)

	void SetLeftFireBtnMode(__int32 nVal); // Function /Script/Game.SkillPanel.SetLeftFireBtnMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void OnWeaponChange(struct APlayerWeapon* InWeapon); // Function /Script/Game.SkillPanel.OnWeaponChange // (Event|Public|BlueprintEvent) // @ game+0
	void OnSkillReplace(__int32 InIndex); // Function /Script/Game.SkillPanel.OnSkillReplace // (Final|Native|Public) // @ game+0
	void OnShowRushSkillBtn(bool bShow); // Function /Script/Game.SkillPanel.OnShowRushSkillBtn // (Event|Public|BlueprintEvent) // @ game+0
	struct UButtonBase* GetSkillBtn(__int32 InIndex); // Function /Script/Game.SkillPanel.GetSkillBtn // (Final|Native|Public) // @ game+0
	struct USkillButton* GetQTEBtn(); // Function /Script/Game.SkillPanel.GetQTEBtn // (Final|Native|Public) // @ game+0
	void CancelCostomFireBtn(); // Function /Script/Game.SkillPanel.CancelCostomFireBtn // (Final|Native|Public) // @ game+0
	void CancelAimButton(); // Function /Script/Game.SkillPanel.CancelAimButton // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.SkillPriorityComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillPriorityComponent : USkillEffectComponent {
};

 // Class /Script/Game.SkillSelector
// Size: 0x0 (Inherited: 0x0)
struct ASkillSelector : AActor {
	char pad_220[0x8]; // 0x0(0x0)
	struct FSelectorInfo InfoTemplete; // 0x0(0x0)
	char pad_318[0x8]; // 0x0(0x0)
	struct FTransform TargetTransform; // 0x0(0x0)
	struct TArray<struct FQueryResult> QueryResults; // 0x0(0x0)
	struct FTransform QueryResultTransform; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> OwnerCharacter; // 0x0(0x0)
	bool bSkillTipsSelector; // 0x0(0x0)
	bool bIsFinish; // 0x0(0x0)
	bool bCancle; // 0x0(0x0)
	char pad_39B[0x1]; // 0x0(0x0)
	float ActiveTime; // 0x0(0x0)
	char pad_3A0[0xD0]; // 0x0(0x0)

	void SetDecalSize(struct FVector DecalSize); // Function /Script/Game.SkillSelector.SetDecalSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ReceiveInput(struct FVector2D Para, bool bDirection); // Function /Script/Game.SkillSelector.ReceiveInput // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ReceiveFinish(); // Function /Script/Game.SkillSelector.ReceiveFinish // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnSkillCancel(__int32 SkillID, enum class ESkillInterruptedType InType); // Function /Script/Game.SkillSelector.OnSkillCancel // (Final|Native|Protected) // @ game+0
	void OnRMBReleased(); // Function /Script/Game.SkillSelector.OnRMBReleased // (Final|Native|Public) // @ game+0
	void OnReceiveInput(struct FVector2D Para, bool bDirection); // Function /Script/Game.SkillSelector.OnReceiveInput // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0
	void OnReceiveFinish(); // Function /Script/Game.SkillSelector.OnReceiveFinish // (Event|Public|BlueprintEvent) // @ game+0
	void OnQTESwitch(struct FQTESwitchParam& SwitchParam); // Function /Script/Game.SkillSelector.OnQTESwitch // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnLMBReleased(); // Function /Script/Game.SkillSelector.OnLMBReleased // (Final|Native|Public) // @ game+0
	void OnAbnormalStateUpdate(struct FAbnormalInfo& AbnormalInfo, bool bAdd, bool bNewApply, bool bForceRemove); // Function /Script/Game.SkillSelector.OnAbnormalStateUpdate // (Final|Native|Protected|HasOutParms) // @ game+0
	bool IsSkillTips(); // Function /Script/Game.SkillSelector.IsSkillTips // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsFinish(); // Function /Script/Game.SkillSelector.IsFinish // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsCurrentLocationInValid(); // Function /Script/Game.SkillSelector.IsCurrentLocationInValid // (Event|Public|BlueprintEvent) // @ game+0
	bool IsCancle(); // Function /Script/Game.SkillSelector.IsCancle // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetWorldGravityZ(); // Function /Script/Game.SkillSelector.GetWorldGravityZ // (Final|Native|Protected|BlueprintCallable) // @ game+0
	struct ASkillSelector* GetSkillSelectorInCastingAnimSkill(struct AGameCharacter* InCharacter, bool& bIsSelectorInstance); // Function /Script/Game.SkillSelector.GetSkillSelectorInCastingAnimSkill // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetSelectTargetsNum(__int32& TargetNum, __int32& TargetLocNum); // Function /Script/Game.SkillSelector.GetSelectTargetsNum // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AActor* FreeSelectorAttachToCloestTarget(struct FVector MovePosition); // Function /Script/Game.SkillSelector.FreeSelectorAttachToCloestTarget // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void FindTargetInRange(struct TArray<struct FQueryResult>& InTargets); // Function /Script/Game.SkillSelector.FindTargetInRange // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0
	void DecideSelectorLocation(struct FTransform& NewTransform, struct AActor* InTarget); // Function /Script/Game.SkillSelector.DecideSelectorLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void DecideQueryResults(struct TArray<struct FQueryResult> Results); // Function /Script/Game.SkillSelector.DecideQueryResults // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CancleSelector(); // Function /Script/Game.SkillSelector.CancleSelector // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector CalcFreeSelectorMovePosition(float DeltaTime, struct FVector2D InputOffset, struct FVector2D RelativeOffset, struct FVector2D& ResultRelativeOffset); // Function /Script/Game.SkillSelector.CalcFreeSelectorMovePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct AActor* CalcFreeSelectorInitialPosition(struct FVector& InitialMovePosition, struct FVector2D& RelativePosition); // Function /Script/Game.SkillSelector.CalcFreeSelectorInitialPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SkillSelectorComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillSelectorComponent : USkillEffectComponent {
	struct ASkillSelector* SelectorActor; // 0x0(0x0)
	float JumpToTime; // 0x0(0x0)
	char pad_CC[0x4]; // 0x0(0x0)

	void SetJumpPosition(float JumpToPosition); // Function /Script/Game.SkillSelectorComponent.SetJumpPosition // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_SelectorGamepadFinish(); // Function /Script/Game.SkillSelectorComponent.Server_SelectorGamepadFinish // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
	void Server_SelectorFinish(struct FTransform SelectorTransform, struct TArray<struct FQueryResult> InSelectorResults, bool bSkillTips); // Function /Script/Game.SkillSelectorComponent.Server_SelectorFinish // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0
	void Server_SelectorCancel(); // Function /Script/Game.SkillSelectorComponent.Server_SelectorCancel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0
};

 // Class /Script/Game.SkillStorageComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillStorageComponent : USkillEffectComponent {
	char pad_C0[0x8]; // 0x0(0x0)
	struct UAbilityComponentBase* lpAbilityComponent; // 0x0(0x0)
	struct UPlaySkillMontageComponent* PlsyMontageComponent; // 0x0(0x0)
	char pad_D8[0x6]; // 0x0(0x0)
	bool bEndStoragePress; // 0x0(0x0)
	char pad_DF[0x1]; // 0x0(0x0)
	float StorageTime; // 0x0(0x0)
	char pad_E4[0x4]; // 0x0(0x0)

	void Server_EndStorage(); // Function /Script/Game.SkillStorageComponent.Server_EndStorage // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0
	void ReceiveEndStorageProgress(bool bIsClient, float Position); // Function /Script/Game.SkillStorageComponent.ReceiveEndStorageProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0
	void PlayMontage_JumpToPosition(bool bIsClient); // Function /Script/Game.SkillStorageComponent.PlayMontage_JumpToPosition // (Final|Native|Protected) // @ game+0
	void OnCastEnergyStorage(__int32 ID, enum class ESkillCastType Type); // Function /Script/Game.SkillStorageComponent.OnCastEnergyStorage // (Final|Native|Protected) // @ game+0
	void EndStorageProgress(); // Function /Script/Game.SkillStorageComponent.EndStorageProgress // (Final|Native|Protected) // @ game+0
	void Client_EndStorageProgress(); // Function /Script/Game.SkillStorageComponent.Client_EndStorageProgress // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0
};

 // Class /Script/Game.SkillTagComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillTagComponent : USkillEffectComponent {
	struct USkillEffectComponent* ActiveSkillEffect; // 0x0(0x0)
};

 // Class /Script/Game.SkillTracker_CaptainTarget
// Size: 0x0 (Inherited: 0x0)
struct USkillTracker_CaptainTarget : UAISkillTargetTracker {
};

 // Class /Script/Game.SkillTracker_EQSActor
// Size: 0x0 (Inherited: 0x0)
struct USkillTracker_EQSActor : UAISkillTargetTracker {
	struct UEnvQuery* Query; // 0x0(0x0)
	char pad_50[0x18]; // 0x0(0x0)
};

 // Class /Script/Game.SkillTracker_EQSLocation
// Size: 0x0 (Inherited: 0x0)
struct USkillTracker_EQSLocation : UAISkillTargetTracker {
	struct UEnvQuery* Query; // 0x0(0x0)
	bool bQueryMulti; // 0x0(0x0)
	char pad_51[0x17]; // 0x0(0x0)
};

 // Class /Script/Game.SkillWallMeshComponent
// Size: 0x0 (Inherited: 0x0)
struct USkillWallMeshComponent : UStaticMeshComponent {
	bool bAsLevelScene; // 0x0(0x0)
	char pad_501[0x7]; // 0x0(0x0)
	struct TArray<enum class ECharacterType> BlockCharacterType; // 0x0(0x0)
	struct TArray<enum class ECampRelation> BlockRelation; // 0x0(0x0)
	struct TArray<struct FRequireModifier> RequireModifiers; // 0x0(0x0)
	struct TArray<struct FGameplayTagContainer> BlockModifierTagContainer; // 0x0(0x0)
	char pad_548[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.SnowEffectControlSubsystem
// Size: 0x0 (Inherited: 0x0)
struct USnowEffectControlSubsystem : UGameTickableWorldSubsystem {
	char pad_58[0x88]; // 0x0(0x0)
};

 // Class /Script/Game.SnowEffectControlVolume
// Size: 0x0 (Inherited: 0x0)
struct ASnowEffectControlVolume : ATriggerBox {
	struct FSnowEffectParameter Parameter; // 0x0(0x0)
	char pad_260[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.SnowEffectExceptControlVolume
// Size: 0x0 (Inherited: 0x0)
struct ASnowEffectExceptControlVolume : AVolume {
};

 // Class /Script/Game.SnowEffectControlLibrary
// Size: 0x0 (Inherited: 0x0)
struct USnowEffectControlLibrary : UBlueprintFunctionLibrary {

	void SetSnowEffect(struct UObject* WorldContextObject, struct UNiagaraComponent* Value, struct FVector& Offset, struct FSnowEffectParameter& Default); // Function /Script/Game.SnowEffectControlLibrary.SetSnowEffect // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.MonsterMovementComponent_SpiderMachine
// Size: 0x0 (Inherited: 0x0)
struct UMonsterMovementComponent_SpiderMachine : UMonsterMovementComponent {
	char pad_C50[0x30]; // 0x0(0x0)
};

 // Class /Script/Game.AnimInstance_SpiderMachine
// Size: 0x0 (Inherited: 0x0)
struct UAnimInstance_SpiderMachine : UMonsterAnimInstance {
	float Speed; // 0x0(0x0)
	struct FRotator AimOffset; // 0x0(0x0)
	struct FRotator AimOffsetL; // 0x0(0x0)
	struct FRotator AimOffsetR; // 0x0(0x0)
	struct FRotator UpperRotate; // 0x0(0x0)
	__int32 TurnFlag; // 0x0(0x0)
	__int32 MoveDirection; // 0x0(0x0)
	char pad_54C[0x4]; // 0x0(0x0)

	void NotifyTurning(bool Value); // Function /Script/Game.AnimInstance_SpiderMachine.NotifyTurning // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0
	void NotifyStopping(bool Value); // Function /Script/Game.AnimInstance_SpiderMachine.NotifyStopping // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0
	void NotifyMoving(bool Value); // Function /Script/Game.AnimInstance_SpiderMachine.NotifyMoving // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0
};

 // Class /Script/Game.SpiderMachine
// Size: 0x0 (Inherited: 0x0)
struct ASpiderMachine : AGameAICharacter {
	struct FName GrenadeBone; // 0x0(0x0)
	struct FName GunBoneL; // 0x0(0x0)
	struct FName GunBoneR; // 0x0(0x0)
	float TurnThreshold; // 0x0(0x0)
	float UpperRotateRate; // 0x0(0x0)
	float HalfAngleLowerRotateWhenShoot; // 0x0(0x0)
};

 // Class /Script/Game.GameAIController_SpiderMachine
// Size: 0x0 (Inherited: 0x0)
struct AGameAIController_SpiderMachine : AGameAIController {
};

 // Class /Script/Game.SpineNode
// Size: 0x0 (Inherited: 0x0)
struct ASpineNode : AActor {
	char pad_220[0x28]; // 0x0(0x0)
	struct UPrimitiveComponent* ClickComponent; // 0x0(0x0)
	char pad_250[0x8]; // 0x0(0x0)
	struct FMulticastInlineDelegate ShowOptionAnim; // 0x0(0x0)
	char pad_268[0x28]; // 0x0(0x0)
	struct FMulticastInlineDelegate FinishAnimHandle; // 0x0(0x0)
	struct FMulticastInlineDelegate ClickNoteHandle; // 0x0(0x0)
	struct FMulticastInlineDelegate NotePosHandle; // 0x0(0x0)
	struct FMulticastInlineDelegate NoteActivedHandle; // 0x0(0x0)
	struct FMulticastInlineDelegate NotePreviewHandle; // 0x0(0x0)
	struct TArray<struct USceneComponent*> NoteMeshs; // 0x0(0x0)
	struct USceneComponent* HairScene; // 0x0(0x0)
	struct USceneComponent* NoteScene; // 0x0(0x0)
	float SlipCoefficient; // 0x0(0x0)
	float Radius; // 0x0(0x0)
	struct TMap<struct FString, float> AngleMap; // 0x0(0x0)
	struct FVector PlaneFv; // 0x0(0x0)
	struct FVector ScaleFv; // 0x0(0x0)
	struct FVector Rot; // 0x0(0x0)
	char pad_37C[0x4]; // 0x0(0x0)
	struct UCurveFloat* InitAnimCurve; // 0x0(0x0)
	struct UCurveFloat* OptionCurve; // 0x0(0x0)
	struct FVector OffsetFv; // 0x0(0x0)
	char pad_39C[0x4]; // 0x0(0x0)
	struct TMap<struct FString, struct FVector> OffsetMap; // 0x0(0x0)
	float fShowAnim; // 0x0(0x0)
	struct FVector LeftLimit; // 0x0(0x0)
	struct FVector RightLimit; // 0x0(0x0)
	float DynamicRate; // 0x0(0x0)
	struct FRotator RotReverse; // 0x0(0x0)
	char pad_41C[0x34]; // 0x0(0x0)
	struct AHairEffectAct* HairActIntance; // 0x0(0x0)
	struct UCurveFloat* HairActCurve; // 0x0(0x0)
	struct UCurveFloat* MatAnim; // 0x0(0x0)
	struct TMap<struct FString, struct FHairTrace> HairTraceMap; // 0x0(0x0)
	bool bShowDebug; // 0x0(0x0)
	char pad_4B9[0x7]; // 0x0(0x0)
	struct FMulticastInlineDelegate RoleItemHandle; // 0x0(0x0)
	struct FVector HairScentFv; // 0x0(0x0)
	bool bShowRole; // 0x0(0x0)
	char pad_4DD[0x3]; // 0x0(0x0)
	struct FVector ShowRoleFv; // 0x0(0x0)
	char pad_4EC[0x4]; // 0x0(0x0)
	struct APreviewActor* RoleActor; // 0x0(0x0)

	void UpDataMatByLoc(); // Function /Script/Game.SpineNode.UpDataMatByLoc // (Event|Public|BlueprintEvent) // @ game+0
	void UpdataActiveState(__int32 InID); // Function /Script/Game.SpineNode.UpdataActiveState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ShowAnim(float InTimer); // Function /Script/Game.SpineNode.ShowAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetShowOptionAnim(bool bShow); // Function /Script/Game.SpineNode.SetShowOptionAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetOffsetPos(struct FString InKey); // Function /Script/Game.SpineNode.SetOffsetPos // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetNoteSceneOffsetRot(bool bRevese); // Function /Script/Game.SpineNode.SetNoteSceneOffsetRot // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetNoteIdexMat(struct UStaticMeshComponent* InNote, __int32 InIdx); // Function /Script/Game.SpineNode.SetNoteIdexMat // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetNoteActiveMat(struct UStaticMeshComponent* InNote, bool bActived); // Function /Script/Game.SpineNode.SetNoteActiveMat // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetDynamicMat(struct UStaticMeshComponent* NoteMesh, float InOpacity); // Function /Script/Game.SpineNode.SetDynamicMat // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayOptionAnim(float InTime); // Function /Script/Game.SpineNode.PlayOptionAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayNoteMatAnim(struct UStaticMeshComponent* NoteMesh, bool bAnim); // Function /Script/Game.SpineNode.PlayNoteMatAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PlayHairAnim(float HairTimer); // Function /Script/Game.SpineNode.PlayHairAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnTriggerShowAnim(bool bInit); // Function /Script/Game.SpineNode.OnTriggerShowAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void MoveNodes(float Angle); // Function /Script/Game.SpineNode.MoveNodes // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InitShowAnim(struct TArray<struct USceneComponent*> InNotes); // Function /Script/Game.SpineNode.InitShowAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void InitHairAct(struct FVector InFv); // Function /Script/Game.SpineNode.InitHairAct // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void GetTarPoss(struct TArray<struct USceneComponent*> InNotes); // Function /Script/Game.SpineNode.GetTarPoss // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FVector> GetShowAnimTar(struct TArray<float> InAngles); // Function /Script/Game.SpineNode.GetShowAnimTar // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetOpacityByLocation(struct FVector CurPos); // Function /Script/Game.SpineNode.GetOpacityByLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void GetHairTrace(struct FString InKey); // Function /Script/Game.SpineNode.GetHairTrace // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FRotator GetDynamicRot(struct FVector CenterFv, struct FVector CurPos); // Function /Script/Game.SpineNode.GetDynamicRot // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	float GetCurveValue(float InTime, struct UCurveFloat* InCurve); // Function /Script/Game.SpineNode.GetCurveValue // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetCurveRange(struct UCurveFloat* InCurvefloat, float& nMin, float& nMax); // Function /Script/Game.SpineNode.GetCurveRange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UStaticMeshComponent* GetClickMesh(__int32 InIdx); // Function /Script/Game.SpineNode.GetClickMesh // (Event|Public|BlueprintEvent) // @ game+0
	__int32 GetClickIndex(struct USceneComponent* InComponent); // Function /Script/Game.SpineNode.GetClickIndex // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector GetAnimTar(__int32 idx); // Function /Script/Game.SpineNode.GetAnimTar // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void FinishAnim(bool bMoveFinish); // Function /Script/Game.SpineNode.FinishAnim // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EndMove(); // Function /Script/Game.SpineNode.EndMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EnableNoteCollision(bool bEnabled); // Function /Script/Game.SpineNode.EnableNoteCollision // (Final|Native|Public|BlueprintCallable) // @ game+0
	void BeginMove(); // Function /Script/Game.SpineNode.BeginMove // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddPreviewModel(__int32 InID); // Function /Script/Game.SpineNode.AddPreviewModel // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.StartRushComponent
// Size: 0x0 (Inherited: 0x0)
struct UStartRushComponent : USkillEffectComponent {
};

 // Class /Script/Game.StartupSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UStartupSubsystem : UObject {
	char pad_28[0x1B0]; // 0x0(0x0)

	void SwitchLanguage(struct FString InLanguage); // Function /Script/Game.StartupSubsystem.SwitchLanguage // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetTargetState(enum class ELoginState InTargetState); // Function /Script/Game.StartupSubsystem.SetTargetState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetOnLoginFailed2(struct FDelegate& InFailedCallback); // Function /Script/Game.StartupSubsystem.SetOnLoginFailed2 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetOnLoginFailed(struct FDelegate& InFailedCallback); // Function /Script/Game.StartupSubsystem.SetOnLoginFailed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SetLoginState(enum class ELoginState InState); // Function /Script/Game.StartupSubsystem.SetLoginState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetLocalSetting(struct FString InKey, struct FString InVal); // Function /Script/Game.StartupSubsystem.SetLocalSetting // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetIsFromFinishGuidMission(bool bGuidMission); // Function /Script/Game.StartupSubsystem.SetIsFromFinishGuidMission // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SdkLogout(__int32 InCode, struct FString InMsg); // Function /Script/Game.StartupSubsystem.SdkLogout // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RobotLogin(struct FString InToken, struct FString InHost); // Function /Script/Game.StartupSubsystem.RobotLogin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PrepareResources(); // Function /Script/Game.StartupSubsystem.PrepareResources // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void OnSelectServerChange(); // Function /Script/Game.StartupSubsystem.OnSelectServerChange // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Login(); // Function /Script/Game.StartupSubsystem.Login // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsRunWithoutLogin(); // Function /Script/Game.StartupSubsystem.IsRunWithoutLogin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsOversea(); // Function /Script/Game.StartupSubsystem.IsOversea // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsFromFinishGuidMission(); // Function /Script/Game.StartupSubsystem.IsFromFinishGuidMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsFirstTimeEnterStartup(); // Function /Script/Game.StartupSubsystem.IsFirstTimeEnterStartup // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool IsBusy(); // Function /Script/Game.StartupSubsystem.IsBusy // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasLoginPanel(); // Function /Script/Game.StartupSubsystem.HasLoginPanel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasDebugPanel(); // Function /Script/Game.StartupSubsystem.HasDebugPanel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasCustomSplash(); // Function /Script/Game.StartupSubsystem.HasCustomSplash // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasCanEnterGame(); // Function /Script/Game.StartupSubsystem.HasCanEnterGame // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasBuiltinUpdateUI(); // Function /Script/Game.StartupSubsystem.HasBuiltinUpdateUI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool HasAgeTips(); // Function /Script/Game.StartupSubsystem.HasAgeTips // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetTipsStatic(struct FString InKey); // Function /Script/Game.StartupSubsystem.GetTipsStatic // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	enum class ELoginState GetTargetState(); // Function /Script/Game.StartupSubsystem.GetTargetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UStartupSubsystem* GetStartupSystem(); // Function /Script/Game.StartupSubsystem.GetStartupSystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	enum class ELoginState GetLoginState(); // Function /Script/Game.StartupSubsystem.GetLoginState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void GetLoginServerList(struct TArray<struct FLoginServerInfoURL>& OutServerList); // Function /Script/Game.StartupSubsystem.GetLoginServerList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0
	struct FLoginServerInfo GetLoginServerInfo(); // Function /Script/Game.StartupSubsystem.GetLoginServerInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FLoginParam GetLoginParam(); // Function /Script/Game.StartupSubsystem.GetLoginParam // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FString GetLocalSetting(struct FString InKey, struct FString InDefault); // Function /Script/Game.StartupSubsystem.GetLocalSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FLoginBgInfo GetBgInfo(); // Function /Script/Game.StartupSubsystem.GetBgInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ForceWithDevelopmentServers(); // Function /Script/Game.StartupSubsystem.ForceWithDevelopmentServers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ForceUseDebugAccount(struct FString InAccount); // Function /Script/Game.StartupSubsystem.ForceUseDebugAccount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ForceNewAccount(); // Function /Script/Game.StartupSubsystem.ForceNewAccount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void FinishGuidMission(); // Function /Script/Game.StartupSubsystem.FinishGuidMission // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EnterGame(); // Function /Script/Game.StartupSubsystem.EnterGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void DismissEnterGuidMission(); // Function /Script/Game.StartupSubsystem.DismissEnterGuidMission // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ContinueDownload(); // Function /Script/Game.StartupSubsystem.ContinueDownload // (Final|Native|Public|BlueprintCallable) // @ game+0
	void CheckDeviceReady(); // Function /Script/Game.StartupSubsystem.CheckDeviceReady // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool CanEnterGuidMission(); // Function /Script/Game.StartupSubsystem.CanEnterGuidMission // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.LoginServerItem
// Size: 0x0 (Inherited: 0x0)
struct ULoginServerItem : UObject {
	__int32 ID; // 0x0(0x0)
	char pad_2C[0x4]; // 0x0(0x0)
	struct FString DisplayName; // 0x0(0x0)
	bool bSelected; // 0x0(0x0)
	char pad_41[0x7]; // 0x0(0x0)
};

 // Class /Script/Game.StartupWidget
// Size: 0x0 (Inherited: 0x0)
struct UStartupWidget : UUserWidget {
	char pad_278[0x18]; // 0x0(0x0)

	void Start(); // Function /Script/Game.StartupWidget.Start // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnReceiveUpdateError(struct FText& InErrMessage); // Function /Script/Game.StartupWidget.OnReceiveUpdateError // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void OnReceiveLoginError(struct FText& InErrMessage); // Function /Script/Game.StartupWidget.OnReceiveLoginError // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void OnProgress(struct FText& InStageDesc, float InProgress, struct FText& InProgressDesc); // Function /Script/Game.StartupWidget.OnProgress // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void OnNetConnectStateChange(bool bShowConnect); // Function /Script/Game.StartupWidget.OnNetConnectStateChange // (Event|Public|BlueprintEvent) // @ game+0
	void OnConfirmNeedUpgrade(struct FText& InConfirmMessage); // Function /Script/Game.StartupWidget.OnConfirmNeedUpgrade // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void OnConfirmNeedDownload(struct FText& InConfirmMessage); // Function /Script/Game.StartupWidget.OnConfirmNeedDownload // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	void K2_OnLoginStateChange(enum class ELoginState& InNewState); // Function /Script/Game.StartupWidget.K2_OnLoginStateChange // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0
	enum class ESlateVisibility GetLoginPanelVisibility(); // Function /Script/Game.StartupWidget.GetLoginPanelVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetLoginPanelFlag(); // Function /Script/Game.StartupWidget.GetLoginPanelFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	enum class ESlateVisibility GetEnterGuidMissionVisibility(); // Function /Script/Game.StartupWidget.GetEnterGuidMissionVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	enum class ESlateVisibility GetDebugPanelVisibility(); // Function /Script/Game.StartupWidget.GetDebugPanelVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetDebugInfo(); // Function /Script/Game.StartupWidget.GetDebugInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class ESlateVisibility GetBuiltinUpdateVisibility(); // Function /Script/Game.StartupWidget.GetBuiltinUpdateVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	enum class ESlateVisibility GetAgeTipVisibility(); // Function /Script/Game.StartupWidget.GetAgeTipVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct ULoginServerItem* CreateLoginServerItem(__int32 InID, struct FString InDisplayName, bool InSelected); // Function /Script/Game.StartupWidget.CreateLoginServerItem // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.StartupMessageWidget
// Size: 0x0 (Inherited: 0x0)
struct UStartupMessageWidget : UUserWidget {

	void OnSDKInitFail(); // Function /Script/Game.StartupMessageWidget.OnSDKInitFail // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.StaticActorSpawnManager
// Size: 0x0 (Inherited: 0x0)
struct UStaticActorSpawnManager : UGameTickableWorldSubsystem {
	struct TArray<struct AStaticActorSpawner*> SpawnerCollection; // 0x0(0x0)
	struct TArray<struct AStaticActorSpawner*> SpawnedCollection; // 0x0(0x0)

	void TrySpawn(); // Function /Script/Game.StaticActorSpawnManager.TrySpawn // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RefreshStaticActorSpawner(); // Function /Script/Game.StaticActorSpawnManager.RefreshStaticActorSpawner // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.StaticActorSpawner
// Size: 0x0 (Inherited: 0x0)
struct AStaticActorSpawner : AActor {
	struct USceneComponent* Root; // 0x0(0x0)
	struct FString Tag; // 0x0(0x0)
	float InShadow; // 0x0(0x0)
	float InSpawnDistance; // 0x0(0x0)
	struct FVector InScale; // 0x0(0x0)
	char pad_24C[0x4]; // 0x0(0x0)
	struct TMap<struct FName, struct FTransform> TransformMap; // 0x0(0x0)
	struct TArray<__int32> customParams; // 0x0(0x0)
	__int32 AreaId; // 0x0(0x0)
	char pad_2B4[0x4]; // 0x0(0x0)
	struct TSoftClassPtr<UObject> Asset; // 0x0(0x0)
	struct TArray<struct ABlindage*> AssociateBlindages; // 0x0(0x0)
	float Nearest; // 0x0(0x0)
	char pad_2F4[0xC]; // 0x0(0x0)

	bool TrySpawn(); // Function /Script/Game.StaticActorSpawner.TrySpawn // (Final|Native|Public|BlueprintCallable) // @ game+0
	void TryRecycle(); // Function /Script/Game.StaticActorSpawner.TryRecycle // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsSpawned(); // Function /Script/Game.StaticActorSpawner.IsSpawned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GiveUpSpawn(); // Function /Script/Game.StaticActorSpawner.GiveUpSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AActor* GetActor(); // Function /Script/Game.StaticActorSpawner.GetActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.StatsLibrary
// Size: 0x0 (Inherited: 0x0)
struct UStatsLibrary : UBlueprintFunctionLibrary {

	void MasterEnableSubtract(__int32 Value); // Function /Script/Game.StatsLibrary.MasterEnableSubtract // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void MasterEnableAdd(__int32 Value); // Function /Script/Game.StatsLibrary.MasterEnableAdd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SwitchPlayerCharacterComponent
// Size: 0x0 (Inherited: 0x0)
struct USwitchPlayerCharacterComponent : UActorComponent {
	char pad_B0[0x4]; // 0x0(0x0)
	__int32 NoSwitchVolumeFlag; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> OldCharacter; // 0x0(0x0)
	struct AGameCharacter* NewCharacter; // 0x0(0x0)
	struct UEnvQuery* SwitchQuery; // 0x0(0x0)
	struct AGamePlayerController* CurrentPlayerController; // 0x0(0x0)
	char pad_D8[0x20]; // 0x0(0x0)

	void OnSkillEnd(__int32 ID); // Function /Script/Game.SwitchPlayerCharacterComponent.OnSkillEnd // (Final|Native|Protected) // @ game+0
	void OnSkillCastFail(__int32 ID); // Function /Script/Game.SwitchPlayerCharacterComponent.OnSkillCastFail // (Final|Native|Protected) // @ game+0
	void OnSkillCancel(__int32 ID, enum class ESkillInterruptedType InType); // Function /Script/Game.SwitchPlayerCharacterComponent.OnSkillCancel // (Final|Native|Protected) // @ game+0
	void OnNotifyPlayerActionFlay(struct AGameCharacter* CurCharacter, enum class ECharacterActionState InType, bool bSet); // Function /Script/Game.SwitchPlayerCharacterComponent.OnNotifyPlayerActionFlay // (Final|Native|Public) // @ game+0
	void OnCharacterDie(struct AGameCharacter* Character, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.SwitchPlayerCharacterComponent.OnCharacterDie // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnAbilitySkillEnd(__int32 SkillID, struct TArray<__int32>& OriginSkills, struct UGameAbilityComponent* AbilityRef); // Function /Script/Game.SwitchPlayerCharacterComponent.OnAbilitySkillEnd // (Final|Native|Public|HasOutParms) // @ game+0
	bool IsNotInFlyState(); // Function /Script/Game.SwitchPlayerCharacterComponent.IsNotInFlyState // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInvincible(); // Function /Script/Game.SwitchPlayerCharacterComponent.IsInvincible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsInSwitchLeave(); // Function /Script/Game.SwitchPlayerCharacterComponent.IsInSwitchLeave // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInSwitchEnter(); // Function /Script/Game.SwitchPlayerCharacterComponent.IsInSwitchEnter // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInSwitch(); // Function /Script/Game.SwitchPlayerCharacterComponent.IsInSwitch // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInQTESwitch(); // Function /Script/Game.SwitchPlayerCharacterComponent.IsInQTESwitch // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsInNormalSwitch(); // Function /Script/Game.SwitchPlayerCharacterComponent.IsInNormalSwitch // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.SwitchTaskActor
// Size: 0x0 (Inherited: 0x0)
struct ASwitchTaskActor : AActor {
	struct TMap<struct FSoftObjectPath, __int32> RandomLoadTasks; // 0x0(0x0)

	void SwitchTask(); // Function /Script/Game.SwitchTaskActor.SwitchTask // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TargetWarpingUtilities
// Size: 0x0 (Inherited: 0x0)
struct UTargetWarpingUtilities : UBlueprintFunctionLibrary {

	void GetTargetWarpingWindowsFromAnimation(struct UAnimSequenceBase* Animation, struct TArray<struct FTargetWarpingWindowData>& OutWindows); // Function /Script/Game.TargetWarpingUtilities.GetTargetWarpingWindowsFromAnimation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetTargetWarpingWindowsForWarpTargetFromAnimation(struct UAnimSequenceBase* Animation, struct FName WarpTargetName, struct TArray<struct FTargetWarpingWindowData>& OutWindows); // Function /Script/Game.TargetWarpingUtilities.GetTargetWarpingWindowsForWarpTargetFromAnimation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FTransform ExtractRootMotionFromAnimation(struct UAnimSequenceBase* Animation, float StartTime, float EndTime); // Function /Script/Game.TargetWarpingUtilities.ExtractRootMotionFromAnimation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TargetWarpingComponent
// Size: 0x0 (Inherited: 0x0)
struct UTargetWarpingComponent : UActorComponent {
	bool bSearchForWindowsInAnimsWithinMontages; // 0x0(0x0)
	char pad_B1[0x3]; // 0x0(0x0)
	struct TWeakObjectPtr<struct ACharacter> CharacterOwner; // 0x0(0x0)
	char pad_BC[0x4]; // 0x0(0x0)
	struct TArray<struct UMotionCurveModifier*> Modifiers; // 0x0(0x0)
	struct FTargetWarpingUpdateContext TargetWarpingUpdateContext; // 0x0(0x0)
	char pad_F4[0x4]; // 0x0(0x0)
	struct TArray<struct FTargetWarpingTarget> WarpTargets; // 0x0(0x0)

	__int32 RemoveWarpTarget(struct FName WarpTargetName); // Function /Script/Game.TargetWarpingComponent.RemoveWarpTarget // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DisableAllMotionCurveModifiers(); // Function /Script/Game.TargetWarpingComponent.DisableAllMotionCurveModifiers // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddOrUpdateWarpTargetFromTransform(struct FName WarpTargetName, struct FTransform TargetTransform); // Function /Script/Game.TargetWarpingComponent.AddOrUpdateWarpTargetFromTransform // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void AddOrUpdateWarpTargetFromLocationAndRotation(struct FName WarpTargetName, struct FVector TargetLocation, struct FRotator TargetRotation); // Function /Script/Game.TargetWarpingComponent.AddOrUpdateWarpTargetFromLocationAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void AddOrUpdateWarpTargetFromLocation(struct FName WarpTargetName, struct FVector TargetLocation); // Function /Script/Game.TargetWarpingComponent.AddOrUpdateWarpTargetFromLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void AddOrUpdateWarpTargetFromComponent(struct FName WarpTargetName, struct USceneComponent* Component, struct FName BoneName, bool bFollowComponent); // Function /Script/Game.TargetWarpingComponent.AddOrUpdateWarpTargetFromComponent // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddOrUpdateWarpTarget(struct FTargetWarpingTarget& WarpTarget); // Function /Script/Game.TargetWarpingComponent.AddOrUpdateWarpTarget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TaskActionSubSystem
// Size: 0x0 (Inherited: 0x0)
struct UTaskActionSubSystem : UWorldSubsystem {
	char pad_30[0x1E8]; // 0x0(0x0)

	void DoActionByInfoWithNode(struct FTaskActionInfo& Info, struct UGameTaskNode* Node); // Function /Script/Game.TaskActionSubSystem.DoActionByInfoWithNode // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void DoActionByInfo(struct FTaskActionInfo& Info); // Function /Script/Game.TaskActionSubSystem.DoActionByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TaskExecute_BindActionToEvent
// Size: 0x0 (Inherited: 0x0)
struct UTaskExecute_BindActionToEvent : UGameTask_Execute {
	char pad_1F0[0x10]; // 0x0(0x0)
	struct TArray<struct FTaskActionBindData> BindEvents; // 0x0(0x0)
	bool EndByData; // 0x0(0x0)
	char pad_211[0x3]; // 0x0(0x0)
	struct FName TargetData; // 0x0(0x0)
	__int32 TargetValue; // 0x0(0x0)
	struct FName TargetData_Fail; // 0x0(0x0)
	__int32 TargetValue_Fail; // 0x0(0x0)
	__int32 NowValue; // 0x0(0x0)

	void UnBind(); // Function /Script/Game.TaskExecute_BindActionToEvent.UnBind // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnTargetDataChange(struct FName& DataName, __int32 InNowValue); // Function /Script/Game.TaskExecute_BindActionToEvent.OnTargetDataChange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void Bind(); // Function /Script/Game.TaskExecute_BindActionToEvent.Bind // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TaskSubActor
// Size: 0x0 (Inherited: 0x0)
struct ATaskSubActor : AActor {
	struct AGameTaskActor* GameTaskActor; // 0x0(0x0)
	char pad_228[0xB0]; // 0x0(0x0)
	__int32 DestructAccessoryNum; // 0x0(0x0)
	char pad_2DC[0x4]; // 0x0(0x0)

	void RPC_SpawnMultiMoneyOnClient(struct FVector SpawnLoc, __int32 MoneyNum, unsigned __int32 OnlineMoneyGuid); // Function /Script/Game.TaskSubActor.RPC_SpawnMultiMoneyOnClient // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void OnLevelFinish(enum class ELevelFinishResult FinishResult, float UseTime, enum class ELevelFailedReason FailedReason); // Function /Script/Game.TaskSubActor.OnLevelFinish // (Final|Native|Public) // @ game+0
	struct ATaskSubActor* GetTaskSubActor(struct UObject* WorldContext); // Function /Script/Game.TaskSubActor.GetTaskSubActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct TSet<__int32> GetMonsterData(); // Function /Script/Game.TaskSubActor.GetMonsterData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct AGameTaskActor* GetGameTaskActor(); // Function /Script/Game.TaskSubActor.GetGameTaskActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	__int32 GetDestructAccessoryNum(); // Function /Script/Game.TaskSubActor.GetDestructAccessoryNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct TMap<__int32, __int32> GetAchievementData(); // Function /Script/Game.TaskSubActor.GetAchievementData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.TeamAbilityComponent
// Size: 0x0 (Inherited: 0x0)
struct UTeamAbilityComponent : UAbilityComponentBase {
};

 // Class /Script/Game.TeamCondition
// Size: 0x0 (Inherited: 0x0)
struct UTeamCondition : UObject {
	bool bInverse; // 0x0(0x0)
	char pad_29[0x7]; // 0x0(0x0)
	struct AAITeamLogic* CurrAITeamLogic; // 0x0(0x0)

	bool Check(struct AAITeamLogic* AITeamLogic); // Function /Script/Game.TeamCondition.Check // (Final|Native|Public) // @ game+0
	bool CalTeamCondition(struct AAITeamLogic* AITeamLogic); // Function /Script/Game.TeamCondition.CalTeamCondition // (Native|Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.TeamCondition_AND
// Size: 0x0 (Inherited: 0x0)
struct UTeamCondition_AND : UTeamCondition {
	struct TArray<struct UTeamCondition*> TeamConditions; // 0x0(0x0)
};

 // Class /Script/Game.TeamCondition_OR
// Size: 0x0 (Inherited: 0x0)
struct UTeamCondition_OR : UTeamCondition {
	struct TArray<struct UTeamCondition*> TeamConditions; // 0x0(0x0)
};

 // Class /Script/Game.TeamSpawner
// Size: 0x0 (Inherited: 0x0)
struct ATeamSpawner : ANPCSpawnPoint {
	struct USphereComponent* TriggerSphere; // 0x0(0x0)
	__int32 GroupId; // 0x0(0x0)
	float TriggerRadius; // 0x0(0x0)
	float OutofFightRadius; // 0x0(0x0)
	char pad_254[0x4]; // 0x0(0x0)
	struct TArray<struct FTeamSpawnerInfo> SpawnTeamInfo; // 0x0(0x0)
	char Level; // 0x0(0x0)
	char pad_269[0x7]; // 0x0(0x0)
	struct FString Team; // 0x0(0x0)
	struct FString ConfigName; // 0x0(0x0)
	struct TMap<enum class ESkillRangeType, struct FTokenNum> TokenConfig; // 0x0(0x0)
	__int32 EliteTokenRatio; // 0x0(0x0)
	char pad_2E4[0x4]; // 0x0(0x0)
	struct APatrolPoint_New* PatrolPoint; // 0x0(0x0)
	struct TArray<struct UAIEvent*> AIEvents; // 0x0(0x0)
	bool bDebug; // 0x0(0x0)
	char pad_301[0x7]; // 0x0(0x0)
	struct TMap<__int32, struct AGameAICharacter*> SpawnedMap; // 0x0(0x0)
	struct TMap<struct AGameAICharacter*, __int32> ReturnMoveRequestID2AI; // 0x0(0x0)
	struct FVector InFightAnchorPoint; // 0x0(0x0)
	float InFightTIme; // 0x0(0x0)
	enum class ETeamSpawnerState State; // 0x0(0x0)
	float NormalState_NoPlayersInTriggerTime; // 0x0(0x0)
	bool bHasPlayerInTrigger; // 0x0(0x0)
	char pad_3C1[0x7]; // 0x0(0x0)

	void OnTriggerEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex); // Function /Script/Game.TeamSpawner.OnTriggerEndOverlap // (Final|Native|Protected) // @ game+0
	void OnTriggerBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.TeamSpawner.OnTriggerBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnSpawnMonsterDie(struct AGameCharacter* InCharacter, struct AGameCharacter* Killer, struct FHealthChangeValue& HealthChangeValue); // Function /Script/Game.TeamSpawner.OnSpawnMonsterDie // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnMoveCompleted(struct FAIRequestID RequestID, enum class EPathFollowingResult Result); // Function /Script/Game.TeamSpawner.OnMoveCompleted // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.TestNavPathCost
// Size: 0x0 (Inherited: 0x0)
struct ATestNavPathCost : AActor {
	struct UBoxComponent* BoxComponent; // 0x0(0x0)
	bool IsBegin; // 0x0(0x0)
	bool ShowPathCost; // 0x0(0x0)
	char pad_22A[0x2]; // 0x0(0x0)
	float Cost; // 0x0(0x0)

	void Tick(float DeltaSeconds); // Function /Script/Game.TestNavPathCost.Tick // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TGameEngine
// Size: 0x0 (Inherited: 0x0)
struct UTGameEngine : UGameEngine {
	struct UConsoleCommandObj* ConsoleCommandObj; // 0x0(0x0)

	bool ReConnectServer(struct UObject* WorldContextObject); // Function /Script/Game.TGameEngine.ReConnectServer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsNetworkFailure(); // Function /Script/Game.TGameEngine.IsNetworkFailure // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TGameNavigationSystem
// Size: 0x0 (Inherited: 0x0)
struct UTGameNavigationSystem : UNavigationSystemV1 {
};

 // Class /Script/Game.TGameSettings
// Size: 0x0 (Inherited: 0x0)
struct UTGameSettings : UDeveloperSettings {
	bool bAIUseRVOAvoidance; // 0x0(0x0)
	bool bUseRVOPostProcess; // 0x0(0x0)
	bool bDrawVelocity; // 0x0(0x0)
	bool bAIUseDtCrowd; // 0x0(0x0)
	char pad_3C[0x4]; // 0x0(0x0)
	struct TSoftObjectPtr<UCurveFloat> NumberOfRingsCurve; // 0x0(0x0)
	struct TSoftObjectPtr<UCurveFloat> PointsPerRingCurve; // 0x0(0x0)
	float WeaponBounceAngle; // 0x0(0x0)
	bool bPathFindingAsync; // 0x0(0x0)
	char pad_95[0x3]; // 0x0(0x0)
	struct TArray<struct FEmitterSortRule> EmitterDefaultSortRules; // 0x0(0x0)
};

 // Class /Script/Game.ThirdPersonPlayerCameraManager
// Size: 0x0 (Inherited: 0x0)
struct AThirdPersonPlayerCameraManager : APlayerCameraManager {
	float NormalLerpSpeed; // 0x0(0x0)
	float AimLerpSpeed; // 0x0(0x0)
	bool bUseAimCamera; // 0x0(0x0)
	bool bUseTempCameraPos; // 0x0(0x0)
	char pad_281A[0x2]; // 0x0(0x0)
	struct FSmoothValue ArmLengthSmoothValue; // 0x0(0x0)
	struct FSmoothValue FieldOfViewSmoothValue; // 0x0(0x0)
	char pad_2844[0x4]; // 0x0(0x0)
	struct FSmoothVector SocketOffsetsSmoothValue; // 0x0(0x0)
	struct FSmoothVector AdditiveSceneSocketOffset; // 0x0(0x0)
	struct FSmoothValue AdditiveFieldOfView; // 0x0(0x0)
	struct FSmoothVector AdditiveViewPitch; // 0x0(0x0)
	struct FSmoothVector ArmPositionSmoothValue; // 0x0(0x0)
	struct FSmoothVector SocketRotatorSmoothValue; // 0x0(0x0)
	float CurrentLerpSpeed; // 0x0(0x0)
	char pad_2914[0x4]; // 0x0(0x0)
	struct FCameraSocketInfo CameraSocketInfo; // 0x0(0x0)
	struct FCameraInfo TempCameraInfo; // 0x0(0x0)
	struct FCurveValue TempCameraLerpCurveInfo; // 0x0(0x0)
	struct AGamePlayer* m_lpCurrentPlayer; // 0x0(0x0)
	struct FVector TargetPosition; // 0x0(0x0)
	float PitchInterpValue; // 0x0(0x0)
	float YawInterpValue; // 0x0(0x0)
	float RotatorInerpTime; // 0x0(0x0)
	float RotatorInerpPassTime; // 0x0(0x0)
	float SnapShotCamaerPitch; // 0x0(0x0)
	float SnapShotCamaerYaw; // 0x0(0x0)
	float ScaleProvisionalAnimationSpeed; // 0x0(0x0)
	bool bUseAimCorrection; // 0x0(0x0)
	char pad_2AE1[0x3]; // 0x0(0x0)
	__int32 AimCorrectionSimulateTimes; // 0x0(0x0)
	char pad_2AE8[0x58]; // 0x0(0x0)
	float AimCorrectionOffsetLerpInSpeed; // 0x0(0x0)
	float AimCorrectionOffsetLerpOutSpeed; // 0x0(0x0)
	char pad_2B48[0x90]; // 0x0(0x0)
	struct USpecialSceneCamera* CurrentSpecialSceneCamera; // 0x0(0x0)
	char pad_2BE0[0x90]; // 0x0(0x0)
	struct UGameCameraAnimMetaData* m_lpCurrentCameraAnimationMetaData; // 0x0(0x0)
	char pad_2C78[0x5C]; // 0x0(0x0)
	struct FSmoothVector WorldOffsetsSmoothValue; // 0x0(0x0)
	char pad_2CF8[0x8]; // 0x0(0x0)

	void SuspendCameraAnimation(); // Function /Script/Game.ThirdPersonPlayerCameraManager.SuspendCameraAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopTempCameraInfo(__int32 CameraAnimIndex, float LerpSpeed, float EndTime, bool bCancelSkill); // Function /Script/Game.ThirdPersonPlayerCameraManager.StopTempCameraInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StopAllCustomAnimation(); // Function /Script/Game.ThirdPersonPlayerCameraManager.StopAllCustomAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetYawLimit(bool bIsEnable, struct FVector InLeftPosition, struct FVector InRightPosition); // Function /Script/Game.ThirdPersonPlayerCameraManager.SetYawLimit // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetViewTargetTransformWithBlend(struct FVector& InLocation, struct FRotator& InRotator, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function /Script/Game.ThirdPersonPlayerCameraManager.SetViewTargetTransformWithBlend // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	__int32 SetTempCameraInfo(float ArmLength, float FOVOffset, struct FVector SocketOffset, struct FVector ArmPosition, float LerpSpeed, bool bCancelSkillStopCamera); // Function /Script/Game.ThirdPersonPlayerCameraManager.SetTempCameraInfo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void SetSpecialSceneCamera(struct USpecialSceneCamera* SpecialSceneCamera); // Function /Script/Game.ThirdPersonPlayerCameraManager.SetSpecialSceneCamera // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSocketCameraInfo(struct FName SocketName, float MaxTime, struct UCurveFloat* FOVCurve, float BlendInTime, float BelendOutTime); // Function /Script/Game.ThirdPersonPlayerCameraManager.SetSocketCameraInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetSceneTransparentEnable(bool Value); // Function /Script/Game.ThirdPersonPlayerCameraManager.SetSceneTransparentEnable // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetFollowCamera(struct ACameraActor* InFollowCamera, float InOffsetLength, float InBlendTime, float InLagSpeed, float InMaxLagDistance); // Function /Script/Game.ThirdPersonPlayerCameraManager.SetFollowCamera // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetCameraPitchInterpTo(float PitchValue, float YawValue, float InterpTime); // Function /Script/Game.ThirdPersonPlayerCameraManager.SetCameraPitchInterpTo // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResumeCameraAnimation(); // Function /Script/Game.ThirdPersonPlayerCameraManager.ResumeCameraAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetSpecialSceneCamera(); // Function /Script/Game.ThirdPersonPlayerCameraManager.ResetSpecialSceneCamera // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnSkillCancelHandler(__int32 ID, enum class ESkillInterruptedType InType); // Function /Script/Game.ThirdPersonPlayerCameraManager.OnSkillCancelHandler // (Final|Native|Protected) // @ game+0
	struct FTransform GetPlayerCameraComponentTrans(); // Function /Script/Game.ThirdPersonPlayerCameraManager.GetPlayerCameraComponentTrans // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void ClearFollowCamera(); // Function /Script/Game.ThirdPersonPlayerCameraManager.ClearFollowCamera // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ClearCameraDataOffset(); // Function /Script/Game.ThirdPersonPlayerCameraManager.ClearCameraDataOffset // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ChangeFollowCameraRotation(struct FRotator& InRotator); // Function /Script/Game.ThirdPersonPlayerCameraManager.ChangeFollowCameraRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void ChangeCurrentViewTargetTransformWithBlend(struct FVector& InStartLocation, struct FRotator& InStartRotator, struct FVector& InEndLocation, struct FRotator& InEndRotator, float BlendTime, float BlendExp); // Function /Script/Game.ThirdPersonPlayerCameraManager.ChangeCurrentViewTargetTransformWithBlend // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	__int32 AddCustomCameraAnimation(struct UGameCameraAnimMetaDataInfo* InAnimationAsset, __int32 InStartCameraIndex, __int32 InEndCameraIndex, struct FVector& InOffsetLocation, bool bUseCameraOffset); // Function /Script/Game.ThirdPersonPlayerCameraManager.AddCustomCameraAnimation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	__int32 AddCustomAnimationWithPath(struct UGameCameraAnimMetaData* InAnimationAsset, struct TArray<struct FName>& InPathIds, bool bUseCameraOffset); // Function /Script/Game.ThirdPersonPlayerCameraManager.AddCustomAnimationWithPath // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 AddCustomAnimation(struct UGameCameraAnimMetaData* InAnimationAsset, bool bUseCameraOffset); // Function /Script/Game.ThirdPersonPlayerCameraManager.AddCustomAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AddCameraDataOffsetWithRotate(float InCameraArmLength, struct FVector InCameraSocketOffset, struct FRotator InCameraSocketRotator, struct FVector InCameraArmPosition, float InCameraFOV, float InBlendInSpeed, float InBlendOutSpeed, float InBlendOutTime, float ViewPitchMinAdditive, float ViewPitchMaxAdditive, bool bUseSinEaseFunc); // Function /Script/Game.ThirdPersonPlayerCameraManager.AddCameraDataOffsetWithRotate // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void AddCameraDataOffset(float InCameraArmLength, struct FVector& InCameraSocketOffset, struct FVector& InCameraArmPosition, float InCameraFOV, float InBlendInSpeed, float InBlendOutSpeed, float InBlendOutTime, float ViewPitchMinAdditive, float ViewPitchMaxAdditive, bool bUseSinEaseFunc); // Function /Script/Game.ThirdPersonPlayerCameraManager.AddCameraDataOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.ThreadCoreWidget
// Size: 0x0 (Inherited: 0x0)
struct UThreadCoreWidget : ULuaWidget {

	struct FString GatherThreadInfo(); // Function /Script/Game.ThreadCoreWidget.GatherThreadInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TipComponent
// Size: 0x0 (Inherited: 0x0)
struct UTipComponent : UWidgetComponent {

	void OnNumChange(__int32 InNum); // Function /Script/Game.TipComponent.OnNumChange // (Final|Native|Public) // @ game+0
	void OnLockEnd(); // Function /Script/Game.TipComponent.OnLockEnd // (Final|Native|Public) // @ game+0
};

 // Class /Script/Game.MonsterLockTipWidget
// Size: 0x0 (Inherited: 0x0)
struct UMonsterLockTipWidget : UUserWidget {

	void OnNumChange(__int32 InNum); // Function /Script/Game.MonsterLockTipWidget.OnNumChange // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.TipsInterface
// Size: 0x0 (Inherited: 0x0)
struct UTipsInterface : UInterface {

	void InitTips(); // Function /Script/Game.TipsInterface.InitTips // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
	void Clear(); // Function /Script/Game.TipsInterface.Clear // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.TouchButton
// Size: 0x0 (Inherited: 0x0)
struct UTouchButton : UButtonBase {
	struct FMulticastInlineDelegate OnClicked; // 0x0(0x0)
	struct FMulticastInlineDelegate OnReleased; // 0x0(0x0)
	struct FMulticastInlineDelegate OnTouchMove; // 0x0(0x0)
	bool IsHorizontal; // 0x0(0x0)
	char pad_461[0x3]; // 0x0(0x0)
	float ValidDistance; // 0x0(0x0)
	char pad_468[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.TransporterBase
// Size: 0x0 (Inherited: 0x0)
struct ATransporterBase : AActor {
	float WaitTime; // 0x0(0x0)
	float MoveTime; // 0x0(0x0)
	bool Loop; // 0x0(0x0)
	bool Sweep; // 0x0(0x0)
	char pad_22A[0x6]; // 0x0(0x0)
	struct FString Tag; // 0x0(0x0)
	float SpeedRate; // 0x0(0x0)
	char pad_244[0x4]; // 0x0(0x0)
	struct AActor* RunTrack; // 0x0(0x0)
	bool LeftClosed; // 0x0(0x0)
	bool RightClosed; // 0x0(0x0)
	bool RunEndOpenRight; // 0x0(0x0)
	bool RunEndOpenLeft; // 0x0(0x0)
	bool KeepForward; // 0x0(0x0)
	bool Unlimited; // 0x0(0x0)
	char pad_256[0x2]; // 0x0(0x0)
	float GradientDistance; // 0x0(0x0)
	float MinSpeedRate; // 0x0(0x0)
	float Bump; // 0x0(0x0)
	float CycleLimit; // 0x0(0x0)
	struct USplineComponent* Spline; // 0x0(0x0)
	char pad_270[0x20]; // 0x0(0x0)
	struct UBoxComponent* Box; // 0x0(0x0)
	struct UPrimitiveComponent* Ship; // 0x0(0x0)
	struct TArray<struct AActor*> Actors; // 0x0(0x0)
	char pad_2B0[0x18]; // 0x0(0x0)

	void UpdateSpeed(float InSpeed); // Function /Script/Game.TransporterBase.UpdateSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0
	void UpdateRunTrack(struct FString InName); // Function /Script/Game.TransporterBase.UpdateRunTrack // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetPause(bool InValue, bool InOpenRight, bool InOpenLeft, __int32 InPointIndex); // Function /Script/Game.TransporterBase.SetPause // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetActive(); // Function /Script/Game.TransporterBase.SetActive // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ResetState(); // Function /Script/Game.TransporterBase.ResetState // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnStartMove(); // Function /Script/Game.TransporterBase.OnStartMove // (Event|Public|BlueprintEvent) // @ game+0
	void OnPause(bool bOpenRight, bool bOpenLeft); // Function /Script/Game.TransporterBase.OnPause // (Event|Public|BlueprintEvent) // @ game+0
	void OnEndOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex); // Function /Script/Game.TransporterBase.OnEndOverLap // (Final|Native|Private) // @ game+0
	void OnBeginOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, __int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function /Script/Game.TransporterBase.OnBeginOverLap // (Final|Native|Private|HasOutParms) // @ game+0
	void OnArrive(); // Function /Script/Game.TransporterBase.OnArrive // (Event|Public|BlueprintEvent) // @ game+0
	bool IsForward(); // Function /Script/Game.TransporterBase.IsForward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsActive(); // Function /Script/Game.TransporterBase.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void InDecelerate(); // Function /Script/Game.TransporterBase.InDecelerate // (Event|Public|BlueprintEvent) // @ game+0
	void DoComeBack(); // Function /Script/Game.TransporterBase.DoComeBack // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DoActive(float InRuntime, float InSpeed, bool InLoop, bool InKeepForward, bool InUnlimited, bool InRunEndOpenRight, bool InRunEndOpenLeft); // Function /Script/Game.TransporterBase.DoActive // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.Trap
// Size: 0x0 (Inherited: 0x0)
struct ATrap : AGameSkillInteractorBase {
	struct TWeakObjectPtr<struct USkillEmitter> SpawnedBy; // 0x0(0x0)
	__int32 OriginSkillID; // 0x0(0x0)
	struct TWeakObjectPtr<struct AGameCharacter> OwnerCharacter; // 0x0(0x0)
	char bRemoveOnLeave : 1; // 0x0(0x0)
	char pad_B44_1 : 7; // 0x0(0x0)
	char pad_B45[0x3]; // 0x0(0x0)
	__int32 BornSkillID; // 0x0(0x0)
	__int32 EnterSkillID; // 0x0(0x0)
	__int32 KeepSkillID; // 0x0(0x0)
	__int32 LeaveSkillID; // 0x0(0x0)
	__int32 DeadSkillId; // 0x0(0x0)
	__int32 EndSkillID; // 0x0(0x0)
	__int32 TrapInfoID; // 0x0(0x0)
	bool bGodFather; // 0x0(0x0)
	bool bAttachParent; // 0x0(0x0)
	char pad_B66[0x2]; // 0x0(0x0)
	struct FName SocketName; // 0x0(0x0)
	bool bIsSceneTrap; // 0x0(0x0)
	bool bDestroyWhenSpawnerDead; // 0x0(0x0)
	char pad_B72[0x6]; // 0x0(0x0)
	struct FTrapSpawnInfo TemplateInfo; // 0x0(0x0)
	float TrapKeepTime; // 0x0(0x0)
	float ApplyModifierIntervalTime; // 0x0(0x0)
	bool bEnd; // 0x0(0x0)
	char pad_D49[0x3]; // 0x0(0x0)
	__int32 SkillLevel; // 0x0(0x0)
	bool bInitData; // 0x0(0x0)
	char pad_D51[0x57]; // 0x0(0x0)
	struct FBlockByControlProtectionKeepEffectInfo BlockedKeepEffectInfo; // 0x0(0x0)
	float TickElapesTime; // 0x0(0x0)
	char pad_DFC[0x4]; // 0x0(0x0)
	struct TMap<unsigned __int32, struct UCastConditionCheck*> Conditions; // 0x0(0x0)

	struct ATrap* SpawnTrapInTrap(struct ATrap* Trap, __int32 ID, struct FTransform& InBornTransform); // Function /Script/Game.Trap.SpawnTrapInTrap // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct ATrap* SpawnTrapDeferredLua(struct UObject* InWorldContext, struct FSoftClassPath InClass, float InTrapLife, __int32 InTrapEnterSkill, __int32 InTrapKeepSkill, __int32 InTrapLeaveSkill, struct FTransform& InBornTransform, struct USkillEmitter* EmitterSpawnedBy); // Function /Script/Game.Trap.SpawnTrapDeferredLua // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct ATrap* SpawnTrapDeferred(struct UObject* InWorldContext, struct FTrapSpawnInfo& Info, struct FTransform& InBornTransform, struct USkillEmitter* EmitterSpawnedBy); // Function /Script/Game.Trap.SpawnTrapDeferred // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct ATrap* SpawnTrap(struct UObject* Outer, __int32 ID, struct FTransform& InBornTransform, struct USkillEmitter* EmitterSpawnedBy); // Function /Script/Game.Trap.SpawnTrap // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct ATrap* SpawnDeferred(struct UObject* InWorldContext, __int32 ID, struct FTransform& InBornTransform, struct USkillEmitter* EmitterSpawnedBy, __int32 TrapLevel); // Function /Script/Game.Trap.SpawnDeferred // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetTrapKeepTime(float InTime); // Function /Script/Game.Trap.SetTrapKeepTime // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Server_OnActive(); // Function /Script/Game.Trap.Server_OnActive // (Event|Public|BlueprintEvent) // @ game+0
	void PlayEndSkill(); // Function /Script/Game.Trap.PlayEndSkill // (Final|Native|Protected) // @ game+0
	void OnTrapLeave(bool bDead); // Function /Script/Game.Trap.OnTrapLeave // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0
	void OnSpawnerEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function /Script/Game.Trap.OnSpawnerEndPlay // (Final|Native|Protected) // @ game+0
	void OnSpawnerDead(bool bDead, struct UAbilityComponentBase* InLauncher, struct FHealthChangeValue& HealthChange); // Function /Script/Game.Trap.OnSpawnerDead // (Final|Native|Protected|HasOutParms) // @ game+0
	void OnParentBulletRecycle(struct ABullet* InBullet); // Function /Script/Game.Trap.OnParentBulletRecycle // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnLeaveTrap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function /Script/Game.Trap.OnLeaveTrap // (Final|Native|Private) // @ game+0
	void OnEnterTrap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function /Script/Game.Trap.OnEnterTrap // (Final|Native|Private) // @ game+0
	void OnDead(bool bDead, struct UAbilityComponentBase* InLauncher, struct FHealthChangeValue& nChangeValueData); // Function /Script/Game.Trap.OnDead // (Final|Native|Protected|HasOutParms) // @ game+0
	void Multicast_OnActiveInfo(struct FTransform ServerTransform, struct FTrapSpawnInfo InInfo); // Function /Script/Game.Trap.Multicast_OnActiveInfo // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void Multicast_OnActive(struct FTransform ServerTransform); // Function /Script/Game.Trap.Multicast_OnActive // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0
	void LimitTrapMaxNum(struct UObject* InWorldContext, struct ATrap* NewTrap, struct AActor* Summoner, __int32 MaxNum, __int32 LimitSameTrapClassNum); // Function /Script/Game.Trap.LimitTrapMaxNum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool K2_CheckNeedCare(struct AActor* OtherActor); // Function /Script/Game.Trap.K2_CheckNeedCare // (Native|Event|Public|BlueprintEvent) // @ game+0
	bool IsUseParentAbility(); // Function /Script/Game.Trap.IsUseParentAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsNeedCare(struct AActor* OtherActor); // Function /Script/Game.Trap.IsNeedCare // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct UAbilityComponent* GetUseAbility(); // Function /Script/Game.Trap.GetUseAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void GetTrapTemplateAssetPath(struct FString InPath, struct TArray<struct FSoftObjectPath>& OutPaths); // Function /Script/Game.Trap.GetTrapTemplateAssetPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FTrapSpawnInfo GetTrapInfo(__int32 ID); // Function /Script/Game.Trap.GetTrapInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetSkillLevel(); // Function /Script/Game.Trap.GetSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void Client_OnActive(); // Function /Script/Game.Trap.Client_OnActive // (Event|Public|BlueprintEvent) // @ game+0
	void BP_OnTrapLeave(bool bDead); // Function /Script/Game.Trap.BP_OnTrapLeave // (Event|Protected|BlueprintEvent) // @ game+0
	void BP_OnLeaveTrap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function /Script/Game.Trap.BP_OnLeaveTrap // (Event|Protected|BlueprintEvent) // @ game+0
	void BP_OnEnterTrap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function /Script/Game.Trap.BP_OnEnterTrap // (Event|Protected|BlueprintEvent) // @ game+0
	void BP_OnDead(struct UAbilityComponentBase* Killer); // Function /Script/Game.Trap.BP_OnDead // (Event|Protected|BlueprintEvent) // @ game+0
	void BP_ClientPlayTrapEndExhibition(); // Function /Script/Game.Trap.BP_ClientPlayTrapEndExhibition // (Event|Protected|BlueprintEvent) // @ game+0
	void BP_ClientActiveTrapExhibition(); // Function /Script/Game.Trap.BP_ClientActiveTrapExhibition // (Event|Protected|BlueprintEvent) // @ game+0
	void BindParentBulletRecycle(struct ABullet* InBullet); // Function /Script/Game.Trap.BindParentBulletRecycle // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.TrapAbilityComponent
// Size: 0x0 (Inherited: 0x0)
struct UTrapAbilityComponent : UAbilityComponent {
	struct UAbilityComponentBase* OwnerAbility; // 0x0(0x0)
	struct ATrap* TrapOwner; // 0x0(0x0)

	struct UAbilityComponent* GetUseAbility(); // Function /Script/Game.TrapAbilityComponent.GetUseAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.UAnimNotifyState_WarningTips
// Size: 0x0 (Inherited: 0x0)
struct UUAnimNotifyState_WarningTips : UAnimNotifyState_Base {
	bool bUseTotalTime; // 0x0(0x0)
	char pad_49[0x3]; // 0x0(0x0)
	float WarningTime; // 0x0(0x0)
};

 // Class /Script/Game.UICameraLibrary
// Size: 0x0 (Inherited: 0x0)
struct UUICameraLibrary : UBlueprintFunctionLibrary {

	struct FPreviewModelInfo GetPreviewModelInfo(enum class EItemType InItemType, __int64 InTemplateID, __int32 InCameraID, struct FString InFromType, struct FString InToType); // Function /Script/Game.UICameraLibrary.GetPreviewModelInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetPlayList(__int32 InCameraID, struct FString InFromType, struct FString InToType, struct TArray<__int32>& OutList); // Function /Script/Game.UICameraLibrary.GetPlayList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FUICameraInfoItem GetCameraInfoItem(__int32 InCameraID, struct FString InType); // Function /Script/Game.UICameraLibrary.GetCameraInfoItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FUICameraInfo GetCameraInfo(__int32 InCameraID); // Function /Script/Game.UICameraLibrary.GetCameraInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetCameraAnimTime(__int32 InCameraID, struct FString InFromType, struct FString InToType); // Function /Script/Game.UICameraLibrary.GetCameraAnimTime // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UIPlayerController
// Size: 0x0 (Inherited: 0x0)
struct AUIPlayerController : APlayerController {
};

 // Class /Script/Game.UICheatManager
// Size: 0x0 (Inherited: 0x0)
struct UUICheatManager : UCheatManager {

	void Eval(struct FString InCode); // Function /Script/Game.UICheatManager.Eval // (Final|Exec|Native|Public) // @ game+0
};

 // Class /Script/Game.UIEngineSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UUIEngineSubsystem : UEngineSubsystem {
	char pad_30[0x60]; // 0x0(0x0)

	void SetCursorVisibility(bool bVisibility); // Function /Script/Game.UIEngineSubsystem.SetCursorVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnDeviceDisconnected(__int32 ControllerId); // Function /Script/Game.UIEngineSubsystem.OnDeviceDisconnected // (Final|Native|Private) // @ game+0
	void OnDeviceConnected(__int32 ControllerId); // Function /Script/Game.UIEngineSubsystem.OnDeviceConnected // (Final|Native|Private) // @ game+0
	bool IsBackground(); // Function /Script/Game.UIEngineSubsystem.IsBackground // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool HasDeviceConnected(); // Function /Script/Game.UIEngineSubsystem.HasDeviceConnected // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UUIEngineSubsystem* GetUIEngineSubsystem(); // Function /Script/Game.UIEngineSubsystem.GetUIEngineSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class EKeyboardInputType GetMobileGamepadType(); // Function /Script/Game.UIEngineSubsystem.GetMobileGamepadType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class EKeyboardInputType GetGamepadActiveType(); // Function /Script/Game.UIEngineSubsystem.GetGamepadActiveType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetDeviceControllerId(); // Function /Script/Game.UIEngineSubsystem.GetDeviceControllerId // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool GetCursorVisibility(); // Function /Script/Game.UIEngineSubsystem.GetCursorVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0
	void EnableSyntheticCursorMoves(bool bEnable); // Function /Script/Game.UIEngineSubsystem.EnableSyntheticCursorMoves // (Final|Native|Public|BlueprintCallable) // @ game+0
	void Debug_ConnectionChange(); // Function /Script/Game.UIEngineSubsystem.Debug_ConnectionChange // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool AllowPlatformMessageHandling(struct FName& InKeyName, __int32 ControllerId); // Function /Script/Game.UIEngineSubsystem.AllowPlatformMessageHandling // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UIGameMode
// Size: 0x0 (Inherited: 0x0)
struct AUIGameMode : AGameMode {
	char pad_308[0x8]; // 0x0(0x0)
};

 // Class /Script/Game.UIGameInstanceSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UUIGameInstanceSubsystem : UGameInstanceSubsystem {
	struct TMap<__int32, struct FDelegate> FinishHandleMap; // 0x0(0x0)
	char pad_80[0x30]; // 0x0(0x0)

	void UnLoadLevel(struct FName& InLevelName, bool bShouldBlockOnLoad, struct FDelegate InFinishHandle); // Function /Script/Game.UIGameInstanceSubsystem.UnLoadLevel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void SwitchMouseEventNotice(bool InOpen); // Function /Script/Game.UIGameInstanceSubsystem.SwitchMouseEventNotice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetMouseUpEventDispatch(bool InOpen); // Function /Script/Game.UIGameInstanceSubsystem.SetMouseUpEventDispatch // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnFinish__DelegateSignature(); // DelegateFunction /Script/Game.UIGameInstanceSubsystem.OnFinish__DelegateSignature // (Public|Delegate) // @ game+0
	void OnFinish(unsigned __int32 ID); // Function /Script/Game.UIGameInstanceSubsystem.OnFinish // (Final|Native|Private) // @ game+0
	void LoadLevel(struct FName& InLevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FDelegate InFinishHandle); // Function /Script/Game.UIGameInstanceSubsystem.LoadLevel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	bool IsOpenSafeZone(); // Function /Script/Game.UIGameInstanceSubsystem.IsOpenSafeZone // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsFight(); // Function /Script/Game.UIGameInstanceSubsystem.IsFight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetScreenRatio(); // Function /Script/Game.UIGameInstanceSubsystem.GetScreenRatio // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetSafeZoneDefaultValue(); // Function /Script/Game.UIGameInstanceSubsystem.GetSafeZoneDefaultValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UGameInstance* GetApp(); // Function /Script/Game.UIGameInstanceSubsystem.GetApp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UUIGameInstanceSubsystem* Get(); // Function /Script/Game.UIGameInstanceSubsystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FMargin CalcMargin(__int32 InWidth, __int32 InHeight); // Function /Script/Game.UIGameInstanceSubsystem.CalcMargin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void BlockUIClickEvent(bool bBlock); // Function /Script/Game.UIGameInstanceSubsystem.BlockUIClickEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UINiagaraInfo
// Size: 0x0 (Inherited: 0x0)
struct UUINiagaraInfo : UPrimaryDataAsset {
	struct FSoftObjectPath EnterParticlePath; // 0x0(0x0)
	struct FSoftObjectPath InParticlePath; // 0x0(0x0)
	struct TMap<struct FString, struct FNiagaraData> NiagaraMap; // 0x0(0x0)
};

 // Class /Script/Game.UINiagaraAsset
// Size: 0x0 (Inherited: 0x0)
struct UUINiagaraAsset : UUINiagaraInfo {
	struct FPlayerEffectSettings PlayerEffectSettings; // 0x0(0x0)
};

 // Class /Script/Game.UINiagara
// Size: 0x0 (Inherited: 0x0)
struct UUINiagara : UBlueprintFunctionLibrary {

	struct UNiagaraSystem* LoadNiagaraAsset(struct FSoftObjectPath InPath); // Function /Script/Game.UINiagara.LoadNiagaraAsset // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	__int32 GetPostParam(struct UObject* WorldContextObject, __int32 InKey); // Function /Script/Game.UINiagara.GetPostParam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FPlayerEffectSettings GetPostAsset(__int32 InKey); // Function /Script/Game.UINiagara.GetPostAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UNiagaraSystem* GetNiagaraValue(__int32 InKey); // Function /Script/Game.UINiagara.GetNiagaraValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct TArray<struct FTransform> GetNiagaraTrans(__int32 InKey, struct FString InName); // Function /Script/Game.UINiagara.GetNiagaraTrans // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UNiagaraSystem* GetNiagarasValue(__int32 InKey, struct FString Name); // Function /Script/Game.UINiagara.GetNiagarasValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UUINiagaraInfo* GetInfo(__int32 InKey); // Function /Script/Game.UINiagara.GetInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetDelay(__int32 InKey); // Function /Script/Game.UINiagara.GetDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FUINiagaraConfig GetDataInfoAsset(__int32 InKey); // Function /Script/Game.UINiagara.GetDataInfoAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetDataDelay(__int32 InKey, struct FString InName); // Function /Script/Game.UINiagara.GetDataDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EndPostParam(struct UObject* WorldContextObject, __int32 InKey, __int32 InID); // Function /Script/Game.UINiagara.EndPostParam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UIParticleGroupActor
// Size: 0x0 (Inherited: 0x0)
struct AUIParticleGroupActor : AActor {
	struct USceneCaptureComponent2D* SceneCaptureComponent; // 0x0(0x0)
	struct UStaticMeshComponent* BackgroundMesh; // 0x0(0x0)
	struct UTextureRenderTarget2D* RenderTarget2D; // 0x0(0x0)
	struct UMaterial* DefaultUnlitMaterial; // 0x0(0x0)
	struct UStaticMesh* DefaultStaticMesh; // 0x0(0x0)

	void OnEffectsQualityChangedHandler(__int32 InLevel); // Function /Script/Game.UIParticleGroupActor.OnEffectsQualityChangedHandler // (Final|Native|Protected) // @ game+0
};

 // Class /Script/Game.UIParticleImage
// Size: 0x0 (Inherited: 0x0)
struct UUIParticleImage : UImage {
	struct UFXSystemAsset* PSTemplate; // 0x0(0x0)
	bool bEnablePostProcessing; // 0x0(0x0)
	char pad_231[0x7]; // 0x0(0x0)
	struct UFXSystemComponent* ParticleComponent; // 0x0(0x0)
	struct UMaterialInstanceDynamic* m_lpRenderTargetMaterialInstance; // 0x0(0x0)
	char pad_248[0x10]; // 0x0(0x0)

	void SetParticleAsset(struct UFXSystemAsset* InAsset); // Function /Script/Game.UIParticleImage.SetParticleAsset // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetAssetFixedBounds(struct FVector2D& InBounds); // Function /Script/Game.UIParticleImage.SetAssetFixedBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void ResetSystem(); // Function /Script/Game.UIParticleImage.ResetSystem // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnParticleSystemFinishedHandler(); // Function /Script/Game.UIParticleImage.OnParticleSystemFinishedHandler // (Final|Native|Protected) // @ game+0
	void DeactivateSystem(); // Function /Script/Game.UIParticleImage.DeactivateSystem // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ActivateSystem(); // Function /Script/Game.UIParticleImage.ActivateSystem // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UMGDataBaseComponent
// Size: 0x0 (Inherited: 0x0)
struct UUMGDataBaseComponent : UActorComponent {
	struct TArray<struct FWidgetData> Widgets; // 0x0(0x0)
	struct TArray<struct UWidgetComponent*> SpawnComponent; // 0x0(0x0)
	struct UHPComponent* HPComponent; // 0x0(0x0)
	struct FName HpComponentSocketName; // 0x0(0x0)
	struct FVector HpComponentOffset; // 0x0(0x0)
	char pad_EC[0x4]; // 0x0(0x0)
	struct USceneComponent* HpComponentAttach; // 0x0(0x0)
	struct FMulticastInlineDelegate OnNotifyAimed; // 0x0(0x0)
	struct UMonBloodBar* BloodBar; // 0x0(0x0)
	struct UHPWidgetBase* HPWidget; // 0x0(0x0)
	struct FHPState HPState; // 0x0(0x0)
	char pad_134[0x4]; // 0x0(0x0)
	struct UAbilityComponentBase* Ability; // 0x0(0x0)
	char pad_140[0x8]; // 0x0(0x0)

	bool SetShowDistance(float InDisatnce); // Function /Script/Game.UMGDataBaseComponent.SetShowDistance // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetActiveHpComponent(bool Inactive); // Function /Script/Game.UMGDataBaseComponent.SetActiveHpComponent // (Native|Public|BlueprintCallable) // @ game+0
	void OnShieldChange(float Current, float Max, float Old); // Function /Script/Game.UMGDataBaseComponent.OnShieldChange // (Native|Public) // @ game+0
	void OnNotifyAimed__DelegateSignature(bool bAim); // DelegateFunction /Script/Game.UMGDataBaseComponent.OnNotifyAimed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnHpRecycle(); // Function /Script/Game.UMGDataBaseComponent.OnHpRecycle // (Native|Public) // @ game+0
	void OnHPChange(float Current, float Max, struct UAbilityComponentBase* InLauncher); // Function /Script/Game.UMGDataBaseComponent.OnHPChange // (Native|Public) // @ game+0
	void OnDead(bool bDead, struct UAbilityComponentBase* InLauncher, struct FHealthChangeValue& HealthChangeData); // Function /Script/Game.UMGDataBaseComponent.OnDead // (Native|Public|HasOutParms) // @ game+0
	void OnAsyncLoadUMGClass(struct UObject* LoadedObject); // Function /Script/Game.UMGDataBaseComponent.OnAsyncLoadUMGClass // (Final|Native|Private) // @ game+0
	void CreateWidget(struct FWidgetData& WidgetData); // Function /Script/Game.UMGDataBaseComponent.CreateWidget // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0
	void AddWidget(); // Function /Script/Game.UMGDataBaseComponent.AddWidget // (Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UMGDataComponent
// Size: 0x0 (Inherited: 0x0)
struct UUMGDataComponent : UUMGDataBaseComponent {
	struct FMulticastInlineDelegate OnStartReload; // 0x0(0x0)
	struct FMulticastInlineDelegate OnEndReload; // 0x0(0x0)
	__int32 SpecializedSkillID; // 0x0(0x0)
	float LastHpPercent; // 0x0(0x0)
	struct FWarningTipsInfo WarningTipsInfo; // 0x0(0x0)
	bool bShowSkillProgress; // 0x0(0x0)
	char pad_189[0x3]; // 0x0(0x0)
	float CurSkillProgress; // 0x0(0x0)
	__int32 CurSkillID; // 0x0(0x0)
	__int32 CurModifierID; // 0x0(0x0)
	__int32 CurTickCount; // 0x0(0x0)
	char pad_19C[0x4]; // 0x0(0x0)

	void OnStartReload__DelegateSignature(float ReloadTime); // DelegateFunction /Script/Game.UMGDataComponent.OnStartReload__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnSkillBlockup(__int32 InSkillId, float StopTime); // Function /Script/Game.UMGDataComponent.OnSkillBlockup // (Final|Native|Public) // @ game+0
	void OnEndReload__DelegateSignature(); // DelegateFunction /Script/Game.UMGDataComponent.OnEndReload__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0
	void OnAppliedModifierChange(__int32 InModifierID, bool IsApply); // Function /Script/Game.UMGDataComponent.OnAppliedModifierChange // (Final|Native|Public) // @ game+0
	void GetStates(); // Function /Script/Game.UMGDataComponent.GetStates // (Final|Native|Public) // @ game+0
	void GetState(float BufId); // Function /Script/Game.UMGDataComponent.GetState // (Final|Native|Public) // @ game+0
	void Aimed(bool InAim); // Function /Script/Game.UMGDataComponent.Aimed // (Final|Native|Private|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UMGLibrary
// Size: 0x0 (Inherited: 0x0)
struct UUMGLibrary : UBlueprintFunctionLibrary {

	struct FVector2D WidgetLocalToOtherWidgetLocal(struct UWidget* InFrom, struct UWidget* InTo); // Function /Script/Game.UMGLibrary.WidgetLocalToOtherWidgetLocal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct FVector WidgetLocalToAbsolute3D(struct UCanvasPanel3D* Panel3D, struct UUserWidget* InWidget, struct FVector2D& LocalPosition); // Function /Script/Game.UMGLibrary.WidgetLocalToAbsolute3D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void UpdatePCInputMode(bool bUIMode); // Function /Script/Game.UMGLibrary.UpdatePCInputMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void UpdateApplicationScale(bool bOff); // Function /Script/Game.UMGLibrary.UpdateApplicationScale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void TriggerDeviceBack(); // Function /Script/Game.UMGLibrary.TriggerDeviceBack // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SkillButtonUp(struct UObject* WorldContextObject, __int32 InIndex); // Function /Script/Game.UMGLibrary.SkillButtonUp // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SkillButtonDown(struct UObject* WorldContextObject, __int32 InIndex, __int32 InPointIndex); // Function /Script/Game.UMGLibrary.SkillButtonDown // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ShowFlagForPlot(struct UObject* WorldContextObject, bool InValue); // Function /Script/Game.UMGLibrary.ShowFlagForPlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetWidgetVisibility(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, enum class ESlateVisibility InVisibility, struct FString InName); // Function /Script/Game.UMGLibrary.SetWidgetVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetTeamLineupIndex(__int32 LineUpIndex); // Function /Script/Game.UMGLibrary.SetTeamLineupIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetTeamCharacters(struct TArray<struct UCharacterCard*> InCards); // Function /Script/Game.UMGLibrary.SetTeamCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetNotRush(struct AGamePlayerController* InPlayerController, bool NotRush); // Function /Script/Game.UMGLibrary.SetNotRush // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetIsPerformanceMode(bool InValud); // Function /Script/Game.UMGLibrary.SetIsPerformanceMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool SetImageFormPath(struct UImage* InImg, struct FSoftObjectPath& ImgPath, bool bMatchSize); // Function /Script/Game.UMGLibrary.SetImageFormPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	bool SetImageFormObject(struct UImage* InImg, struct UObject* IconAsset, bool bMatchSize); // Function /Script/Game.UMGLibrary.SetImageFormObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetDisablePlayAnimation(bool bDisable); // Function /Script/Game.UMGLibrary.SetDisablePlayAnimation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetButtonImage(struct UObject* Texture, struct UButton* Btn); // Function /Script/Game.UMGLibrary.SetButtonImage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ScreenToWidgetLocal(struct UObject* WorldContextObject, struct FGeometry& Geometry, struct FVector2D ScreenPosition, struct FVector2D& LocalCoordinate); // Function /Script/Game.UMGLibrary.ScreenToWidgetLocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	void ResumePlot(); // Function /Script/Game.UMGLibrary.ResumePlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ResetUserWidgetCustomButtonStatus(struct UUserWidget* FindWidget); // Function /Script/Game.UMGLibrary.ResetUserWidgetCustomButtonStatus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveSettingEvent(struct UObject* InTarget, __int32 InSID, __int32 InType); // Function /Script/Game.UMGLibrary.RemoveSettingEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RemoveFormRoot(struct UObject* InObject); // Function /Script/Game.UMGLibrary.RemoveFormRoot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReleaseUMGResources(struct UUserWidget* UserWidget); // Function /Script/Game.UMGLibrary.ReleaseUMGResources // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReleaseSlateResources(struct UWidget* Widget); // Function /Script/Game.UMGLibrary.ReleaseSlateResources // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ReleaseInput(); // Function /Script/Game.UMGLibrary.ReleaseInput // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void RefreshText(struct UUserWidget* InWidget); // Function /Script/Game.UMGLibrary.RefreshText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool PlotHasSummary(struct FString InPlotFileName); // Function /Script/Game.UMGLibrary.PlotHasSummary // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool PlayWidgetAnim(struct UUserWidget* InWidget, struct FString InAnimName, float StartAtTime, __int32 NumberOfLoops); // Function /Script/Game.UMGLibrary.PlayWidgetAnim // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PlayPlot(struct UObject* WorldContextObject, __int32 InID, struct FDelegate OnPlotEndHandler); // Function /Script/Game.UMGLibrary.PlayPlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void PlayFightDiaLoguePlot(struct UObject* WorldContextObject, __int32 InID, struct FDelegate OnPlotEndHandler); // Function /Script/Game.UMGLibrary.PlayFightDiaLoguePlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UUMGSequencePlayer* PlayAnimationReverse(struct UUserWidget* InUserWidget, struct UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState); // Function /Script/Game.UMGLibrary.PlayAnimationReverse // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UUMGSequencePlayer* PlayAnimationForward(struct UUserWidget* InUserWidget, struct UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState); // Function /Script/Game.UMGLibrary.PlayAnimationForward // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UUMGSequencePlayer* PlayAnimation(struct UUserWidget* InUserWidget, struct UWidgetAnimation* InAnimation, float StartAtTime, __int32 NumLoopsToPlay, enum class EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState); // Function /Script/Game.UMGLibrary.PlayAnimation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void PausePlot(); // Function /Script/Game.UMGLibrary.PausePlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void MySetVisibility(struct UWidget* InWidget, enum class ESlateVisibility InVisibility); // Function /Script/Game.UMGLibrary.MySetVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Login(); // Function /Script/Game.UMGLibrary.Login // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void LogError(struct FString InMsg); // Function /Script/Game.UMGLibrary.LogError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void LoadUIConfig(struct TMap<struct FString, struct FUIInfo>& Config); // Function /Script/Game.UMGLibrary.LoadUIConfig // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct FString LoadFile(struct FString InPath); // Function /Script/Game.UMGLibrary.LoadFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsWidget3DMode(struct UUserWidget* InWidget); // Function /Script/Game.UMGLibrary.IsWidget3DMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsPlayingNormalPlot(struct UObject* WorldContextObject); // Function /Script/Game.UMGLibrary.IsPlayingNormalPlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsMouseInViewport(struct UObject* WorldContextObject); // Function /Script/Game.UMGLibrary.IsMouseInViewport // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsInputUIMode_PC(); // Function /Script/Game.UMGLibrary.IsInputUIMode_PC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsFileExist(struct FString InFolder); // Function /Script/Game.UMGLibrary.IsFileExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FVector2D GetWidgetScreenPos(struct UWidget* InWidget); // Function /Script/Game.UMGLibrary.GetWidgetScreenPos // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0
	struct UUserWidget* GetWidgetOuter(struct UWidget* InWidget); // Function /Script/Game.UMGLibrary.GetWidgetOuter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UWidget* GetWidgetFromPath(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, struct FString InPath); // Function /Script/Game.UMGLibrary.GetWidgetFromPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UWidget* GetWidgetFromName(struct UUserWidget* InWidget, struct FName& InName); // Function /Script/Game.UMGLibrary.GetWidgetFromName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UObject* GetWidgetByName(struct FString InName); // Function /Script/Game.UMGLibrary.GetWidgetByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetWidgetAnimations(struct UUserWidget* InWidget, struct TArray<struct UWidgetAnimation*>& OutAnims); // Function /Script/Game.UMGLibrary.GetWidgetAnimations // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	__int32 GetUserWidgetCount(struct FString InUMGName); // Function /Script/Game.UMGLibrary.GetUserWidgetCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetUserWidgetAllImages(struct UUserWidget* InUserWidget, struct TArray<struct UImage*> OutImgs); // Function /Script/Game.UMGLibrary.GetUserWidgetAllImages // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	__int32 GetStringHash(struct FString inString); // Function /Script/Game.UMGLibrary.GetStringHash // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	float GetSliderMax(__int32 sID); // Function /Script/Game.UMGLibrary.GetSliderMax // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FSlateColor GetSlateColorFromHex(struct FString Hex); // Function /Script/Game.UMGLibrary.GetSlateColorFromHex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FSlateColor GetSlateColor(float R, float G, float B, float A); // Function /Script/Game.UMGLibrary.GetSlateColor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UButtonBase* GetSkillButton(struct UObject* WorldContextObject, __int32 InIndex); // Function /Script/Game.UMGLibrary.GetSkillButton // (Final|Native|Static|Public) // @ game+0
	float GetSettingValue(__int32 InSID, __int32 InType); // Function /Script/Game.UMGLibrary.GetSettingValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FPlotInfo GetPlotInfo(__int32 InPlotID); // Function /Script/Game.UMGLibrary.GetPlotInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool GetPerformanceMode(); // Function /Script/Game.UMGLibrary.GetPerformanceMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetObjectName(struct UObject* InObject); // Function /Script/Game.UMGLibrary.GetObjectName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetLoadStreamings(struct UObject* WorldContextObject, struct TArray<struct ULevelStreaming*>& Streamings); // Function /Script/Game.UMGLibrary.GetLoadStreamings // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct TArray<struct UListViewBase*> GetListsInWidget(struct UUserWidget* UserWidget); // Function /Script/Game.UMGLibrary.GetListsInWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetLastSettingPath(); // Function /Script/Game.UMGLibrary.GetLastSettingPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FVector2D GetGeometryLocalSize(struct FGeometry& Geometry); // Function /Script/Game.UMGLibrary.GetGeometryLocalSize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	struct FKey GetFKey(struct FString InName); // Function /Script/Game.UMGLibrary.GetFKey // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UFightUMGSubsystem* GetFightUMGSubsystem(struct UObject* WorldContextObject); // Function /Script/Game.UMGLibrary.GetFightUMGSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UObject* GetFightTips(); // Function /Script/Game.UMGLibrary.GetFightTips // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetEnumValueAsString(struct FString EnumName, __int32 InValue); // Function /Script/Game.UMGLibrary.GetEnumValueAsString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FString GetDeviceMake(); // Function /Script/Game.UMGLibrary.GetDeviceMake // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UPlot* GetCurrentPlot(); // Function /Script/Game.UMGLibrary.GetCurrentPlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void GetAllWidget(struct UUserWidget* InWidget, struct TArray<struct UWidget*>& OutWidgets); // Function /Script/Game.UMGLibrary.GetAllWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetAllUserWidgetAndBtnAndObj(struct UUserWidget* FindWidget, struct TArray<struct UUserWidget*>& OutWidgets, struct TArray<struct UButton*>& OutBtns, struct TArray<struct UObject*>& OutObj); // Function /Script/Game.UMGLibrary.GetAllUserWidgetAndBtnAndObj // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetAllUserWidget(struct UUserWidget* FindWidget, struct TArray<struct UUserWidget*>& OutWidgets); // Function /Script/Game.UMGLibrary.GetAllUserWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void GetAll3DPanel(struct UWidget* InWidget, struct TArray<struct UCanvasPanel3D*>& OutPanels); // Function /Script/Game.UMGLibrary.GetAll3DPanel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct UCanvasPanel3D* FindParentCanvasPanel3D(struct UWidget* InWidget); // Function /Script/Game.UMGLibrary.FindParentCanvasPanel3D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void FindFilesRecursive(struct FString InFolder, struct FString InExtension, struct TArray<struct FString>& OutFiles); // Function /Script/Game.UMGLibrary.FindFilesRecursive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void FindFilesInFolder(struct FString InFolder, struct FString InExtension, struct TArray<struct FString>& OutFiles); // Function /Script/Game.UMGLibrary.FindFilesInFolder // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	struct AActor* FindActorByStreamingLevelName(struct UObject* WorldContextObject, struct FString InStreamingLevelName, struct FString InActorName); // Function /Script/Game.UMGLibrary.FindActorByStreamingLevelName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct AActor* FindActorByName(struct UObject* WorldContextObject, struct FString InName); // Function /Script/Game.UMGLibrary.FindActorByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UUserWidget* CreateWidgetByCPP(struct UObject* WorldContextObject, struct FName Key); // Function /Script/Game.UMGLibrary.CreateWidgetByCPP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void CopyMessage(struct FString Tex); // Function /Script/Game.UMGLibrary.CopyMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ClearAllParticles(struct AActor* Actor); // Function /Script/Game.UMGLibrary.ClearAllParticles // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void ChangeInputMode(struct UObject* WorldContextObject, bool bShow); // Function /Script/Game.UMGLibrary.ChangeInputMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void CacheActor2Lua(struct FString InKey, struct AActor* InActor); // Function /Script/Game.UMGLibrary.CacheActor2Lua // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AsyncLoadMainMap(); // Function /Script/Game.UMGLibrary.AsyncLoadMainMap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddToRoot(struct UObject* InObject); // Function /Script/Game.UMGLibrary.AddToRoot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void AddSettingEvent(struct UObject* InTarget, __int32 InSID, __int32 InType); // Function /Script/Game.UMGLibrary.AddSettingEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct UUserWidget* AddChildToPanel(struct UCanvasPanel* InContent, struct FString InWidgetPath, __int32 ZOrder); // Function /Script/Game.UMGLibrary.AddChildToPanel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FVector2D AbsoluteToWidgetLocal3D(struct UCanvasPanel3D* Panel3D, struct FVector& AbsolutePosition); // Function /Script/Game.UMGLibrary.AbsoluteToWidgetLocal3D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UMGStreamingSubsystem
// Size: 0x0 (Inherited: 0x0)
struct UUMGStreamingSubsystem : UGameInstanceSubsystem {
	char pad_30[0xB0]; // 0x0(0x0)

	void UpdateCharacterCache(); // Function /Script/Game.UMGStreamingSubsystem.UpdateCharacterCache // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RequestStreamingByTag(struct FString InTag, struct FString InAssetPath); // Function /Script/Game.UMGStreamingSubsystem.RequestStreamingByTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void RequestStreaming(struct UUserWidget* InWidget, struct FString InAssetPath); // Function /Script/Game.UMGStreamingSubsystem.RequestStreaming // (Native|Public|BlueprintCallable) // @ game+0
	void ReleaseStreaming(struct UUserWidget* InWidget); // Function /Script/Game.UMGStreamingSubsystem.ReleaseStreaming // (Native|Public|BlueprintCallable) // @ game+0
	void ReleaseCharacter(); // Function /Script/Game.UMGStreamingSubsystem.ReleaseCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ReleaseByTag(struct FString InTag); // Function /Script/Game.UMGStreamingSubsystem.ReleaseByTag // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ReleaseAll(); // Function /Script/Game.UMGStreamingSubsystem.ReleaseAll // (Final|Native|Public|BlueprintCallable) // @ game+0
	void PrintStreaming(); // Function /Script/Game.UMGStreamingSubsystem.PrintStreaming // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct UUMGStreamingSubsystem* GetAssetStreamingSubsystem(); // Function /Script/Game.UMGStreamingSubsystem.GetAssetStreamingSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.UserSetting
// Size: 0x0 (Inherited: 0x0)
struct UUserSetting : UGameInstanceSubsystem {
	char pad_30[0x50]; // 0x0(0x0)

	void SetVector(struct FString InKey, struct FVector& InValue); // Function /Script/Game.UserSetting.SetVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void SetString(struct FString InKey, struct FString InValue); // Function /Script/Game.UserSetting.SetString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetInt64(struct FString InKey, __int64 InValue); // Function /Script/Game.UserSetting.SetInt64 // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetInt(struct FString InKey, __int32 InValue); // Function /Script/Game.UserSetting.SetInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetFloat(struct FString InKey, float InValue); // Function /Script/Game.UserSetting.SetFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetBool(struct FString InKey, bool InValue); // Function /Script/Game.UserSetting.SetBool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void Save(); // Function /Script/Game.UserSetting.Save // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool HasKey(struct FString InKey); // Function /Script/Game.UserSetting.HasKey // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	struct FVector GetVector(struct FString InKey, struct FVector& InDefault); // Function /Script/Game.UserSetting.GetVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0
	struct FString GetString(struct FString InKey, struct FString InDefault); // Function /Script/Game.UserSetting.GetString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int64 GetInt64(struct FString InKey, __int64 InDefault); // Function /Script/Game.UserSetting.GetInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	__int32 GetInt(struct FString InKey, __int32 InDefault); // Function /Script/Game.UserSetting.GetInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	float GetFloat(struct FString InKey, float InDefault); // Function /Script/Game.UserSetting.GetFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
	bool GetBool(struct FString InKey, bool InDefault); // Function /Script/Game.UserSetting.GetBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0
};

 // Class /Script/Game.ComstomWidgetAnimtion
// Size: 0x0 (Inherited: 0x0)
struct UComstomWidgetAnimtion : UAssetUserData {
	struct TMap<struct FString, struct FAllAnimTrackData> Tracks; // 0x0(0x0)
};

 // Class /Script/Game.CollapseTeamTriggerBox
// Size: 0x0 (Inherited: 0x0)
struct ACollapseTeamTriggerBox : ATriggerBox {
	struct ACollapseTeamTriggerBox* AreaBox; // 0x0(0x0)
};

 // Class /Script/Game.ViewOtherLightData
// Size: 0x0 (Inherited: 0x0)
struct UViewOtherLightData : UPrimaryDataAsset {
	struct TMap<struct FName, struct FView_DirectionalLight> OtherLight_View_Config; // 0x0(0x0)
};

 // Class /Script/Game.ViewLightData
// Size: 0x0 (Inherited: 0x0)
struct UViewLightData : UPrimaryDataAsset {
	struct FString Light_Role_Name; // 0x0(0x0)
	struct FView_DirectionalLight Light_View_Config; // 0x0(0x0)
};

 // Class /Script/Game.ViewCharacterData
// Size: 0x0 (Inherited: 0x0)
struct UViewCharacterData : UPrimaryDataAsset {
	struct FString View_Character_Name; // 0x0(0x0)
	struct TArray<struct FView_Character_Main> View_Character_Config; // 0x0(0x0)
};

 // Class /Script/Game.ViewCharacterSecondaryData
// Size: 0x0 (Inherited: 0x0)
struct UViewCharacterSecondaryData : UPrimaryDataAsset {
	struct FString View_Secondary_Mat_Name; // 0x0(0x0)
	struct FView_Character_SecondaryMat View_Character_Secondary_Config; // 0x0(0x0)
};

 // Class /Script/Game.ViewCharacterSecondaryModifyData
// Size: 0x0 (Inherited: 0x0)
struct UViewCharacterSecondaryModifyData : UPrimaryDataAsset {
	struct FString View_Secondary_Modify_Name; // 0x0(0x0)
	struct TArray<struct FView_Character_Seconday_Main> View_Character_Secondary_Modify_Config; // 0x0(0x0)
};

 // Class /Script/Game.ViewEnvironmentData
// Size: 0x0 (Inherited: 0x0)
struct UViewEnvironmentData : UPrimaryDataAsset {
	struct FString View_Environment_Name; // 0x0(0x0)
	struct FView_Environment_Str View_Environment_Config; // 0x0(0x0)
	struct FView_Niagara_Str View_Niagara_Ground_Config; // 0x0(0x0)
};

 // Class /Script/Game.ViewManager
// Size: 0x0 (Inherited: 0x0)
struct AViewManager : AActor {

	void OnDataChanged(); // Function /Script/Game.ViewManager.OnDataChanged // (Event|Public|BlueprintEvent) // @ game+0
};

 // Class /Script/Game.VirtualCursorFunctionLibrary
// Size: 0x0 (Inherited: 0x0)
struct UVirtualCursorFunctionLibrary : UBlueprintFunctionLibrary {

	void SetIsSelectingKey(bool bSelecting); // Function /Script/Game.VirtualCursorFunctionLibrary.SetIsSelectingKey // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetCursorVisibility(bool bVisibility); // Function /Script/Game.VirtualCursorFunctionLibrary.SetCursorVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsRequestEnableVirtualCursor(); // Function /Script/Game.VirtualCursorFunctionLibrary.IsRequestEnableVirtualCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool IsGamepadKeyDown(); // Function /Script/Game.VirtualCursorFunctionLibrary.IsGamepadKeyDown // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	enum class EKeyboardInputType GetInputTypeByKey(struct FKey& InKey); // Function /Script/Game.VirtualCursorFunctionLibrary.GetInputTypeByKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	enum class EKeyboardInputType GetGamepadKeyDownPreType(); // Function /Script/Game.VirtualCursorFunctionLibrary.GetGamepadKeyDownPreType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void EnableVirtualCursor(struct APlayerController* PC); // Function /Script/Game.VirtualCursorFunctionLibrary.EnableVirtualCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	void DisableVirtualCursor(struct APlayerController* PC); // Function /Script/Game.VirtualCursorFunctionLibrary.DisableVirtualCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
	bool CheckDevice(); // Function /Script/Game.VirtualCursorFunctionLibrary.CheckDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.VoiceManager
// Size: 0x0 (Inherited: 0x0)
struct UVoiceManager : UEngineSubsystem {
	struct TMap<struct FString, struct FVoiceInfo> Voices; // 0x0(0x0)
	char pad_80[0xD0]; // 0x0(0x0)

	void StopFromObject(struct UObject* InWorldContext, __int32 InTransitionMS, bool bInvokeCallbacks); // Function /Script/Game.VoiceManager.StopFromObject // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void Stop(__int32 InTransitionMS, bool bInvokeCallbacks); // Function /Script/Game.VoiceManager.Stop // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void SetLanguage(struct FString InLang); // Function /Script/Game.VoiceManager.SetLanguage // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void PlayWithoutWorld(__int32 InCharacterID, struct FString InVoiceID); // Function /Script/Game.VoiceManager.PlayWithoutWorld // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void PlayWithCallbackFromObject(struct UObject* InWorldContext, __int32 InCharacterID, struct FString InVoiceID, struct FDelegate& OnEndPlay, bool bLipSyncEnable, bool bForcePlay); // Function /Script/Game.VoiceManager.PlayWithCallbackFromObject // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void PlayWithCallbackAndContext(struct UObject* InWorldContext, __int32 InCharacterID, struct FString InVoiceID, struct FDelegate& OnEndPlay, bool bLipSyncEnable, bool bForcePlay); // Function /Script/Game.VoiceManager.PlayWithCallbackAndContext // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void PlayWithCallback(struct UObject* InWorldContext, __int32 InCharacterID, struct FString InVoiceID, struct FDelegate& OnEndPlay, bool bLipSyncEnable, bool bForcePlay); // Function /Script/Game.VoiceManager.PlayWithCallback // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0
	void Play(struct UObject* InWorldContext, __int32 InCharacterID, struct FString InVoiceID, bool bLipSyncEnable, bool bAttached, bool bForcePlay); // Function /Script/Game.VoiceManager.Play // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void OnGlobalEndPlayCallback(struct UWwiseComponent* InWwiseComponent); // Function /Script/Game.VoiceManager.OnGlobalEndPlayCallback // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0
	bool IsPlaying(); // Function /Script/Game.VoiceManager.IsPlaying // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0
	void Init(); // Function /Script/Game.VoiceManager.Init // (Final|Native|Static|Public) // @ game+0
};

 // Class /Script/Game.WaitOwnerActorChannel
// Size: 0x0 (Inherited: 0x0)
struct UWaitOwnerActorChannel : UActorChannel {
};

 // Class /Script/Game.WaitSkillComponent
// Size: 0x0 (Inherited: 0x0)
struct UWaitSkillComponent : USkillEffectComponent {
};

 // Class /Script/Game.WarningTipComponent
// Size: 0x0 (Inherited: 0x0)
struct UWarningTipComponent : USceneComponent {
	struct FName CollisionTag; // 0x0(0x0)
	bool IsEnableActiveWarning; // 0x0(0x0)
	float WarningTime; // 0x0(0x0)
	struct FSoftObjectPath WarningParticlePath; // 0x0(0x0)
	float ActiveTime; // 0x0(0x0)
	bool IsActiveWarning; // 0x0(0x0)
	bool IsEnter; // 0x0(0x0)
	struct UFXSystemComponent* ParticleComp; // 0x0(0x0)
	struct UDecalComponent* WarningDecal; // 0x0(0x0)
	char pad_23B[0x5]; // 0x0(0x0)

	void ReActive(); // Function /Script/Game.WarningTipComponent.ReActive // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OnLeave(struct UPrimitiveComponent* InComponent, struct AActor* InOther, struct UPrimitiveComponent* InOtherComponent, __int32 InBody); // Function /Script/Game.WarningTipComponent.OnLeave // (Final|Native|Private) // @ game+0
	void OnEnter(struct UPrimitiveComponent* InComponent, struct AActor* InOther, struct UPrimitiveComponent* InOtherComponent, __int32 InBody, bool bFromSweep, struct FHitResult& Hit); // Function /Script/Game.WarningTipComponent.OnEnter // (Final|Native|Private|HasOutParms) // @ game+0
	void EnableWarning(); // Function /Script/Game.WarningTipComponent.EnableWarning // (Final|Native|Public|BlueprintCallable) // @ game+0
	void DisableWarning(); // Function /Script/Game.WarningTipComponent.DisableWarning // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.WaterActor
// Size: 0x0 (Inherited: 0x0)
struct AWaterActor : AActor {
	struct USceneCaptureComponent2D* captureComp; // 0x0(0x0)
	struct UPlanarReflectionComponent* reflectionComp; // 0x0(0x0)
	struct UStaticMeshComponent* WaterSurfaceMesh; // 0x0(0x0)
	struct UStaticMeshComponent* WaterBottomMesh; // 0x0(0x0)
	struct UTextureRenderTarget2D* waterDepthRuntimeRT; // 0x0(0x0)
	struct UStaticMesh* planeMesh; // 0x0(0x0)
	struct UMaterialInterface* WaterMaterial; // 0x0(0x0)
	struct UMaterialInterface* WaterRefractionMaterial; // 0x0(0x0)
	struct UMaterialInterface* WaterBottomMaterial; // 0x0(0x0)
	float WaterSurfaceHight; // 0x0(0x0)
	float WaterSurfaceSize; // 0x0(0x0)
	char pad_270[0x18]; // 0x0(0x0)

	void SetDepthRTSize(char Size); // Function /Script/Game.WaterActor.SetDepthRTSize // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.WeaponAbiliityComponent
// Size: 0x0 (Inherited: 0x0)
struct UWeaponAbiliityComponent : UAbilityComponentBase {
	struct TWeakObjectPtr<struct UAbilityComponent> OwnerParentAbility; // 0x0(0x0)
	struct TMap<__int32, struct UCastConditionCheck*> ConditionsMap; // 0x0(0x0)
	struct FMulticastInlineDelegate OnFireHit; // 0x0(0x0)
	struct UAbilityAttribute* OverloadAbilityAttribute; // 0x0(0x0)
	struct UInfluenceAbilityAttribute* InfluenceAbilityAttributeClass; // 0x0(0x0)
	struct UInfluenceAbilityAttribute* InfluenceDamageAttributeClass; // 0x0(0x0)
	struct UAbilityAttribute* WeaponHeatDamageAbilityAttribute; // 0x0(0x0)
	bool bInOverload; // 0x0(0x0)
	char pad_DE1[0x7]; // 0x0(0x0)
	struct TMap<__int32, unsigned __int32> CacheHitFireTimeIds; // 0x0(0x0)
	char pad_E38[0x8]; // 0x0(0x0)

	void SetBulletNum(__int32 CurNum, __int32 MaxNum); // Function /Script/Game.WeaponAbiliityComponent.SetBulletNum // (Final|Native|Public|BlueprintCallable) // @ game+0
	void ModifyBulletNum(__int32 NumChange, bool bFull); // Function /Script/Game.WeaponAbiliityComponent.ModifyBulletNum // (Final|Native|Public|BlueprintCallable) // @ game+0
	bool IsWeaponActive(); // Function /Script/Game.WeaponAbiliityComponent.IsWeaponActive // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AGameCharacter* GetWeaponOwner(); // Function /Script/Game.WeaponAbiliityComponent.GetWeaponOwner // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetShootStorage(); // Function /Script/Game.WeaponAbiliityComponent.GetShootStorage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	float GetShootSpeed(); // Function /Script/Game.WeaponAbiliityComponent.GetShootSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct UAbilityComponent* GetParentAbility(); // Function /Script/Game.WeaponAbiliityComponent.GetParentAbility // (Final|Native|Public|BlueprintCallable) // @ game+0
	float GetDamagePre(); // Function /Script/Game.WeaponAbiliityComponent.GetDamagePre // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool CallParentReload(); // Function /Script/Game.WeaponAbiliityComponent.CallParentReload // (Final|Native|Public|BlueprintCallable) // @ game+0
	void AbilityOwnerCallCastSkill(__int32 ID); // Function /Script/Game.WeaponAbiliityComponent.AbilityOwnerCallCastSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.WeaponFirePointLightComponent
// Size: 0x0 (Inherited: 0x0)
struct UWeaponFirePointLightComponent : UPointLightComponent {
	float KeepTime; // 0x0(0x0)
	float IntensityBlendInTime; // 0x0(0x0)
	struct FRuntimeFloatCurve IntensityBlendInCurve; // 0x0(0x0)
	float IntensityBlendOutTime; // 0x0(0x0)
	struct FRuntimeFloatCurve IntensityBlendOutCurve; // 0x0(0x0)
	float AttenuationBlendInTime; // 0x0(0x0)
	struct FRuntimeFloatCurve AttenuationBlendInCurve; // 0x0(0x0)
	float AttenuationBlendOutTime; // 0x0(0x0)
	char pad_50C[0x4]; // 0x0(0x0)
	struct FRuntimeFloatCurve AttenuationBlendOutCurve; // 0x0(0x0)
	float IntensityValue; // 0x0(0x0)
	float AttenuationValue; // 0x0(0x0)
	float StartTime; // 0x0(0x0)
	char pad_5A4[0xC]; // 0x0(0x0)

	void ShowLight(); // Function /Script/Game.WeaponFirePointLightComponent.ShowLight // (Final|Native|Public|BlueprintCallable) // @ game+0
	void HideLight(); // Function /Script/Game.WeaponFirePointLightComponent.HideLight // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.WeaponPart
// Size: 0x0 (Inherited: 0x0)
struct AWeaponPart : ACharacterAccessory {
	struct UMeshComponent* m_lpWeaponPartMesh; // 0x0(0x0)
	char m_nSlotType; // 0x0(0x0)
	char pad_341[0x3]; // 0x0(0x0)
	__int32 WeaponPartId; // 0x0(0x0)
	unsigned __int32 ActorHiddenType; // 0x0(0x0)
	char pad_34C[0x4]; // 0x0(0x0)

	void WeaponPartHiddenInGame(bool bNewHidden, enum class EHiddenActorType InType); // Function /Script/Game.WeaponPart.WeaponPartHiddenInGame // (Native|Public|BlueprintCallable) // @ game+0
	struct AWeaponPart* CreateAWeaponPart(struct AActor* ActorOwner, __int32 WeaponPartId); // Function /Script/Game.WeaponPart.CreateAWeaponPart // (Final|Native|Static|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.WednesdayDroneSocketComponent
// Size: 0x0 (Inherited: 0x0)
struct UWednesdayDroneSocketComponent : UArrowComponent {
};

 // Class /Script/Game.DroneFireSocketComponent
// Size: 0x0 (Inherited: 0x0)
struct UDroneFireSocketComponent : UWednesdayDroneSocketComponent {
};

 // Class /Script/Game.DroneBombSocketComponent
// Size: 0x0 (Inherited: 0x0)
struct UDroneBombSocketComponent : UWednesdayDroneSocketComponent {
};

 // Class /Script/Game.ImmortalDroneFollowSocketComponent
// Size: 0x0 (Inherited: 0x0)
struct UImmortalDroneFollowSocketComponent : UWednesdayDroneSocketComponent {
};

 // Class /Script/Game.ImmortalDroneFollowSocketComponentAlone
// Size: 0x0 (Inherited: 0x0)
struct UImmortalDroneFollowSocketComponentAlone : UWednesdayDroneSocketComponent {
};

 // Class /Script/Game.ImmortalDroneBombSocketComponent
// Size: 0x0 (Inherited: 0x0)
struct UImmortalDroneBombSocketComponent : UWednesdayDroneSocketComponent {
};

 // Class /Script/Game.WednesdayDroneManagerComponent
// Size: 0x0 (Inherited: 0x0)
struct UWednesdayDroneManagerComponent : UActorComponent {
	char pad_B0[0x18]; // 0x0(0x0)
	struct TArray<struct USceneComponent*> AttackSockets; // 0x0(0x0)
	struct TArray<struct USceneComponent*> AloneSocket; // 0x0(0x0)
	char pad_E8[0x80]; // 0x0(0x0)
	struct TArray<struct TWeakObjectPtr<struct USceneComponent>> SocketUsed; // 0x0(0x0)
	char pad_178[0x8]; // 0x0(0x0)

	struct USceneComponent* QueryNewBombPosition(__int32 Index); // Function /Script/Game.WednesdayDroneManagerComponent.QueryNewBombPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct USceneComponent* QueryImmortalNewBombPosition(__int32 Index); // Function /Script/Game.WednesdayDroneManagerComponent.QueryImmortalNewBombPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct USceneComponent* QueryImmortalDroneSpawnPosition(); // Function /Script/Game.WednesdayDroneManagerComponent.QueryImmortalDroneSpawnPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct USceneComponent* QueryDroneSpawnPosition(); // Function /Script/Game.WednesdayDroneManagerComponent.QueryDroneSpawnPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void OnWednesdaySwitchLeave(struct FTransform& Trans); // Function /Script/Game.WednesdayDroneManagerComponent.OnWednesdaySwitchLeave // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void OnWednesdaySwitchEnter(struct FTransform& Trans); // Function /Script/Game.WednesdayDroneManagerComponent.OnWednesdaySwitchEnter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void LeaveSomeDrones(__int32 Count); // Function /Script/Game.WednesdayDroneManagerComponent.LeaveSomeDrones // (Final|Native|Public|BlueprintCallable|Const) // @ game+0
	struct TArray<struct AWednesdayDrone*> GetAllDrones(); // Function /Script/Game.WednesdayDroneManagerComponent.GetAllDrones // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void AddDrone(struct AGameCharacter* Drone); // Function /Script/Game.WednesdayDroneManagerComponent.AddDrone // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.WednesdayDrone
// Size: 0x0 (Inherited: 0x0)
struct AWednesdayDrone : AGameAICharacter {
	__int32 FireSkillId; // 0x0(0x0)
	struct FRandomFloatValue KeepFireTime; // 0x0(0x0)
	struct FRandomFloatValue StartFireTime; // 0x0(0x0)
	struct FRandomFloatValue FireSpeed; // 0x0(0x0)
	struct FRandomFloatValue FollowSpeed; // 0x0(0x0)
	struct FRandomFloatValue FireAcc; // 0x0(0x0)
	struct FRandomFloatValue FollowAcc; // 0x0(0x0)
	struct FRandomFloatValue FireDeAcc; // 0x0(0x0)
	struct FRandomFloatValue FollowDeAcc; // 0x0(0x0)
	struct FRandomFloatValue TimeLeaveDelay; // 0x0(0x0)
	struct TWeakObjectPtr<struct UWednesdayDroneManagerComponent> ManagerComp; // 0x0(0x0)
	enum class EWednesdayDroneState State; // 0x0(0x0)
	char pad_C89[0x3]; // 0x0(0x0)
	struct TWeakObjectPtr<struct USceneComponent> FollowSocket; // 0x0(0x0)
	struct TWeakObjectPtr<struct USceneComponent> AttackSocket; // 0x0(0x0)
	char pad_C9C[0x74]; // 0x0(0x0)
	struct FTimerHandle StartAttackDelayTimerHandle; // 0x0(0x0)
	struct FTimerHandle KeepAttackDelayTimerHandle; // 0x0(0x0)
	struct FTimerHandle DelayLeaveTimerHandle; // 0x0(0x0)
	char pad_D28[0x8]; // 0x0(0x0)

	void StartQTESkill(struct AActor* CharTarget, struct FVector& PosTarget, __int32 SkillID); // Function /Script/Game.WednesdayDrone.StartQTESkill // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0
	void StartLeave(); // Function /Script/Game.WednesdayDrone.StartLeave // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StartFollow(); // Function /Script/Game.WednesdayDrone.StartFollow // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StartFire(); // Function /Script/Game.WednesdayDrone.StartFire // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StartBombSkill(__int32 SkillID, float Pitch, bool bIsRot); // Function /Script/Game.WednesdayDrone.StartBombSkill // (Final|Native|Public|BlueprintCallable) // @ game+0
	void StartAttack(); // Function /Script/Game.WednesdayDrone.StartAttack // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetImmortal(bool Value); // Function /Script/Game.WednesdayDrone.SetImmortal // (Final|Native|Public|BlueprintCallable) // @ game+0
	void SetBomb(bool Value); // Function /Script/Game.WednesdayDrone.SetBomb // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct FVector QueryMoveTargetPos(); // Function /Script/Game.WednesdayDrone.QueryMoveTargetPos // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0
	void PrepareBomb(struct USceneComponent* SceneCpt); // Function /Script/Game.WednesdayDrone.PrepareBomb // (Final|Native|Public|BlueprintCallable) // @ game+0
	void OwnerQTEPosition(struct FVector& Pos); // Function /Script/Game.WednesdayDrone.OwnerQTEPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void OwnerFirePosition(bool& bHit, struct FVector& Pos); // Function /Script/Game.WednesdayDrone.OwnerFirePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0
	void OnWednesdayStopFire(); // Function /Script/Game.WednesdayDrone.OnWednesdayStopFire // (Final|Native|Protected) // @ game+0
	void OnWednesdayFire(struct FFireInfo Info, bool bStartFire); // Function /Script/Game.WednesdayDrone.OnWednesdayFire // (Final|Native|Protected) // @ game+0
	void OnQTE(struct FVector& Dir, bool bStartQTE); // Function /Script/Game.WednesdayDrone.OnQTE // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0
	void OnBombTP(struct USceneComponent* Pos, bool bStartTP); // Function /Script/Game.WednesdayDrone.OnBombTP // (Event|Protected|BlueprintEvent) // @ game+0
	bool IsNeedLeave(); // Function /Script/Game.WednesdayDrone.IsNeedLeave // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool IsAttacking(); // Function /Script/Game.WednesdayDrone.IsAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	struct AGameCharacter* GetWednesday(); // Function /Script/Game.WednesdayDrone.GetWednesday // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	enum class EWednesdayDroneState GetState(); // Function /Script/Game.WednesdayDrone.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	struct FOwnerFireInfo GetOwnerFireInfo(); // Function /Script/Game.WednesdayDrone.GetOwnerFireInfo // (Final|Native|Public|BlueprintCallable) // @ game+0
	struct AActor* GetOwnerCharacter(); // Function /Script/Game.WednesdayDrone.GetOwnerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0
	bool GetDroneIsEanble(); // Function /Script/Game.WednesdayDrone.GetDroneIsEanble // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0
	void EndFire(); // Function /Script/Game.WednesdayDrone.EndFire // (Final|Native|Public|BlueprintCallable) // @ game+0
};

 // Class /Script/Game.EnvQueryContext_WednesdayDroneMoveTarget
// Size: 0x0 (Inherited: 0x0)
struct UEnvQueryContext_WednesdayDroneMoveTarget : UEnvQueryContext {
};

 // Class /Script/Game.MovementComponent_WednesdayDrone
// Size: 0x0 (Inherited: 0x0)
struct UMovementComponent_WednesdayDrone : UMonsterMovementComponent {
	struct FRandomFloatValue BaseZValue; // 0x0(0x0)
	struct FVector LastTargetLocation; // 0x0(0x0)
	float LastRandomZ; // 0x0(0x0)
	float KeepHitTime; // 0x0(0x0)
};

 // Class /Script/Game.GameAIController_WednesdayDrone
// Size: 0x0 (Inherited: 0x0)
struct AGameAIController_WednesdayDrone : AGameAIController {
};

 